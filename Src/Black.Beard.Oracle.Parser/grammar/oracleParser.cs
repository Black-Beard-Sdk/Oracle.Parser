//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from oracle.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.Oracle.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class oracleParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ACCESS=1, ACCOUNT=2, ADD=3, ADMIN=4, ADMINISTER=5, ADVISOR=6, AFTER=7, 
		AGENT=8, AGGREGATE=9, A_LETTER=10, ALL=11, ALTER=12, ANALYZE=13, AND=14, 
		ANY=15, ARCHIVE=16, ARRAY=17, AS=18, ASC=19, ASSOCIATE=20, AT=21, ATTRIBUTE=22, 
		AUDIT=23, AUTHENTICATED=24, AUTHENTICATION=25, AUTHID=26, AUTOALLOCATE=27, 
		AUTO=28, AUTOEXTEND=29, AUTOMATIC=30, AUTONOMOUS_TRANSACTION=31, BACKUP=32, 
		BASIC=33, BATCH=34, BECOME=35, BEFORE=36, BEGIN=37, BETWEEN=38, BFILE=39, 
		BIGFILE=40, BINARY_DOUBLE=41, BINARY_FLOAT=42, BINARY_INTEGER=43, BLOB=44, 
		BLOCK=45, BLOCKSIZE=46, BODY=47, BOOLEAN=48, BOTH=49, BREADTH=50, BUFFER_POOL=51, 
		BUILD=52, BULK=53, BY=54, BYTE=55, CACHE=56, CALL=57, CANONICAL=58, CASCADE=59, 
		CASE=60, CAST=61, CERTIFICATE=62, CHANGE=63, CHARACTER=64, CHAR=65, CHAR_CS=66, 
		CHECK=67, CHR=68, CLASS=69, C_LETTER=70, CLOB=71, CLOSE=72, CLUSTER=73, 
		COALESCE=74, COLLECT=75, COLUMN=76, COLUMNS=77, COMMENT=78, COMMIT=79, 
		COMMITTED=80, COMPATIBILITY=81, COMPILE=82, COMPOUND=83, COMPRESS=84, 
		COMPUTE=85, CONNECT_BY_ROOT=86, CONNECT=87, CONSTANT=88, CONSTRAINT=89, 
		CONSTRAINTS=90, CONSTRUCTOR=91, CONTAINER=92, CONTAINER_DATA=93, CONTENT=94, 
		CONTEXT=95, CONTINUE=96, CONVERT=97, CORRUPT_XID_ALL=98, CORRUPT_XID=99, 
		COST=100, COUNT=101, CREATE=102, CREATION=103, CROSS=104, CUBE=105, CURRENT=106, 
		CURRENT_USER=107, CURSOR=108, CUSTOMDATUM=109, CYCLE=110, DATABASE=111, 
		DATA=112, DATAFILE=113, DATE=114, DAY=115, DBA_RECYCLEBIN=116, DB_ROLE_CHANGE=117, 
		DBTIMEZONE=118, DDL=119, DEBUG=120, DEC=121, DECIMAL=122, DECLARE=123, 
		DECOMPOSE=124, DECREMENT=125, DEFAULT=126, DEFAULTS=127, DEFERRABLE=128, 
		DEFERRED=129, DEFINER=130, DELEGATE=131, DELETE=132, DEPTH=133, DESC=134, 
		DETERMINISTIC=135, DICTIONARY=136, DIMENSION=137, DIRECTORY=138, DISABLE=139, 
		DISASSOCIATE=140, DISTINCT=141, DISTINGUISHED=142, DOCUMENT=143, DOUBLE=144, 
		DROP=145, DSINTERVAL_UNCONSTRAINED=146, EACH=147, EDITION=148, EDITIONING=149, 
		EDITIONS=150, ELEMENT=151, ELSE=152, ELSIF=153, EMPTY=154, ENABLE=155, 
		ENCODING=156, ENCRYPT=157, ENCRYPTION=158, END=159, ENTERPRISE=160, ENTITYESCAPING=161, 
		ERR=162, ERRORS=163, ESCAPE=164, EVALNAME=165, EXCEPT=166, EXCEPTION=167, 
		EXCEPTION_INIT=168, EXCEPTIONS=169, EXCLUDE=170, EXCLUSIVE=171, EXECUTE=172, 
		EXEMPT=173, EXISTS=174, EXIT=175, EXPIRE=176, EXPLAIN=177, EXTENT=178, 
		EXTERNAL=179, EXTERNALLY=180, EXTRACT=181, FAILURE=182, FALSE=183, FETCH=184, 
		FILESYSTEM_LIKE_LOGGING=185, FINAL=186, FIRST=187, FIRST_VALUE=188, FLASHBACK=189, 
		FLASH_CACHE=190, FLOAT=191, FOLDER=192, FOLLOWING=193, FOLLOWS=194, FORALL=195, 
		FORCE=196, FOREIGN=197, FOR=198, FREELIST=199, FREELISTS=200, FROM=201, 
		FULL=202, FUNCTION=203, GLOBAL=204, GLOBALLY=205, GOTO=206, GRANT=207, 
		GROUP=208, GROUPING=209, GROUPS=210, GUARANTEE=211, HASH=212, HAVING=213, 
		HIDE=214, HIERARCHY=215, HIGH=216, HOUR=217, IDENTIFIED=218, IDENTIFIER=219, 
		ID=220, IF=221, IGNORE=222, IMMEDIATE=223, INCLUDE=224, INCLUDING=225, 
		INCREMENT=226, INDENT=227, INDEXED=228, INDEX=229, INDEXTYPE=230, INDICATOR=231, 
		INDICES=232, INFINITE=233, INHERIT=234, IN=235, INITIAL=236, INITIALLY=237, 
		INITRANS=238, INLINE=239, INNER=240, INOUT=241, INSERT=242, INSTANTIABLE=243, 
		INSTEAD=244, INTEGER=245, INTERSECT=246, INTERVAL=247, INT=248, INTO=249, 
		INVALIDATE=250, IS=251, ISOLATION=252, ITERATE=253, JAVA=254, JOB=255, 
		JOIN=256, KEEP=257, KEY=258, LANGUAGE=259, LAST=260, LAST_VALUE=261, LEADING=262, 
		LEFT=263, LESS=264, LEVEL=265, LIBRARY=266, LIKE2=267, LIKE4=268, LIKEC=269, 
		LIKE=270, LIMIT=271, LINK=272, LIST=273, LOCAL=274, LOCKED=275, LOCK=276, 
		LOGGING=277, LOG=278, LOGMINING=279, LOGOFF=280, LOGON=281, LONG=282, 
		LOOP=283, LOW=284, MAIN=285, MANAGE=286, MANAGEMENT=287, MANUAL=288, MAP=289, 
		MATCHED=290, MATERIALIZED=291, MAXSIZE=292, MAXVALUE=293, MEASURE=294, 
		MEASURES=295, MEMBER=296, MERGE=297, MINEXTENTS=298, MINIMUM=299, MINING=300, 
		MINUS=301, MINUTE=302, MINVALUE=303, MLSLABEL=304, MODEL=305, MODE=306, 
		MODIFY=307, MONTH=308, MOVEMENT=309, MULTISET=310, NAME=311, NAN=312, 
		NATURAL=313, NATURALN=314, NAV=315, NCHAR_CS=316, NCHAR=317, NCLOB=318, 
		NESTED=319, NEW=320, NEXT=321, NOAUDIT=322, NOCACHE=323, NOCOMPRESS=324, 
		NOCOPY=325, NOCYCLE=326, NOENTITYESCAPING=327, NOGUARANTEE=328, NOLOGGING=329, 
		NOMAXVALUE=330, NOMINVALUE=331, NONE=332, NO=333, NOORDER=334, NORELY=335, 
		NOSCHEMACHECK=336, NOTIFICATION=337, NOT=338, NOVALIDATE=339, NOWAIT=340, 
		NULL=341, NULLS=342, NUMBER=343, NUMERIC=344, NVARCHAR2=345, OBJECT=346, 
		OFFLINE=347, OFF=348, OF=349, OID=350, OLD=351, OLTP=352, ONLINE=353, 
		ONLY=354, ON=355, OPEN=356, OPERATOR=357, OPTIMAL=358, OPTION=359, ORADATA=360, 
		ORDER=361, ORDINALITY=362, OR=363, OSERROR=364, OUTER=365, OUTLINE=366, 
		OUT=367, OVER=368, OVERRIDING=369, PACKAGE=370, PARALLEL_ENABLE=371, PARAMETERS=372, 
		PARENT=373, PARTITION=374, PASSING=375, PASSWORD=376, PATH=377, PCTFREE=378, 
		PCTINCREASE=379, PCTUSED=380, PERCENT_FOUND=381, PERCENT_ISOPEN=382, PERCENT_NOTFOUND=383, 
		PERCENT_ROWCOUNT=384, PERCENT_ROWTYPE=385, PERCENT_TYPE=386, PIPELINED=387, 
		PIPE=388, PIVOT=389, PLAN=390, PLS_INTEGER=391, PLUGGABLE=392, POLICY=393, 
		POSITIVEN=394, POSITIVE=395, PRAGMA=396, PRECEDING=397, PRECISION=398, 
		PRESENT=399, PRESERVE=400, PRIMARY=401, PRIOR=402, PRIVILEGE=403, PRIVILEGES=404, 
		PROCEDURE=405, PROCESS=406, PROFILE=407, PROGRAM=408, PUBLIC=409, PURGE=410, 
		QUERY=411, QUOTA=412, RAISE=413, RANGE=414, RAW=415, READ=416, REAL=417, 
		RECORD=418, RECYCLE=419, REDACTION=420, REFERENCE=421, REFERENCES=422, 
		REFERENCING=423, REF=424, REFRESH=425, REJECT=426, RELIES_ON=427, RELY=428, 
		REMOVE=429, RENAME=430, REPLACE=431, REQUIRED=432, RESOURCE=433, RESPECT=434, 
		RESTRICTED=435, RESTRICT_REFERENCES=436, RESULT_CACHE=437, RESULT=438, 
		RESUMABLE=439, RETENTION=440, RETURNING=441, RETURN=442, REUSE=443, REVERSE=444, 
		REVOKE=445, REWRITE=446, RIGHT=447, ROLE=448, ROLES=449, ROLLBACK=450, 
		ROLLUP=451, ROWID=452, ROW=453, ROWS=454, RULES=455, SALT=456, SAMPLE=457, 
		SAVEPOINT=458, SAVE=459, SCHEDULER=460, SCHEMACHECK=461, SCHEMA=462, SCN=463, 
		SEARCH=464, SECOND=465, SEED=466, SEGMENT=467, SELECT=468, SELF=469, SEQUENCE=470, 
		SEQUENTIAL=471, SERIALIZABLE=472, SERIALLY_REUSABLE=473, SERVERERROR=474, 
		SESSION=475, SESSIONTIMEZONE=476, SET=477, SETS=478, SETTINGS=479, SHARE=480, 
		SHOW=481, SHUTDOWN=482, SIBLINGS=483, SIGNTYPE=484, SIMPLE_INTEGER=485, 
		SINGLE=486, SIZE=487, SKIP_=488, SMALLFILE=489, SMALLINT=490, SNAPSHOT=491, 
		SOME=492, SORT=493, SOURCE=494, SPACE_KEYWORD=495, SPECIFICATION=496, 
		SQLDATA=497, SQLERROR=498, SQL=499, STANDALONE=500, START=501, STARTUP=502, 
		STATEMENT_ID=503, STATEMENT=504, STATIC=505, STATISTICS=506, STORAGE=507, 
		STORE=508, STRING=509, SUBMULTISET=510, SUBPARTITION=511, SUBSTITUTABLE=512, 
		SUBTYPE=513, SUCCESS=514, SUSPEND=515, SYNONYM=516, SYSBACKUP=517, SYSDATE=518, 
		SYSDBA=519, SYSDG=520, SYSGUID=521, SYSKM=522, SYSOPER=523, TABLESPACE=524, 
		TABLE=525, TEMPFILE=526, TEMPORARY=527, THAN=528, THEN=529, THE=530, THROUGH=531, 
		TIMESTAMP_LTZ_UNCONSTRAINED=532, TIMESTAMP=533, TIMESTAMP_TZ_UNCONSTRAINED=534, 
		TIMESTAMP_UNCONSTRAINED=535, TIME=536, TIMEZONE_ABBR=537, TIMEZONE_HOUR=538, 
		TIMEZONE_MINUTE=539, TIMEZONE_REGION=540, TO=541, TRAILING=542, TRANSACTION=543, 
		TRANSLATE=544, TRANSLATION=545, TREAT=546, TRIGGER=547, TRUE=548, TRUNCATE=549, 
		TUNING=550, TYPE=551, UNBOUNDED=552, UNDER=553, UNDO=554, UNIFORM=555, 
		UNION=556, UNIQUE=557, UNLIMITED=558, UNLOCK=559, UNPIVOT=560, UNTIL=561, 
		UPDATED=562, UPDATE=563, UPSERT=564, UROWID=565, USERS=566, USER=567, 
		USE=568, USING=569, VALIDATE=570, VALUES=571, VALUE=572, VARCHAR2=573, 
		VARCHAR=574, VARIABLE=575, VARRAY=576, VARYING=577, VERSIONS=578, VERSION=579, 
		VIEW=580, WAIT=581, WARNING=582, WELLFORMED=583, WHENEVER=584, WHEN=585, 
		WHERE=586, WHILE=587, WITHIN=588, WITH=589, WORK=590, WRITE=591, XMLAGG=592, 
		XMLATTRIBUTES=593, XMLCAST=594, XMLCOLATTVAL=595, XMLELEMENT=596, XMLEXISTS=597, 
		XMLFOREST=598, XMLNAMESPACES=599, XMLPARSE=600, XMLPI=601, XMLQUERY=602, 
		XMLROOT=603, XMLSERIALIZE=604, XMLTABLE=605, XML=606, YEAR=607, YES=608, 
		YMINTERVAL_UNCONSTRAINED=609, ZONE=610, PREDICTION=611, PREDICTION_BOUNDS=612, 
		PREDICTION_COST=613, PREDICTION_DETAILS=614, PREDICTION_PROBABILITY=615, 
		PREDICTION_SET=616, CUME_DIST=617, DENSE_RANK=618, LISTAGG=619, PERCENT_RANK=620, 
		PERCENTILE_CONT=621, PERCENTILE_DISC=622, RANK=623, AVG=624, CORR=625, 
		COVAR_=626, DECODE=627, LAG=628, LEAD=629, MAX=630, MEDIAN=631, MIN=632, 
		NTILE=633, NVL=634, RATIO_TO_REPORT=635, REGR_=636, ROUND=637, ROW_NUMBER=638, 
		SUBSTR=639, TO_CHAR=640, TRIM=641, SUM=642, STDDEV=643, VAR_=644, VARIANCE=645, 
		LEAST=646, GREATEST=647, TO_DATE=648, NATIONAL_CHAR_STRING_LIT=649, BIT_STRING_LIT=650, 
		HEX_STRING_LIT=651, DOUBLE_PERIOD=652, PERIOD=653, UNSIGNED_INTEGER=654, 
		APPROXIMATE_NUM_LIT=655, CHAR_STRING=656, DELIMITED_ID=657, PERCENT=658, 
		AMPERSAND=659, LEFT_PAREN=660, RIGHT_PAREN=661, DOUBLE_ASTERISK=662, ASTERISK=663, 
		PLUS_SIGN=664, MINUS_SIGN=665, COMMA=666, SOLIDUS=667, AT_SIGN=668, ASSIGN_OP=669, 
		BINDVAR=670, NOT_EQUAL_OP=671, CARRET_OPERATOR_PART=672, TILDE_OPERATOR_PART=673, 
		EXCLAMATION_OPERATOR_PART=674, GREATER_THAN_OP=675, LESS_THAN_OP=676, 
		COLON=677, SEMICOLON=678, BAR=679, EQUALS_OP=680, LEFT_BRACKET=681, RIGHT_BRACKET=682, 
		INTRODUCER=683, SPACES=684, SINGLE_LINE_COMMENT=685, MULTI_LINE_COMMENT=686, 
		PROMPT=687, START_CMD=688, REGULAR_ID=689, ZV=690;
	public const int
		RULE_sql_script = 0, RULE_unit_statement = 1, RULE_drop_function = 2, 
		RULE_alter_function = 3, RULE_create_function_body = 4, RULE_parallel_enable_clause = 5, 
		RULE_partition_by_clause = 6, RULE_result_cache_clause = 7, RULE_relies_on_part = 8, 
		RULE_streaming_clause = 9, RULE_drop_package = 10, RULE_alter_package = 11, 
		RULE_create_package = 12, RULE_create_package_body = 13, RULE_package_obj_spec = 14, 
		RULE_procedure_spec = 15, RULE_function_spec = 16, RULE_package_obj_body = 17, 
		RULE_drop_procedure = 18, RULE_alter_procedure = 19, RULE_function_body = 20, 
		RULE_procedure_body = 21, RULE_create_procedure_body = 22, RULE_drop_trigger = 23, 
		RULE_alter_trigger = 24, RULE_create_trigger = 25, RULE_trigger_follows_clause = 26, 
		RULE_trigger_when_clause = 27, RULE_simple_dml_trigger = 28, RULE_for_each_row = 29, 
		RULE_compound_dml_trigger = 30, RULE_non_dml_trigger = 31, RULE_trigger_body = 32, 
		RULE_routine_clause = 33, RULE_compound_trigger_block = 34, RULE_timing_point_section = 35, 
		RULE_non_dml_event = 36, RULE_dml_event_clause = 37, RULE_dml_event_element = 38, 
		RULE_dml_event_nested_clause = 39, RULE_referencing_clause = 40, RULE_referencing_element = 41, 
		RULE_drop_type = 42, RULE_alter_type = 43, RULE_compile_type_clause = 44, 
		RULE_replace_type_clause = 45, RULE_alter_method_spec = 46, RULE_alter_method_element = 47, 
		RULE_alter_attribute_definition = 48, RULE_attribute_definition = 49, 
		RULE_alter_collection_clauses = 50, RULE_dependent_handling_clause = 51, 
		RULE_dependent_exceptions_part = 52, RULE_create_type = 53, RULE_type_definition = 54, 
		RULE_object_type_def = 55, RULE_object_as_part = 56, RULE_object_under_part = 57, 
		RULE_nested_table_type_def = 58, RULE_sqlj_object_type = 59, RULE_type_body = 60, 
		RULE_type_body_elements = 61, RULE_map_order_func_declaration = 62, RULE_subprog_decl_in_type = 63, 
		RULE_proc_decl_in_type = 64, RULE_func_decl_in_type = 65, RULE_constructor_declaration = 66, 
		RULE_modifier_clause = 67, RULE_object_member_spec = 68, RULE_sqlj_object_type_attr = 69, 
		RULE_element_spec = 70, RULE_element_spec_options = 71, RULE_subprogram_spec = 72, 
		RULE_type_procedure_spec = 73, RULE_type_function_spec = 74, RULE_constructor_spec = 75, 
		RULE_map_order_function_spec = 76, RULE_pragma_clause = 77, RULE_pragma_elements = 78, 
		RULE_type_elements_parameter = 79, RULE_drop_sequence = 80, RULE_alter_sequence = 81, 
		RULE_create_sequence = 82, RULE_sequence_spec = 83, RULE_sequence_start_clause = 84, 
		RULE_create_index = 85, RULE_alter_index = 86, RULE_create_user = 87, 
		RULE_alter_user = 88, RULE_alter_identified_by = 89, RULE_identified_by = 90, 
		RULE_identified_other_clause = 91, RULE_user_tablespace_clause = 92, RULE_quota_clause = 93, 
		RULE_profile_clause = 94, RULE_role_clause = 95, RULE_user_default_role_clause = 96, 
		RULE_password_expire_clause = 97, RULE_user_lock_clause = 98, RULE_user_editions_clause = 99, 
		RULE_alter_user_editions_clause = 100, RULE_proxy_clause = 101, RULE_container_names = 102, 
		RULE_set_container_data = 103, RULE_add_rem_container_data = 104, RULE_container_data_clause = 105, 
		RULE_drop_index = 106, RULE_grant_statement = 107, RULE_container_clause = 108, 
		RULE_create_view = 109, RULE_view_options = 110, RULE_view_alias_constraint = 111, 
		RULE_object_view_clause = 112, RULE_inline_constraint = 113, RULE_out_of_line_constraint = 114, 
		RULE_constraint_state = 115, RULE_create_tablespace = 116, RULE_permanent_tablespace_clause = 117, 
		RULE_tablespace_encryption_spec = 118, RULE_logging_clause = 119, RULE_extent_management_clause = 120, 
		RULE_segment_management_clause = 121, RULE_flashback_mode_clause = 122, 
		RULE_temporary_tablespace_clause = 123, RULE_tablespace_group_clause = 124, 
		RULE_undo_tablespace_clause = 125, RULE_tablespace_retention_clause = 126, 
		RULE_datafile_specification = 127, RULE_tempfile_specification = 128, 
		RULE_datafile_tempfile_spec = 129, RULE_redo_log_file_spec = 130, RULE_autoextend_clause = 131, 
		RULE_maxsize_clause = 132, RULE_create_table = 133, RULE_table_range_partition_by_clause = 134, 
		RULE_datatype_null_enable = 135, RULE_size_clause = 136, RULE_drop_table = 137, 
		RULE_comment_on_column = 138, RULE_create_synonym = 139, RULE_comment_on_table = 140, 
		RULE_alter_table = 141, RULE_add_constraint = 142, RULE_check_constraint = 143, 
		RULE_drop_constraint = 144, RULE_enable_constraint = 145, RULE_disable_constraint = 146, 
		RULE_foreign_key_clause = 147, RULE_references_clause = 148, RULE_on_delete_clause = 149, 
		RULE_unique_key_clause = 150, RULE_primary_key_clause = 151, RULE_anonymous_block = 152, 
		RULE_invoker_rights_clause = 153, RULE_compiler_parameters_clause = 154, 
		RULE_call_spec = 155, RULE_java_spec = 156, RULE_c_spec = 157, RULE_c_agent_in_clause = 158, 
		RULE_c_parameters_clause = 159, RULE_parameter = 160, RULE_default_value_part = 161, 
		RULE_seq_of_declare_specs = 162, RULE_declare_spec = 163, RULE_variable_declaration = 164, 
		RULE_subtype_declaration = 165, RULE_cursor_declaration = 166, RULE_parameter_spec = 167, 
		RULE_exception_declaration = 168, RULE_pragma_declaration = 169, RULE_record_type_def = 170, 
		RULE_field_spec = 171, RULE_ref_cursor_type_def = 172, RULE_type_declaration = 173, 
		RULE_table_type_def = 174, RULE_table_indexed_by_part = 175, RULE_varray_type_def = 176, 
		RULE_seq_of_statements = 177, RULE_label_declaration = 178, RULE_statement = 179, 
		RULE_swallow_to_semi = 180, RULE_assignment_statement = 181, RULE_continue_statement = 182, 
		RULE_exit_statement = 183, RULE_goto_statement = 184, RULE_if_statement = 185, 
		RULE_elsif_part = 186, RULE_else_part = 187, RULE_loop_statement = 188, 
		RULE_cursor_loop_param = 189, RULE_forall_statement = 190, RULE_bounds_clause = 191, 
		RULE_between_bound = 192, RULE_lower_bound = 193, RULE_upper_bound = 194, 
		RULE_null_statement = 195, RULE_raise_statement = 196, RULE_return_statement = 197, 
		RULE_function_call = 198, RULE_pipe_row_statement = 199, RULE_body = 200, 
		RULE_exception_handler = 201, RULE_trigger_block = 202, RULE_block = 203, 
		RULE_sql_statement = 204, RULE_execute_immediate = 205, RULE_dynamic_returning_clause = 206, 
		RULE_data_manipulation_language_statements = 207, RULE_cursor_manipulation_statements = 208, 
		RULE_close_statement = 209, RULE_open_statement = 210, RULE_fetch_statement = 211, 
		RULE_open_for_statement = 212, RULE_transaction_control_statements = 213, 
		RULE_set_transaction_command = 214, RULE_set_constraint_command = 215, 
		RULE_commit_statement = 216, RULE_write_clause = 217, RULE_rollback_statement = 218, 
		RULE_savepoint_statement = 219, RULE_explain_statement = 220, RULE_select_statement = 221, 
		RULE_subquery_factoring_clause = 222, RULE_factoring_element = 223, RULE_search_clause = 224, 
		RULE_cycle_clause = 225, RULE_subquery = 226, RULE_subquery_basic_elements = 227, 
		RULE_subquery_operation_part = 228, RULE_query_block = 229, RULE_selected_element = 230, 
		RULE_from_clause = 231, RULE_select_list_elements = 232, RULE_table_ref_list = 233, 
		RULE_table_ref = 234, RULE_table_ref_aux = 235, RULE_table_ref_aux_internal = 236, 
		RULE_join_clause = 237, RULE_join_on_part = 238, RULE_join_using_part = 239, 
		RULE_outer_join_type = 240, RULE_query_partition_clause = 241, RULE_flashback_query_clause = 242, 
		RULE_pivot_clause = 243, RULE_pivot_element = 244, RULE_pivot_for_clause = 245, 
		RULE_pivot_in_clause = 246, RULE_pivot_in_clause_element = 247, RULE_pivot_in_clause_elements = 248, 
		RULE_unpivot_clause = 249, RULE_unpivot_in_clause = 250, RULE_unpivot_in_elements = 251, 
		RULE_hierarchical_query_clause = 252, RULE_start_part = 253, RULE_group_by_clause = 254, 
		RULE_group_by_elements = 255, RULE_rollup_cube_clause = 256, RULE_grouping_sets_clause = 257, 
		RULE_grouping_sets_elements = 258, RULE_having_clause = 259, RULE_model_clause = 260, 
		RULE_cell_reference_options = 261, RULE_return_rows_clause = 262, RULE_reference_model = 263, 
		RULE_main_model = 264, RULE_model_column_clauses = 265, RULE_model_column_partition_part = 266, 
		RULE_model_column_list = 267, RULE_model_column = 268, RULE_model_rules_clause = 269, 
		RULE_model_rules_part = 270, RULE_model_rules_element = 271, RULE_cell_assignment = 272, 
		RULE_model_iterate_clause = 273, RULE_until_part = 274, RULE_order_by_clause = 275, 
		RULE_order_by_elements = 276, RULE_for_update_clause = 277, RULE_for_update_of_part = 278, 
		RULE_for_update_options = 279, RULE_update_statement = 280, RULE_update_set_clause = 281, 
		RULE_column_based_update_set_clause = 282, RULE_delete_statement = 283, 
		RULE_insert_statement = 284, RULE_single_table_insert = 285, RULE_multi_table_insert = 286, 
		RULE_multi_table_element = 287, RULE_conditional_insert_clause = 288, 
		RULE_conditional_insert_when_part = 289, RULE_conditional_insert_else_part = 290, 
		RULE_insert_into_clause = 291, RULE_values_clause = 292, RULE_merge_statement = 293, 
		RULE_merge_update_clause = 294, RULE_merge_element = 295, RULE_merge_update_delete_part = 296, 
		RULE_merge_insert_clause = 297, RULE_selected_tableview = 298, RULE_lock_table_statement = 299, 
		RULE_wait_nowait_part = 300, RULE_lock_table_element = 301, RULE_lock_mode = 302, 
		RULE_general_table_ref = 303, RULE_static_returning_clause = 304, RULE_error_logging_clause = 305, 
		RULE_error_logging_into_part = 306, RULE_error_logging_reject_part = 307, 
		RULE_dml_table_expression_clause = 308, RULE_table_collection_expression = 309, 
		RULE_subquery_restriction_clause = 310, RULE_sample_clause = 311, RULE_seed_part = 312, 
		RULE_condition = 313, RULE_expressions = 314, RULE_expression = 315, RULE_cursor_expression = 316, 
		RULE_logical_expression = 317, RULE_multiset_expression = 318, RULE_relational_expression = 319, 
		RULE_compound_expression = 320, RULE_relational_operator = 321, RULE_in_elements = 322, 
		RULE_between_elements = 323, RULE_concatenation = 324, RULE_interval_expression = 325, 
		RULE_model_expression = 326, RULE_model_expression_element = 327, RULE_single_column_for_loop = 328, 
		RULE_multi_column_for_loop = 329, RULE_unary_expression = 330, RULE_case_statement = 331, 
		RULE_simple_case_statement = 332, RULE_simple_case_when_part = 333, RULE_searched_case_statement = 334, 
		RULE_searched_case_when_part = 335, RULE_case_else_part = 336, RULE_atom = 337, 
		RULE_quantified_expression = 338, RULE_string_function = 339, RULE_standard_function = 340, 
		RULE_numeric_function_wrapper = 341, RULE_numeric_function = 342, RULE_other_function = 343, 
		RULE_over_clause_keyword = 344, RULE_within_or_over_clause_keyword = 345, 
		RULE_standard_prediction_function_keyword = 346, RULE_over_clause = 347, 
		RULE_windowing_clause = 348, RULE_windowing_type = 349, RULE_windowing_elements = 350, 
		RULE_using_clause = 351, RULE_using_element = 352, RULE_collect_order_by_part = 353, 
		RULE_within_or_over_part = 354, RULE_cost_matrix_clause = 355, RULE_xml_passing_clause = 356, 
		RULE_xml_attributes_clause = 357, RULE_xml_namespaces_clause = 358, RULE_xml_table_column = 359, 
		RULE_xml_general_default_part = 360, RULE_xml_multiuse_expression_element = 361, 
		RULE_xmlroot_param_version_part = 362, RULE_xmlroot_param_standalone_part = 363, 
		RULE_xmlserialize_param_enconding_part = 364, RULE_xmlserialize_param_version_part = 365, 
		RULE_xmlserialize_param_ident_part = 366, RULE_sql_plus_command = 367, 
		RULE_whenever_command = 368, RULE_set_command = 369, RULE_partition_extension_clause = 370, 
		RULE_column_alias = 371, RULE_table_alias = 372, RULE_where_clause = 373, 
		RULE_into_clause = 374, RULE_xml_column_name = 375, RULE_cost_class_name = 376, 
		RULE_attribute_name = 377, RULE_savepoint_name = 378, RULE_rollback_segment_name = 379, 
		RULE_table_var_name = 380, RULE_schema_name = 381, RULE_routine_name = 382, 
		RULE_package_name = 383, RULE_implementation_type_name = 384, RULE_parameter_name = 385, 
		RULE_reference_model_name = 386, RULE_main_model_name = 387, RULE_container_tableview_name = 388, 
		RULE_aggregate_function_name = 389, RULE_query_name = 390, RULE_grantee_name = 391, 
		RULE_role_name = 392, RULE_constraint_name = 393, RULE_label_name = 394, 
		RULE_type_name = 395, RULE_sequence_name = 396, RULE_exception_name = 397, 
		RULE_function_name = 398, RULE_procedure_name = 399, RULE_trigger_name = 400, 
		RULE_variable_name = 401, RULE_index_name = 402, RULE_cursor_name = 403, 
		RULE_record_name = 404, RULE_collection_name = 405, RULE_link_name = 406, 
		RULE_column_name = 407, RULE_tableview_name = 408, RULE_char_set_name = 409, 
		RULE_synonym_name = 410, RULE_schema_object_name = 411, RULE_dir_object_name = 412, 
		RULE_user_object_name = 413, RULE_grant_object_name = 414, RULE_column_list = 415, 
		RULE_paren_column_list = 416, RULE_keep_clause = 417, RULE_function_argument = 418, 
		RULE_function_argument_analytic = 419, RULE_function_argument_modeling = 420, 
		RULE_respect_or_ignore_nulls = 421, RULE_argument = 422, RULE_type_spec = 423, 
		RULE_datatype = 424, RULE_precision_part = 425, RULE_native_datatype_element = 426, 
		RULE_bind_variable = 427, RULE_general_element = 428, RULE_general_element_part = 429, 
		RULE_table_element = 430, RULE_object_privilege = 431, RULE_system_privilege = 432, 
		RULE_constant = 433, RULE_numeric = 434, RULE_numeric_negative = 435, 
		RULE_quoted_string = 436, RULE_identifier = 437, RULE_id_expression = 438, 
		RULE_outer_join_sign = 439, RULE_regular_id = 440, RULE_string_function_name = 441, 
		RULE_numeric_function_name = 442;
	public static readonly string[] ruleNames = {
		"sql_script", "unit_statement", "drop_function", "alter_function", "create_function_body", 
		"parallel_enable_clause", "partition_by_clause", "result_cache_clause", 
		"relies_on_part", "streaming_clause", "drop_package", "alter_package", 
		"create_package", "create_package_body", "package_obj_spec", "procedure_spec", 
		"function_spec", "package_obj_body", "drop_procedure", "alter_procedure", 
		"function_body", "procedure_body", "create_procedure_body", "drop_trigger", 
		"alter_trigger", "create_trigger", "trigger_follows_clause", "trigger_when_clause", 
		"simple_dml_trigger", "for_each_row", "compound_dml_trigger", "non_dml_trigger", 
		"trigger_body", "routine_clause", "compound_trigger_block", "timing_point_section", 
		"non_dml_event", "dml_event_clause", "dml_event_element", "dml_event_nested_clause", 
		"referencing_clause", "referencing_element", "drop_type", "alter_type", 
		"compile_type_clause", "replace_type_clause", "alter_method_spec", "alter_method_element", 
		"alter_attribute_definition", "attribute_definition", "alter_collection_clauses", 
		"dependent_handling_clause", "dependent_exceptions_part", "create_type", 
		"type_definition", "object_type_def", "object_as_part", "object_under_part", 
		"nested_table_type_def", "sqlj_object_type", "type_body", "type_body_elements", 
		"map_order_func_declaration", "subprog_decl_in_type", "proc_decl_in_type", 
		"func_decl_in_type", "constructor_declaration", "modifier_clause", "object_member_spec", 
		"sqlj_object_type_attr", "element_spec", "element_spec_options", "subprogram_spec", 
		"type_procedure_spec", "type_function_spec", "constructor_spec", "map_order_function_spec", 
		"pragma_clause", "pragma_elements", "type_elements_parameter", "drop_sequence", 
		"alter_sequence", "create_sequence", "sequence_spec", "sequence_start_clause", 
		"create_index", "alter_index", "create_user", "alter_user", "alter_identified_by", 
		"identified_by", "identified_other_clause", "user_tablespace_clause", 
		"quota_clause", "profile_clause", "role_clause", "user_default_role_clause", 
		"password_expire_clause", "user_lock_clause", "user_editions_clause", 
		"alter_user_editions_clause", "proxy_clause", "container_names", "set_container_data", 
		"add_rem_container_data", "container_data_clause", "drop_index", "grant_statement", 
		"container_clause", "create_view", "view_options", "view_alias_constraint", 
		"object_view_clause", "inline_constraint", "out_of_line_constraint", "constraint_state", 
		"create_tablespace", "permanent_tablespace_clause", "tablespace_encryption_spec", 
		"logging_clause", "extent_management_clause", "segment_management_clause", 
		"flashback_mode_clause", "temporary_tablespace_clause", "tablespace_group_clause", 
		"undo_tablespace_clause", "tablespace_retention_clause", "datafile_specification", 
		"tempfile_specification", "datafile_tempfile_spec", "redo_log_file_spec", 
		"autoextend_clause", "maxsize_clause", "create_table", "table_range_partition_by_clause", 
		"datatype_null_enable", "size_clause", "drop_table", "comment_on_column", 
		"create_synonym", "comment_on_table", "alter_table", "add_constraint", 
		"check_constraint", "drop_constraint", "enable_constraint", "disable_constraint", 
		"foreign_key_clause", "references_clause", "on_delete_clause", "unique_key_clause", 
		"primary_key_clause", "anonymous_block", "invoker_rights_clause", "compiler_parameters_clause", 
		"call_spec", "java_spec", "c_spec", "c_agent_in_clause", "c_parameters_clause", 
		"parameter", "default_value_part", "seq_of_declare_specs", "declare_spec", 
		"variable_declaration", "subtype_declaration", "cursor_declaration", "parameter_spec", 
		"exception_declaration", "pragma_declaration", "record_type_def", "field_spec", 
		"ref_cursor_type_def", "type_declaration", "table_type_def", "table_indexed_by_part", 
		"varray_type_def", "seq_of_statements", "label_declaration", "statement", 
		"swallow_to_semi", "assignment_statement", "continue_statement", "exit_statement", 
		"goto_statement", "if_statement", "elsif_part", "else_part", "loop_statement", 
		"cursor_loop_param", "forall_statement", "bounds_clause", "between_bound", 
		"lower_bound", "upper_bound", "null_statement", "raise_statement", "return_statement", 
		"function_call", "pipe_row_statement", "body", "exception_handler", "trigger_block", 
		"block", "sql_statement", "execute_immediate", "dynamic_returning_clause", 
		"data_manipulation_language_statements", "cursor_manipulation_statements", 
		"close_statement", "open_statement", "fetch_statement", "open_for_statement", 
		"transaction_control_statements", "set_transaction_command", "set_constraint_command", 
		"commit_statement", "write_clause", "rollback_statement", "savepoint_statement", 
		"explain_statement", "select_statement", "subquery_factoring_clause", 
		"factoring_element", "search_clause", "cycle_clause", "subquery", "subquery_basic_elements", 
		"subquery_operation_part", "query_block", "selected_element", "from_clause", 
		"select_list_elements", "table_ref_list", "table_ref", "table_ref_aux", 
		"table_ref_aux_internal", "join_clause", "join_on_part", "join_using_part", 
		"outer_join_type", "query_partition_clause", "flashback_query_clause", 
		"pivot_clause", "pivot_element", "pivot_for_clause", "pivot_in_clause", 
		"pivot_in_clause_element", "pivot_in_clause_elements", "unpivot_clause", 
		"unpivot_in_clause", "unpivot_in_elements", "hierarchical_query_clause", 
		"start_part", "group_by_clause", "group_by_elements", "rollup_cube_clause", 
		"grouping_sets_clause", "grouping_sets_elements", "having_clause", "model_clause", 
		"cell_reference_options", "return_rows_clause", "reference_model", "main_model", 
		"model_column_clauses", "model_column_partition_part", "model_column_list", 
		"model_column", "model_rules_clause", "model_rules_part", "model_rules_element", 
		"cell_assignment", "model_iterate_clause", "until_part", "order_by_clause", 
		"order_by_elements", "for_update_clause", "for_update_of_part", "for_update_options", 
		"update_statement", "update_set_clause", "column_based_update_set_clause", 
		"delete_statement", "insert_statement", "single_table_insert", "multi_table_insert", 
		"multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
		"conditional_insert_else_part", "insert_into_clause", "values_clause", 
		"merge_statement", "merge_update_clause", "merge_element", "merge_update_delete_part", 
		"merge_insert_clause", "selected_tableview", "lock_table_statement", "wait_nowait_part", 
		"lock_table_element", "lock_mode", "general_table_ref", "static_returning_clause", 
		"error_logging_clause", "error_logging_into_part", "error_logging_reject_part", 
		"dml_table_expression_clause", "table_collection_expression", "subquery_restriction_clause", 
		"sample_clause", "seed_part", "condition", "expressions", "expression", 
		"cursor_expression", "logical_expression", "multiset_expression", "relational_expression", 
		"compound_expression", "relational_operator", "in_elements", "between_elements", 
		"concatenation", "interval_expression", "model_expression", "model_expression_element", 
		"single_column_for_loop", "multi_column_for_loop", "unary_expression", 
		"case_statement", "simple_case_statement", "simple_case_when_part", "searched_case_statement", 
		"searched_case_when_part", "case_else_part", "atom", "quantified_expression", 
		"string_function", "standard_function", "numeric_function_wrapper", "numeric_function", 
		"other_function", "over_clause_keyword", "within_or_over_clause_keyword", 
		"standard_prediction_function_keyword", "over_clause", "windowing_clause", 
		"windowing_type", "windowing_elements", "using_clause", "using_element", 
		"collect_order_by_part", "within_or_over_part", "cost_matrix_clause", 
		"xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
		"xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
		"xmlroot_param_version_part", "xmlroot_param_standalone_part", "xmlserialize_param_enconding_part", 
		"xmlserialize_param_version_part", "xmlserialize_param_ident_part", "sql_plus_command", 
		"whenever_command", "set_command", "partition_extension_clause", "column_alias", 
		"table_alias", "where_clause", "into_clause", "xml_column_name", "cost_class_name", 
		"attribute_name", "savepoint_name", "rollback_segment_name", "table_var_name", 
		"schema_name", "routine_name", "package_name", "implementation_type_name", 
		"parameter_name", "reference_model_name", "main_model_name", "container_tableview_name", 
		"aggregate_function_name", "query_name", "grantee_name", "role_name", 
		"constraint_name", "label_name", "type_name", "sequence_name", "exception_name", 
		"function_name", "procedure_name", "trigger_name", "variable_name", "index_name", 
		"cursor_name", "record_name", "collection_name", "link_name", "column_name", 
		"tableview_name", "char_set_name", "synonym_name", "schema_object_name", 
		"dir_object_name", "user_object_name", "grant_object_name", "column_list", 
		"paren_column_list", "keep_clause", "function_argument", "function_argument_analytic", 
		"function_argument_modeling", "respect_or_ignore_nulls", "argument", "type_spec", 
		"datatype", "precision_part", "native_datatype_element", "bind_variable", 
		"general_element", "general_element_part", "table_element", "object_privilege", 
		"system_privilege", "constant", "numeric", "numeric_negative", "quoted_string", 
		"identifier", "id_expression", "outer_join_sign", "regular_id", "string_function_name", 
		"numeric_function_name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ACCESS'", "'ACCOUNT'", "'ADD'", "'ADMIN'", "'ADMINISTER'", "'ADVISOR'", 
		"'AFTER'", "'AGENT'", "'AGGREGATE'", "'A'", "'ALL'", "'ALTER'", "'ANALYZE'", 
		"'AND'", "'ANY'", "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", "'ASSOCIATE'", 
		"'AT'", "'ATTRIBUTE'", "'AUDIT'", "'AUTHENTICATED'", "'AUTHENTICATION'", 
		"'AUTHID'", "'AUTOALLOCATE'", "'AUTO'", "'AUTOEXTEND'", "'AUTOMATIC'", 
		"'AUTONOMOUS_TRANSACTION'", "'BACKUP'", "'BASIC'", "'BATCH'", "'BECOME'", 
		"'BEFORE'", "'BEGIN'", "'BETWEEN'", "'BFILE'", "'BIGFILE'", "'BINARY_DOUBLE'", 
		"'BINARY_FLOAT'", "'BINARY_INTEGER'", "'BLOB'", "'BLOCK'", "'BLOCKSIZE'", 
		"'BODY'", "'BOOLEAN'", "'BOTH'", "'BREADTH'", "'BUFFER_POOL'", "'BUILD'", 
		"'BULK'", "'BY'", "'BYTE'", "'CACHE'", "'CALL'", "'CANONICAL'", "'CASCADE'", 
		"'CASE'", "'CAST'", "'CERTIFICATE'", "'CHANGE'", "'CHARACTER'", "'CHAR'", 
		"'CHAR_CS'", "'CHECK'", "'CHR'", "'CLASS'", "'C'", "'CLOB'", "'CLOSE'", 
		"'CLUSTER'", "'COALESCE'", "'COLLECT'", "'COLUMN'", "'COLUMNS'", "'COMMENT'", 
		"'COMMIT'", "'COMMITTED'", "'COMPATIBILITY'", "'COMPILE'", "'COMPOUND'", 
		"'COMPRESS'", "'COMPUTE'", "'CONNECT_BY_ROOT'", "'CONNECT'", "'CONSTANT'", 
		"'CONSTRAINT'", "'CONSTRAINTS'", "'CONSTRUCTOR'", "'CONTAINER'", "'CONTAINER_DATA'", 
		"'CONTENT'", "'CONTEXT'", "'CONTINUE'", "'CONVERT'", "'CORRUPT_XID_ALL'", 
		"'CORRUPT_XID'", "'COST'", "'COUNT'", "'CREATE'", "'CREATION'", "'CROSS'", 
		"'CUBE'", "'CURRENT'", "'CURRENT_USER'", "'CURSOR'", "'CUSTOMDATUM'", 
		"'CYCLE'", "'DATABASE'", "'DATA'", "'DATAFILE'", "'DATE'", "'DAY'", "'DBA_RECYCLEBIN'", 
		"'DB_ROLE_CHANGE'", "'DBTIMEZONE'", "'DDL'", "'DEBUG'", "'DEC'", "'DECIMAL'", 
		"'DECLARE'", "'DECOMPOSE'", "'DECREMENT'", "'DEFAULT'", "'DEFAULTS'", 
		"'DEFERRABLE'", "'DEFERRED'", "'DEFINER'", "'DELEGATE'", "'DELETE'", "'DEPTH'", 
		"'DESC'", "'DETERMINISTIC'", "'DICTIONARY'", "'DIMENSION'", "'DIRECTORY'", 
		"'DISABLE'", "'DISASSOCIATE'", "'DISTINCT'", "'DISTINGUISHED'", "'DOCUMENT'", 
		"'DOUBLE'", "'DROP'", "'DSINTERVAL_UNCONSTRAINED'", "'EACH'", "'EDITION'", 
		"'EDITIONING'", "'EDITIONS'", "'ELEMENT'", "'ELSE'", "'ELSIF'", "'EMPTY'", 
		"'ENABLE'", "'ENCODING'", "'ENCRYPT'", "'ENCRYPTION'", "'END'", "'ENTERPRISE'", 
		"'ENTITYESCAPING'", "'ERR'", "'ERRORS'", "'ESCAPE'", "'EVALNAME'", "'EXCEPT'", 
		"'EXCEPTION'", "'EXCEPTION_INIT'", "'EXCEPTIONS'", "'EXCLUDE'", "'EXCLUSIVE'", 
		"'EXECUTE'", "'EXEMPT'", "'EXISTS'", "'EXIT'", "'EXPIRE'", "'EXPLAIN'", 
		"'EXTENT'", "'EXTERNAL'", "'EXTERNALLY'", "'EXTRACT'", "'FAILURE'", "'FALSE'", 
		"'FETCH'", "'FILESYSTEM_LIKE_LOGGING'", "'FINAL'", "'FIRST'", "'FIRST_VALUE'", 
		"'FLASHBACK'", "'FLASH_CACHE'", "'FLOAT'", "'FOLDER'", "'FOLLOWING'", 
		"'FOLLOWS'", "'FORALL'", "'FORCE'", "'FOREIGN'", "'FOR'", "'FREELIST'", 
		"'FREELISTS'", "'FROM'", "'FULL'", "'FUNCTION'", "'GLOBAL'", "'GLOBALLY'", 
		"'GOTO'", "'GRANT'", "'GROUP'", "'GROUPING'", "'GROUPS'", "'GUARANTEE'", 
		"'HASH'", "'HAVING'", "'HIDE'", "'HIERARCHY'", "'HIGH'", "'HOUR'", "'IDENTIFIED'", 
		"'IDENTIFIER'", "'ID'", "'IF'", "'IGNORE'", "'IMMEDIATE'", "'INCLUDE'", 
		"'INCLUDING'", "'INCREMENT'", "'INDENT'", "'INDEXED'", "'INDEX'", "'INDEXTYPE'", 
		"'INDICATOR'", "'INDICES'", "'INFINITE'", "'INHERIT'", "'IN'", "'INITIAL'", 
		"'INITIALLY'", "'INITRANS'", "'INLINE'", "'INNER'", "'INOUT'", "'INSERT'", 
		"'INSTANTIABLE'", "'INSTEAD'", "'INTEGER'", "'INTERSECT'", "'INTERVAL'", 
		"'INT'", "'INTO'", "'INVALIDATE'", "'IS'", "'ISOLATION'", "'ITERATE'", 
		"'JAVA'", "'JOB'", "'JOIN'", "'KEEP'", "'KEY'", "'LANGUAGE'", "'LAST'", 
		"'LAST_VALUE'", "'LEADING'", "'LEFT'", "'LESS'", "'LEVEL'", "'LIBRARY'", 
		"'LIKE2'", "'LIKE4'", "'LIKEC'", "'LIKE'", "'LIMIT'", "'LINK'", "'LIST'", 
		"'LOCAL'", "'LOCKED'", "'LOCK'", "'LOGGING'", "'LOG'", "'LOGMINING'", 
		"'LOGOFF'", "'LOGON'", "'LONG'", "'LOOP'", "'LOW'", "'MAIN'", "'MANAGE'", 
		"'MANAGEMENT'", "'MANUAL'", "'MAP'", "'MATCHED'", "'MATERIALIZED'", "'MAXSIZE'", 
		"'MAXVALUE'", "'MEASURE'", "'MEASURES'", "'MEMBER'", "'MERGE'", "'MINEXTENTS'", 
		"'MINIMUM'", "'MINING'", "'MINUS'", "'MINUTE'", "'MINVALUE'", "'MLSLABEL'", 
		"'MODEL'", "'MODE'", "'MODIFY'", "'MONTH'", "'MOVEMENT'", "'MULTISET'", 
		"'NAME'", "'NAN'", "'NATURAL'", "'NATURALN'", "'NAV'", "'NCHAR_CS'", "'NCHAR'", 
		"'NCLOB'", "'NESTED'", "'NEW'", "'NEXT'", "'NOAUDIT'", "'NOCACHE'", "'NOCOMPRESS'", 
		"'NOCOPY'", "'NOCYCLE'", "'NOENTITYESCAPING'", "'NOGUARANTEE'", "'NOLOGGING'", 
		"'NOMAXVALUE'", "'NOMINVALUE'", "'NONE'", "'NO'", "'NOORDER'", "'NORELY'", 
		"'NOSCHEMACHECK'", "'NOTIFICATION'", "'NOT'", "'NOVALIDATE'", "'NOWAIT'", 
		"'NULL'", "'NULLS'", "'NUMBER'", "'NUMERIC'", "'NVARCHAR2'", "'OBJECT'", 
		"'OFFLINE'", "'OFF'", "'OF'", "'OID'", "'OLD'", "'OLTP'", "'ONLINE'", 
		"'ONLY'", "'ON'", "'OPEN'", "'OPERATOR'", "'OPTIMAL'", "'OPTION'", "'ORADATA'", 
		"'ORDER'", "'ORDINALITY'", "'OR'", "'OSERROR'", "'OUTER'", "'OUTLINE'", 
		"'OUT'", "'OVER'", "'OVERRIDING'", "'PACKAGE'", "'PARALLEL_ENABLE'", "'PARAMETERS'", 
		"'PARENT'", "'PARTITION'", "'PASSING'", "'PASSWORD'", "'PATH'", "'PCTFREE'", 
		"'PCTINCREASE'", "'PCTUSED'", "'%FOUND'", "'%ISOPEN'", "'%NOTFOUND'", 
		"'%ROWCOUNT'", "'%ROWTYPE'", "'%TYPE'", "'PIPELINED'", "'PIPE'", "'PIVOT'", 
		"'PLAN'", "'PLS_INTEGER'", "'PLUGGABLE'", "'POLICY'", "'POSITIVEN'", "'POSITIVE'", 
		"'PRAGMA'", "'PRECEDING'", "'PRECISION'", "'PRESENT'", "'PRESERVE'", "'PRIMARY'", 
		"'PRIOR'", "'PRIVILEGE'", "'PRIVILEGES'", "'PROCEDURE'", "'PROCESS'", 
		"'PROFILE'", "'PROGRAM'", "'PUBLIC'", "'PURGE'", "'QUERY'", "'QUOTA'", 
		"'RAISE'", "'RANGE'", "'RAW'", "'READ'", "'REAL'", "'RECORD'", "'RECYCLE'", 
		"'REDACTION'", "'REFERENCE'", "'REFERENCES'", "'REFERENCING'", "'REF'", 
		"'REFRESH'", "'REJECT'", "'RELIES_ON'", "'RELY'", "'REMOVE'", "'RENAME'", 
		"'REPLACE'", "'REQUIRED'", "'RESOURCE'", "'RESPECT'", "'RESTRICTED'", 
		"'RESTRICT_REFERENCES'", "'RESULT_CACHE'", "'RESULT'", "'RESUMABLE'", 
		"'RETENTION'", "'RETURNING'", "'RETURN'", "'REUSE'", "'REVERSE'", "'REVOKE'", 
		"'REWRITE'", "'RIGHT'", "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", 
		"'ROWID'", "'ROW'", "'ROWS'", "'RULES'", "'SALT'", "'SAMPLE'", "'SAVEPOINT'", 
		"'SAVE'", "'SCHEDULER'", "'SCHEMACHECK'", "'SCHEMA'", "'SCN'", "'SEARCH'", 
		"'SECOND'", "'SEED'", "'SEGMENT'", "'SELECT'", "'SELF'", "'SEQUENCE'", 
		"'SEQUENTIAL'", "'SERIALIZABLE'", "'SERIALLY_REUSABLE'", "'SERVERERROR'", 
		"'SESSION'", "'SESSIONTIMEZONE'", "'SET'", "'SETS'", "'SETTINGS'", "'SHARE'", 
		"'SHOW'", "'SHUTDOWN'", "'SIBLINGS'", "'SIGNTYPE'", "'SIMPLE_INTEGER'", 
		"'SINGLE'", "'SIZE'", "'SKIP'", "'SMALLFILE'", "'SMALLINT'", "'SNAPSHOT'", 
		"'SOME'", "'SORT'", "'SOURCE'", "'SPACE'", "'SPECIFICATION'", "'SQLDATA'", 
		"'SQLERROR'", "'SQL'", "'STANDALONE'", "'START'", "'STARTUP'", "'STATEMENT_ID'", 
		"'STATEMENT'", "'STATIC'", "'STATISTICS'", "'STORAGE'", "'STORE'", "'STRING'", 
		"'SUBMULTISET'", "'SUBPARTITION'", "'SUBSTITUTABLE'", "'SUBTYPE'", "'SUCCESS'", 
		"'SUSPEND'", "'SYNONYM'", "'SYSBACKUP'", "'SYSDATE'", "'SYSDBA'", "'SYSDG'", 
		"'SYSGUID'", "'SYSKM'", "'SYSOPER'", "'TABLESPACE'", "'TABLE'", "'TEMPFILE'", 
		"'TEMPORARY'", "'THAN'", "'THEN'", "'THE'", "'THROUGH'", "'TIMESTAMP_LTZ_UNCONSTRAINED'", 
		"'TIMESTAMP'", "'TIMESTAMP_TZ_UNCONSTRAINED'", "'TIMESTAMP_UNCONSTRAINED'", 
		"'TIME'", "'TIMEZONE_ABBR'", "'TIMEZONE_HOUR'", "'TIMEZONE_MINUTE'", "'TIMEZONE_REGION'", 
		"'TO'", "'TRAILING'", "'TRANSACTION'", "'TRANSLATE'", "'TRANSLATION'", 
		"'TREAT'", "'TRIGGER'", "'TRUE'", "'TRUNCATE'", "'TUNING'", "'TYPE'", 
		"'UNBOUNDED'", "'UNDER'", "'UNDO'", "'UNIFORM'", "'UNION'", "'UNIQUE'", 
		"'UNLIMITED'", "'UNLOCK'", "'UNPIVOT'", "'UNTIL'", "'UPDATED'", "'UPDATE'", 
		"'UPSERT'", "'UROWID'", "'USERS'", "'USER'", "'USE'", "'USING'", "'VALIDATE'", 
		"'VALUES'", "'VALUE'", "'VARCHAR2'", "'VARCHAR'", "'VARIABLE'", "'VARRAY'", 
		"'VARYING'", "'VERSIONS'", "'VERSION'", "'VIEW'", "'WAIT'", "'WARNING'", 
		"'WELLFORMED'", "'WHENEVER'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITHIN'", 
		"'WITH'", "'WORK'", "'WRITE'", "'XMLAGG'", "'XMLATTRIBUTES'", "'XMLCAST'", 
		"'XMLCOLATTVAL'", "'XMLELEMENT'", "'XMLEXISTS'", "'XMLFOREST'", "'XMLNAMESPACES'", 
		"'XMLPARSE'", "'XMLPI'", "'XMLQUERY'", "'XMLROOT'", "'XMLSERIALIZE'", 
		"'XMLTABLE'", "'XML'", "'YEAR'", "'YES'", "'YMINTERVAL_UNCONSTRAINED'", 
		"'ZONE'", "'PREDICTION'", "'PREDICTION_BOUNDS'", "'PREDICTION_COST'", 
		"'PREDICTION_DETAILS'", "'PREDICTION_PROBABILITY'", "'PREDICTION_SET'", 
		"'CUME_DIST'", "'DENSE_RANK'", "'LISTAGG'", "'PERCENT_RANK'", "'PERCENTILE_CONT'", 
		"'PERCENTILE_DISC'", "'RANK'", "'AVG'", "'CORR'", "'COVAR_'", "'DECODE'", 
		"'LAG'", "'LEAD'", "'MAX'", "'MEDIAN'", "'MIN'", "'NTILE'", "'NVL'", "'RATIO_TO_REPORT'", 
		"'REGR_'", "'ROUND'", "'ROW_NUMBER'", "'SUBSTR'", "'TO_CHAR'", "'TRIM'", 
		"'SUM'", "'STDDEV'", "'VAR_'", "'VARIANCE'", "'LEAST'", "'GREATEST'", 
		"'TO_DATE'", null, null, null, "'..'", "'.'", null, null, null, null, 
		"'%'", "'&'", "'('", "')'", "'**'", "'*'", "'+'", "'-'", "','", "'/'", 
		"'@'", "':='", null, null, "'^'", "'~'", "'!'", "'>'", "'<'", "':'", "';'", 
		"'|'", "'='", "'['", "']'", "'_'", null, null, null, null, null, null, 
		"'@!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ACCESS", "ACCOUNT", "ADD", "ADMIN", "ADMINISTER", "ADVISOR", "AFTER", 
		"AGENT", "AGGREGATE", "A_LETTER", "ALL", "ALTER", "ANALYZE", "AND", "ANY", 
		"ARCHIVE", "ARRAY", "AS", "ASC", "ASSOCIATE", "AT", "ATTRIBUTE", "AUDIT", 
		"AUTHENTICATED", "AUTHENTICATION", "AUTHID", "AUTOALLOCATE", "AUTO", "AUTOEXTEND", 
		"AUTOMATIC", "AUTONOMOUS_TRANSACTION", "BACKUP", "BASIC", "BATCH", "BECOME", 
		"BEFORE", "BEGIN", "BETWEEN", "BFILE", "BIGFILE", "BINARY_DOUBLE", "BINARY_FLOAT", 
		"BINARY_INTEGER", "BLOB", "BLOCK", "BLOCKSIZE", "BODY", "BOOLEAN", "BOTH", 
		"BREADTH", "BUFFER_POOL", "BUILD", "BULK", "BY", "BYTE", "CACHE", "CALL", 
		"CANONICAL", "CASCADE", "CASE", "CAST", "CERTIFICATE", "CHANGE", "CHARACTER", 
		"CHAR", "CHAR_CS", "CHECK", "CHR", "CLASS", "C_LETTER", "CLOB", "CLOSE", 
		"CLUSTER", "COALESCE", "COLLECT", "COLUMN", "COLUMNS", "COMMENT", "COMMIT", 
		"COMMITTED", "COMPATIBILITY", "COMPILE", "COMPOUND", "COMPRESS", "COMPUTE", 
		"CONNECT_BY_ROOT", "CONNECT", "CONSTANT", "CONSTRAINT", "CONSTRAINTS", 
		"CONSTRUCTOR", "CONTAINER", "CONTAINER_DATA", "CONTENT", "CONTEXT", "CONTINUE", 
		"CONVERT", "CORRUPT_XID_ALL", "CORRUPT_XID", "COST", "COUNT", "CREATE", 
		"CREATION", "CROSS", "CUBE", "CURRENT", "CURRENT_USER", "CURSOR", "CUSTOMDATUM", 
		"CYCLE", "DATABASE", "DATA", "DATAFILE", "DATE", "DAY", "DBA_RECYCLEBIN", 
		"DB_ROLE_CHANGE", "DBTIMEZONE", "DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", 
		"DECOMPOSE", "DECREMENT", "DEFAULT", "DEFAULTS", "DEFERRABLE", "DEFERRED", 
		"DEFINER", "DELEGATE", "DELETE", "DEPTH", "DESC", "DETERMINISTIC", "DICTIONARY", 
		"DIMENSION", "DIRECTORY", "DISABLE", "DISASSOCIATE", "DISTINCT", "DISTINGUISHED", 
		"DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", "EACH", "EDITION", 
		"EDITIONING", "EDITIONS", "ELEMENT", "ELSE", "ELSIF", "EMPTY", "ENABLE", 
		"ENCODING", "ENCRYPT", "ENCRYPTION", "END", "ENTERPRISE", "ENTITYESCAPING", 
		"ERR", "ERRORS", "ESCAPE", "EVALNAME", "EXCEPT", "EXCEPTION", "EXCEPTION_INIT", 
		"EXCEPTIONS", "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXEMPT", "EXISTS", "EXIT", 
		"EXPIRE", "EXPLAIN", "EXTENT", "EXTERNAL", "EXTERNALLY", "EXTRACT", "FAILURE", 
		"FALSE", "FETCH", "FILESYSTEM_LIKE_LOGGING", "FINAL", "FIRST", "FIRST_VALUE", 
		"FLASHBACK", "FLASH_CACHE", "FLOAT", "FOLDER", "FOLLOWING", "FOLLOWS", 
		"FORALL", "FORCE", "FOREIGN", "FOR", "FREELIST", "FREELISTS", "FROM", 
		"FULL", "FUNCTION", "GLOBAL", "GLOBALLY", "GOTO", "GRANT", "GROUP", "GROUPING", 
		"GROUPS", "GUARANTEE", "HASH", "HAVING", "HIDE", "HIERARCHY", "HIGH", 
		"HOUR", "IDENTIFIED", "IDENTIFIER", "ID", "IF", "IGNORE", "IMMEDIATE", 
		"INCLUDE", "INCLUDING", "INCREMENT", "INDENT", "INDEXED", "INDEX", "INDEXTYPE", 
		"INDICATOR", "INDICES", "INFINITE", "INHERIT", "IN", "INITIAL", "INITIALLY", 
		"INITRANS", "INLINE", "INNER", "INOUT", "INSERT", "INSTANTIABLE", "INSTEAD", 
		"INTEGER", "INTERSECT", "INTERVAL", "INT", "INTO", "INVALIDATE", "IS", 
		"ISOLATION", "ITERATE", "JAVA", "JOB", "JOIN", "KEEP", "KEY", "LANGUAGE", 
		"LAST", "LAST_VALUE", "LEADING", "LEFT", "LESS", "LEVEL", "LIBRARY", "LIKE2", 
		"LIKE4", "LIKEC", "LIKE", "LIMIT", "LINK", "LIST", "LOCAL", "LOCKED", 
		"LOCK", "LOGGING", "LOG", "LOGMINING", "LOGOFF", "LOGON", "LONG", "LOOP", 
		"LOW", "MAIN", "MANAGE", "MANAGEMENT", "MANUAL", "MAP", "MATCHED", "MATERIALIZED", 
		"MAXSIZE", "MAXVALUE", "MEASURE", "MEASURES", "MEMBER", "MERGE", "MINEXTENTS", 
		"MINIMUM", "MINING", "MINUS", "MINUTE", "MINVALUE", "MLSLABEL", "MODEL", 
		"MODE", "MODIFY", "MONTH", "MOVEMENT", "MULTISET", "NAME", "NAN", "NATURAL", 
		"NATURALN", "NAV", "NCHAR_CS", "NCHAR", "NCLOB", "NESTED", "NEW", "NEXT", 
		"NOAUDIT", "NOCACHE", "NOCOMPRESS", "NOCOPY", "NOCYCLE", "NOENTITYESCAPING", 
		"NOGUARANTEE", "NOLOGGING", "NOMAXVALUE", "NOMINVALUE", "NONE", "NO", 
		"NOORDER", "NORELY", "NOSCHEMACHECK", "NOTIFICATION", "NOT", "NOVALIDATE", 
		"NOWAIT", "NULL", "NULLS", "NUMBER", "NUMERIC", "NVARCHAR2", "OBJECT", 
		"OFFLINE", "OFF", "OF", "OID", "OLD", "OLTP", "ONLINE", "ONLY", "ON", 
		"OPEN", "OPERATOR", "OPTIMAL", "OPTION", "ORADATA", "ORDER", "ORDINALITY", 
		"OR", "OSERROR", "OUTER", "OUTLINE", "OUT", "OVER", "OVERRIDING", "PACKAGE", 
		"PARALLEL_ENABLE", "PARAMETERS", "PARENT", "PARTITION", "PASSING", "PASSWORD", 
		"PATH", "PCTFREE", "PCTINCREASE", "PCTUSED", "PERCENT_FOUND", "PERCENT_ISOPEN", 
		"PERCENT_NOTFOUND", "PERCENT_ROWCOUNT", "PERCENT_ROWTYPE", "PERCENT_TYPE", 
		"PIPELINED", "PIPE", "PIVOT", "PLAN", "PLS_INTEGER", "PLUGGABLE", "POLICY", 
		"POSITIVEN", "POSITIVE", "PRAGMA", "PRECEDING", "PRECISION", "PRESENT", 
		"PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGE", "PRIVILEGES", "PROCEDURE", 
		"PROCESS", "PROFILE", "PROGRAM", "PUBLIC", "PURGE", "QUERY", "QUOTA", 
		"RAISE", "RANGE", "RAW", "READ", "REAL", "RECORD", "RECYCLE", "REDACTION", 
		"REFERENCE", "REFERENCES", "REFERENCING", "REF", "REFRESH", "REJECT", 
		"RELIES_ON", "RELY", "REMOVE", "RENAME", "REPLACE", "REQUIRED", "RESOURCE", 
		"RESPECT", "RESTRICTED", "RESTRICT_REFERENCES", "RESULT_CACHE", "RESULT", 
		"RESUMABLE", "RETENTION", "RETURNING", "RETURN", "REUSE", "REVERSE", "REVOKE", 
		"REWRITE", "RIGHT", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", "ROWID", "ROW", 
		"ROWS", "RULES", "SALT", "SAMPLE", "SAVEPOINT", "SAVE", "SCHEDULER", "SCHEMACHECK", 
		"SCHEMA", "SCN", "SEARCH", "SECOND", "SEED", "SEGMENT", "SELECT", "SELF", 
		"SEQUENCE", "SEQUENTIAL", "SERIALIZABLE", "SERIALLY_REUSABLE", "SERVERERROR", 
		"SESSION", "SESSIONTIMEZONE", "SET", "SETS", "SETTINGS", "SHARE", "SHOW", 
		"SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", "SINGLE", "SIZE", 
		"SKIP_", "SMALLFILE", "SMALLINT", "SNAPSHOT", "SOME", "SORT", "SOURCE", 
		"SPACE_KEYWORD", "SPECIFICATION", "SQLDATA", "SQLERROR", "SQL", "STANDALONE", 
		"START", "STARTUP", "STATEMENT_ID", "STATEMENT", "STATIC", "STATISTICS", 
		"STORAGE", "STORE", "STRING", "SUBMULTISET", "SUBPARTITION", "SUBSTITUTABLE", 
		"SUBTYPE", "SUCCESS", "SUSPEND", "SYNONYM", "SYSBACKUP", "SYSDATE", "SYSDBA", 
		"SYSDG", "SYSGUID", "SYSKM", "SYSOPER", "TABLESPACE", "TABLE", "TEMPFILE", 
		"TEMPORARY", "THAN", "THEN", "THE", "THROUGH", "TIMESTAMP_LTZ_UNCONSTRAINED", 
		"TIMESTAMP", "TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", 
		"TIME", "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TIMEZONE_REGION", 
		"TO", "TRAILING", "TRANSACTION", "TRANSLATE", "TRANSLATION", "TREAT", 
		"TRIGGER", "TRUE", "TRUNCATE", "TUNING", "TYPE", "UNBOUNDED", "UNDER", 
		"UNDO", "UNIFORM", "UNION", "UNIQUE", "UNLIMITED", "UNLOCK", "UNPIVOT", 
		"UNTIL", "UPDATED", "UPDATE", "UPSERT", "UROWID", "USERS", "USER", "USE", 
		"USING", "VALIDATE", "VALUES", "VALUE", "VARCHAR2", "VARCHAR", "VARIABLE", 
		"VARRAY", "VARYING", "VERSIONS", "VERSION", "VIEW", "WAIT", "WARNING", 
		"WELLFORMED", "WHENEVER", "WHEN", "WHERE", "WHILE", "WITHIN", "WITH", 
		"WORK", "WRITE", "XMLAGG", "XMLATTRIBUTES", "XMLCAST", "XMLCOLATTVAL", 
		"XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", 
		"XMLQUERY", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "XML", "YEAR", "YES", 
		"YMINTERVAL_UNCONSTRAINED", "ZONE", "PREDICTION", "PREDICTION_BOUNDS", 
		"PREDICTION_COST", "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", "PREDICTION_SET", 
		"CUME_DIST", "DENSE_RANK", "LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", 
		"PERCENTILE_DISC", "RANK", "AVG", "CORR", "COVAR_", "DECODE", "LAG", "LEAD", 
		"MAX", "MEDIAN", "MIN", "NTILE", "NVL", "RATIO_TO_REPORT", "REGR_", "ROUND", 
		"ROW_NUMBER", "SUBSTR", "TO_CHAR", "TRIM", "SUM", "STDDEV", "VAR_", "VARIANCE", 
		"LEAST", "GREATEST", "TO_DATE", "NATIONAL_CHAR_STRING_LIT", "BIT_STRING_LIT", 
		"HEX_STRING_LIT", "DOUBLE_PERIOD", "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
		"CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", "LEFT_PAREN", "RIGHT_PAREN", 
		"DOUBLE_ASTERISK", "ASTERISK", "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS", 
		"AT_SIGN", "ASSIGN_OP", "BINDVAR", "NOT_EQUAL_OP", "CARRET_OPERATOR_PART", 
		"TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", "GREATER_THAN_OP", 
		"LESS_THAN_OP", "COLON", "SEMICOLON", "BAR", "EQUALS_OP", "LEFT_BRACKET", 
		"RIGHT_BRACKET", "INTRODUCER", "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
		"PROMPT", "START_CMD", "REGULAR_ID", "ZV"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "oracle.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static oracleParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public oracleParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public oracleParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Sql_scriptContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(oracleParser.Eof, 0); }
		public Unit_statementContext[] unit_statement() {
			return GetRuleContexts<Unit_statementContext>();
		}
		public Unit_statementContext unit_statement(int i) {
			return GetRuleContext<Unit_statementContext>(i);
		}
		public Sql_plus_commandContext[] sql_plus_command() {
			return GetRuleContexts<Sql_plus_commandContext>();
		}
		public Sql_plus_commandContext sql_plus_command(int i) {
			return GetRuleContext<Sql_plus_commandContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(oracleParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(oracleParser.SEMICOLON, i);
		}
		public Sql_scriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_script; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_script(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_scriptContext sql_script() {
		Sql_scriptContext _localctx = new Sql_scriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_sql_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 895;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DROP - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GRANT - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSERT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOCK - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELECT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPDATE - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WITH - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (COMMA - 643)) | (1L << (SOLIDUS - 643)) | (1L << (PROMPT - 643)) | (1L << (START_CMD - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				{
				State = 888;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 886; unit_statement();
					}
					break;
				case 2:
					{
					State = 887; sql_plus_command();
					}
					break;
				}
				State = 891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 890; Match(SEMICOLON);
					}
				}

				}
				}
				State = 897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 898; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unit_statementContext : ParserRuleContext {
		public Transaction_control_statementsContext transaction_control_statements() {
			return GetRuleContext<Transaction_control_statementsContext>(0);
		}
		public Alter_functionContext alter_function() {
			return GetRuleContext<Alter_functionContext>(0);
		}
		public Alter_packageContext alter_package() {
			return GetRuleContext<Alter_packageContext>(0);
		}
		public Alter_procedureContext alter_procedure() {
			return GetRuleContext<Alter_procedureContext>(0);
		}
		public Alter_sequenceContext alter_sequence() {
			return GetRuleContext<Alter_sequenceContext>(0);
		}
		public Alter_triggerContext alter_trigger() {
			return GetRuleContext<Alter_triggerContext>(0);
		}
		public Alter_typeContext alter_type() {
			return GetRuleContext<Alter_typeContext>(0);
		}
		public Alter_tableContext alter_table() {
			return GetRuleContext<Alter_tableContext>(0);
		}
		public Alter_indexContext alter_index() {
			return GetRuleContext<Alter_indexContext>(0);
		}
		public Alter_userContext alter_user() {
			return GetRuleContext<Alter_userContext>(0);
		}
		public Create_function_bodyContext create_function_body() {
			return GetRuleContext<Create_function_bodyContext>(0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return GetRuleContext<Create_procedure_bodyContext>(0);
		}
		public Create_packageContext create_package() {
			return GetRuleContext<Create_packageContext>(0);
		}
		public Create_package_bodyContext create_package_body() {
			return GetRuleContext<Create_package_bodyContext>(0);
		}
		public Create_indexContext create_index() {
			return GetRuleContext<Create_indexContext>(0);
		}
		public Create_tableContext create_table() {
			return GetRuleContext<Create_tableContext>(0);
		}
		public Create_tablespaceContext create_tablespace() {
			return GetRuleContext<Create_tablespaceContext>(0);
		}
		public Create_viewContext create_view() {
			return GetRuleContext<Create_viewContext>(0);
		}
		public Create_userContext create_user() {
			return GetRuleContext<Create_userContext>(0);
		}
		public Create_sequenceContext create_sequence() {
			return GetRuleContext<Create_sequenceContext>(0);
		}
		public Create_triggerContext create_trigger() {
			return GetRuleContext<Create_triggerContext>(0);
		}
		public Create_typeContext create_type() {
			return GetRuleContext<Create_typeContext>(0);
		}
		public Create_synonymContext create_synonym() {
			return GetRuleContext<Create_synonymContext>(0);
		}
		public Drop_functionContext drop_function() {
			return GetRuleContext<Drop_functionContext>(0);
		}
		public Drop_packageContext drop_package() {
			return GetRuleContext<Drop_packageContext>(0);
		}
		public Drop_procedureContext drop_procedure() {
			return GetRuleContext<Drop_procedureContext>(0);
		}
		public Drop_sequenceContext drop_sequence() {
			return GetRuleContext<Drop_sequenceContext>(0);
		}
		public Drop_triggerContext drop_trigger() {
			return GetRuleContext<Drop_triggerContext>(0);
		}
		public Drop_typeContext drop_type() {
			return GetRuleContext<Drop_typeContext>(0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return GetRuleContext<Data_manipulation_language_statementsContext>(0);
		}
		public Drop_tableContext drop_table() {
			return GetRuleContext<Drop_tableContext>(0);
		}
		public Drop_indexContext drop_index() {
			return GetRuleContext<Drop_indexContext>(0);
		}
		public Comment_on_columnContext comment_on_column() {
			return GetRuleContext<Comment_on_columnContext>(0);
		}
		public Comment_on_tableContext comment_on_table() {
			return GetRuleContext<Comment_on_tableContext>(0);
		}
		public Anonymous_blockContext anonymous_block() {
			return GetRuleContext<Anonymous_blockContext>(0);
		}
		public Grant_statementContext grant_statement() {
			return GetRuleContext<Grant_statementContext>(0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnit_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unit_statementContext unit_statement() {
		Unit_statementContext _localctx = new Unit_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_unit_statement);
		try {
			State = 936;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 900; transaction_control_statements();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 901; alter_function();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 902; alter_package();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 903; alter_procedure();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 904; alter_sequence();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 905; alter_trigger();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 906; alter_type();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 907; alter_table();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 908; alter_index();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 909; alter_user();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 910; create_function_body();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 911; create_procedure_body();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 912; create_package();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 913; create_package_body();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 914; create_index();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 915; create_table();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 916; create_tablespace();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 917; create_view();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 918; create_user();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 919; create_sequence();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 920; create_trigger();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 921; create_type();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 922; create_synonym();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 923; drop_function();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 924; drop_package();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 925; drop_procedure();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 926; drop_sequence();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 927; drop_trigger();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 928; drop_type();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 929; data_manipulation_language_statements();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 930; drop_table();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 931; drop_index();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 932; comment_on_column();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 933; comment_on_table();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 934; anonymous_block();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 935; grant_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_functionContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(oracleParser.DROP, 0); }
		public ITerminalNode FUNCTION() { return GetToken(oracleParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_functionContext drop_function() {
		Drop_functionContext _localctx = new Drop_functionContext(Context, State);
		EnterRule(_localctx, 4, RULE_drop_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 938; Match(DROP);
			State = 939; Match(FUNCTION);
			State = 940; function_name();
			State = 941; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_functionContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(oracleParser.ALTER, 0); }
		public ITerminalNode FUNCTION() { return GetToken(oracleParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode COMPILE() { return GetToken(oracleParser.COMPILE, 0); }
		public ITerminalNode DEBUG() { return GetToken(oracleParser.DEBUG, 0); }
		public Compiler_parameters_clauseContext[] compiler_parameters_clause() {
			return GetRuleContexts<Compiler_parameters_clauseContext>();
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return GetRuleContext<Compiler_parameters_clauseContext>(i);
		}
		public ITerminalNode REUSE() { return GetToken(oracleParser.REUSE, 0); }
		public ITerminalNode SETTINGS() { return GetToken(oracleParser.SETTINGS, 0); }
		public Alter_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_functionContext alter_function() {
		Alter_functionContext _localctx = new Alter_functionContext(Context, State);
		EnterRule(_localctx, 6, RULE_alter_function);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 943; Match(ALTER);
			State = 944; Match(FUNCTION);
			State = 945; function_name();
			State = 946; Match(COMPILE);
			State = 948;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 947; Match(DEBUG);
				}
				break;
			}
			State = 953;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 950; compiler_parameters_clause();
					}
					} 
				}
				State = 955;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 958;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REUSE) {
				{
				State = 956; Match(REUSE);
				State = 957; Match(SETTINGS);
				}
			}

			State = 960; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_function_bodyContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(oracleParser.CREATE, 0); }
		public ITerminalNode FUNCTION() { return GetToken(oracleParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(oracleParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode USING() { return GetToken(oracleParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return GetRuleContext<Implementation_type_nameContext>(0);
		}
		public ITerminalNode OR() { return GetToken(oracleParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(oracleParser.REPLACE, 0); }
		public Invoker_rights_clauseContext[] invoker_rights_clause() {
			return GetRuleContexts<Invoker_rights_clauseContext>();
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return GetRuleContext<Invoker_rights_clauseContext>(i);
		}
		public Parallel_enable_clauseContext[] parallel_enable_clause() {
			return GetRuleContexts<Parallel_enable_clauseContext>();
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return GetRuleContext<Parallel_enable_clauseContext>(i);
		}
		public Result_cache_clauseContext[] result_cache_clause() {
			return GetRuleContexts<Result_cache_clauseContext>();
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return GetRuleContext<Result_cache_clauseContext>(i);
		}
		public ITerminalNode[] DETERMINISTIC() { return GetTokens(oracleParser.DETERMINISTIC); }
		public ITerminalNode DETERMINISTIC(int i) {
			return GetToken(oracleParser.DETERMINISTIC, i);
		}
		public ITerminalNode PIPELINED() { return GetToken(oracleParser.PIPELINED, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(oracleParser.AGGREGATE, 0); }
		public ITerminalNode IS() { return GetToken(oracleParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode DECLARE() { return GetToken(oracleParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Create_function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_function_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_function_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_function_bodyContext create_function_body() {
		Create_function_bodyContext _localctx = new Create_function_bodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_create_function_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 962; Match(CREATE);
			State = 965;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 963; Match(OR);
				State = 964; Match(REPLACE);
				}
			}

			State = 967; Match(FUNCTION);
			State = 968; function_name();
			State = 980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 969; Match(LEFT_PAREN);
				State = 974;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 971;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 970; Match(COMMA);
						}
					}

					State = 973; parameter();
					}
					}
					State = 976;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (COMMA - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
				State = 978; Match(RIGHT_PAREN);
				}
			}

			State = 982; Match(RETURN);
			State = 983; type_spec();
			State = 990;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				State = 988;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUTHID:
					{
					State = 984; invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					State = 985; parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					State = 986; result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					State = 987; Match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 992;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1010;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				{
				State = 994;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PIPELINED) {
					{
					State = 993; Match(PIPELINED);
					}
				}

				State = 996;
				_la = TokenStream.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1005;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 998;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DECLARE) {
						{
						State = 997; Match(DECLARE);
						}
					}

					State = 1001;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROCEDURE - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
						{
						State = 1000; seq_of_declare_specs();
						}
					}

					State = 1003; body();
					}
					break;
				case 2:
					{
					State = 1004; call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				State = 1007;
				_la = TokenStream.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1008; Match(USING);
				State = 1009; implementation_type_name();
				}
				break;
			}
			State = 1012; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parallel_enable_clauseContext : ParserRuleContext {
		public ITerminalNode PARALLEL_ENABLE() { return GetToken(oracleParser.PARALLEL_ENABLE, 0); }
		public Partition_by_clauseContext partition_by_clause() {
			return GetRuleContext<Partition_by_clauseContext>(0);
		}
		public Parallel_enable_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parallel_enable_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParallel_enable_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parallel_enable_clauseContext parallel_enable_clause() {
		Parallel_enable_clauseContext _localctx = new Parallel_enable_clauseContext(Context, State);
		EnterRule(_localctx, 10, RULE_parallel_enable_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1014; Match(PARALLEL_ENABLE);
			State = 1016;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1015; partition_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_by_clauseContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(oracleParser.PARTITION, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BY() { return GetToken(oracleParser.BY, 0); }
		public ITerminalNode ANY() { return GetToken(oracleParser.ANY, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(oracleParser.HASH, 0); }
		public ITerminalNode RANGE() { return GetToken(oracleParser.RANGE, 0); }
		public ITerminalNode LIST() { return GetToken(oracleParser.LIST, 0); }
		public Streaming_clauseContext streaming_clause() {
			return GetRuleContext<Streaming_clauseContext>(0);
		}
		public Partition_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_by_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartition_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partition_by_clauseContext partition_by_clause() {
		Partition_by_clauseContext _localctx = new Partition_by_clauseContext(Context, State);
		EnterRule(_localctx, 12, RULE_partition_by_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1018; Match(LEFT_PAREN);
			State = 1019; Match(PARTITION);
			State = 1020; expression();
			State = 1021; Match(BY);
			State = 1025;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ANY:
				{
				State = 1022; Match(ANY);
				}
				break;
			case HASH:
			case LIST:
			case RANGE:
				{
				State = 1023;
				_la = TokenStream.LA(1);
				if ( !(_la==HASH || _la==LIST || _la==RANGE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1024; paren_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1028;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER || _la==ORDER) {
				{
				State = 1027; streaming_clause();
				}
			}

			State = 1030; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_cache_clauseContext : ParserRuleContext {
		public ITerminalNode RESULT_CACHE() { return GetToken(oracleParser.RESULT_CACHE, 0); }
		public Relies_on_partContext relies_on_part() {
			return GetRuleContext<Relies_on_partContext>(0);
		}
		public Result_cache_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_cache_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult_cache_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Result_cache_clauseContext result_cache_clause() {
		Result_cache_clauseContext _localctx = new Result_cache_clauseContext(Context, State);
		EnterRule(_localctx, 14, RULE_result_cache_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1032; Match(RESULT_CACHE);
			State = 1034;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RELIES_ON) {
				{
				State = 1033; relies_on_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relies_on_partContext : ParserRuleContext {
		public ITerminalNode RELIES_ON() { return GetToken(oracleParser.RELIES_ON, 0); }
		public Tableview_nameContext[] tableview_name() {
			return GetRuleContexts<Tableview_nameContext>();
		}
		public Tableview_nameContext tableview_name(int i) {
			return GetRuleContext<Tableview_nameContext>(i);
		}
		public Relies_on_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relies_on_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelies_on_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relies_on_partContext relies_on_part() {
		Relies_on_partContext _localctx = new Relies_on_partContext(Context, State);
		EnterRule(_localctx, 16, RULE_relies_on_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1036; Match(RELIES_ON);
			State = 1037; Match(LEFT_PAREN);
			State = 1038; tableview_name();
			State = 1043;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1039; Match(COMMA);
				State = 1040; tableview_name();
				}
				}
				State = 1045;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1046; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Streaming_clauseContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BY() { return GetToken(oracleParser.BY, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode ORDER() { return GetToken(oracleParser.ORDER, 0); }
		public ITerminalNode CLUSTER() { return GetToken(oracleParser.CLUSTER, 0); }
		public Streaming_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_streaming_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStreaming_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Streaming_clauseContext streaming_clause() {
		Streaming_clauseContext _localctx = new Streaming_clauseContext(Context, State);
		EnterRule(_localctx, 18, RULE_streaming_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1048;
			_la = TokenStream.LA(1);
			if ( !(_la==CLUSTER || _la==ORDER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1049; expression();
			State = 1050; Match(BY);
			State = 1051; paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_packageContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(oracleParser.DROP, 0); }
		public ITerminalNode PACKAGE() { return GetToken(oracleParser.PACKAGE, 0); }
		public Package_nameContext package_name() {
			return GetRuleContext<Package_nameContext>(0);
		}
		public ITerminalNode BODY() { return GetToken(oracleParser.BODY, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public Drop_packageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_package; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_package(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_packageContext drop_package() {
		Drop_packageContext _localctx = new Drop_packageContext(Context, State);
		EnterRule(_localctx, 20, RULE_drop_package);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1053; Match(DROP);
			State = 1054; Match(PACKAGE);
			State = 1056;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 1055; Match(BODY);
				}
				break;
			}
			State = 1061;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 1058; schema_object_name();
				State = 1059; Match(PERIOD);
				}
				break;
			}
			State = 1063; package_name();
			State = 1064; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_packageContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(oracleParser.ALTER, 0); }
		public ITerminalNode[] PACKAGE() { return GetTokens(oracleParser.PACKAGE); }
		public ITerminalNode PACKAGE(int i) {
			return GetToken(oracleParser.PACKAGE, i);
		}
		public Package_nameContext package_name() {
			return GetRuleContext<Package_nameContext>(0);
		}
		public ITerminalNode COMPILE() { return GetToken(oracleParser.COMPILE, 0); }
		public ITerminalNode DEBUG() { return GetToken(oracleParser.DEBUG, 0); }
		public Compiler_parameters_clauseContext[] compiler_parameters_clause() {
			return GetRuleContexts<Compiler_parameters_clauseContext>();
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return GetRuleContext<Compiler_parameters_clauseContext>(i);
		}
		public ITerminalNode REUSE() { return GetToken(oracleParser.REUSE, 0); }
		public ITerminalNode SETTINGS() { return GetToken(oracleParser.SETTINGS, 0); }
		public ITerminalNode BODY() { return GetToken(oracleParser.BODY, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(oracleParser.SPECIFICATION, 0); }
		public Alter_packageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_package; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_package(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_packageContext alter_package() {
		Alter_packageContext _localctx = new Alter_packageContext(Context, State);
		EnterRule(_localctx, 22, RULE_alter_package);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1066; Match(ALTER);
			State = 1067; Match(PACKAGE);
			State = 1068; package_name();
			State = 1069; Match(COMPILE);
			State = 1071;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 1070; Match(DEBUG);
				}
				break;
			}
			State = 1074;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 1073;
				_la = TokenStream.LA(1);
				if ( !(_la==BODY || _la==PACKAGE || _la==SPECIFICATION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1079;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1076; compiler_parameters_clause();
					}
					} 
				}
				State = 1081;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			State = 1084;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REUSE) {
				{
				State = 1082; Match(REUSE);
				State = 1083; Match(SETTINGS);
				}
			}

			State = 1086; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_packageContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(oracleParser.CREATE, 0); }
		public ITerminalNode PACKAGE() { return GetToken(oracleParser.PACKAGE, 0); }
		public Package_nameContext[] package_name() {
			return GetRuleContexts<Package_nameContext>();
		}
		public Package_nameContext package_name(int i) {
			return GetRuleContext<Package_nameContext>(i);
		}
		public ITerminalNode END() { return GetToken(oracleParser.END, 0); }
		public ITerminalNode IS() { return GetToken(oracleParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public ITerminalNode OR() { return GetToken(oracleParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(oracleParser.REPLACE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return GetRuleContext<Invoker_rights_clauseContext>(0);
		}
		public Package_obj_specContext[] package_obj_spec() {
			return GetRuleContexts<Package_obj_specContext>();
		}
		public Package_obj_specContext package_obj_spec(int i) {
			return GetRuleContext<Package_obj_specContext>(i);
		}
		public Create_packageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_package; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_package(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_packageContext create_package() {
		Create_packageContext _localctx = new Create_packageContext(Context, State);
		EnterRule(_localctx, 24, RULE_create_package);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1088; Match(CREATE);
			State = 1091;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1089; Match(OR);
				State = 1090; Match(REPLACE);
				}
			}

			State = 1093; Match(PACKAGE);
			State = 1097;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 1094; schema_object_name();
				State = 1095; Match(PERIOD);
				}
				break;
			}
			State = 1099; package_name();
			State = 1101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHID) {
				{
				State = 1100; invoker_rights_clause();
				}
			}

			State = 1103;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROCEDURE - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				{
				State = 1104; package_obj_spec();
				}
				}
				State = 1109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1110; Match(END);
			State = 1112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				State = 1111; package_name();
				}
			}

			State = 1114; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_package_bodyContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(oracleParser.CREATE, 0); }
		public ITerminalNode PACKAGE() { return GetToken(oracleParser.PACKAGE, 0); }
		public ITerminalNode BODY() { return GetToken(oracleParser.BODY, 0); }
		public Package_nameContext[] package_name() {
			return GetRuleContexts<Package_nameContext>();
		}
		public Package_nameContext package_name(int i) {
			return GetRuleContext<Package_nameContext>(i);
		}
		public ITerminalNode END() { return GetToken(oracleParser.END, 0); }
		public ITerminalNode IS() { return GetToken(oracleParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public ITerminalNode OR() { return GetToken(oracleParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(oracleParser.REPLACE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public Package_obj_bodyContext[] package_obj_body() {
			return GetRuleContexts<Package_obj_bodyContext>();
		}
		public Package_obj_bodyContext package_obj_body(int i) {
			return GetRuleContext<Package_obj_bodyContext>(i);
		}
		public ITerminalNode BEGIN() { return GetToken(oracleParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public Create_package_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_package_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_package_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_package_bodyContext create_package_body() {
		Create_package_bodyContext _localctx = new Create_package_bodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_create_package_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1116; Match(CREATE);
			State = 1119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1117; Match(OR);
				State = 1118; Match(REPLACE);
				}
			}

			State = 1121; Match(PACKAGE);
			State = 1122; Match(BODY);
			State = 1126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 1123; schema_object_name();
				State = 1124; Match(PERIOD);
				}
				break;
			}
			State = 1128; package_name();
			State = 1129;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROCEDURE - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				{
				State = 1130; package_obj_body();
				}
				}
				State = 1135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN) {
				{
				State = 1136; Match(BEGIN);
				State = 1137; seq_of_statements();
				}
			}

			State = 1140; Match(END);
			State = 1142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				State = 1141; package_name();
				}
			}

			State = 1144; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_obj_specContext : ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return GetRuleContext<Subtype_declarationContext>(0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return GetRuleContext<Cursor_declarationContext>(0);
		}
		public Exception_declarationContext exception_declaration() {
			return GetRuleContext<Exception_declarationContext>(0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return GetRuleContext<Pragma_declarationContext>(0);
		}
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Procedure_specContext procedure_spec() {
			return GetRuleContext<Procedure_specContext>(0);
		}
		public Function_specContext function_spec() {
			return GetRuleContext<Function_specContext>(0);
		}
		public Package_obj_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_obj_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_obj_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_obj_specContext package_obj_spec() {
		Package_obj_specContext _localctx = new Package_obj_specContext(Context, State);
		EnterRule(_localctx, 28, RULE_package_obj_spec);
		try {
			State = 1154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1146; variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1147; subtype_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1148; cursor_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1149; exception_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1150; pragma_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1151; type_declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1152; procedure_spec();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1153; function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_specContext : ParserRuleContext {
		public ITerminalNode PROCEDURE() { return GetToken(oracleParser.PROCEDURE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public Procedure_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_specContext procedure_spec() {
		Procedure_specContext _localctx = new Procedure_specContext(Context, State);
		EnterRule(_localctx, 30, RULE_procedure_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1156; Match(PROCEDURE);
			State = 1157; identifier();
			State = 1169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1158; Match(LEFT_PAREN);
				State = 1159; parameter();
				State = 1164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1160; Match(COMMA);
					State = 1161; parameter();
					}
					}
					State = 1166;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1167; Match(RIGHT_PAREN);
				}
			}

			State = 1171; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_specContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(oracleParser.FUNCTION, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(oracleParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode DETERMINISTIC() { return GetToken(oracleParser.DETERMINISTIC, 0); }
		public ITerminalNode RESULT_CACHE() { return GetToken(oracleParser.RESULT_CACHE, 0); }
		public Function_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_specContext function_spec() {
		Function_specContext _localctx = new Function_specContext(Context, State);
		EnterRule(_localctx, 32, RULE_function_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1173; Match(FUNCTION);
			State = 1174; identifier();
			State = 1186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1175; Match(LEFT_PAREN);
				State = 1176; parameter();
				State = 1181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1177; Match(COMMA);
					State = 1178; parameter();
					}
					}
					State = 1183;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1184; Match(RIGHT_PAREN);
				}
			}

			State = 1188; Match(RETURN);
			State = 1189; type_spec();
			State = 1191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DETERMINISTIC) {
				{
				State = 1190; Match(DETERMINISTIC);
				}
			}

			State = 1194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RESULT_CACHE) {
				{
				State = 1193; Match(RESULT_CACHE);
				}
			}

			State = 1196; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_obj_bodyContext : ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return GetRuleContext<Subtype_declarationContext>(0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return GetRuleContext<Cursor_declarationContext>(0);
		}
		public Exception_declarationContext exception_declaration() {
			return GetRuleContext<Exception_declarationContext>(0);
		}
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Procedure_bodyContext procedure_body() {
			return GetRuleContext<Procedure_bodyContext>(0);
		}
		public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public Procedure_specContext procedure_spec() {
			return GetRuleContext<Procedure_specContext>(0);
		}
		public Function_specContext function_spec() {
			return GetRuleContext<Function_specContext>(0);
		}
		public Package_obj_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_obj_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_obj_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_obj_bodyContext package_obj_body() {
		Package_obj_bodyContext _localctx = new Package_obj_bodyContext(Context, State);
		EnterRule(_localctx, 34, RULE_package_obj_body);
		try {
			State = 1207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1198; variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1199; subtype_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1200; cursor_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1201; exception_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1202; type_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1203; procedure_body();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1204; function_body();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1205; procedure_spec();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1206; function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_procedureContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(oracleParser.DROP, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(oracleParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_procedure; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_procedureContext drop_procedure() {
		Drop_procedureContext _localctx = new Drop_procedureContext(Context, State);
		EnterRule(_localctx, 36, RULE_drop_procedure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1209; Match(DROP);
			State = 1210; Match(PROCEDURE);
			State = 1211; procedure_name();
			State = 1212; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_procedureContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(oracleParser.ALTER, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(oracleParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public ITerminalNode COMPILE() { return GetToken(oracleParser.COMPILE, 0); }
		public ITerminalNode DEBUG() { return GetToken(oracleParser.DEBUG, 0); }
		public Compiler_parameters_clauseContext[] compiler_parameters_clause() {
			return GetRuleContexts<Compiler_parameters_clauseContext>();
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return GetRuleContext<Compiler_parameters_clauseContext>(i);
		}
		public ITerminalNode REUSE() { return GetToken(oracleParser.REUSE, 0); }
		public ITerminalNode SETTINGS() { return GetToken(oracleParser.SETTINGS, 0); }
		public Alter_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_procedure; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_procedureContext alter_procedure() {
		Alter_procedureContext _localctx = new Alter_procedureContext(Context, State);
		EnterRule(_localctx, 38, RULE_alter_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1214; Match(ALTER);
			State = 1215; Match(PROCEDURE);
			State = 1216; procedure_name();
			State = 1217; Match(COMPILE);
			State = 1219;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 1218; Match(DEBUG);
				}
				break;
			}
			State = 1224;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1221; compiler_parameters_clause();
					}
					} 
				}
				State = 1226;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			State = 1229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REUSE) {
				{
				State = 1227; Match(REUSE);
				State = 1228; Match(SETTINGS);
				}
			}

			State = 1231; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(oracleParser.FUNCTION, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(oracleParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode USING() { return GetToken(oracleParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return GetRuleContext<Implementation_type_nameContext>(0);
		}
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public Invoker_rights_clauseContext[] invoker_rights_clause() {
			return GetRuleContexts<Invoker_rights_clauseContext>();
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return GetRuleContext<Invoker_rights_clauseContext>(i);
		}
		public Parallel_enable_clauseContext[] parallel_enable_clause() {
			return GetRuleContexts<Parallel_enable_clauseContext>();
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return GetRuleContext<Parallel_enable_clauseContext>(i);
		}
		public Result_cache_clauseContext[] result_cache_clause() {
			return GetRuleContexts<Result_cache_clauseContext>();
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return GetRuleContext<Result_cache_clauseContext>(i);
		}
		public ITerminalNode[] DETERMINISTIC() { return GetTokens(oracleParser.DETERMINISTIC); }
		public ITerminalNode DETERMINISTIC(int i) {
			return GetToken(oracleParser.DETERMINISTIC, i);
		}
		public ITerminalNode PIPELINED() { return GetToken(oracleParser.PIPELINED, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(oracleParser.AGGREGATE, 0); }
		public ITerminalNode IS() { return GetToken(oracleParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode DECLARE() { return GetToken(oracleParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 40, RULE_function_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1233; Match(FUNCTION);
			State = 1234; identifier();
			State = 1246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1235; Match(LEFT_PAREN);
				State = 1236; parameter();
				State = 1241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1237; Match(COMMA);
					State = 1238; parameter();
					}
					}
					State = 1243;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1244; Match(RIGHT_PAREN);
				}
			}

			State = 1248; Match(RETURN);
			State = 1249; type_spec();
			State = 1256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				State = 1254;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUTHID:
					{
					State = 1250; invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					State = 1251; parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					State = 1252; result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					State = 1253; Match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				{
				State = 1260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PIPELINED) {
					{
					State = 1259; Match(PIPELINED);
					}
				}

				State = 1262;
				_la = TokenStream.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1271;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 1264;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DECLARE) {
						{
						State = 1263; Match(DECLARE);
						}
					}

					State = 1267;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROCEDURE - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
						{
						State = 1266; seq_of_declare_specs();
						}
					}

					State = 1269; body();
					}
					break;
				case 2:
					{
					State = 1270; call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				State = 1273;
				_la = TokenStream.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1274; Match(USING);
				State = 1275; implementation_type_name();
				}
				break;
			}
			State = 1278; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_bodyContext : ParserRuleContext {
		public ITerminalNode PROCEDURE() { return GetToken(oracleParser.PROCEDURE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IS() { return GetToken(oracleParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode EXTERNAL() { return GetToken(oracleParser.EXTERNAL, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode DECLARE() { return GetToken(oracleParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Procedure_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_bodyContext procedure_body() {
		Procedure_bodyContext _localctx = new Procedure_bodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_procedure_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1280; Match(PROCEDURE);
			State = 1281; identifier();
			State = 1293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1282; Match(LEFT_PAREN);
				State = 1283; parameter();
				State = 1288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1284; Match(COMMA);
					State = 1285; parameter();
					}
					}
					State = 1290;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1291; Match(RIGHT_PAREN);
				}
			}

			State = 1295;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 1297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECLARE) {
					{
					State = 1296; Match(DECLARE);
					}
				}

				State = 1300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROCEDURE - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
					{
					State = 1299; seq_of_declare_specs();
					}
				}

				State = 1302; body();
				}
				break;
			case 2:
				{
				State = 1303; call_spec();
				}
				break;
			case 3:
				{
				State = 1304; Match(EXTERNAL);
				}
				break;
			}
			State = 1307; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_procedure_bodyContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(oracleParser.CREATE, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(oracleParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public ITerminalNode IS() { return GetToken(oracleParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode EXTERNAL() { return GetToken(oracleParser.EXTERNAL, 0); }
		public ITerminalNode OR() { return GetToken(oracleParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(oracleParser.REPLACE, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return GetRuleContext<Invoker_rights_clauseContext>(0);
		}
		public ITerminalNode DECLARE() { return GetToken(oracleParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_procedure_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_procedure_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_procedure_bodyContext create_procedure_body() {
		Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(Context, State);
		EnterRule(_localctx, 44, RULE_create_procedure_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1309; Match(CREATE);
			State = 1312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1310; Match(OR);
				State = 1311; Match(REPLACE);
				}
			}

			State = 1314; Match(PROCEDURE);
			State = 1315; procedure_name();
			State = 1327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1316; Match(LEFT_PAREN);
				State = 1317; parameter();
				State = 1322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1318; Match(COMMA);
					State = 1319; parameter();
					}
					}
					State = 1324;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1325; Match(RIGHT_PAREN);
				}
			}

			State = 1330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHID) {
				{
				State = 1329; invoker_rights_clause();
				}
			}

			State = 1332;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 1334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECLARE) {
					{
					State = 1333; Match(DECLARE);
					}
				}

				State = 1337;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROCEDURE - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
					{
					State = 1336; seq_of_declare_specs();
					}
				}

				State = 1339; body();
				}
				break;
			case 2:
				{
				State = 1340; call_spec();
				}
				break;
			case 3:
				{
				State = 1341; Match(EXTERNAL);
				}
				break;
			}
			State = 1344; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_triggerContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(oracleParser.DROP, 0); }
		public ITerminalNode TRIGGER() { return GetToken(oracleParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_trigger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_triggerContext drop_trigger() {
		Drop_triggerContext _localctx = new Drop_triggerContext(Context, State);
		EnterRule(_localctx, 46, RULE_drop_trigger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1346; Match(DROP);
			State = 1347; Match(TRIGGER);
			State = 1348; trigger_name();
			State = 1349; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_triggerContext : ParserRuleContext {
		public Trigger_nameContext alter_trigger_name;
		public Trigger_nameContext rename_trigger_name;
		public ITerminalNode ALTER() { return GetToken(oracleParser.ALTER, 0); }
		public ITerminalNode TRIGGER() { return GetToken(oracleParser.TRIGGER, 0); }
		public Trigger_nameContext[] trigger_name() {
			return GetRuleContexts<Trigger_nameContext>();
		}
		public Trigger_nameContext trigger_name(int i) {
			return GetRuleContext<Trigger_nameContext>(i);
		}
		public ITerminalNode RENAME() { return GetToken(oracleParser.RENAME, 0); }
		public ITerminalNode TO() { return GetToken(oracleParser.TO, 0); }
		public ITerminalNode COMPILE() { return GetToken(oracleParser.COMPILE, 0); }
		public ITerminalNode ENABLE() { return GetToken(oracleParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(oracleParser.DISABLE, 0); }
		public ITerminalNode DEBUG() { return GetToken(oracleParser.DEBUG, 0); }
		public Compiler_parameters_clauseContext[] compiler_parameters_clause() {
			return GetRuleContexts<Compiler_parameters_clauseContext>();
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return GetRuleContext<Compiler_parameters_clauseContext>(i);
		}
		public ITerminalNode REUSE() { return GetToken(oracleParser.REUSE, 0); }
		public ITerminalNode SETTINGS() { return GetToken(oracleParser.SETTINGS, 0); }
		public Alter_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_trigger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_triggerContext alter_trigger() {
		Alter_triggerContext _localctx = new Alter_triggerContext(Context, State);
		EnterRule(_localctx, 48, RULE_alter_trigger);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1351; Match(ALTER);
			State = 1352; Match(TRIGGER);
			State = 1353; _localctx.alter_trigger_name = trigger_name();
			State = 1372;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DISABLE:
			case ENABLE:
				{
				State = 1354;
				_la = TokenStream.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case RENAME:
				{
				State = 1355; Match(RENAME);
				State = 1356; Match(TO);
				State = 1357; _localctx.rename_trigger_name = trigger_name();
				}
				break;
			case COMPILE:
				{
				State = 1358; Match(COMPILE);
				State = 1360;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 1359; Match(DEBUG);
					}
					break;
				}
				State = 1365;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1362; compiler_parameters_clause();
						}
						} 
					}
					State = 1367;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
				}
				State = 1370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REUSE) {
					{
					State = 1368; Match(REUSE);
					State = 1369; Match(SETTINGS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1374; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_triggerContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(oracleParser.CREATE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(oracleParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		public Trigger_bodyContext trigger_body() {
			return GetRuleContext<Trigger_bodyContext>(0);
		}
		public Simple_dml_triggerContext simple_dml_trigger() {
			return GetRuleContext<Simple_dml_triggerContext>(0);
		}
		public Compound_dml_triggerContext compound_dml_trigger() {
			return GetRuleContext<Compound_dml_triggerContext>(0);
		}
		public Non_dml_triggerContext non_dml_trigger() {
			return GetRuleContext<Non_dml_triggerContext>(0);
		}
		public ITerminalNode OR() { return GetToken(oracleParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(oracleParser.REPLACE, 0); }
		public Trigger_follows_clauseContext trigger_follows_clause() {
			return GetRuleContext<Trigger_follows_clauseContext>(0);
		}
		public Trigger_when_clauseContext trigger_when_clause() {
			return GetRuleContext<Trigger_when_clauseContext>(0);
		}
		public ITerminalNode ENABLE() { return GetToken(oracleParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(oracleParser.DISABLE, 0); }
		public Create_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_trigger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_triggerContext create_trigger() {
		Create_triggerContext _localctx = new Create_triggerContext(Context, State);
		EnterRule(_localctx, 50, RULE_create_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1376; Match(CREATE);
			State = 1379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1377; Match(OR);
				State = 1378; Match(REPLACE);
				}
			}

			State = 1381; Match(TRIGGER);
			State = 1382; trigger_name();
			State = 1386;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				{
				State = 1383; simple_dml_trigger();
				}
				break;
			case 2:
				{
				State = 1384; compound_dml_trigger();
				}
				break;
			case 3:
				{
				State = 1385; non_dml_trigger();
				}
				break;
			}
			State = 1389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 1388; trigger_follows_clause();
				}
				break;
			}
			State = 1392;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				{
				State = 1391;
				_la = TokenStream.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 1394; trigger_when_clause();
				}
			}

			State = 1397; trigger_body();
			State = 1398; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_follows_clauseContext : ParserRuleContext {
		public ITerminalNode FOLLOWS() { return GetToken(oracleParser.FOLLOWS, 0); }
		public Trigger_nameContext[] trigger_name() {
			return GetRuleContexts<Trigger_nameContext>();
		}
		public Trigger_nameContext trigger_name(int i) {
			return GetRuleContext<Trigger_nameContext>(i);
		}
		public Trigger_follows_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_follows_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_follows_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_follows_clauseContext trigger_follows_clause() {
		Trigger_follows_clauseContext _localctx = new Trigger_follows_clauseContext(Context, State);
		EnterRule(_localctx, 52, RULE_trigger_follows_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1400; Match(FOLLOWS);
			State = 1401; trigger_name();
			State = 1406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1402; Match(COMMA);
				State = 1403; trigger_name();
				}
				}
				State = 1408;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_when_clauseContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(oracleParser.WHEN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Trigger_when_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_when_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_when_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_when_clauseContext trigger_when_clause() {
		Trigger_when_clauseContext _localctx = new Trigger_when_clauseContext(Context, State);
		EnterRule(_localctx, 54, RULE_trigger_when_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1409; Match(WHEN);
			State = 1410; Match(LEFT_PAREN);
			State = 1411; condition();
			State = 1412; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_dml_triggerContext : ParserRuleContext {
		public Dml_event_clauseContext dml_event_clause() {
			return GetRuleContext<Dml_event_clauseContext>(0);
		}
		public ITerminalNode BEFORE() { return GetToken(oracleParser.BEFORE, 0); }
		public ITerminalNode AFTER() { return GetToken(oracleParser.AFTER, 0); }
		public ITerminalNode INSTEAD() { return GetToken(oracleParser.INSTEAD, 0); }
		public ITerminalNode OF() { return GetToken(oracleParser.OF, 0); }
		public Referencing_clauseContext referencing_clause() {
			return GetRuleContext<Referencing_clauseContext>(0);
		}
		public For_each_rowContext for_each_row() {
			return GetRuleContext<For_each_rowContext>(0);
		}
		public Simple_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_dml_trigger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_dml_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_dml_triggerContext simple_dml_trigger() {
		Simple_dml_triggerContext _localctx = new Simple_dml_triggerContext(Context, State);
		EnterRule(_localctx, 56, RULE_simple_dml_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1418;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEFORE:
				{
				State = 1414; Match(BEFORE);
				}
				break;
			case AFTER:
				{
				State = 1415; Match(AFTER);
				}
				break;
			case INSTEAD:
				{
				State = 1416; Match(INSTEAD);
				State = 1417; Match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1420; dml_event_clause();
			State = 1422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 1421; referencing_clause();
				}
				break;
			}
			State = 1425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 1424; for_each_row();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_each_rowContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(oracleParser.FOR, 0); }
		public ITerminalNode EACH() { return GetToken(oracleParser.EACH, 0); }
		public ITerminalNode ROW() { return GetToken(oracleParser.ROW, 0); }
		public For_each_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_each_row; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_each_row(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_each_rowContext for_each_row() {
		For_each_rowContext _localctx = new For_each_rowContext(Context, State);
		EnterRule(_localctx, 58, RULE_for_each_row);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1427; Match(FOR);
			State = 1428; Match(EACH);
			State = 1429; Match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_dml_triggerContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(oracleParser.FOR, 0); }
		public Dml_event_clauseContext dml_event_clause() {
			return GetRuleContext<Dml_event_clauseContext>(0);
		}
		public Referencing_clauseContext referencing_clause() {
			return GetRuleContext<Referencing_clauseContext>(0);
		}
		public Compound_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_dml_trigger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_dml_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_dml_triggerContext compound_dml_trigger() {
		Compound_dml_triggerContext _localctx = new Compound_dml_triggerContext(Context, State);
		EnterRule(_localctx, 60, RULE_compound_dml_trigger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1431; Match(FOR);
			State = 1432; dml_event_clause();
			State = 1434;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				{
				State = 1433; referencing_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_dml_triggerContext : ParserRuleContext {
		public Non_dml_eventContext[] non_dml_event() {
			return GetRuleContexts<Non_dml_eventContext>();
		}
		public Non_dml_eventContext non_dml_event(int i) {
			return GetRuleContext<Non_dml_eventContext>(i);
		}
		public ITerminalNode ON() { return GetToken(oracleParser.ON, 0); }
		public ITerminalNode BEFORE() { return GetToken(oracleParser.BEFORE, 0); }
		public ITerminalNode AFTER() { return GetToken(oracleParser.AFTER, 0); }
		public ITerminalNode DATABASE() { return GetToken(oracleParser.DATABASE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(oracleParser.SCHEMA, 0); }
		public ITerminalNode[] OR() { return GetTokens(oracleParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(oracleParser.OR, i);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public Non_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_dml_trigger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_dml_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_dml_triggerContext non_dml_trigger() {
		Non_dml_triggerContext _localctx = new Non_dml_triggerContext(Context, State);
		EnterRule(_localctx, 62, RULE_non_dml_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1436;
			_la = TokenStream.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1437; non_dml_event();
			State = 1442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 1438; Match(OR);
				State = 1439; non_dml_event();
				}
				}
				State = 1444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1445; Match(ON);
			State = 1453;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 1446; Match(DATABASE);
				}
				break;
			case 2:
				{
				State = 1450;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
				case 1:
					{
					State = 1447; schema_name();
					State = 1448; Match(PERIOD);
					}
					break;
				}
				State = 1452; Match(SCHEMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_bodyContext : ParserRuleContext {
		public ITerminalNode COMPOUND() { return GetToken(oracleParser.COMPOUND, 0); }
		public ITerminalNode TRIGGER() { return GetToken(oracleParser.TRIGGER, 0); }
		public ITerminalNode CALL() { return GetToken(oracleParser.CALL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Trigger_blockContext trigger_block() {
			return GetRuleContext<Trigger_blockContext>(0);
		}
		public Trigger_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_bodyContext trigger_body() {
		Trigger_bodyContext _localctx = new Trigger_bodyContext(Context, State);
		EnterRule(_localctx, 64, RULE_trigger_body);
		try {
			State = 1460;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1455; Match(COMPOUND);
				State = 1456; Match(TRIGGER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1457; Match(CALL);
				State = 1458; identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1459; trigger_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Routine_clauseContext : ParserRuleContext {
		public Routine_nameContext routine_name() {
			return GetRuleContext<Routine_nameContext>(0);
		}
		public Function_argumentContext function_argument() {
			return GetRuleContext<Function_argumentContext>(0);
		}
		public Routine_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routine_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutine_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Routine_clauseContext routine_clause() {
		Routine_clauseContext _localctx = new Routine_clauseContext(Context, State);
		EnterRule(_localctx, 66, RULE_routine_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1462; routine_name();
			State = 1464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1463; function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_trigger_blockContext : ParserRuleContext {
		public ITerminalNode COMPOUND() { return GetToken(oracleParser.COMPOUND, 0); }
		public ITerminalNode TRIGGER() { return GetToken(oracleParser.TRIGGER, 0); }
		public ITerminalNode END() { return GetToken(oracleParser.END, 0); }
		public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Timing_point_sectionContext[] timing_point_section() {
			return GetRuleContexts<Timing_point_sectionContext>();
		}
		public Timing_point_sectionContext timing_point_section(int i) {
			return GetRuleContext<Timing_point_sectionContext>(i);
		}
		public Compound_trigger_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_trigger_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_trigger_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_trigger_blockContext compound_trigger_block() {
		Compound_trigger_blockContext _localctx = new Compound_trigger_blockContext(Context, State);
		EnterRule(_localctx, 68, RULE_compound_trigger_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1466; Match(COMPOUND);
			State = 1467; Match(TRIGGER);
			State = 1469;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 1468; seq_of_declare_specs();
				}
				break;
			}
			State = 1472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1471; timing_point_section();
				}
				}
				State = 1474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AFTER || _la==BEFORE );
			State = 1476; Match(END);
			State = 1477; trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Timing_point_sectionContext : ParserRuleContext {
		public IToken bk;
		public IToken ak;
		public ITerminalNode[] STATEMENT() { return GetTokens(oracleParser.STATEMENT); }
		public ITerminalNode STATEMENT(int i) {
			return GetToken(oracleParser.STATEMENT, i);
		}
		public ITerminalNode IS() { return GetToken(oracleParser.IS, 0); }
		public Trigger_blockContext trigger_block() {
			return GetRuleContext<Trigger_blockContext>(0);
		}
		public ITerminalNode[] BEFORE() { return GetTokens(oracleParser.BEFORE); }
		public ITerminalNode BEFORE(int i) {
			return GetToken(oracleParser.BEFORE, i);
		}
		public ITerminalNode[] EACH() { return GetTokens(oracleParser.EACH); }
		public ITerminalNode EACH(int i) {
			return GetToken(oracleParser.EACH, i);
		}
		public ITerminalNode[] ROW() { return GetTokens(oracleParser.ROW); }
		public ITerminalNode ROW(int i) {
			return GetToken(oracleParser.ROW, i);
		}
		public ITerminalNode[] AFTER() { return GetTokens(oracleParser.AFTER); }
		public ITerminalNode AFTER(int i) {
			return GetToken(oracleParser.AFTER, i);
		}
		public Timing_point_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timing_point_section; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTiming_point_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Timing_point_sectionContext timing_point_section() {
		Timing_point_sectionContext _localctx = new Timing_point_sectionContext(Context, State);
		EnterRule(_localctx, 70, RULE_timing_point_section);
		try {
			State = 1515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1479; _localctx.bk = Match(BEFORE);
				State = 1480; Match(STATEMENT);
				State = 1481; Match(IS);
				State = 1482; trigger_block();
				State = 1483; Match(BEFORE);
				State = 1484; Match(STATEMENT);
				State = 1485; Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1487; _localctx.bk = Match(BEFORE);
				State = 1488; Match(EACH);
				State = 1489; Match(ROW);
				State = 1490; Match(IS);
				State = 1491; trigger_block();
				State = 1492; Match(BEFORE);
				State = 1493; Match(EACH);
				State = 1494; Match(ROW);
				State = 1495; Match(SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1497; _localctx.ak = Match(AFTER);
				State = 1498; Match(STATEMENT);
				State = 1499; Match(IS);
				State = 1500; trigger_block();
				State = 1501; Match(AFTER);
				State = 1502; Match(STATEMENT);
				State = 1503; Match(SEMICOLON);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1505; _localctx.ak = Match(AFTER);
				State = 1506; Match(EACH);
				State = 1507; Match(ROW);
				State = 1508; Match(IS);
				State = 1509; trigger_block();
				State = 1510; Match(AFTER);
				State = 1511; Match(EACH);
				State = 1512; Match(ROW);
				State = 1513; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_dml_eventContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(oracleParser.ALTER, 0); }
		public ITerminalNode ANALYZE() { return GetToken(oracleParser.ANALYZE, 0); }
		public ITerminalNode ASSOCIATE() { return GetToken(oracleParser.ASSOCIATE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(oracleParser.STATISTICS, 0); }
		public ITerminalNode AUDIT() { return GetToken(oracleParser.AUDIT, 0); }
		public ITerminalNode COMMENT() { return GetToken(oracleParser.COMMENT, 0); }
		public ITerminalNode CREATE() { return GetToken(oracleParser.CREATE, 0); }
		public ITerminalNode DISASSOCIATE() { return GetToken(oracleParser.DISASSOCIATE, 0); }
		public ITerminalNode DROP() { return GetToken(oracleParser.DROP, 0); }
		public ITerminalNode GRANT() { return GetToken(oracleParser.GRANT, 0); }
		public ITerminalNode NOAUDIT() { return GetToken(oracleParser.NOAUDIT, 0); }
		public ITerminalNode RENAME() { return GetToken(oracleParser.RENAME, 0); }
		public ITerminalNode REVOKE() { return GetToken(oracleParser.REVOKE, 0); }
		public ITerminalNode TRUNCATE() { return GetToken(oracleParser.TRUNCATE, 0); }
		public ITerminalNode DDL() { return GetToken(oracleParser.DDL, 0); }
		public ITerminalNode STARTUP() { return GetToken(oracleParser.STARTUP, 0); }
		public ITerminalNode SHUTDOWN() { return GetToken(oracleParser.SHUTDOWN, 0); }
		public ITerminalNode DB_ROLE_CHANGE() { return GetToken(oracleParser.DB_ROLE_CHANGE, 0); }
		public ITerminalNode LOGON() { return GetToken(oracleParser.LOGON, 0); }
		public ITerminalNode LOGOFF() { return GetToken(oracleParser.LOGOFF, 0); }
		public ITerminalNode SERVERERROR() { return GetToken(oracleParser.SERVERERROR, 0); }
		public ITerminalNode SUSPEND() { return GetToken(oracleParser.SUSPEND, 0); }
		public ITerminalNode DATABASE() { return GetToken(oracleParser.DATABASE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(oracleParser.SCHEMA, 0); }
		public ITerminalNode FOLLOWS() { return GetToken(oracleParser.FOLLOWS, 0); }
		public Non_dml_eventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_dml_event; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_dml_event(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_dml_eventContext non_dml_event() {
		Non_dml_eventContext _localctx = new Non_dml_eventContext(Context, State);
		EnterRule(_localctx, 72, RULE_non_dml_event);
		try {
			State = 1543;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1517; Match(ALTER);
				}
				break;
			case ANALYZE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1518; Match(ANALYZE);
				}
				break;
			case ASSOCIATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1519; Match(ASSOCIATE);
				State = 1520; Match(STATISTICS);
				}
				break;
			case AUDIT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1521; Match(AUDIT);
				}
				break;
			case COMMENT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1522; Match(COMMENT);
				}
				break;
			case CREATE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1523; Match(CREATE);
				}
				break;
			case DISASSOCIATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1524; Match(DISASSOCIATE);
				State = 1525; Match(STATISTICS);
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1526; Match(DROP);
				}
				break;
			case GRANT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1527; Match(GRANT);
				}
				break;
			case NOAUDIT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1528; Match(NOAUDIT);
				}
				break;
			case RENAME:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1529; Match(RENAME);
				}
				break;
			case REVOKE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1530; Match(REVOKE);
				}
				break;
			case TRUNCATE:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1531; Match(TRUNCATE);
				}
				break;
			case DDL:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1532; Match(DDL);
				}
				break;
			case STARTUP:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1533; Match(STARTUP);
				}
				break;
			case SHUTDOWN:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1534; Match(SHUTDOWN);
				}
				break;
			case DB_ROLE_CHANGE:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1535; Match(DB_ROLE_CHANGE);
				}
				break;
			case LOGON:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1536; Match(LOGON);
				}
				break;
			case LOGOFF:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1537; Match(LOGOFF);
				}
				break;
			case SERVERERROR:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1538; Match(SERVERERROR);
				}
				break;
			case SUSPEND:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1539; Match(SUSPEND);
				}
				break;
			case DATABASE:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1540; Match(DATABASE);
				}
				break;
			case SCHEMA:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1541; Match(SCHEMA);
				}
				break;
			case FOLLOWS:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1542; Match(FOLLOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_event_clauseContext : ParserRuleContext {
		public Dml_event_elementContext[] dml_event_element() {
			return GetRuleContexts<Dml_event_elementContext>();
		}
		public Dml_event_elementContext dml_event_element(int i) {
			return GetRuleContext<Dml_event_elementContext>(i);
		}
		public ITerminalNode ON() { return GetToken(oracleParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode[] OR() { return GetTokens(oracleParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(oracleParser.OR, i);
		}
		public Dml_event_nested_clauseContext dml_event_nested_clause() {
			return GetRuleContext<Dml_event_nested_clauseContext>(0);
		}
		public Dml_event_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_event_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_event_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_event_clauseContext dml_event_clause() {
		Dml_event_clauseContext _localctx = new Dml_event_clauseContext(Context, State);
		EnterRule(_localctx, 74, RULE_dml_event_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1545; dml_event_element();
			State = 1550;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 1546; Match(OR);
				State = 1547; dml_event_element();
				}
				}
				State = 1552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1553; Match(ON);
			State = 1555;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 1554; dml_event_nested_clause();
				}
				break;
			}
			State = 1557; tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_event_elementContext : ParserRuleContext {
		public ITerminalNode DELETE() { return GetToken(oracleParser.DELETE, 0); }
		public ITerminalNode INSERT() { return GetToken(oracleParser.INSERT, 0); }
		public ITerminalNode UPDATE() { return GetToken(oracleParser.UPDATE, 0); }
		public ITerminalNode OF() { return GetToken(oracleParser.OF, 0); }
		public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		public Dml_event_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_event_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_event_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_event_elementContext dml_event_element() {
		Dml_event_elementContext _localctx = new Dml_event_elementContext(Context, State);
		EnterRule(_localctx, 76, RULE_dml_event_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1559;
			_la = TokenStream.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1562;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OF) {
				{
				State = 1560; Match(OF);
				State = 1561; column_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_event_nested_clauseContext : ParserRuleContext {
		public ITerminalNode NESTED() { return GetToken(oracleParser.NESTED, 0); }
		public ITerminalNode TABLE() { return GetToken(oracleParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode OF() { return GetToken(oracleParser.OF, 0); }
		public Dml_event_nested_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_event_nested_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_event_nested_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_event_nested_clauseContext dml_event_nested_clause() {
		Dml_event_nested_clauseContext _localctx = new Dml_event_nested_clauseContext(Context, State);
		EnterRule(_localctx, 78, RULE_dml_event_nested_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1564; Match(NESTED);
			State = 1565; Match(TABLE);
			State = 1566; tableview_name();
			State = 1567; Match(OF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Referencing_clauseContext : ParserRuleContext {
		public ITerminalNode REFERENCING() { return GetToken(oracleParser.REFERENCING, 0); }
		public Referencing_elementContext[] referencing_element() {
			return GetRuleContexts<Referencing_elementContext>();
		}
		public Referencing_elementContext referencing_element(int i) {
			return GetRuleContext<Referencing_elementContext>(i);
		}
		public Referencing_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referencing_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferencing_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Referencing_clauseContext referencing_clause() {
		Referencing_clauseContext _localctx = new Referencing_clauseContext(Context, State);
		EnterRule(_localctx, 80, RULE_referencing_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1569; Match(REFERENCING);
			State = 1571;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1570; referencing_element();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1573;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Referencing_elementContext : ParserRuleContext {
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(oracleParser.NEW, 0); }
		public ITerminalNode OLD() { return GetToken(oracleParser.OLD, 0); }
		public ITerminalNode PARENT() { return GetToken(oracleParser.PARENT, 0); }
		public Referencing_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referencing_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferencing_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Referencing_elementContext referencing_element() {
		Referencing_elementContext _localctx = new Referencing_elementContext(Context, State);
		EnterRule(_localctx, 82, RULE_referencing_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1575;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (NEW - 320)) | (1L << (OLD - 320)) | (1L << (PARENT - 320)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1576; column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_typeContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(oracleParser.DROP, 0); }
		public ITerminalNode TYPE() { return GetToken(oracleParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode BODY() { return GetToken(oracleParser.BODY, 0); }
		public ITerminalNode FORCE() { return GetToken(oracleParser.FORCE, 0); }
		public ITerminalNode VALIDATE() { return GetToken(oracleParser.VALIDATE, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_typeContext drop_type() {
		Drop_typeContext _localctx = new Drop_typeContext(Context, State);
		EnterRule(_localctx, 84, RULE_drop_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1578; Match(DROP);
			State = 1579; Match(TYPE);
			State = 1581;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				State = 1580; Match(BODY);
				}
				break;
			}
			State = 1583; type_name();
			State = 1585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE || _la==VALIDATE) {
				{
				State = 1584;
				_la = TokenStream.LA(1);
				if ( !(_la==FORCE || _la==VALIDATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1587; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_typeContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(oracleParser.ALTER, 0); }
		public ITerminalNode TYPE() { return GetToken(oracleParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Compile_type_clauseContext compile_type_clause() {
			return GetRuleContext<Compile_type_clauseContext>(0);
		}
		public Replace_type_clauseContext replace_type_clause() {
			return GetRuleContext<Replace_type_clauseContext>(0);
		}
		public Alter_method_specContext alter_method_spec() {
			return GetRuleContext<Alter_method_specContext>(0);
		}
		public Alter_collection_clausesContext alter_collection_clauses() {
			return GetRuleContext<Alter_collection_clausesContext>(0);
		}
		public Modifier_clauseContext modifier_clause() {
			return GetRuleContext<Modifier_clauseContext>(0);
		}
		public Dependent_handling_clauseContext dependent_handling_clause() {
			return GetRuleContext<Dependent_handling_clauseContext>(0);
		}
		public Alter_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_typeContext alter_type() {
		Alter_typeContext _localctx = new Alter_typeContext(Context, State);
		EnterRule(_localctx, 86, RULE_alter_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1589; Match(ALTER);
			State = 1590; Match(TYPE);
			State = 1591; type_name();
			State = 1597;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMPILE:
				{
				State = 1592; compile_type_clause();
				}
				break;
			case REPLACE:
				{
				State = 1593; replace_type_clause();
				}
				break;
			case ADD:
			case DROP:
				{
				State = 1594; alter_method_spec();
				}
				break;
			case MODIFY:
				{
				State = 1595; alter_collection_clauses();
				}
				break;
			case FINAL:
			case INSTANTIABLE:
			case NOT:
			case OVERRIDING:
				{
				State = 1596; modifier_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1600;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==INVALIDATE) {
				{
				State = 1599; dependent_handling_clause();
				}
			}

			State = 1602; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compile_type_clauseContext : ParserRuleContext {
		public ITerminalNode COMPILE() { return GetToken(oracleParser.COMPILE, 0); }
		public ITerminalNode DEBUG() { return GetToken(oracleParser.DEBUG, 0); }
		public Compiler_parameters_clauseContext[] compiler_parameters_clause() {
			return GetRuleContexts<Compiler_parameters_clauseContext>();
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return GetRuleContext<Compiler_parameters_clauseContext>(i);
		}
		public ITerminalNode REUSE() { return GetToken(oracleParser.REUSE, 0); }
		public ITerminalNode SETTINGS() { return GetToken(oracleParser.SETTINGS, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(oracleParser.SPECIFICATION, 0); }
		public ITerminalNode BODY() { return GetToken(oracleParser.BODY, 0); }
		public Compile_type_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compile_type_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompile_type_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compile_type_clauseContext compile_type_clause() {
		Compile_type_clauseContext _localctx = new Compile_type_clauseContext(Context, State);
		EnterRule(_localctx, 88, RULE_compile_type_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1604; Match(COMPILE);
			State = 1606;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				{
				State = 1605; Match(DEBUG);
				}
				break;
			}
			State = 1609;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 1608;
				_la = TokenStream.LA(1);
				if ( !(_la==BODY || _la==SPECIFICATION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1614;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1611; compiler_parameters_clause();
					}
					} 
				}
				State = 1616;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
			}
			State = 1619;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REUSE) {
				{
				State = 1617; Match(REUSE);
				State = 1618; Match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Replace_type_clauseContext : ParserRuleContext {
		public ITerminalNode REPLACE() { return GetToken(oracleParser.REPLACE, 0); }
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public ITerminalNode OBJECT() { return GetToken(oracleParser.OBJECT, 0); }
		public Object_member_specContext[] object_member_spec() {
			return GetRuleContexts<Object_member_specContext>();
		}
		public Object_member_specContext object_member_spec(int i) {
			return GetRuleContext<Object_member_specContext>(i);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return GetRuleContext<Invoker_rights_clauseContext>(0);
		}
		public Replace_type_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replace_type_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplace_type_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Replace_type_clauseContext replace_type_clause() {
		Replace_type_clauseContext _localctx = new Replace_type_clauseContext(Context, State);
		EnterRule(_localctx, 90, RULE_replace_type_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1621; Match(REPLACE);
			State = 1623;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHID) {
				{
				State = 1622; invoker_rights_clause();
				}
			}

			State = 1625; Match(AS);
			State = 1626; Match(OBJECT);
			State = 1627; Match(LEFT_PAREN);
			State = 1628; object_member_spec();
			State = 1633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1629; Match(COMMA);
				State = 1630; object_member_spec();
				}
				}
				State = 1635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1636; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_method_specContext : ParserRuleContext {
		public Alter_method_elementContext[] alter_method_element() {
			return GetRuleContexts<Alter_method_elementContext>();
		}
		public Alter_method_elementContext alter_method_element(int i) {
			return GetRuleContext<Alter_method_elementContext>(i);
		}
		public Alter_method_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_method_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_method_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_method_specContext alter_method_spec() {
		Alter_method_specContext _localctx = new Alter_method_specContext(Context, State);
		EnterRule(_localctx, 92, RULE_alter_method_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1638; alter_method_element();
			State = 1643;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1639; Match(COMMA);
				State = 1640; alter_method_element();
				}
				}
				State = 1645;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_method_elementContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(oracleParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(oracleParser.DROP, 0); }
		public Map_order_function_specContext map_order_function_spec() {
			return GetRuleContext<Map_order_function_specContext>(0);
		}
		public Subprogram_specContext subprogram_spec() {
			return GetRuleContext<Subprogram_specContext>(0);
		}
		public Alter_method_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_method_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_method_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_method_elementContext alter_method_element() {
		Alter_method_elementContext _localctx = new Alter_method_elementContext(Context, State);
		EnterRule(_localctx, 94, RULE_alter_method_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1646;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1649;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAP:
			case ORDER:
				{
				State = 1647; map_order_function_spec();
				}
				break;
			case MEMBER:
			case STATIC:
				{
				State = 1648; subprogram_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_attribute_definitionContext : ParserRuleContext {
		public ITerminalNode ATTRIBUTE() { return GetToken(oracleParser.ATTRIBUTE, 0); }
		public ITerminalNode ADD() { return GetToken(oracleParser.ADD, 0); }
		public ITerminalNode MODIFY() { return GetToken(oracleParser.MODIFY, 0); }
		public ITerminalNode DROP() { return GetToken(oracleParser.DROP, 0); }
		public Attribute_definitionContext[] attribute_definition() {
			return GetRuleContexts<Attribute_definitionContext>();
		}
		public Attribute_definitionContext attribute_definition(int i) {
			return GetRuleContext<Attribute_definitionContext>(i);
		}
		public Alter_attribute_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_attribute_definition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_attribute_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_attribute_definitionContext alter_attribute_definition() {
		Alter_attribute_definitionContext _localctx = new Alter_attribute_definitionContext(Context, State);
		EnterRule(_localctx, 96, RULE_alter_attribute_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1651;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==DROP || _la==MODIFY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1652; Match(ATTRIBUTE);
			State = 1665;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 1653; attribute_definition();
				}
				break;
			case LEFT_PAREN:
				{
				State = 1654; Match(LEFT_PAREN);
				State = 1655; attribute_definition();
				State = 1660;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1656; Match(COMMA);
					State = 1657; attribute_definition();
					}
					}
					State = 1662;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1663; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_definitionContext : ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return GetRuleContext<Attribute_nameContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Attribute_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_definition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_definitionContext attribute_definition() {
		Attribute_definitionContext _localctx = new Attribute_definitionContext(Context, State);
		EnterRule(_localctx, 98, RULE_attribute_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1667; attribute_name();
			State = 1669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				State = 1668; type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_collection_clausesContext : ParserRuleContext {
		public ITerminalNode MODIFY() { return GetToken(oracleParser.MODIFY, 0); }
		public ITerminalNode LIMIT() { return GetToken(oracleParser.LIMIT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ELEMENT() { return GetToken(oracleParser.ELEMENT, 0); }
		public ITerminalNode TYPE() { return GetToken(oracleParser.TYPE, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Alter_collection_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_collection_clauses; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_collection_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_collection_clausesContext alter_collection_clauses() {
		Alter_collection_clausesContext _localctx = new Alter_collection_clausesContext(Context, State);
		EnterRule(_localctx, 100, RULE_alter_collection_clauses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1671; Match(MODIFY);
			State = 1677;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIMIT:
				{
				State = 1672; Match(LIMIT);
				State = 1673; expression();
				}
				break;
			case ELEMENT:
				{
				State = 1674; Match(ELEMENT);
				State = 1675; Match(TYPE);
				State = 1676; type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dependent_handling_clauseContext : ParserRuleContext {
		public ITerminalNode INVALIDATE() { return GetToken(oracleParser.INVALIDATE, 0); }
		public ITerminalNode CASCADE() { return GetToken(oracleParser.CASCADE, 0); }
		public ITerminalNode CONVERT() { return GetToken(oracleParser.CONVERT, 0); }
		public ITerminalNode TO() { return GetToken(oracleParser.TO, 0); }
		public ITerminalNode SUBSTITUTABLE() { return GetToken(oracleParser.SUBSTITUTABLE, 0); }
		public ITerminalNode INCLUDING() { return GetToken(oracleParser.INCLUDING, 0); }
		public ITerminalNode TABLE() { return GetToken(oracleParser.TABLE, 0); }
		public ITerminalNode DATA() { return GetToken(oracleParser.DATA, 0); }
		public Dependent_exceptions_partContext dependent_exceptions_part() {
			return GetRuleContext<Dependent_exceptions_partContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(oracleParser.NOT, 0); }
		public Dependent_handling_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dependent_handling_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDependent_handling_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dependent_handling_clauseContext dependent_handling_clause() {
		Dependent_handling_clauseContext _localctx = new Dependent_handling_clauseContext(Context, State);
		EnterRule(_localctx, 102, RULE_dependent_handling_clause);
		int _la;
		try {
			State = 1695;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INVALIDATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1679; Match(INVALIDATE);
				}
				break;
			case CASCADE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1680; Match(CASCADE);
				State = 1690;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CONVERT:
					{
					State = 1681; Match(CONVERT);
					State = 1682; Match(TO);
					State = 1683; Match(SUBSTITUTABLE);
					}
					break;
				case INCLUDING:
				case NOT:
					{
					State = 1685;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NOT) {
						{
						State = 1684; Match(NOT);
						}
					}

					State = 1687; Match(INCLUDING);
					State = 1688; Match(TABLE);
					State = 1689; Match(DATA);
					}
					break;
				case EXCEPTIONS:
				case FORCE:
				case SEMICOLON:
					break;
				default:
					break;
				}
				State = 1693;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCEPTIONS || _la==FORCE) {
					{
					State = 1692; dependent_exceptions_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dependent_exceptions_partContext : ParserRuleContext {
		public ITerminalNode EXCEPTIONS() { return GetToken(oracleParser.EXCEPTIONS, 0); }
		public ITerminalNode INTO() { return GetToken(oracleParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode FORCE() { return GetToken(oracleParser.FORCE, 0); }
		public Dependent_exceptions_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dependent_exceptions_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDependent_exceptions_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dependent_exceptions_partContext dependent_exceptions_part() {
		Dependent_exceptions_partContext _localctx = new Dependent_exceptions_partContext(Context, State);
		EnterRule(_localctx, 104, RULE_dependent_exceptions_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1698;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE) {
				{
				State = 1697; Match(FORCE);
				}
			}

			State = 1700; Match(EXCEPTIONS);
			State = 1701; Match(INTO);
			State = 1702; tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_typeContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(oracleParser.CREATE, 0); }
		public ITerminalNode TYPE() { return GetToken(oracleParser.TYPE, 0); }
		public Type_definitionContext type_definition() {
			return GetRuleContext<Type_definitionContext>(0);
		}
		public Type_bodyContext type_body() {
			return GetRuleContext<Type_bodyContext>(0);
		}
		public ITerminalNode OR() { return GetToken(oracleParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(oracleParser.REPLACE, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_typeContext create_type() {
		Create_typeContext _localctx = new Create_typeContext(Context, State);
		EnterRule(_localctx, 106, RULE_create_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1704; Match(CREATE);
			State = 1707;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1705; Match(OR);
				State = 1706; Match(REPLACE);
				}
			}

			State = 1709; Match(TYPE);
			State = 1712;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				{
				State = 1710; type_definition();
				}
				break;
			case 2:
				{
				State = 1711; type_body();
				}
				break;
			}
			State = 1714; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_definitionContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode OID() { return GetToken(oracleParser.OID, 0); }
		public ITerminalNode CHAR_STRING() { return GetToken(oracleParser.CHAR_STRING, 0); }
		public Object_type_defContext object_type_def() {
			return GetRuleContext<Object_type_defContext>(0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_definition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_definitionContext type_definition() {
		Type_definitionContext _localctx = new Type_definitionContext(Context, State);
		EnterRule(_localctx, 108, RULE_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1716; type_name();
			State = 1719;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OID) {
				{
				State = 1717; Match(OID);
				State = 1718; Match(CHAR_STRING);
				}
			}

			State = 1722;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS || _la==UNDER) {
				{
				State = 1721; object_type_def();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_type_defContext : ParserRuleContext {
		public Object_as_partContext object_as_part() {
			return GetRuleContext<Object_as_partContext>(0);
		}
		public Object_under_partContext object_under_part() {
			return GetRuleContext<Object_under_partContext>(0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return GetRuleContext<Invoker_rights_clauseContext>(0);
		}
		public Sqlj_object_typeContext sqlj_object_type() {
			return GetRuleContext<Sqlj_object_typeContext>(0);
		}
		public Object_member_specContext[] object_member_spec() {
			return GetRuleContexts<Object_member_specContext>();
		}
		public Object_member_specContext object_member_spec(int i) {
			return GetRuleContext<Object_member_specContext>(i);
		}
		public Modifier_clauseContext[] modifier_clause() {
			return GetRuleContexts<Modifier_clauseContext>();
		}
		public Modifier_clauseContext modifier_clause(int i) {
			return GetRuleContext<Modifier_clauseContext>(i);
		}
		public Object_type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_type_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_type_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_type_defContext object_type_def() {
		Object_type_defContext _localctx = new Object_type_defContext(Context, State);
		EnterRule(_localctx, 110, RULE_object_type_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHID) {
				{
				State = 1724; invoker_rights_clause();
				}
			}

			State = 1729;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
			case IS:
				{
				State = 1727; object_as_part();
				}
				break;
			case UNDER:
				{
				State = 1728; object_under_part();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1732;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTERNAL) {
				{
				State = 1731; sqlj_object_type();
				}
			}

			State = 1745;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1734; Match(LEFT_PAREN);
				State = 1735; object_member_spec();
				State = 1740;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1736; Match(COMMA);
					State = 1737; object_member_spec();
					}
					}
					State = 1742;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1743; Match(RIGHT_PAREN);
				}
			}

			State = 1750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==INSTANTIABLE || _la==NOT || _la==OVERRIDING) {
				{
				{
				State = 1747; modifier_clause();
				}
				}
				State = 1752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_as_partContext : ParserRuleContext {
		public ITerminalNode IS() { return GetToken(oracleParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public ITerminalNode OBJECT() { return GetToken(oracleParser.OBJECT, 0); }
		public Varray_type_defContext varray_type_def() {
			return GetRuleContext<Varray_type_defContext>(0);
		}
		public Nested_table_type_defContext nested_table_type_def() {
			return GetRuleContext<Nested_table_type_defContext>(0);
		}
		public Object_as_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_as_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_as_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_as_partContext object_as_part() {
		Object_as_partContext _localctx = new Object_as_partContext(Context, State);
		EnterRule(_localctx, 112, RULE_object_as_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1753;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1757;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OBJECT:
				{
				State = 1754; Match(OBJECT);
				}
				break;
			case VARRAY:
			case VARYING:
				{
				State = 1755; varray_type_def();
				}
				break;
			case TABLE:
				{
				State = 1756; nested_table_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_under_partContext : ParserRuleContext {
		public ITerminalNode UNDER() { return GetToken(oracleParser.UNDER, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Object_under_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_under_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_under_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_under_partContext object_under_part() {
		Object_under_partContext _localctx = new Object_under_partContext(Context, State);
		EnterRule(_localctx, 114, RULE_object_under_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1759; Match(UNDER);
			State = 1760; type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nested_table_type_defContext : ParserRuleContext {
		public ITerminalNode TABLE() { return GetToken(oracleParser.TABLE, 0); }
		public ITerminalNode OF() { return GetToken(oracleParser.OF, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(oracleParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(oracleParser.NULL, 0); }
		public Nested_table_type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nested_table_type_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNested_table_type_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nested_table_type_defContext nested_table_type_def() {
		Nested_table_type_defContext _localctx = new Nested_table_type_defContext(Context, State);
		EnterRule(_localctx, 116, RULE_nested_table_type_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1762; Match(TABLE);
			State = 1763; Match(OF);
			State = 1764; type_spec();
			State = 1767;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
			case 1:
				{
				State = 1765; Match(NOT);
				State = 1766; Match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sqlj_object_typeContext : ParserRuleContext {
		public ITerminalNode EXTERNAL() { return GetToken(oracleParser.EXTERNAL, 0); }
		public ITerminalNode NAME() { return GetToken(oracleParser.NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LANGUAGE() { return GetToken(oracleParser.LANGUAGE, 0); }
		public ITerminalNode JAVA() { return GetToken(oracleParser.JAVA, 0); }
		public ITerminalNode USING() { return GetToken(oracleParser.USING, 0); }
		public ITerminalNode SQLDATA() { return GetToken(oracleParser.SQLDATA, 0); }
		public ITerminalNode CUSTOMDATUM() { return GetToken(oracleParser.CUSTOMDATUM, 0); }
		public ITerminalNode ORADATA() { return GetToken(oracleParser.ORADATA, 0); }
		public Sqlj_object_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlj_object_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlj_object_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sqlj_object_typeContext sqlj_object_type() {
		Sqlj_object_typeContext _localctx = new Sqlj_object_typeContext(Context, State);
		EnterRule(_localctx, 118, RULE_sqlj_object_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1769; Match(EXTERNAL);
			State = 1770; Match(NAME);
			State = 1771; expression();
			State = 1772; Match(LANGUAGE);
			State = 1773; Match(JAVA);
			State = 1774; Match(USING);
			State = 1775;
			_la = TokenStream.LA(1);
			if ( !(_la==CUSTOMDATUM || _la==ORADATA || _la==SQLDATA) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_bodyContext : ParserRuleContext {
		public ITerminalNode BODY() { return GetToken(oracleParser.BODY, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode END() { return GetToken(oracleParser.END, 0); }
		public ITerminalNode IS() { return GetToken(oracleParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public Type_body_elementsContext[] type_body_elements() {
			return GetRuleContexts<Type_body_elementsContext>();
		}
		public Type_body_elementsContext type_body_elements(int i) {
			return GetRuleContext<Type_body_elementsContext>(i);
		}
		public Type_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_bodyContext type_body() {
		Type_bodyContext _localctx = new Type_bodyContext(Context, State);
		EnterRule(_localctx, 120, RULE_type_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1777; Match(BODY);
			State = 1778; type_name();
			State = 1779;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1781;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1780; type_body_elements();
				}
				}
				State = 1783;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==MAP || _la==MEMBER || _la==ORDER || _la==STATIC );
			State = 1785; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_body_elementsContext : ParserRuleContext {
		public Map_order_func_declarationContext map_order_func_declaration() {
			return GetRuleContext<Map_order_func_declarationContext>(0);
		}
		public Subprog_decl_in_typeContext subprog_decl_in_type() {
			return GetRuleContext<Subprog_decl_in_typeContext>(0);
		}
		public Type_body_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_body_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_body_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_body_elementsContext type_body_elements() {
		Type_body_elementsContext _localctx = new Type_body_elementsContext(Context, State);
		EnterRule(_localctx, 122, RULE_type_body_elements);
		try {
			State = 1789;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAP:
			case ORDER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1787; map_order_func_declaration();
				}
				break;
			case MEMBER:
			case STATIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1788; subprog_decl_in_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Map_order_func_declarationContext : ParserRuleContext {
		public ITerminalNode MEMBER() { return GetToken(oracleParser.MEMBER, 0); }
		public Func_decl_in_typeContext func_decl_in_type() {
			return GetRuleContext<Func_decl_in_typeContext>(0);
		}
		public ITerminalNode MAP() { return GetToken(oracleParser.MAP, 0); }
		public ITerminalNode ORDER() { return GetToken(oracleParser.ORDER, 0); }
		public Map_order_func_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map_order_func_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap_order_func_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Map_order_func_declarationContext map_order_func_declaration() {
		Map_order_func_declarationContext _localctx = new Map_order_func_declarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_map_order_func_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1791;
			_la = TokenStream.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1792; Match(MEMBER);
			State = 1793; func_decl_in_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subprog_decl_in_typeContext : ParserRuleContext {
		public ITerminalNode MEMBER() { return GetToken(oracleParser.MEMBER, 0); }
		public ITerminalNode STATIC() { return GetToken(oracleParser.STATIC, 0); }
		public Proc_decl_in_typeContext proc_decl_in_type() {
			return GetRuleContext<Proc_decl_in_typeContext>(0);
		}
		public Func_decl_in_typeContext func_decl_in_type() {
			return GetRuleContext<Func_decl_in_typeContext>(0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return GetRuleContext<Constructor_declarationContext>(0);
		}
		public Subprog_decl_in_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprog_decl_in_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprog_decl_in_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subprog_decl_in_typeContext subprog_decl_in_type() {
		Subprog_decl_in_typeContext _localctx = new Subprog_decl_in_typeContext(Context, State);
		EnterRule(_localctx, 126, RULE_subprog_decl_in_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1795;
			_la = TokenStream.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1799;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROCEDURE:
				{
				State = 1796; proc_decl_in_type();
				}
				break;
			case FUNCTION:
				{
				State = 1797; func_decl_in_type();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				{
				State = 1798; constructor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_decl_in_typeContext : ParserRuleContext {
		public ITerminalNode PROCEDURE() { return GetToken(oracleParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public Type_elements_parameterContext[] type_elements_parameter() {
			return GetRuleContexts<Type_elements_parameterContext>();
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return GetRuleContext<Type_elements_parameterContext>(i);
		}
		public ITerminalNode IS() { return GetToken(oracleParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode DECLARE() { return GetToken(oracleParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Proc_decl_in_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_decl_in_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProc_decl_in_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Proc_decl_in_typeContext proc_decl_in_type() {
		Proc_decl_in_typeContext _localctx = new Proc_decl_in_typeContext(Context, State);
		EnterRule(_localctx, 128, RULE_proc_decl_in_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1801; Match(PROCEDURE);
			State = 1802; procedure_name();
			State = 1803; Match(LEFT_PAREN);
			State = 1804; type_elements_parameter();
			State = 1809;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1805; Match(COMMA);
				State = 1806; type_elements_parameter();
				}
				}
				State = 1811;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1812; Match(RIGHT_PAREN);
			State = 1813;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1824;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
			case 1:
				{
				State = 1814; call_spec();
				}
				break;
			case 2:
				{
				State = 1816;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECLARE) {
					{
					State = 1815; Match(DECLARE);
					}
				}

				State = 1819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROCEDURE - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
					{
					State = 1818; seq_of_declare_specs();
					}
				}

				State = 1821; body();
				State = 1822; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_decl_in_typeContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(oracleParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(oracleParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode IS() { return GetToken(oracleParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Type_elements_parameterContext[] type_elements_parameter() {
			return GetRuleContexts<Type_elements_parameterContext>();
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return GetRuleContext<Type_elements_parameterContext>(i);
		}
		public ITerminalNode DECLARE() { return GetToken(oracleParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Func_decl_in_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_decl_in_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_decl_in_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_decl_in_typeContext func_decl_in_type() {
		Func_decl_in_typeContext _localctx = new Func_decl_in_typeContext(Context, State);
		EnterRule(_localctx, 130, RULE_func_decl_in_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1826; Match(FUNCTION);
			State = 1827; function_name();
			State = 1839;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1828; Match(LEFT_PAREN);
				State = 1829; type_elements_parameter();
				State = 1834;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1830; Match(COMMA);
					State = 1831; type_elements_parameter();
					}
					}
					State = 1836;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1837; Match(RIGHT_PAREN);
				}
			}

			State = 1841; Match(RETURN);
			State = 1842; type_spec();
			State = 1843;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1854;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				State = 1844; call_spec();
				}
				break;
			case 2:
				{
				State = 1846;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECLARE) {
					{
					State = 1845; Match(DECLARE);
					}
				}

				State = 1849;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROCEDURE - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
					{
					State = 1848; seq_of_declare_specs();
					}
				}

				State = 1851; body();
				State = 1852; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_declarationContext : ParserRuleContext {
		public ITerminalNode CONSTRUCTOR() { return GetToken(oracleParser.CONSTRUCTOR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(oracleParser.FUNCTION, 0); }
		public Type_specContext[] type_spec() {
			return GetRuleContexts<Type_specContext>();
		}
		public Type_specContext type_spec(int i) {
			return GetRuleContext<Type_specContext>(i);
		}
		public ITerminalNode RETURN() { return GetToken(oracleParser.RETURN, 0); }
		public ITerminalNode[] SELF() { return GetTokens(oracleParser.SELF); }
		public ITerminalNode SELF(int i) {
			return GetToken(oracleParser.SELF, i);
		}
		public ITerminalNode[] AS() { return GetTokens(oracleParser.AS); }
		public ITerminalNode AS(int i) {
			return GetToken(oracleParser.AS, i);
		}
		public ITerminalNode RESULT() { return GetToken(oracleParser.RESULT, 0); }
		public ITerminalNode IS() { return GetToken(oracleParser.IS, 0); }
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode FINAL() { return GetToken(oracleParser.FINAL, 0); }
		public ITerminalNode INSTANTIABLE() { return GetToken(oracleParser.INSTANTIABLE, 0); }
		public Type_elements_parameterContext[] type_elements_parameter() {
			return GetRuleContexts<Type_elements_parameterContext>();
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return GetRuleContext<Type_elements_parameterContext>(i);
		}
		public ITerminalNode IN() { return GetToken(oracleParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(oracleParser.OUT, 0); }
		public ITerminalNode DECLARE() { return GetToken(oracleParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_declarationContext constructor_declaration() {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(Context, State);
		EnterRule(_localctx, 132, RULE_constructor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1857;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL) {
				{
				State = 1856; Match(FINAL);
				}
			}

			State = 1860;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INSTANTIABLE) {
				{
				State = 1859; Match(INSTANTIABLE);
				}
			}

			State = 1862; Match(CONSTRUCTOR);
			State = 1863; Match(FUNCTION);
			State = 1864; type_spec();
			State = 1882;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1865; Match(LEFT_PAREN);
				{
				State = 1866; Match(SELF);
				State = 1867; Match(IN);
				State = 1868; Match(OUT);
				State = 1869; type_spec();
				State = 1870; Match(COMMA);
				}
				State = 1872; type_elements_parameter();
				State = 1877;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1873; Match(COMMA);
					State = 1874; type_elements_parameter();
					}
					}
					State = 1879;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1880; Match(RIGHT_PAREN);
				}
			}

			State = 1884; Match(RETURN);
			State = 1885; Match(SELF);
			State = 1886; Match(AS);
			State = 1887; Match(RESULT);
			State = 1888;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1899;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
			case 1:
				{
				State = 1889; call_spec();
				}
				break;
			case 2:
				{
				State = 1891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECLARE) {
					{
					State = 1890; Match(DECLARE);
					}
				}

				State = 1894;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROCEDURE - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
					{
					State = 1893; seq_of_declare_specs();
					}
				}

				State = 1896; body();
				State = 1897; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Modifier_clauseContext : ParserRuleContext {
		public ITerminalNode INSTANTIABLE() { return GetToken(oracleParser.INSTANTIABLE, 0); }
		public ITerminalNode FINAL() { return GetToken(oracleParser.FINAL, 0); }
		public ITerminalNode OVERRIDING() { return GetToken(oracleParser.OVERRIDING, 0); }
		public ITerminalNode NOT() { return GetToken(oracleParser.NOT, 0); }
		public Modifier_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Modifier_clauseContext modifier_clause() {
		Modifier_clauseContext _localctx = new Modifier_clauseContext(Context, State);
		EnterRule(_localctx, 134, RULE_modifier_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1902;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 1901; Match(NOT);
				}
			}

			State = 1904;
			_la = TokenStream.LA(1);
			if ( !(_la==FINAL || _la==INSTANTIABLE || _la==OVERRIDING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_member_specContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Sqlj_object_type_attrContext sqlj_object_type_attr() {
			return GetRuleContext<Sqlj_object_type_attrContext>(0);
		}
		public Element_specContext element_spec() {
			return GetRuleContext<Element_specContext>(0);
		}
		public Object_member_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_member_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_member_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_member_specContext object_member_spec() {
		Object_member_specContext _localctx = new Object_member_specContext(Context, State);
		EnterRule(_localctx, 136, RULE_object_member_spec);
		int _la;
		try {
			State = 1912;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1906; identifier();
				State = 1907; type_spec();
				State = 1909;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXTERNAL) {
					{
					State = 1908; sqlj_object_type_attr();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1911; element_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sqlj_object_type_attrContext : ParserRuleContext {
		public ITerminalNode EXTERNAL() { return GetToken(oracleParser.EXTERNAL, 0); }
		public ITerminalNode NAME() { return GetToken(oracleParser.NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Sqlj_object_type_attrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlj_object_type_attr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlj_object_type_attr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sqlj_object_type_attrContext sqlj_object_type_attr() {
		Sqlj_object_type_attrContext _localctx = new Sqlj_object_type_attrContext(Context, State);
		EnterRule(_localctx, 138, RULE_sqlj_object_type_attr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1914; Match(EXTERNAL);
			State = 1915; Match(NAME);
			State = 1916; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_specContext : ParserRuleContext {
		public Modifier_clauseContext modifier_clause() {
			return GetRuleContext<Modifier_clauseContext>(0);
		}
		public Element_spec_optionsContext[] element_spec_options() {
			return GetRuleContexts<Element_spec_optionsContext>();
		}
		public Element_spec_optionsContext element_spec_options(int i) {
			return GetRuleContext<Element_spec_optionsContext>(i);
		}
		public Pragma_clauseContext pragma_clause() {
			return GetRuleContext<Pragma_clauseContext>(0);
		}
		public Element_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_specContext element_spec() {
		Element_specContext _localctx = new Element_specContext(Context, State);
		EnterRule(_localctx, 140, RULE_element_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1919;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				{
				State = 1918; modifier_clause();
				}
				break;
			}
			State = 1922;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1921; element_spec_options();
				}
				}
				State = 1924;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CONSTRUCTOR || _la==FINAL || _la==INSTANTIABLE || _la==MAP || _la==MEMBER || _la==ORDER || _la==STATIC );
			State = 1928;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
			case 1:
				{
				State = 1926; Match(COMMA);
				State = 1927; pragma_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_spec_optionsContext : ParserRuleContext {
		public Subprogram_specContext subprogram_spec() {
			return GetRuleContext<Subprogram_specContext>(0);
		}
		public Constructor_specContext constructor_spec() {
			return GetRuleContext<Constructor_specContext>(0);
		}
		public Map_order_function_specContext map_order_function_spec() {
			return GetRuleContext<Map_order_function_specContext>(0);
		}
		public Element_spec_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_spec_options; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_spec_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_spec_optionsContext element_spec_options() {
		Element_spec_optionsContext _localctx = new Element_spec_optionsContext(Context, State);
		EnterRule(_localctx, 142, RULE_element_spec_options);
		try {
			State = 1933;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MEMBER:
			case STATIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1930; subprogram_spec();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1931; constructor_spec();
				}
				break;
			case MAP:
			case ORDER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1932; map_order_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subprogram_specContext : ParserRuleContext {
		public ITerminalNode MEMBER() { return GetToken(oracleParser.MEMBER, 0); }
		public ITerminalNode STATIC() { return GetToken(oracleParser.STATIC, 0); }
		public Type_procedure_specContext type_procedure_spec() {
			return GetRuleContext<Type_procedure_specContext>(0);
		}
		public Type_function_specContext type_function_spec() {
			return GetRuleContext<Type_function_specContext>(0);
		}
		public Subprogram_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogram_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogram_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subprogram_specContext subprogram_spec() {
		Subprogram_specContext _localctx = new Subprogram_specContext(Context, State);
		EnterRule(_localctx, 144, RULE_subprogram_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1935;
			_la = TokenStream.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1938;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROCEDURE:
				{
				State = 1936; type_procedure_spec();
				}
				break;
			case FUNCTION:
				{
				State = 1937; type_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_procedure_specContext : ParserRuleContext {
		public ITerminalNode PROCEDURE() { return GetToken(oracleParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public Type_elements_parameterContext[] type_elements_parameter() {
			return GetRuleContexts<Type_elements_parameterContext>();
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return GetRuleContext<Type_elements_parameterContext>(i);
		}
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode IS() { return GetToken(oracleParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public Type_procedure_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_procedure_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_procedure_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_procedure_specContext type_procedure_spec() {
		Type_procedure_specContext _localctx = new Type_procedure_specContext(Context, State);
		EnterRule(_localctx, 146, RULE_type_procedure_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1940; Match(PROCEDURE);
			State = 1941; procedure_name();
			State = 1942; Match(LEFT_PAREN);
			State = 1943; type_elements_parameter();
			State = 1948;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1944; Match(COMMA);
				State = 1945; type_elements_parameter();
				}
				}
				State = 1950;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1951; Match(RIGHT_PAREN);
			State = 1954;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || _la==IS) {
				{
				State = 1952;
				_la = TokenStream.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1953; call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_function_specContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(oracleParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(oracleParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode SELF() { return GetToken(oracleParser.SELF, 0); }
		public ITerminalNode[] AS() { return GetTokens(oracleParser.AS); }
		public ITerminalNode AS(int i) {
			return GetToken(oracleParser.AS, i);
		}
		public ITerminalNode RESULT() { return GetToken(oracleParser.RESULT, 0); }
		public Type_elements_parameterContext[] type_elements_parameter() {
			return GetRuleContexts<Type_elements_parameterContext>();
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return GetRuleContext<Type_elements_parameterContext>(i);
		}
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode EXTERNAL() { return GetToken(oracleParser.EXTERNAL, 0); }
		public ITerminalNode NAME() { return GetToken(oracleParser.NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IS() { return GetToken(oracleParser.IS, 0); }
		public ITerminalNode VARIABLE() { return GetToken(oracleParser.VARIABLE, 0); }
		public Type_function_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_function_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_function_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_function_specContext type_function_spec() {
		Type_function_specContext _localctx = new Type_function_specContext(Context, State);
		EnterRule(_localctx, 148, RULE_type_function_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1956; Match(FUNCTION);
			State = 1957; function_name();
			State = 1969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1958; Match(LEFT_PAREN);
				State = 1959; type_elements_parameter();
				State = 1964;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1960; Match(COMMA);
					State = 1961; type_elements_parameter();
					}
					}
					State = 1966;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1967; Match(RIGHT_PAREN);
				}
			}

			State = 1971; Match(RETURN);
			State = 1976;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				{
				State = 1972; type_spec();
				}
				break;
			case 2:
				{
				State = 1973; Match(SELF);
				State = 1974; Match(AS);
				State = 1975; Match(RESULT);
				}
				break;
			}
			State = 1986;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
			case IS:
				{
				State = 1978;
				_la = TokenStream.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1979; call_spec();
				}
				break;
			case EXTERNAL:
				{
				State = 1980; Match(EXTERNAL);
				State = 1982;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARIABLE) {
					{
					State = 1981; Match(VARIABLE);
					}
				}

				State = 1984; Match(NAME);
				State = 1985; expression();
				}
				break;
			case CASCADE:
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
			case INVALIDATE:
			case MAP:
			case MEMBER:
			case ORDER:
			case STATIC:
			case RIGHT_PAREN:
			case COMMA:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_specContext : ParserRuleContext {
		public ITerminalNode CONSTRUCTOR() { return GetToken(oracleParser.CONSTRUCTOR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(oracleParser.FUNCTION, 0); }
		public Type_specContext[] type_spec() {
			return GetRuleContexts<Type_specContext>();
		}
		public Type_specContext type_spec(int i) {
			return GetRuleContext<Type_specContext>(i);
		}
		public ITerminalNode RETURN() { return GetToken(oracleParser.RETURN, 0); }
		public ITerminalNode[] SELF() { return GetTokens(oracleParser.SELF); }
		public ITerminalNode SELF(int i) {
			return GetToken(oracleParser.SELF, i);
		}
		public ITerminalNode[] AS() { return GetTokens(oracleParser.AS); }
		public ITerminalNode AS(int i) {
			return GetToken(oracleParser.AS, i);
		}
		public ITerminalNode RESULT() { return GetToken(oracleParser.RESULT, 0); }
		public ITerminalNode FINAL() { return GetToken(oracleParser.FINAL, 0); }
		public ITerminalNode INSTANTIABLE() { return GetToken(oracleParser.INSTANTIABLE, 0); }
		public Type_elements_parameterContext[] type_elements_parameter() {
			return GetRuleContexts<Type_elements_parameterContext>();
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return GetRuleContext<Type_elements_parameterContext>(i);
		}
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode IS() { return GetToken(oracleParser.IS, 0); }
		public ITerminalNode IN() { return GetToken(oracleParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(oracleParser.OUT, 0); }
		public Constructor_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_specContext constructor_spec() {
		Constructor_specContext _localctx = new Constructor_specContext(Context, State);
		EnterRule(_localctx, 150, RULE_constructor_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1989;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL) {
				{
				State = 1988; Match(FINAL);
				}
			}

			State = 1992;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INSTANTIABLE) {
				{
				State = 1991; Match(INSTANTIABLE);
				}
			}

			State = 1994; Match(CONSTRUCTOR);
			State = 1995; Match(FUNCTION);
			State = 1996; type_spec();
			State = 2014;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1997; Match(LEFT_PAREN);
				{
				State = 1998; Match(SELF);
				State = 1999; Match(IN);
				State = 2000; Match(OUT);
				State = 2001; type_spec();
				State = 2002; Match(COMMA);
				}
				State = 2004; type_elements_parameter();
				State = 2009;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2005; Match(COMMA);
					State = 2006; type_elements_parameter();
					}
					}
					State = 2011;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2012; Match(RIGHT_PAREN);
				}
			}

			State = 2016; Match(RETURN);
			State = 2017; Match(SELF);
			State = 2018; Match(AS);
			State = 2019; Match(RESULT);
			State = 2022;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || _la==IS) {
				{
				State = 2020;
				_la = TokenStream.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2021; call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Map_order_function_specContext : ParserRuleContext {
		public ITerminalNode MEMBER() { return GetToken(oracleParser.MEMBER, 0); }
		public Type_function_specContext type_function_spec() {
			return GetRuleContext<Type_function_specContext>(0);
		}
		public ITerminalNode MAP() { return GetToken(oracleParser.MAP, 0); }
		public ITerminalNode ORDER() { return GetToken(oracleParser.ORDER, 0); }
		public Map_order_function_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map_order_function_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap_order_function_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Map_order_function_specContext map_order_function_spec() {
		Map_order_function_specContext _localctx = new Map_order_function_specContext(Context, State);
		EnterRule(_localctx, 152, RULE_map_order_function_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2024;
			_la = TokenStream.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2025; Match(MEMBER);
			State = 2026; type_function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_clauseContext : ParserRuleContext {
		public ITerminalNode PRAGMA() { return GetToken(oracleParser.PRAGMA, 0); }
		public ITerminalNode RESTRICT_REFERENCES() { return GetToken(oracleParser.RESTRICT_REFERENCES, 0); }
		public Pragma_elementsContext[] pragma_elements() {
			return GetRuleContexts<Pragma_elementsContext>();
		}
		public Pragma_elementsContext pragma_elements(int i) {
			return GetRuleContext<Pragma_elementsContext>(i);
		}
		public Pragma_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_clauseContext pragma_clause() {
		Pragma_clauseContext _localctx = new Pragma_clauseContext(Context, State);
		EnterRule(_localctx, 154, RULE_pragma_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2028; Match(PRAGMA);
			State = 2029; Match(RESTRICT_REFERENCES);
			State = 2030; Match(LEFT_PAREN);
			State = 2031; pragma_elements();
			State = 2036;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2032; Match(COMMA);
				State = 2033; pragma_elements();
				}
				}
				State = 2038;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2039; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_elementsContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(oracleParser.DEFAULT, 0); }
		public Pragma_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_elementsContext pragma_elements() {
		Pragma_elementsContext _localctx = new Pragma_elementsContext(Context, State);
		EnterRule(_localctx, 156, RULE_pragma_elements);
		try {
			State = 2043;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2041; identifier();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2042; Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_elements_parameterContext : ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return GetRuleContext<Parameter_nameContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Type_elements_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_elements_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_elements_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_elements_parameterContext type_elements_parameter() {
		Type_elements_parameterContext _localctx = new Type_elements_parameterContext(Context, State);
		EnterRule(_localctx, 158, RULE_type_elements_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2045; parameter_name();
			State = 2046; type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_sequenceContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(oracleParser.DROP, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(oracleParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return GetRuleContext<Sequence_nameContext>(0);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_sequence; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_sequenceContext drop_sequence() {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(Context, State);
		EnterRule(_localctx, 160, RULE_drop_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2048; Match(DROP);
			State = 2049; Match(SEQUENCE);
			State = 2050; sequence_name();
			State = 2051; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_sequenceContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(oracleParser.ALTER, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(oracleParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return GetRuleContext<Sequence_nameContext>(0);
		}
		public Sequence_specContext[] sequence_spec() {
			return GetRuleContexts<Sequence_specContext>();
		}
		public Sequence_specContext sequence_spec(int i) {
			return GetRuleContext<Sequence_specContext>(i);
		}
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_sequence; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_sequenceContext alter_sequence() {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(Context, State);
		EnterRule(_localctx, 162, RULE_alter_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2053; Match(ALTER);
			State = 2054; Match(SEQUENCE);
			State = 2055; sequence_name();
			State = 2057;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2056; sequence_spec();
				}
				}
				State = 2059;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CACHE || _la==CYCLE || _la==INCREMENT || ((((_la - 293)) & ~0x3f) == 0 && ((1L << (_la - 293)) & ((1L << (MAXVALUE - 293)) | (1L << (MINVALUE - 293)) | (1L << (NOCACHE - 293)) | (1L << (NOCYCLE - 293)) | (1L << (NOMAXVALUE - 293)) | (1L << (NOMINVALUE - 293)) | (1L << (NOORDER - 293)))) != 0) || _la==ORDER );
			State = 2061; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_sequenceContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(oracleParser.CREATE, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(oracleParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return GetRuleContext<Sequence_nameContext>(0);
		}
		public Sequence_start_clauseContext[] sequence_start_clause() {
			return GetRuleContexts<Sequence_start_clauseContext>();
		}
		public Sequence_start_clauseContext sequence_start_clause(int i) {
			return GetRuleContext<Sequence_start_clauseContext>(i);
		}
		public Sequence_specContext[] sequence_spec() {
			return GetRuleContexts<Sequence_specContext>();
		}
		public Sequence_specContext sequence_spec(int i) {
			return GetRuleContext<Sequence_specContext>(i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_sequence; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_sequenceContext create_sequence() {
		Create_sequenceContext _localctx = new Create_sequenceContext(Context, State);
		EnterRule(_localctx, 164, RULE_create_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2063; Match(CREATE);
			State = 2064; Match(SEQUENCE);
			State = 2065; sequence_name();
			State = 2070;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CACHE || _la==CYCLE || _la==INCREMENT || ((((_la - 293)) & ~0x3f) == 0 && ((1L << (_la - 293)) & ((1L << (MAXVALUE - 293)) | (1L << (MINVALUE - 293)) | (1L << (NOCACHE - 293)) | (1L << (NOCYCLE - 293)) | (1L << (NOMAXVALUE - 293)) | (1L << (NOMINVALUE - 293)) | (1L << (NOORDER - 293)))) != 0) || _la==ORDER || _la==START) {
				{
				State = 2068;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case START:
					{
					State = 2066; sequence_start_clause();
					}
					break;
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NOCACHE:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOORDER:
				case ORDER:
					{
					State = 2067; sequence_spec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 2072;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2073; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequence_specContext : ParserRuleContext {
		public ITerminalNode INCREMENT() { return GetToken(oracleParser.INCREMENT, 0); }
		public ITerminalNode BY() { return GetToken(oracleParser.BY, 0); }
		public ITerminalNode UNSIGNED_INTEGER() { return GetToken(oracleParser.UNSIGNED_INTEGER, 0); }
		public ITerminalNode MAXVALUE() { return GetToken(oracleParser.MAXVALUE, 0); }
		public ITerminalNode NOMAXVALUE() { return GetToken(oracleParser.NOMAXVALUE, 0); }
		public ITerminalNode MINVALUE() { return GetToken(oracleParser.MINVALUE, 0); }
		public ITerminalNode NOMINVALUE() { return GetToken(oracleParser.NOMINVALUE, 0); }
		public ITerminalNode CYCLE() { return GetToken(oracleParser.CYCLE, 0); }
		public ITerminalNode NOCYCLE() { return GetToken(oracleParser.NOCYCLE, 0); }
		public ITerminalNode CACHE() { return GetToken(oracleParser.CACHE, 0); }
		public ITerminalNode NOCACHE() { return GetToken(oracleParser.NOCACHE, 0); }
		public ITerminalNode ORDER() { return GetToken(oracleParser.ORDER, 0); }
		public ITerminalNode NOORDER() { return GetToken(oracleParser.NOORDER, 0); }
		public Sequence_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sequence_specContext sequence_spec() {
		Sequence_specContext _localctx = new Sequence_specContext(Context, State);
		EnterRule(_localctx, 166, RULE_sequence_spec);
		try {
			State = 2091;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INCREMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2075; Match(INCREMENT);
				State = 2076; Match(BY);
				State = 2077; Match(UNSIGNED_INTEGER);
				}
				break;
			case MAXVALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2078; Match(MAXVALUE);
				State = 2079; Match(UNSIGNED_INTEGER);
				}
				break;
			case NOMAXVALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2080; Match(NOMAXVALUE);
				}
				break;
			case MINVALUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2081; Match(MINVALUE);
				State = 2082; Match(UNSIGNED_INTEGER);
				}
				break;
			case NOMINVALUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2083; Match(NOMINVALUE);
				}
				break;
			case CYCLE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2084; Match(CYCLE);
				}
				break;
			case NOCYCLE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2085; Match(NOCYCLE);
				}
				break;
			case CACHE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2086; Match(CACHE);
				State = 2087; Match(UNSIGNED_INTEGER);
				}
				break;
			case NOCACHE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2088; Match(NOCACHE);
				}
				break;
			case ORDER:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2089; Match(ORDER);
				}
				break;
			case NOORDER:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2090; Match(NOORDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequence_start_clauseContext : ParserRuleContext {
		public ITerminalNode START() { return GetToken(oracleParser.START, 0); }
		public ITerminalNode WITH() { return GetToken(oracleParser.WITH, 0); }
		public ITerminalNode UNSIGNED_INTEGER() { return GetToken(oracleParser.UNSIGNED_INTEGER, 0); }
		public Sequence_start_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence_start_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence_start_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sequence_start_clauseContext sequence_start_clause() {
		Sequence_start_clauseContext _localctx = new Sequence_start_clauseContext(Context, State);
		EnterRule(_localctx, 168, RULE_sequence_start_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2093; Match(START);
			State = 2094; Match(WITH);
			State = 2095; Match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_indexContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(oracleParser.CREATE, 0); }
		public ITerminalNode INDEX() { return GetToken(oracleParser.INDEX, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode ON() { return GetToken(oracleParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(oracleParser.UNIQUE, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(oracleParser.TABLESPACE, 0); }
		public ITerminalNode REGULAR_ID() { return GetToken(oracleParser.REGULAR_ID, 0); }
		public ITerminalNode COMPUTE() { return GetToken(oracleParser.COMPUTE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(oracleParser.STATISTICS, 0); }
		public Create_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_indexContext create_index() {
		Create_indexContext _localctx = new Create_indexContext(Context, State);
		EnterRule(_localctx, 170, RULE_create_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2097; Match(CREATE);
			State = 2099;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE) {
				{
				State = 2098; Match(UNIQUE);
				}
			}

			State = 2101; Match(INDEX);
			State = 2102; index_name();
			State = 2103; Match(ON);
			State = 2104; tableview_name();
			State = 2105; paren_column_list();
			State = 2108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLESPACE) {
				{
				State = 2106; Match(TABLESPACE);
				State = 2107; Match(REGULAR_ID);
				}
			}

			State = 2112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMPUTE) {
				{
				State = 2110; Match(COMPUTE);
				State = 2111; Match(STATISTICS);
				}
			}

			State = 2114; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_indexContext : ParserRuleContext {
		public Index_nameContext old_index_name;
		public Index_nameContext new_index_name;
		public ITerminalNode ALTER() { return GetToken(oracleParser.ALTER, 0); }
		public ITerminalNode INDEX() { return GetToken(oracleParser.INDEX, 0); }
		public ITerminalNode RENAME() { return GetToken(oracleParser.RENAME, 0); }
		public ITerminalNode TO() { return GetToken(oracleParser.TO, 0); }
		public Index_nameContext[] index_name() {
			return GetRuleContexts<Index_nameContext>();
		}
		public Index_nameContext index_name(int i) {
			return GetRuleContext<Index_nameContext>(i);
		}
		public Alter_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_index; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_indexContext alter_index() {
		Alter_indexContext _localctx = new Alter_indexContext(Context, State);
		EnterRule(_localctx, 172, RULE_alter_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2116; Match(ALTER);
			State = 2117; Match(INDEX);
			State = 2118; _localctx.old_index_name = index_name();
			State = 2119; Match(RENAME);
			State = 2120; Match(TO);
			State = 2121; _localctx.new_index_name = index_name();
			State = 2122; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_userContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(oracleParser.CREATE, 0); }
		public ITerminalNode USER() { return GetToken(oracleParser.USER, 0); }
		public User_object_nameContext user_object_name() {
			return GetRuleContext<User_object_nameContext>(0);
		}
		public Identified_byContext[] identified_by() {
			return GetRuleContexts<Identified_byContext>();
		}
		public Identified_byContext identified_by(int i) {
			return GetRuleContext<Identified_byContext>(i);
		}
		public Identified_other_clauseContext[] identified_other_clause() {
			return GetRuleContexts<Identified_other_clauseContext>();
		}
		public Identified_other_clauseContext identified_other_clause(int i) {
			return GetRuleContext<Identified_other_clauseContext>(i);
		}
		public User_tablespace_clauseContext[] user_tablespace_clause() {
			return GetRuleContexts<User_tablespace_clauseContext>();
		}
		public User_tablespace_clauseContext user_tablespace_clause(int i) {
			return GetRuleContext<User_tablespace_clauseContext>(i);
		}
		public Quota_clauseContext[] quota_clause() {
			return GetRuleContexts<Quota_clauseContext>();
		}
		public Quota_clauseContext quota_clause(int i) {
			return GetRuleContext<Quota_clauseContext>(i);
		}
		public Profile_clauseContext[] profile_clause() {
			return GetRuleContexts<Profile_clauseContext>();
		}
		public Profile_clauseContext profile_clause(int i) {
			return GetRuleContext<Profile_clauseContext>(i);
		}
		public Password_expire_clauseContext[] password_expire_clause() {
			return GetRuleContexts<Password_expire_clauseContext>();
		}
		public Password_expire_clauseContext password_expire_clause(int i) {
			return GetRuleContext<Password_expire_clauseContext>(i);
		}
		public User_lock_clauseContext[] user_lock_clause() {
			return GetRuleContexts<User_lock_clauseContext>();
		}
		public User_lock_clauseContext user_lock_clause(int i) {
			return GetRuleContext<User_lock_clauseContext>(i);
		}
		public User_editions_clauseContext[] user_editions_clause() {
			return GetRuleContexts<User_editions_clauseContext>();
		}
		public User_editions_clauseContext user_editions_clause(int i) {
			return GetRuleContext<User_editions_clauseContext>(i);
		}
		public Container_clauseContext[] container_clause() {
			return GetRuleContexts<Container_clauseContext>();
		}
		public Container_clauseContext container_clause(int i) {
			return GetRuleContext<Container_clauseContext>(i);
		}
		public Create_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_user(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_userContext create_user() {
		Create_userContext _localctx = new Create_userContext(Context, State);
		EnterRule(_localctx, 174, RULE_create_user);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2124; Match(CREATE);
			State = 2125; Match(USER);
			State = 2126; user_object_name();
			State = 2136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 2136;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
				case 1:
					{
					State = 2127; identified_by();
					}
					break;
				case 2:
					{
					State = 2128; identified_other_clause();
					}
					break;
				case 3:
					{
					State = 2129; user_tablespace_clause();
					}
					break;
				case 4:
					{
					State = 2130; quota_clause();
					}
					break;
				case 5:
					{
					State = 2131; profile_clause();
					}
					break;
				case 6:
					{
					State = 2132; password_expire_clause();
					}
					break;
				case 7:
					{
					State = 2133; user_lock_clause();
					}
					break;
				case 8:
					{
					State = 2134; user_editions_clause();
					}
					break;
				case 9:
					{
					State = 2135; container_clause();
					}
					break;
				}
				}
				State = 2138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ACCOUNT || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (CONTAINER - 92)) | (1L << (DEFAULT - 92)) | (1L << (ENABLE - 92)))) != 0) || _la==IDENTIFIED || ((((_la - 376)) & ~0x3f) == 0 && ((1L << (_la - 376)) & ((1L << (PASSWORD - 376)) | (1L << (PROFILE - 376)) | (1L << (QUOTA - 376)))) != 0) || _la==TEMPORARY );
			State = 2140; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_userContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(oracleParser.ALTER, 0); }
		public ITerminalNode USER() { return GetToken(oracleParser.USER, 0); }
		public User_object_nameContext[] user_object_name() {
			return GetRuleContexts<User_object_nameContext>();
		}
		public User_object_nameContext user_object_name(int i) {
			return GetRuleContext<User_object_nameContext>(i);
		}
		public Alter_identified_byContext[] alter_identified_by() {
			return GetRuleContexts<Alter_identified_byContext>();
		}
		public Alter_identified_byContext alter_identified_by(int i) {
			return GetRuleContext<Alter_identified_byContext>(i);
		}
		public Identified_other_clauseContext[] identified_other_clause() {
			return GetRuleContexts<Identified_other_clauseContext>();
		}
		public Identified_other_clauseContext identified_other_clause(int i) {
			return GetRuleContext<Identified_other_clauseContext>(i);
		}
		public User_tablespace_clauseContext[] user_tablespace_clause() {
			return GetRuleContexts<User_tablespace_clauseContext>();
		}
		public User_tablespace_clauseContext user_tablespace_clause(int i) {
			return GetRuleContext<User_tablespace_clauseContext>(i);
		}
		public Quota_clauseContext[] quota_clause() {
			return GetRuleContexts<Quota_clauseContext>();
		}
		public Quota_clauseContext quota_clause(int i) {
			return GetRuleContext<Quota_clauseContext>(i);
		}
		public Profile_clauseContext[] profile_clause() {
			return GetRuleContexts<Profile_clauseContext>();
		}
		public Profile_clauseContext profile_clause(int i) {
			return GetRuleContext<Profile_clauseContext>(i);
		}
		public User_default_role_clauseContext[] user_default_role_clause() {
			return GetRuleContexts<User_default_role_clauseContext>();
		}
		public User_default_role_clauseContext user_default_role_clause(int i) {
			return GetRuleContext<User_default_role_clauseContext>(i);
		}
		public Password_expire_clauseContext[] password_expire_clause() {
			return GetRuleContexts<Password_expire_clauseContext>();
		}
		public Password_expire_clauseContext password_expire_clause(int i) {
			return GetRuleContext<Password_expire_clauseContext>(i);
		}
		public User_lock_clauseContext[] user_lock_clause() {
			return GetRuleContexts<User_lock_clauseContext>();
		}
		public User_lock_clauseContext user_lock_clause(int i) {
			return GetRuleContext<User_lock_clauseContext>(i);
		}
		public Alter_user_editions_clauseContext[] alter_user_editions_clause() {
			return GetRuleContexts<Alter_user_editions_clauseContext>();
		}
		public Alter_user_editions_clauseContext alter_user_editions_clause(int i) {
			return GetRuleContext<Alter_user_editions_clauseContext>(i);
		}
		public Container_clauseContext[] container_clause() {
			return GetRuleContexts<Container_clauseContext>();
		}
		public Container_clauseContext container_clause(int i) {
			return GetRuleContext<Container_clauseContext>(i);
		}
		public Container_data_clauseContext[] container_data_clause() {
			return GetRuleContexts<Container_data_clauseContext>();
		}
		public Container_data_clauseContext container_data_clause(int i) {
			return GetRuleContext<Container_data_clauseContext>(i);
		}
		public Proxy_clauseContext proxy_clause() {
			return GetRuleContext<Proxy_clauseContext>(0);
		}
		public Alter_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_user(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_userContext alter_user() {
		Alter_userContext _localctx = new Alter_userContext(Context, State);
		EnterRule(_localctx, 176, RULE_alter_user);
		int _la;
		try {
			State = 2173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2142; Match(ALTER);
				State = 2143; Match(USER);
				State = 2144; user_object_name();
				State = 2156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 2156;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
					case 1:
						{
						State = 2145; alter_identified_by();
						}
						break;
					case 2:
						{
						State = 2146; identified_other_clause();
						}
						break;
					case 3:
						{
						State = 2147; user_tablespace_clause();
						}
						break;
					case 4:
						{
						State = 2148; quota_clause();
						}
						break;
					case 5:
						{
						State = 2149; profile_clause();
						}
						break;
					case 6:
						{
						State = 2150; user_default_role_clause();
						}
						break;
					case 7:
						{
						State = 2151; password_expire_clause();
						}
						break;
					case 8:
						{
						State = 2152; user_lock_clause();
						}
						break;
					case 9:
						{
						State = 2153; alter_user_editions_clause();
						}
						break;
					case 10:
						{
						State = 2154; container_clause();
						}
						break;
					case 11:
						{
						State = 2155; container_data_clause();
						}
						break;
					}
					}
					State = 2158;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ACCOUNT || _la==ADD || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (CONTAINER - 92)) | (1L << (DEFAULT - 92)) | (1L << (ENABLE - 92)))) != 0) || _la==IDENTIFIED || ((((_la - 376)) & ~0x3f) == 0 && ((1L << (_la - 376)) & ((1L << (PASSWORD - 376)) | (1L << (PROFILE - 376)) | (1L << (QUOTA - 376)) | (1L << (REMOVE - 376)))) != 0) || _la==SET || _la==TEMPORARY );
				State = 2160; Match(SEMICOLON);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case COMMA:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2163;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2162; Match(COMMA);
						}
					}

					State = 2165; user_object_name();
					}
					}
					State = 2168;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (COMMA - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
				State = 2170; proxy_clause();
				State = 2171; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_identified_byContext : ParserRuleContext {
		public Identified_byContext identified_by() {
			return GetRuleContext<Identified_byContext>(0);
		}
		public ITerminalNode REPLACE() { return GetToken(oracleParser.REPLACE, 0); }
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Alter_identified_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_identified_by; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_identified_by(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_identified_byContext alter_identified_by() {
		Alter_identified_byContext _localctx = new Alter_identified_byContext(Context, State);
		EnterRule(_localctx, 178, RULE_alter_identified_by);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2175; identified_by();
			State = 2178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REPLACE) {
				{
				State = 2176; Match(REPLACE);
				State = 2177; id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identified_byContext : ParserRuleContext {
		public ITerminalNode IDENTIFIED() { return GetToken(oracleParser.IDENTIFIED, 0); }
		public ITerminalNode BY() { return GetToken(oracleParser.BY, 0); }
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Identified_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identified_by; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentified_by(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identified_byContext identified_by() {
		Identified_byContext _localctx = new Identified_byContext(Context, State);
		EnterRule(_localctx, 180, RULE_identified_by);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2180; Match(IDENTIFIED);
			State = 2181; Match(BY);
			State = 2182; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identified_other_clauseContext : ParserRuleContext {
		public ITerminalNode IDENTIFIED() { return GetToken(oracleParser.IDENTIFIED, 0); }
		public ITerminalNode EXTERNALLY() { return GetToken(oracleParser.EXTERNALLY, 0); }
		public ITerminalNode GLOBALLY() { return GetToken(oracleParser.GLOBALLY, 0); }
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public Quoted_stringContext quoted_string() {
			return GetRuleContext<Quoted_stringContext>(0);
		}
		public Identified_other_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identified_other_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentified_other_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identified_other_clauseContext identified_other_clause() {
		Identified_other_clauseContext _localctx = new Identified_other_clauseContext(Context, State);
		EnterRule(_localctx, 182, RULE_identified_other_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2184; Match(IDENTIFIED);
			State = 2185;
			_la = TokenStream.LA(1);
			if ( !(_la==EXTERNALLY || _la==GLOBALLY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 2186; Match(AS);
				State = 2187; quoted_string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class User_tablespace_clauseContext : ParserRuleContext {
		public ITerminalNode TABLESPACE() { return GetToken(oracleParser.TABLESPACE, 0); }
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(oracleParser.DEFAULT, 0); }
		public ITerminalNode TEMPORARY() { return GetToken(oracleParser.TEMPORARY, 0); }
		public User_tablespace_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user_tablespace_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUser_tablespace_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public User_tablespace_clauseContext user_tablespace_clause() {
		User_tablespace_clauseContext _localctx = new User_tablespace_clauseContext(Context, State);
		EnterRule(_localctx, 184, RULE_user_tablespace_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2190;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFAULT || _la==TEMPORARY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2191; Match(TABLESPACE);
			State = 2192; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Quota_clauseContext : ParserRuleContext {
		public ITerminalNode QUOTA() { return GetToken(oracleParser.QUOTA, 0); }
		public ITerminalNode ON() { return GetToken(oracleParser.ON, 0); }
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Size_clauseContext size_clause() {
			return GetRuleContext<Size_clauseContext>(0);
		}
		public ITerminalNode UNLIMITED() { return GetToken(oracleParser.UNLIMITED, 0); }
		public Quota_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quota_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuota_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Quota_clauseContext quota_clause() {
		Quota_clauseContext _localctx = new Quota_clauseContext(Context, State);
		EnterRule(_localctx, 186, RULE_quota_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2194; Match(QUOTA);
			State = 2197;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNSIGNED_INTEGER:
				{
				State = 2195; size_clause();
				}
				break;
			case UNLIMITED:
				{
				State = 2196; Match(UNLIMITED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2199; Match(ON);
			State = 2200; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Profile_clauseContext : ParserRuleContext {
		public ITerminalNode PROFILE() { return GetToken(oracleParser.PROFILE, 0); }
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Profile_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_profile_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProfile_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Profile_clauseContext profile_clause() {
		Profile_clauseContext _localctx = new Profile_clauseContext(Context, State);
		EnterRule(_localctx, 188, RULE_profile_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2202; Match(PROFILE);
			State = 2203; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Role_clauseContext : ParserRuleContext {
		public Role_nameContext[] role_name() {
			return GetRuleContexts<Role_nameContext>();
		}
		public Role_nameContext role_name(int i) {
			return GetRuleContext<Role_nameContext>(i);
		}
		public ITerminalNode ALL() { return GetToken(oracleParser.ALL, 0); }
		public ITerminalNode[] EXCEPT() { return GetTokens(oracleParser.EXCEPT); }
		public ITerminalNode EXCEPT(int i) {
			return GetToken(oracleParser.EXCEPT, i);
		}
		public Role_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_role_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRole_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Role_clauseContext role_clause() {
		Role_clauseContext _localctx = new Role_clauseContext(Context, State);
		EnterRule(_localctx, 190, RULE_role_clause);
		int _la;
		try {
			int _alt;
			State = 2228;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case COMMA:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2209;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2206;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2205; Match(COMMA);
							}
						}

						State = 2208; role_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2211;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,190,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2213; Match(ALL);
				State = 2225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EXCEPT) {
					{
					{
					State = 2214; Match(EXCEPT);
					State = 2219;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 2216;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 2215; Match(COMMA);
								}
							}

							State = 2218; role_name();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2221;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,192,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					State = 2227;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class User_default_role_clauseContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(oracleParser.DEFAULT, 0); }
		public ITerminalNode ROLE() { return GetToken(oracleParser.ROLE, 0); }
		public ITerminalNode NONE() { return GetToken(oracleParser.NONE, 0); }
		public Role_clauseContext role_clause() {
			return GetRuleContext<Role_clauseContext>(0);
		}
		public User_default_role_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user_default_role_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUser_default_role_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public User_default_role_clauseContext user_default_role_clause() {
		User_default_role_clauseContext _localctx = new User_default_role_clauseContext(Context, State);
		EnterRule(_localctx, 192, RULE_user_default_role_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2230; Match(DEFAULT);
			State = 2231; Match(ROLE);
			State = 2234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
			case 1:
				{
				State = 2232; Match(NONE);
				}
				break;
			case 2:
				{
				State = 2233; role_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Password_expire_clauseContext : ParserRuleContext {
		public ITerminalNode PASSWORD() { return GetToken(oracleParser.PASSWORD, 0); }
		public ITerminalNode EXPIRE() { return GetToken(oracleParser.EXPIRE, 0); }
		public Password_expire_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_password_expire_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPassword_expire_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Password_expire_clauseContext password_expire_clause() {
		Password_expire_clauseContext _localctx = new Password_expire_clauseContext(Context, State);
		EnterRule(_localctx, 194, RULE_password_expire_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2236; Match(PASSWORD);
			State = 2237; Match(EXPIRE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class User_lock_clauseContext : ParserRuleContext {
		public ITerminalNode ACCOUNT() { return GetToken(oracleParser.ACCOUNT, 0); }
		public ITerminalNode LOCK() { return GetToken(oracleParser.LOCK, 0); }
		public ITerminalNode UNLOCK() { return GetToken(oracleParser.UNLOCK, 0); }
		public User_lock_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user_lock_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUser_lock_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public User_lock_clauseContext user_lock_clause() {
		User_lock_clauseContext _localctx = new User_lock_clauseContext(Context, State);
		EnterRule(_localctx, 196, RULE_user_lock_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2239; Match(ACCOUNT);
			State = 2240;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class User_editions_clauseContext : ParserRuleContext {
		public ITerminalNode ENABLE() { return GetToken(oracleParser.ENABLE, 0); }
		public ITerminalNode EDITIONS() { return GetToken(oracleParser.EDITIONS, 0); }
		public User_editions_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user_editions_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUser_editions_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public User_editions_clauseContext user_editions_clause() {
		User_editions_clauseContext _localctx = new User_editions_clauseContext(Context, State);
		EnterRule(_localctx, 198, RULE_user_editions_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2242; Match(ENABLE);
			State = 2243; Match(EDITIONS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_user_editions_clauseContext : ParserRuleContext {
		public User_editions_clauseContext user_editions_clause() {
			return GetRuleContext<User_editions_clauseContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(oracleParser.FOR, 0); }
		public ITerminalNode FORCE() { return GetToken(oracleParser.FORCE, 0); }
		public Regular_idContext[] regular_id() {
			return GetRuleContexts<Regular_idContext>();
		}
		public Regular_idContext regular_id(int i) {
			return GetRuleContext<Regular_idContext>(i);
		}
		public Alter_user_editions_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user_editions_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_user_editions_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_user_editions_clauseContext alter_user_editions_clause() {
		Alter_user_editions_clauseContext _localctx = new Alter_user_editions_clauseContext(Context, State);
		EnterRule(_localctx, 200, RULE_alter_user_editions_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2245; user_editions_clause();
			State = 2255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 2246; Match(FOR);
				State = 2251;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2248;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2247; Match(COMMA);
							}
						}

						State = 2250; regular_id();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2253;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,197,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			State = 2258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE) {
				{
				State = 2257; Match(FORCE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proxy_clauseContext : ParserRuleContext {
		public ITerminalNode REVOKE() { return GetToken(oracleParser.REVOKE, 0); }
		public ITerminalNode CONNECT() { return GetToken(oracleParser.CONNECT, 0); }
		public ITerminalNode THROUGH() { return GetToken(oracleParser.THROUGH, 0); }
		public ITerminalNode ENTERPRISE() { return GetToken(oracleParser.ENTERPRISE, 0); }
		public ITerminalNode USERS() { return GetToken(oracleParser.USERS, 0); }
		public User_object_nameContext user_object_name() {
			return GetRuleContext<User_object_nameContext>(0);
		}
		public ITerminalNode GRANT() { return GetToken(oracleParser.GRANT, 0); }
		public ITerminalNode WITH() { return GetToken(oracleParser.WITH, 0); }
		public ITerminalNode AUTHENTICATION() { return GetToken(oracleParser.AUTHENTICATION, 0); }
		public ITerminalNode REQUIRED() { return GetToken(oracleParser.REQUIRED, 0); }
		public ITerminalNode AUTHENTICATED() { return GetToken(oracleParser.AUTHENTICATED, 0); }
		public ITerminalNode USING() { return GetToken(oracleParser.USING, 0); }
		public ITerminalNode NO() { return GetToken(oracleParser.NO, 0); }
		public ITerminalNode ROLES() { return GetToken(oracleParser.ROLES, 0); }
		public ITerminalNode ROLE() { return GetToken(oracleParser.ROLE, 0); }
		public Role_clauseContext role_clause() {
			return GetRuleContext<Role_clauseContext>(0);
		}
		public ITerminalNode PASSWORD() { return GetToken(oracleParser.PASSWORD, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(oracleParser.CERTIFICATE, 0); }
		public ITerminalNode DISTINGUISHED() { return GetToken(oracleParser.DISTINGUISHED, 0); }
		public ITerminalNode NAME() { return GetToken(oracleParser.NAME, 0); }
		public Proxy_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proxy_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProxy_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Proxy_clauseContext proxy_clause() {
		Proxy_clauseContext _localctx = new Proxy_clauseContext(Context, State);
		EnterRule(_localctx, 202, RULE_proxy_clause);
		int _la;
		try {
			State = 2299;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REVOKE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2260; Match(REVOKE);
				State = 2261; Match(CONNECT);
				State = 2262; Match(THROUGH);
				State = 2266;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ENTERPRISE:
					{
					State = 2263; Match(ENTERPRISE);
					State = 2264; Match(USERS);
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					State = 2265; user_object_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case GRANT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2268; Match(GRANT);
				State = 2269; Match(CONNECT);
				State = 2270; Match(THROUGH);
				State = 2297;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ENTERPRISE:
					{
					State = 2271; Match(ENTERPRISE);
					State = 2272; Match(USERS);
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					State = 2273; user_object_name();
					State = 2281;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WITH) {
						{
						State = 2274; Match(WITH);
						State = 2279;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NO:
							{
							State = 2275; Match(NO);
							State = 2276; Match(ROLES);
							}
							break;
						case ROLE:
							{
							State = 2277; Match(ROLE);
							State = 2278; role_clause();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					State = 2285;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AUTHENTICATION) {
						{
						State = 2283; Match(AUTHENTICATION);
						State = 2284; Match(REQUIRED);
						}
					}

					State = 2295;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AUTHENTICATED) {
						{
						State = 2287; Match(AUTHENTICATED);
						State = 2288; Match(USING);
						State = 2293;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case PASSWORD:
							{
							State = 2289; Match(PASSWORD);
							}
							break;
						case CERTIFICATE:
							{
							State = 2290; Match(CERTIFICATE);
							}
							break;
						case DISTINGUISHED:
							{
							State = 2291; Match(DISTINGUISHED);
							State = 2292; Match(NAME);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Container_namesContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(oracleParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(oracleParser.RIGHT_PAREN, 0); }
		public Id_expressionContext[] id_expression() {
			return GetRuleContexts<Id_expressionContext>();
		}
		public Id_expressionContext id_expression(int i) {
			return GetRuleContext<Id_expressionContext>(i);
		}
		public Container_namesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_container_names; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainer_names(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Container_namesContext container_names() {
		Container_namesContext _localctx = new Container_namesContext(Context, State);
		EnterRule(_localctx, 204, RULE_container_names);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2301; Match(LEFT_PAREN);
			State = 2306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2302; Match(COMMA);
					}
				}

				State = 2305; id_expression();
				}
				}
				State = 2308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (COMMA - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
			State = 2310; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_container_dataContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(oracleParser.SET, 0); }
		public ITerminalNode CONTAINER_DATA() { return GetToken(oracleParser.CONTAINER_DATA, 0); }
		public ITerminalNode EQUALS_OP() { return GetToken(oracleParser.EQUALS_OP, 0); }
		public ITerminalNode ALL() { return GetToken(oracleParser.ALL, 0); }
		public ITerminalNode DEFAULT() { return GetToken(oracleParser.DEFAULT, 0); }
		public Container_namesContext container_names() {
			return GetRuleContext<Container_namesContext>(0);
		}
		public Set_container_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_container_data; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_container_data(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_container_dataContext set_container_data() {
		Set_container_dataContext _localctx = new Set_container_dataContext(Context, State);
		EnterRule(_localctx, 206, RULE_set_container_data);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2312; Match(SET);
			State = 2313; Match(CONTAINER_DATA);
			State = 2314; Match(EQUALS_OP);
			State = 2318;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				{
				State = 2315; Match(ALL);
				}
				break;
			case DEFAULT:
				{
				State = 2316; Match(DEFAULT);
				}
				break;
			case LEFT_PAREN:
				{
				State = 2317; container_names();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_rem_container_dataContext : ParserRuleContext {
		public ITerminalNode CONTAINER_DATA() { return GetToken(oracleParser.CONTAINER_DATA, 0); }
		public ITerminalNode EQUALS_OP() { return GetToken(oracleParser.EQUALS_OP, 0); }
		public Container_namesContext container_names() {
			return GetRuleContext<Container_namesContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(oracleParser.ADD, 0); }
		public ITerminalNode REMOVE() { return GetToken(oracleParser.REMOVE, 0); }
		public Add_rem_container_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_rem_container_data; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_rem_container_data(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_rem_container_dataContext add_rem_container_data() {
		Add_rem_container_dataContext _localctx = new Add_rem_container_dataContext(Context, State);
		EnterRule(_localctx, 208, RULE_add_rem_container_data);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2320;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==REMOVE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2321; Match(CONTAINER_DATA);
			State = 2322; Match(EQUALS_OP);
			State = 2323; container_names();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Container_data_clauseContext : ParserRuleContext {
		public Set_container_dataContext set_container_data() {
			return GetRuleContext<Set_container_dataContext>(0);
		}
		public Add_rem_container_dataContext add_rem_container_data() {
			return GetRuleContext<Add_rem_container_dataContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(oracleParser.FOR, 0); }
		public Container_tableview_nameContext container_tableview_name() {
			return GetRuleContext<Container_tableview_nameContext>(0);
		}
		public Container_data_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_container_data_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainer_data_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Container_data_clauseContext container_data_clause() {
		Container_data_clauseContext _localctx = new Container_data_clauseContext(Context, State);
		EnterRule(_localctx, 210, RULE_container_data_clause);
		int _la;
		try {
			State = 2331;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2325; set_container_data();
				}
				break;
			case ADD:
			case REMOVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2326; add_rem_container_data();
				State = 2329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 2327; Match(FOR);
					State = 2328; container_tableview_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_indexContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(oracleParser.DROP, 0); }
		public ITerminalNode INDEX() { return GetToken(oracleParser.INDEX, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public Drop_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_indexContext drop_index() {
		Drop_indexContext _localctx = new Drop_indexContext(Context, State);
		EnterRule(_localctx, 212, RULE_drop_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2333; Match(DROP);
			State = 2334; Match(INDEX);
			State = 2335; index_name();
			State = 2336; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_statementContext : ParserRuleContext {
		public ITerminalNode[] GRANT() { return GetTokens(oracleParser.GRANT); }
		public ITerminalNode GRANT(int i) {
			return GetToken(oracleParser.GRANT, i);
		}
		public ITerminalNode TO() { return GetToken(oracleParser.TO, 0); }
		public ITerminalNode ON() { return GetToken(oracleParser.ON, 0); }
		public Grant_object_nameContext grant_object_name() {
			return GetRuleContext<Grant_object_nameContext>(0);
		}
		public Grantee_nameContext[] grantee_name() {
			return GetRuleContexts<Grantee_nameContext>();
		}
		public Grantee_nameContext grantee_name(int i) {
			return GetRuleContext<Grantee_nameContext>(i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(oracleParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(oracleParser.PUBLIC, i);
		}
		public ITerminalNode[] WITH() { return GetTokens(oracleParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(oracleParser.WITH, i);
		}
		public ITerminalNode[] OPTION() { return GetTokens(oracleParser.OPTION); }
		public ITerminalNode OPTION(int i) {
			return GetToken(oracleParser.OPTION, i);
		}
		public ITerminalNode HIERARCHY() { return GetToken(oracleParser.HIERARCHY, 0); }
		public Container_clauseContext container_clause() {
			return GetRuleContext<Container_clauseContext>(0);
		}
		public ITerminalNode ADMIN() { return GetToken(oracleParser.ADMIN, 0); }
		public ITerminalNode DELEGATE() { return GetToken(oracleParser.DELEGATE, 0); }
		public Role_nameContext[] role_name() {
			return GetRuleContexts<Role_nameContext>();
		}
		public Role_nameContext role_name(int i) {
			return GetRuleContext<Role_nameContext>(i);
		}
		public System_privilegeContext[] system_privilege() {
			return GetRuleContexts<System_privilegeContext>();
		}
		public System_privilegeContext system_privilege(int i) {
			return GetRuleContext<System_privilegeContext>(i);
		}
		public Object_privilegeContext[] object_privilege() {
			return GetRuleContexts<Object_privilegeContext>();
		}
		public Object_privilegeContext object_privilege(int i) {
			return GetRuleContext<Object_privilegeContext>(i);
		}
		public Paren_column_listContext[] paren_column_list() {
			return GetRuleContexts<Paren_column_listContext>();
		}
		public Paren_column_listContext paren_column_list(int i) {
			return GetRuleContext<Paren_column_listContext>(i);
		}
		public Grant_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrant_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grant_statementContext grant_statement() {
		Grant_statementContext _localctx = new Grant_statementContext(Context, State);
		EnterRule(_localctx, 214, RULE_grant_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2338; Match(GRANT);
			State = 2350;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2340;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2339; Match(COMMA);
						}
					}

					State = 2348;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,215,Context) ) {
					case 1:
						{
						State = 2342; role_name();
						}
						break;
					case 2:
						{
						State = 2343; system_privilege();
						}
						break;
					case 3:
						{
						State = 2344; object_privilege();
						State = 2346;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==LEFT_PAREN) {
							{
							State = 2345; paren_column_list();
							}
						}

						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2352;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,216,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 2356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 2354; Match(ON);
				State = 2355; grant_object_name();
				}
			}

			State = 2358; Match(TO);
			State = 2364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 2364;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case COMMA:
				case REGULAR_ID:
					{
					State = 2360;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2359; Match(COMMA);
						}
					}

					State = 2362; grantee_name();
					}
					break;
				case PUBLIC:
					{
					State = 2363; Match(PUBLIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 2366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (PUBLIC - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (COMMA - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
			State = 2371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,221,Context) ) {
			case 1:
				{
				State = 2368; Match(WITH);
				State = 2369;
				_la = TokenStream.LA(1);
				if ( !(_la==ADMIN || _la==DELEGATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2370; Match(OPTION);
				}
				break;
			}
			State = 2376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,222,Context) ) {
			case 1:
				{
				State = 2373; Match(WITH);
				State = 2374; Match(HIERARCHY);
				State = 2375; Match(OPTION);
				}
				break;
			}
			State = 2381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2378; Match(WITH);
				State = 2379; Match(GRANT);
				State = 2380; Match(OPTION);
				}
			}

			State = 2384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTAINER) {
				{
				State = 2383; container_clause();
				}
			}

			State = 2386; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Container_clauseContext : ParserRuleContext {
		public ITerminalNode CONTAINER() { return GetToken(oracleParser.CONTAINER, 0); }
		public ITerminalNode EQUALS_OP() { return GetToken(oracleParser.EQUALS_OP, 0); }
		public ITerminalNode CURRENT() { return GetToken(oracleParser.CURRENT, 0); }
		public ITerminalNode ALL() { return GetToken(oracleParser.ALL, 0); }
		public Container_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_container_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainer_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Container_clauseContext container_clause() {
		Container_clauseContext _localctx = new Container_clauseContext(Context, State);
		EnterRule(_localctx, 216, RULE_container_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2388; Match(CONTAINER);
			State = 2389; Match(EQUALS_OP);
			State = 2390;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==CURRENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_viewContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(oracleParser.CREATE, 0); }
		public ITerminalNode VIEW() { return GetToken(oracleParser.VIEW, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode[] OR() { return GetTokens(oracleParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(oracleParser.OR, i);
		}
		public ITerminalNode REPLACE() { return GetToken(oracleParser.REPLACE, 0); }
		public ITerminalNode FORCE() { return GetToken(oracleParser.FORCE, 0); }
		public ITerminalNode EDITIONING() { return GetToken(oracleParser.EDITIONING, 0); }
		public View_optionsContext view_options() {
			return GetRuleContext<View_optionsContext>(0);
		}
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return GetRuleContext<Subquery_restriction_clauseContext>(0);
		}
		public Create_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_viewContext create_view() {
		Create_viewContext _localctx = new Create_viewContext(Context, State);
		EnterRule(_localctx, 218, RULE_create_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2392; Match(CREATE);
			State = 2395;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
			case 1:
				{
				State = 2393; Match(OR);
				State = 2394; Match(REPLACE);
				}
				break;
			}
			State = 2401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE || _la==OR) {
				{
				State = 2398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 2397; Match(OR);
					}
				}

				State = 2400; Match(FORCE);
				}
			}

			State = 2404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EDITIONING) {
				{
				State = 2403; Match(EDITIONING);
				}
			}

			State = 2406; Match(VIEW);
			State = 2407; tableview_name();
			State = 2409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OF || _la==LEFT_PAREN) {
				{
				State = 2408; view_options();
				}
			}

			State = 2411; Match(AS);
			State = 2412; subquery();
			State = 2414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
			case 1:
				{
				State = 2413; subquery_restriction_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_optionsContext : ParserRuleContext {
		public View_alias_constraintContext view_alias_constraint() {
			return GetRuleContext<View_alias_constraintContext>(0);
		}
		public Object_view_clauseContext object_view_clause() {
			return GetRuleContext<Object_view_clauseContext>(0);
		}
		public View_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_options; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_optionsContext view_options() {
		View_optionsContext _localctx = new View_optionsContext(Context, State);
		EnterRule(_localctx, 220, RULE_view_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2418;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_PAREN:
				{
				State = 2416; view_alias_constraint();
				}
				break;
			case OF:
				{
				State = 2417; object_view_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_alias_constraintContext : ParserRuleContext {
		public Table_aliasContext[] table_alias() {
			return GetRuleContexts<Table_aliasContext>();
		}
		public Table_aliasContext table_alias(int i) {
			return GetRuleContext<Table_aliasContext>(i);
		}
		public Out_of_line_constraintContext[] out_of_line_constraint() {
			return GetRuleContexts<Out_of_line_constraintContext>();
		}
		public Out_of_line_constraintContext out_of_line_constraint(int i) {
			return GetRuleContext<Out_of_line_constraintContext>(i);
		}
		public Inline_constraintContext[] inline_constraint() {
			return GetRuleContexts<Inline_constraintContext>();
		}
		public Inline_constraintContext inline_constraint(int i) {
			return GetRuleContext<Inline_constraintContext>(i);
		}
		public View_alias_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_alias_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_alias_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_alias_constraintContext view_alias_constraint() {
		View_alias_constraintContext _localctx = new View_alias_constraintContext(Context, State);
		EnterRule(_localctx, 222, RULE_view_alias_constraint);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2420; Match(LEFT_PAREN);
			State = 2434;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2421; Match(COMMA);
					}
				}

				State = 2432;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,234,Context) ) {
				case 1:
					{
					State = 2424; table_alias();
					State = 2428;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,233,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 2425; inline_constraint();
							}
							} 
						}
						State = 2430;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,233,Context);
					}
					}
					break;
				case 2:
					{
					State = 2431; out_of_line_constraint();
					}
					break;
				}
				}
				}
				State = 2436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHECK - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FOREIGN - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIMARY - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNIQUE - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (COMMA - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
			State = 2438; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_view_clauseContext : ParserRuleContext {
		public ITerminalNode OF() { return GetToken(oracleParser.OF, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(oracleParser.WITH, 0); }
		public ITerminalNode OBJECT() { return GetToken(oracleParser.OBJECT, 0); }
		public ITerminalNode UNDER() { return GetToken(oracleParser.UNDER, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(oracleParser.IDENTIFIER, 0); }
		public ITerminalNode ID() { return GetToken(oracleParser.ID, 0); }
		public ITerminalNode OID() { return GetToken(oracleParser.OID, 0); }
		public ITerminalNode DEFAULT() { return GetToken(oracleParser.DEFAULT, 0); }
		public ITerminalNode[] REGULAR_ID() { return GetTokens(oracleParser.REGULAR_ID); }
		public ITerminalNode REGULAR_ID(int i) {
			return GetToken(oracleParser.REGULAR_ID, i);
		}
		public Out_of_line_constraintContext[] out_of_line_constraint() {
			return GetRuleContexts<Out_of_line_constraintContext>();
		}
		public Out_of_line_constraintContext out_of_line_constraint(int i) {
			return GetRuleContext<Out_of_line_constraintContext>(i);
		}
		public Inline_constraintContext[] inline_constraint() {
			return GetRuleContexts<Inline_constraintContext>();
		}
		public Inline_constraintContext inline_constraint(int i) {
			return GetRuleContext<Inline_constraintContext>(i);
		}
		public Object_view_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_view_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_view_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_view_clauseContext object_view_clause() {
		Object_view_clauseContext _localctx = new Object_view_clauseContext(Context, State);
		EnterRule(_localctx, 224, RULE_object_view_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2440; Match(OF);
			State = 2441; type_name();
			State = 2460;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				{
				State = 2442; Match(WITH);
				State = 2443; Match(OBJECT);
				State = 2444;
				_la = TokenStream.LA(1);
				if ( !(_la==IDENTIFIER || _la==ID || _la==OID) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2456;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DEFAULT:
					{
					State = 2445; Match(DEFAULT);
					}
					break;
				case LEFT_PAREN:
					{
					State = 2446; Match(LEFT_PAREN);
					State = 2451;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 2448;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2447; Match(COMMA);
							}
						}

						State = 2450; Match(REGULAR_ID);
						}
						}
						State = 2453;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==COMMA || _la==REGULAR_ID );
					State = 2455; Match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case UNDER:
				{
				State = 2458; Match(UNDER);
				State = 2459; tableview_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LEFT_PAREN) {
				{
				{
				State = 2462; Match(LEFT_PAREN);
				State = 2471;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2464;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2463; Match(COMMA);
						}
					}

					State = 2469;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case CHECK:
					case CONSTRAINT:
					case FOREIGN:
					case PRIMARY:
					case UNIQUE:
						{
						State = 2466; out_of_line_constraint();
						}
						break;
					case REGULAR_ID:
						{
						State = 2467; Match(REGULAR_ID);
						State = 2468; inline_constraint();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 2473;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CHECK || _la==CONSTRAINT || _la==FOREIGN || _la==PRIMARY || _la==UNIQUE || _la==COMMA || _la==REGULAR_ID );
				State = 2475; Match(RIGHT_PAREN);
				}
				}
				State = 2481;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inline_constraintContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(oracleParser.NULL, 0); }
		public ITerminalNode UNIQUE() { return GetToken(oracleParser.UNIQUE, 0); }
		public ITerminalNode PRIMARY() { return GetToken(oracleParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(oracleParser.KEY, 0); }
		public References_clauseContext references_clause() {
			return GetRuleContext<References_clauseContext>(0);
		}
		public Check_constraintContext check_constraint() {
			return GetRuleContext<Check_constraintContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(oracleParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Constraint_stateContext constraint_state() {
			return GetRuleContext<Constraint_stateContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(oracleParser.NOT, 0); }
		public Inline_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inline_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInline_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inline_constraintContext inline_constraint() {
		Inline_constraintContext _localctx = new Inline_constraintContext(Context, State);
		EnterRule(_localctx, 226, RULE_inline_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT) {
				{
				State = 2482; Match(CONSTRAINT);
				State = 2483; constraint_name();
				}
			}

			State = 2495;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
			case NULL:
				{
				State = 2487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 2486; Match(NOT);
					}
				}

				State = 2489; Match(NULL);
				}
				break;
			case UNIQUE:
				{
				State = 2490; Match(UNIQUE);
				}
				break;
			case PRIMARY:
				{
				State = 2491; Match(PRIMARY);
				State = 2492; Match(KEY);
				}
				break;
			case REFERENCES:
				{
				State = 2493; references_clause();
				}
				break;
			case CHECK:
				{
				State = 2494; check_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2498;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,247,Context) ) {
			case 1:
				{
				State = 2497; constraint_state();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Out_of_line_constraintContext : ParserRuleContext {
		public Constraint_stateContext constraint_state() {
			return GetRuleContext<Constraint_stateContext>(0);
		}
		public Primary_key_clauseContext[] primary_key_clause() {
			return GetRuleContexts<Primary_key_clauseContext>();
		}
		public Primary_key_clauseContext primary_key_clause(int i) {
			return GetRuleContext<Primary_key_clauseContext>(i);
		}
		public Foreign_key_clauseContext[] foreign_key_clause() {
			return GetRuleContexts<Foreign_key_clauseContext>();
		}
		public Foreign_key_clauseContext foreign_key_clause(int i) {
			return GetRuleContext<Foreign_key_clauseContext>(i);
		}
		public Unique_key_clauseContext[] unique_key_clause() {
			return GetRuleContexts<Unique_key_clauseContext>();
		}
		public Unique_key_clauseContext unique_key_clause(int i) {
			return GetRuleContext<Unique_key_clauseContext>(i);
		}
		public Check_constraintContext[] check_constraint() {
			return GetRuleContexts<Check_constraintContext>();
		}
		public Check_constraintContext check_constraint(int i) {
			return GetRuleContext<Check_constraintContext>(i);
		}
		public ITerminalNode[] CONSTRAINT() { return GetTokens(oracleParser.CONSTRAINT); }
		public ITerminalNode CONSTRAINT(int i) {
			return GetToken(oracleParser.CONSTRAINT, i);
		}
		public Constraint_nameContext[] constraint_name() {
			return GetRuleContexts<Constraint_nameContext>();
		}
		public Constraint_nameContext constraint_name(int i) {
			return GetRuleContext<Constraint_nameContext>(i);
		}
		public Out_of_line_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_out_of_line_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOut_of_line_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Out_of_line_constraintContext out_of_line_constraint() {
		Out_of_line_constraintContext _localctx = new Out_of_line_constraintContext(Context, State);
		EnterRule(_localctx, 228, RULE_out_of_line_constraint);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2510;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2502;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CONSTRAINT) {
						{
						State = 2500; Match(CONSTRAINT);
						State = 2501; constraint_name();
						}
					}

					State = 2508;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PRIMARY:
						{
						State = 2504; primary_key_clause();
						}
						break;
					case FOREIGN:
						{
						State = 2505; foreign_key_clause();
						}
						break;
					case UNIQUE:
						{
						State = 2506; unique_key_clause();
						}
						break;
					case CHECK:
						{
						State = 2507; check_constraint();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2512;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,250,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 2515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
			case 1:
				{
				State = 2514; constraint_state();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constraint_stateContext : ParserRuleContext {
		public ITerminalNode[] DEFERRABLE() { return GetTokens(oracleParser.DEFERRABLE); }
		public ITerminalNode DEFERRABLE(int i) {
			return GetToken(oracleParser.DEFERRABLE, i);
		}
		public ITerminalNode[] INITIALLY() { return GetTokens(oracleParser.INITIALLY); }
		public ITerminalNode INITIALLY(int i) {
			return GetToken(oracleParser.INITIALLY, i);
		}
		public ITerminalNode[] IMMEDIATE() { return GetTokens(oracleParser.IMMEDIATE); }
		public ITerminalNode IMMEDIATE(int i) {
			return GetToken(oracleParser.IMMEDIATE, i);
		}
		public ITerminalNode[] DEFERRED() { return GetTokens(oracleParser.DEFERRED); }
		public ITerminalNode DEFERRED(int i) {
			return GetToken(oracleParser.DEFERRED, i);
		}
		public ITerminalNode[] RELY() { return GetTokens(oracleParser.RELY); }
		public ITerminalNode RELY(int i) {
			return GetToken(oracleParser.RELY, i);
		}
		public ITerminalNode[] NORELY() { return GetTokens(oracleParser.NORELY); }
		public ITerminalNode NORELY(int i) {
			return GetToken(oracleParser.NORELY, i);
		}
		public ITerminalNode[] ENABLE() { return GetTokens(oracleParser.ENABLE); }
		public ITerminalNode ENABLE(int i) {
			return GetToken(oracleParser.ENABLE, i);
		}
		public ITerminalNode[] DISABLE() { return GetTokens(oracleParser.DISABLE); }
		public ITerminalNode DISABLE(int i) {
			return GetToken(oracleParser.DISABLE, i);
		}
		public ITerminalNode[] VALIDATE() { return GetTokens(oracleParser.VALIDATE); }
		public ITerminalNode VALIDATE(int i) {
			return GetToken(oracleParser.VALIDATE, i);
		}
		public ITerminalNode[] NOVALIDATE() { return GetTokens(oracleParser.NOVALIDATE); }
		public ITerminalNode NOVALIDATE(int i) {
			return GetToken(oracleParser.NOVALIDATE, i);
		}
		public ITerminalNode[] NOT() { return GetTokens(oracleParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(oracleParser.NOT, i);
		}
		public Constraint_stateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint_state; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint_state(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constraint_stateContext constraint_state() {
		Constraint_stateContext _localctx = new Constraint_stateContext(Context, State);
		EnterRule(_localctx, 230, RULE_constraint_state);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2526;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 2526;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DEFERRABLE:
					case NOT:
						{
						State = 2518;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 2517; Match(NOT);
							}
						}

						State = 2520; Match(DEFERRABLE);
						}
						break;
					case INITIALLY:
						{
						State = 2521; Match(INITIALLY);
						State = 2522;
						_la = TokenStream.LA(1);
						if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case NORELY:
					case RELY:
						{
						State = 2523;
						_la = TokenStream.LA(1);
						if ( !(_la==NORELY || _la==RELY) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case DISABLE:
					case ENABLE:
						{
						State = 2524;
						_la = TokenStream.LA(1);
						if ( !(_la==DISABLE || _la==ENABLE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case NOVALIDATE:
					case VALIDATE:
						{
						State = 2525;
						_la = TokenStream.LA(1);
						if ( !(_la==NOVALIDATE || _la==VALIDATE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2528;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,254,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_tablespaceContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(oracleParser.CREATE, 0); }
		public Permanent_tablespace_clauseContext permanent_tablespace_clause() {
			return GetRuleContext<Permanent_tablespace_clauseContext>(0);
		}
		public Temporary_tablespace_clauseContext temporary_tablespace_clause() {
			return GetRuleContext<Temporary_tablespace_clauseContext>(0);
		}
		public Undo_tablespace_clauseContext undo_tablespace_clause() {
			return GetRuleContext<Undo_tablespace_clauseContext>(0);
		}
		public ITerminalNode BIGFILE() { return GetToken(oracleParser.BIGFILE, 0); }
		public ITerminalNode SMALLFILE() { return GetToken(oracleParser.SMALLFILE, 0); }
		public Create_tablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_tablespace; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_tablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_tablespaceContext create_tablespace() {
		Create_tablespaceContext _localctx = new Create_tablespaceContext(Context, State);
		EnterRule(_localctx, 232, RULE_create_tablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2530; Match(CREATE);
			State = 2532;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BIGFILE || _la==SMALLFILE) {
				{
				State = 2531;
				_la = TokenStream.LA(1);
				if ( !(_la==BIGFILE || _la==SMALLFILE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2537;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLESPACE:
				{
				State = 2534; permanent_tablespace_clause();
				}
				break;
			case TEMPORARY:
				{
				State = 2535; temporary_tablespace_clause();
				}
				break;
			case UNDO:
				{
				State = 2536; undo_tablespace_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2539; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Permanent_tablespace_clauseContext : ParserRuleContext {
		public ITerminalNode TABLESPACE() { return GetToken(oracleParser.TABLESPACE, 0); }
		public ITerminalNode REGULAR_ID() { return GetToken(oracleParser.REGULAR_ID, 0); }
		public Datafile_specificationContext datafile_specification() {
			return GetRuleContext<Datafile_specificationContext>(0);
		}
		public ITerminalNode[] MINIMUM() { return GetTokens(oracleParser.MINIMUM); }
		public ITerminalNode MINIMUM(int i) {
			return GetToken(oracleParser.MINIMUM, i);
		}
		public ITerminalNode[] EXTENT() { return GetTokens(oracleParser.EXTENT); }
		public ITerminalNode EXTENT(int i) {
			return GetToken(oracleParser.EXTENT, i);
		}
		public Size_clauseContext[] size_clause() {
			return GetRuleContexts<Size_clauseContext>();
		}
		public Size_clauseContext size_clause(int i) {
			return GetRuleContext<Size_clauseContext>(i);
		}
		public ITerminalNode[] BLOCKSIZE() { return GetTokens(oracleParser.BLOCKSIZE); }
		public ITerminalNode BLOCKSIZE(int i) {
			return GetToken(oracleParser.BLOCKSIZE, i);
		}
		public Logging_clauseContext[] logging_clause() {
			return GetRuleContexts<Logging_clauseContext>();
		}
		public Logging_clauseContext logging_clause(int i) {
			return GetRuleContext<Logging_clauseContext>(i);
		}
		public ITerminalNode[] FORCE() { return GetTokens(oracleParser.FORCE); }
		public ITerminalNode FORCE(int i) {
			return GetToken(oracleParser.FORCE, i);
		}
		public ITerminalNode[] LOGGING() { return GetTokens(oracleParser.LOGGING); }
		public ITerminalNode LOGGING(int i) {
			return GetToken(oracleParser.LOGGING, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(oracleParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(oracleParser.ENCRYPTION, i);
		}
		public Tablespace_encryption_specContext[] tablespace_encryption_spec() {
			return GetRuleContexts<Tablespace_encryption_specContext>();
		}
		public Tablespace_encryption_specContext tablespace_encryption_spec(int i) {
			return GetRuleContext<Tablespace_encryption_specContext>(i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(oracleParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(oracleParser.DEFAULT, i);
		}
		public Extent_management_clauseContext[] extent_management_clause() {
			return GetRuleContexts<Extent_management_clauseContext>();
		}
		public Extent_management_clauseContext extent_management_clause(int i) {
			return GetRuleContext<Extent_management_clauseContext>(i);
		}
		public Segment_management_clauseContext[] segment_management_clause() {
			return GetRuleContexts<Segment_management_clauseContext>();
		}
		public Segment_management_clauseContext segment_management_clause(int i) {
			return GetRuleContext<Segment_management_clauseContext>(i);
		}
		public Flashback_mode_clauseContext[] flashback_mode_clause() {
			return GetRuleContexts<Flashback_mode_clauseContext>();
		}
		public Flashback_mode_clauseContext flashback_mode_clause(int i) {
			return GetRuleContext<Flashback_mode_clauseContext>(i);
		}
		public ITerminalNode[] ONLINE() { return GetTokens(oracleParser.ONLINE); }
		public ITerminalNode ONLINE(int i) {
			return GetToken(oracleParser.ONLINE, i);
		}
		public ITerminalNode[] OFFLINE() { return GetTokens(oracleParser.OFFLINE); }
		public ITerminalNode OFFLINE(int i) {
			return GetToken(oracleParser.OFFLINE, i);
		}
		public Permanent_tablespace_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permanent_tablespace_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermanent_tablespace_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Permanent_tablespace_clauseContext permanent_tablespace_clause() {
		Permanent_tablespace_clauseContext _localctx = new Permanent_tablespace_clauseContext(Context, State);
		EnterRule(_localctx, 234, RULE_permanent_tablespace_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2541; Match(TABLESPACE);
			State = 2542; Match(REGULAR_ID);
			State = 2544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATAFILE) {
				{
				State = 2543; datafile_specification();
				}
			}

			State = 2563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BLOCKSIZE || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (DEFAULT - 126)) | (1L << (ENCRYPTION - 126)) | (1L << (EXTENT - 126)) | (1L << (FILESYSTEM_LIKE_LOGGING - 126)) | (1L << (FLASHBACK - 126)))) != 0) || _la==FORCE || ((((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & ((1L << (LOGGING - 277)) | (1L << (MINIMUM - 277)) | (1L << (NOLOGGING - 277)))) != 0) || _la==OFFLINE || _la==ONLINE || _la==SEGMENT) {
				{
				State = 2561;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MINIMUM:
					{
					State = 2546; Match(MINIMUM);
					State = 2547; Match(EXTENT);
					State = 2548; size_clause();
					}
					break;
				case BLOCKSIZE:
					{
					State = 2549; Match(BLOCKSIZE);
					State = 2550; size_clause();
					}
					break;
				case FILESYSTEM_LIKE_LOGGING:
				case LOGGING:
				case NOLOGGING:
					{
					State = 2551; logging_clause();
					}
					break;
				case FORCE:
					{
					State = 2552; Match(FORCE);
					State = 2553; Match(LOGGING);
					}
					break;
				case OFFLINE:
				case ONLINE:
					{
					State = 2554;
					_la = TokenStream.LA(1);
					if ( !(_la==OFFLINE || _la==ONLINE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case ENCRYPTION:
					{
					State = 2555; Match(ENCRYPTION);
					State = 2556; tablespace_encryption_spec();
					}
					break;
				case DEFAULT:
					{
					State = 2557; Match(DEFAULT);
					}
					break;
				case EXTENT:
					{
					State = 2558; extent_management_clause();
					}
					break;
				case SEGMENT:
					{
					State = 2559; segment_management_clause();
					}
					break;
				case FLASHBACK:
					{
					State = 2560; flashback_mode_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 2565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablespace_encryption_specContext : ParserRuleContext {
		public IToken encrypt_algorithm;
		public ITerminalNode USING() { return GetToken(oracleParser.USING, 0); }
		public ITerminalNode CHAR_STRING() { return GetToken(oracleParser.CHAR_STRING, 0); }
		public Tablespace_encryption_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespace_encryption_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespace_encryption_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tablespace_encryption_specContext tablespace_encryption_spec() {
		Tablespace_encryption_specContext _localctx = new Tablespace_encryption_specContext(Context, State);
		EnterRule(_localctx, 236, RULE_tablespace_encryption_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2566; Match(USING);
			State = 2567; _localctx.encrypt_algorithm = Match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logging_clauseContext : ParserRuleContext {
		public ITerminalNode LOGGING() { return GetToken(oracleParser.LOGGING, 0); }
		public ITerminalNode NOLOGGING() { return GetToken(oracleParser.NOLOGGING, 0); }
		public ITerminalNode FILESYSTEM_LIKE_LOGGING() { return GetToken(oracleParser.FILESYSTEM_LIKE_LOGGING, 0); }
		public Logging_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logging_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogging_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logging_clauseContext logging_clause() {
		Logging_clauseContext _localctx = new Logging_clauseContext(Context, State);
		EnterRule(_localctx, 238, RULE_logging_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2569;
			_la = TokenStream.LA(1);
			if ( !(_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extent_management_clauseContext : ParserRuleContext {
		public ITerminalNode EXTENT() { return GetToken(oracleParser.EXTENT, 0); }
		public ITerminalNode MANAGEMENT() { return GetToken(oracleParser.MANAGEMENT, 0); }
		public ITerminalNode LOCAL() { return GetToken(oracleParser.LOCAL, 0); }
		public ITerminalNode AUTOALLOCATE() { return GetToken(oracleParser.AUTOALLOCATE, 0); }
		public ITerminalNode UNIFORM() { return GetToken(oracleParser.UNIFORM, 0); }
		public ITerminalNode SIZE() { return GetToken(oracleParser.SIZE, 0); }
		public Size_clauseContext size_clause() {
			return GetRuleContext<Size_clauseContext>(0);
		}
		public Extent_management_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extent_management_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtent_management_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extent_management_clauseContext extent_management_clause() {
		Extent_management_clauseContext _localctx = new Extent_management_clauseContext(Context, State);
		EnterRule(_localctx, 240, RULE_extent_management_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2571; Match(EXTENT);
			State = 2572; Match(MANAGEMENT);
			State = 2573; Match(LOCAL);
			State = 2580;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTOALLOCATE:
				{
				State = 2574; Match(AUTOALLOCATE);
				}
				break;
			case UNIFORM:
				{
				State = 2575; Match(UNIFORM);
				State = 2578;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SIZE) {
					{
					State = 2576; Match(SIZE);
					State = 2577; size_clause();
					}
				}

				}
				break;
			case BLOCKSIZE:
			case DEFAULT:
			case ENCRYPTION:
			case EXTENT:
			case FILESYSTEM_LIKE_LOGGING:
			case FLASHBACK:
			case FORCE:
			case LOGGING:
			case MINIMUM:
			case NOLOGGING:
			case OFFLINE:
			case ONLINE:
			case RETENTION:
			case SEGMENT:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Segment_management_clauseContext : ParserRuleContext {
		public ITerminalNode SEGMENT() { return GetToken(oracleParser.SEGMENT, 0); }
		public ITerminalNode SPACE_KEYWORD() { return GetToken(oracleParser.SPACE_KEYWORD, 0); }
		public ITerminalNode MANAGEMENT() { return GetToken(oracleParser.MANAGEMENT, 0); }
		public ITerminalNode AUTO() { return GetToken(oracleParser.AUTO, 0); }
		public ITerminalNode MANUAL() { return GetToken(oracleParser.MANUAL, 0); }
		public Segment_management_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segment_management_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSegment_management_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Segment_management_clauseContext segment_management_clause() {
		Segment_management_clauseContext _localctx = new Segment_management_clauseContext(Context, State);
		EnterRule(_localctx, 242, RULE_segment_management_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2582; Match(SEGMENT);
			State = 2583; Match(SPACE_KEYWORD);
			State = 2584; Match(MANAGEMENT);
			State = 2585;
			_la = TokenStream.LA(1);
			if ( !(_la==AUTO || _la==MANUAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flashback_mode_clauseContext : ParserRuleContext {
		public ITerminalNode FLASHBACK() { return GetToken(oracleParser.FLASHBACK, 0); }
		public ITerminalNode ON() { return GetToken(oracleParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(oracleParser.OFF, 0); }
		public Flashback_mode_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flashback_mode_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlashback_mode_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Flashback_mode_clauseContext flashback_mode_clause() {
		Flashback_mode_clauseContext _localctx = new Flashback_mode_clauseContext(Context, State);
		EnterRule(_localctx, 244, RULE_flashback_mode_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2587; Match(FLASHBACK);
			State = 2588;
			_la = TokenStream.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Temporary_tablespace_clauseContext : ParserRuleContext {
		public IToken tablespace_name;
		public ITerminalNode TEMPORARY() { return GetToken(oracleParser.TEMPORARY, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(oracleParser.TABLESPACE, 0); }
		public ITerminalNode REGULAR_ID() { return GetToken(oracleParser.REGULAR_ID, 0); }
		public Tempfile_specificationContext tempfile_specification() {
			return GetRuleContext<Tempfile_specificationContext>(0);
		}
		public Tablespace_group_clauseContext tablespace_group_clause() {
			return GetRuleContext<Tablespace_group_clauseContext>(0);
		}
		public Extent_management_clauseContext extent_management_clause() {
			return GetRuleContext<Extent_management_clauseContext>(0);
		}
		public Temporary_tablespace_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_temporary_tablespace_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemporary_tablespace_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Temporary_tablespace_clauseContext temporary_tablespace_clause() {
		Temporary_tablespace_clauseContext _localctx = new Temporary_tablespace_clauseContext(Context, State);
		EnterRule(_localctx, 246, RULE_temporary_tablespace_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2590; Match(TEMPORARY);
			State = 2591; Match(TABLESPACE);
			State = 2592; _localctx.tablespace_name = Match(REGULAR_ID);
			State = 2594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPFILE) {
				{
				State = 2593; tempfile_specification();
				}
			}

			State = 2597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLESPACE) {
				{
				State = 2596; tablespace_group_clause();
				}
			}

			State = 2600;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENT) {
				{
				State = 2599; extent_management_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablespace_group_clauseContext : ParserRuleContext {
		public ITerminalNode TABLESPACE() { return GetToken(oracleParser.TABLESPACE, 0); }
		public ITerminalNode GROUP() { return GetToken(oracleParser.GROUP, 0); }
		public ITerminalNode REGULAR_ID() { return GetToken(oracleParser.REGULAR_ID, 0); }
		public ITerminalNode CHAR_STRING() { return GetToken(oracleParser.CHAR_STRING, 0); }
		public Tablespace_group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespace_group_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespace_group_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tablespace_group_clauseContext tablespace_group_clause() {
		Tablespace_group_clauseContext _localctx = new Tablespace_group_clauseContext(Context, State);
		EnterRule(_localctx, 248, RULE_tablespace_group_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2602; Match(TABLESPACE);
			State = 2603; Match(GROUP);
			State = 2604;
			_la = TokenStream.LA(1);
			if ( !(_la==CHAR_STRING || _la==REGULAR_ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Undo_tablespace_clauseContext : ParserRuleContext {
		public IToken tablespace_name;
		public ITerminalNode UNDO() { return GetToken(oracleParser.UNDO, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(oracleParser.TABLESPACE, 0); }
		public ITerminalNode REGULAR_ID() { return GetToken(oracleParser.REGULAR_ID, 0); }
		public Datafile_specificationContext datafile_specification() {
			return GetRuleContext<Datafile_specificationContext>(0);
		}
		public Extent_management_clauseContext extent_management_clause() {
			return GetRuleContext<Extent_management_clauseContext>(0);
		}
		public Tablespace_retention_clauseContext tablespace_retention_clause() {
			return GetRuleContext<Tablespace_retention_clauseContext>(0);
		}
		public Undo_tablespace_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undo_tablespace_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndo_tablespace_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Undo_tablespace_clauseContext undo_tablespace_clause() {
		Undo_tablespace_clauseContext _localctx = new Undo_tablespace_clauseContext(Context, State);
		EnterRule(_localctx, 250, RULE_undo_tablespace_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2606; Match(UNDO);
			State = 2607; Match(TABLESPACE);
			State = 2608; _localctx.tablespace_name = Match(REGULAR_ID);
			State = 2610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATAFILE) {
				{
				State = 2609; datafile_specification();
				}
			}

			State = 2613;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENT) {
				{
				State = 2612; extent_management_clause();
				}
			}

			State = 2616;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETENTION) {
				{
				State = 2615; tablespace_retention_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablespace_retention_clauseContext : ParserRuleContext {
		public ITerminalNode RETENTION() { return GetToken(oracleParser.RETENTION, 0); }
		public ITerminalNode GUARANTEE() { return GetToken(oracleParser.GUARANTEE, 0); }
		public ITerminalNode NOGUARANTEE() { return GetToken(oracleParser.NOGUARANTEE, 0); }
		public Tablespace_retention_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespace_retention_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespace_retention_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tablespace_retention_clauseContext tablespace_retention_clause() {
		Tablespace_retention_clauseContext _localctx = new Tablespace_retention_clauseContext(Context, State);
		EnterRule(_localctx, 252, RULE_tablespace_retention_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2618; Match(RETENTION);
			State = 2619;
			_la = TokenStream.LA(1);
			if ( !(_la==GUARANTEE || _la==NOGUARANTEE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datafile_specificationContext : ParserRuleContext {
		public ITerminalNode DATAFILE() { return GetToken(oracleParser.DATAFILE, 0); }
		public Datafile_tempfile_specContext datafile_tempfile_spec() {
			return GetRuleContext<Datafile_tempfile_specContext>(0);
		}
		public Datafile_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datafile_specification; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatafile_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datafile_specificationContext datafile_specification() {
		Datafile_specificationContext _localctx = new Datafile_specificationContext(Context, State);
		EnterRule(_localctx, 254, RULE_datafile_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2621; Match(DATAFILE);
			{
			State = 2623;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2622; Match(COMMA);
				}
			}

			State = 2625; datafile_tempfile_spec();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tempfile_specificationContext : ParserRuleContext {
		public ITerminalNode TEMPFILE() { return GetToken(oracleParser.TEMPFILE, 0); }
		public Datafile_tempfile_specContext datafile_tempfile_spec() {
			return GetRuleContext<Datafile_tempfile_specContext>(0);
		}
		public Tempfile_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempfile_specification; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTempfile_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tempfile_specificationContext tempfile_specification() {
		Tempfile_specificationContext _localctx = new Tempfile_specificationContext(Context, State);
		EnterRule(_localctx, 256, RULE_tempfile_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2627; Match(TEMPFILE);
			{
			State = 2629;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2628; Match(COMMA);
				}
			}

			State = 2631; datafile_tempfile_spec();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datafile_tempfile_specContext : ParserRuleContext {
		public ITerminalNode CHAR_STRING() { return GetToken(oracleParser.CHAR_STRING, 0); }
		public ITerminalNode SIZE() { return GetToken(oracleParser.SIZE, 0); }
		public Size_clauseContext size_clause() {
			return GetRuleContext<Size_clauseContext>(0);
		}
		public ITerminalNode REUSE() { return GetToken(oracleParser.REUSE, 0); }
		public Autoextend_clauseContext autoextend_clause() {
			return GetRuleContext<Autoextend_clauseContext>(0);
		}
		public Datafile_tempfile_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datafile_tempfile_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatafile_tempfile_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datafile_tempfile_specContext datafile_tempfile_spec() {
		Datafile_tempfile_specContext _localctx = new Datafile_tempfile_specContext(Context, State);
		EnterRule(_localctx, 258, RULE_datafile_tempfile_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHAR_STRING) {
				{
				State = 2633; Match(CHAR_STRING);
				}
			}

			State = 2638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SIZE) {
				{
				State = 2636; Match(SIZE);
				State = 2637; size_clause();
				}
			}

			State = 2641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REUSE) {
				{
				State = 2640; Match(REUSE);
				}
			}

			State = 2644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTOEXTEND) {
				{
				State = 2643; autoextend_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Redo_log_file_specContext : ParserRuleContext {
		public ITerminalNode DATAFILE() { return GetToken(oracleParser.DATAFILE, 0); }
		public ITerminalNode[] CHAR_STRING() { return GetTokens(oracleParser.CHAR_STRING); }
		public ITerminalNode CHAR_STRING(int i) {
			return GetToken(oracleParser.CHAR_STRING, i);
		}
		public ITerminalNode SIZE() { return GetToken(oracleParser.SIZE, 0); }
		public Size_clauseContext[] size_clause() {
			return GetRuleContexts<Size_clauseContext>();
		}
		public Size_clauseContext size_clause(int i) {
			return GetRuleContext<Size_clauseContext>(i);
		}
		public ITerminalNode BLOCKSIZE() { return GetToken(oracleParser.BLOCKSIZE, 0); }
		public ITerminalNode REUSE() { return GetToken(oracleParser.REUSE, 0); }
		public Redo_log_file_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redo_log_file_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedo_log_file_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Redo_log_file_specContext redo_log_file_spec() {
		Redo_log_file_specContext _localctx = new Redo_log_file_specContext(Context, State);
		EnterRule(_localctx, 260, RULE_redo_log_file_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2646; Match(DATAFILE);
			State = 2658;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_STRING:
				{
				State = 2647; Match(CHAR_STRING);
				}
				break;
			case LEFT_PAREN:
				{
				State = 2648; Match(LEFT_PAREN);
				State = 2653;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2650;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2649; Match(COMMA);
						}
					}

					State = 2652; Match(CHAR_STRING);
					}
					}
					State = 2655;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CHAR_STRING || _la==COMMA );
				State = 2657; Match(RIGHT_PAREN);
				}
				break;
			case Eof:
			case BLOCKSIZE:
			case REUSE:
			case SIZE:
				break;
			default:
				break;
			}
			State = 2662;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SIZE) {
				{
				State = 2660; Match(SIZE);
				State = 2661; size_clause();
				}
			}

			State = 2666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BLOCKSIZE) {
				{
				State = 2664; Match(BLOCKSIZE);
				State = 2665; size_clause();
				}
			}

			State = 2669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REUSE) {
				{
				State = 2668; Match(REUSE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Autoextend_clauseContext : ParserRuleContext {
		public ITerminalNode AUTOEXTEND() { return GetToken(oracleParser.AUTOEXTEND, 0); }
		public ITerminalNode OFF() { return GetToken(oracleParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(oracleParser.ON, 0); }
		public ITerminalNode NEXT() { return GetToken(oracleParser.NEXT, 0); }
		public Size_clauseContext size_clause() {
			return GetRuleContext<Size_clauseContext>(0);
		}
		public Maxsize_clauseContext maxsize_clause() {
			return GetRuleContext<Maxsize_clauseContext>(0);
		}
		public Autoextend_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_autoextend_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAutoextend_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Autoextend_clauseContext autoextend_clause() {
		Autoextend_clauseContext _localctx = new Autoextend_clauseContext(Context, State);
		EnterRule(_localctx, 262, RULE_autoextend_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2671; Match(AUTOEXTEND);
			State = 2681;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OFF:
				{
				State = 2672; Match(OFF);
				}
				break;
			case ON:
				{
				State = 2673; Match(ON);
				State = 2676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEXT) {
					{
					State = 2674; Match(NEXT);
					State = 2675; size_clause();
					}
				}

				State = 2679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MAXSIZE) {
					{
					State = 2678; maxsize_clause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Maxsize_clauseContext : ParserRuleContext {
		public ITerminalNode MAXSIZE() { return GetToken(oracleParser.MAXSIZE, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(oracleParser.UNLIMITED, 0); }
		public Size_clauseContext size_clause() {
			return GetRuleContext<Size_clauseContext>(0);
		}
		public Maxsize_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxsize_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxsize_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Maxsize_clauseContext maxsize_clause() {
		Maxsize_clauseContext _localctx = new Maxsize_clauseContext(Context, State);
		EnterRule(_localctx, 264, RULE_maxsize_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2683; Match(MAXSIZE);
			State = 2686;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNLIMITED:
				{
				State = 2684; Match(UNLIMITED);
				}
				break;
			case UNSIGNED_INTEGER:
				{
				State = 2685; size_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_tableContext : ParserRuleContext {
		public IToken pctfree;
		public IToken pctused;
		public IToken inittrans;
		public Size_clauseContext initial_size;
		public Size_clauseContext next_size;
		public IToken minextents;
		public IToken pctincrease;
		public IToken freelists;
		public IToken freelist_groups;
		public Id_expressionContext tablespace_name;
		public IToken flashback_archive;
		public ITerminalNode CREATE() { return GetToken(oracleParser.CREATE, 0); }
		public ITerminalNode TABLE() { return GetToken(oracleParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode GLOBAL() { return GetToken(oracleParser.GLOBAL, 0); }
		public ITerminalNode TEMPORARY() { return GetToken(oracleParser.TEMPORARY, 0); }
		public ITerminalNode ON() { return GetToken(oracleParser.ON, 0); }
		public ITerminalNode COMMIT() { return GetToken(oracleParser.COMMIT, 0); }
		public ITerminalNode ROWS() { return GetToken(oracleParser.ROWS, 0); }
		public ITerminalNode SEGMENT() { return GetToken(oracleParser.SEGMENT, 0); }
		public ITerminalNode CREATION() { return GetToken(oracleParser.CREATION, 0); }
		public ITerminalNode[] PCTFREE() { return GetTokens(oracleParser.PCTFREE); }
		public ITerminalNode PCTFREE(int i) {
			return GetToken(oracleParser.PCTFREE, i);
		}
		public ITerminalNode[] PCTUSED() { return GetTokens(oracleParser.PCTUSED); }
		public ITerminalNode PCTUSED(int i) {
			return GetToken(oracleParser.PCTUSED, i);
		}
		public ITerminalNode[] INITRANS() { return GetTokens(oracleParser.INITRANS); }
		public ITerminalNode INITRANS(int i) {
			return GetToken(oracleParser.INITRANS, i);
		}
		public ITerminalNode STORAGE() { return GetToken(oracleParser.STORAGE, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(oracleParser.TABLESPACE, 0); }
		public ITerminalNode COMPRESS() { return GetToken(oracleParser.COMPRESS, 0); }
		public ITerminalNode NOCOMPRESS() { return GetToken(oracleParser.NOCOMPRESS, 0); }
		public Table_range_partition_by_clauseContext table_range_partition_by_clause() {
			return GetRuleContext<Table_range_partition_by_clauseContext>(0);
		}
		public ITerminalNode ROW() { return GetToken(oracleParser.ROW, 0); }
		public ITerminalNode MOVEMENT() { return GetToken(oracleParser.MOVEMENT, 0); }
		public ITerminalNode FLASHBACK() { return GetToken(oracleParser.FLASHBACK, 0); }
		public ITerminalNode[] ARCHIVE() { return GetTokens(oracleParser.ARCHIVE); }
		public ITerminalNode ARCHIVE(int i) {
			return GetToken(oracleParser.ARCHIVE, i);
		}
		public ITerminalNode NO() { return GetToken(oracleParser.NO, 0); }
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode DELETE() { return GetToken(oracleParser.DELETE, 0); }
		public ITerminalNode PRESERVE() { return GetToken(oracleParser.PRESERVE, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(oracleParser.IMMEDIATE, 0); }
		public ITerminalNode DEFERRED() { return GetToken(oracleParser.DEFERRED, 0); }
		public ITerminalNode[] UNSIGNED_INTEGER() { return GetTokens(oracleParser.UNSIGNED_INTEGER); }
		public ITerminalNode UNSIGNED_INTEGER(int i) {
			return GetToken(oracleParser.UNSIGNED_INTEGER, i);
		}
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public ITerminalNode LOGGING() { return GetToken(oracleParser.LOGGING, 0); }
		public ITerminalNode NOLOGGING() { return GetToken(oracleParser.NOLOGGING, 0); }
		public ITerminalNode FILESYSTEM_LIKE_LOGGING() { return GetToken(oracleParser.FILESYSTEM_LIKE_LOGGING, 0); }
		public ITerminalNode REGULAR_ID() { return GetToken(oracleParser.REGULAR_ID, 0); }
		public Datatype_null_enableContext[] datatype_null_enable() {
			return GetRuleContexts<Datatype_null_enableContext>();
		}
		public Datatype_null_enableContext datatype_null_enable(int i) {
			return GetRuleContext<Datatype_null_enableContext>(i);
		}
		public ITerminalNode[] INITIAL() { return GetTokens(oracleParser.INITIAL); }
		public ITerminalNode INITIAL(int i) {
			return GetToken(oracleParser.INITIAL, i);
		}
		public ITerminalNode[] NEXT() { return GetTokens(oracleParser.NEXT); }
		public ITerminalNode NEXT(int i) {
			return GetToken(oracleParser.NEXT, i);
		}
		public ITerminalNode[] MINEXTENTS() { return GetTokens(oracleParser.MINEXTENTS); }
		public ITerminalNode MINEXTENTS(int i) {
			return GetToken(oracleParser.MINEXTENTS, i);
		}
		public ITerminalNode[] PCTINCREASE() { return GetTokens(oracleParser.PCTINCREASE); }
		public ITerminalNode PCTINCREASE(int i) {
			return GetToken(oracleParser.PCTINCREASE, i);
		}
		public ITerminalNode[] FREELISTS() { return GetTokens(oracleParser.FREELISTS); }
		public ITerminalNode FREELISTS(int i) {
			return GetToken(oracleParser.FREELISTS, i);
		}
		public ITerminalNode[] FREELIST() { return GetTokens(oracleParser.FREELIST); }
		public ITerminalNode FREELIST(int i) {
			return GetToken(oracleParser.FREELIST, i);
		}
		public ITerminalNode[] GROUPS() { return GetTokens(oracleParser.GROUPS); }
		public ITerminalNode GROUPS(int i) {
			return GetToken(oracleParser.GROUPS, i);
		}
		public ITerminalNode[] OPTIMAL() { return GetTokens(oracleParser.OPTIMAL); }
		public ITerminalNode OPTIMAL(int i) {
			return GetToken(oracleParser.OPTIMAL, i);
		}
		public ITerminalNode[] BUFFER_POOL() { return GetTokens(oracleParser.BUFFER_POOL); }
		public ITerminalNode BUFFER_POOL(int i) {
			return GetToken(oracleParser.BUFFER_POOL, i);
		}
		public ITerminalNode[] FLASH_CACHE() { return GetTokens(oracleParser.FLASH_CACHE); }
		public ITerminalNode FLASH_CACHE(int i) {
			return GetToken(oracleParser.FLASH_CACHE, i);
		}
		public ITerminalNode[] ENCRYPT() { return GetTokens(oracleParser.ENCRYPT); }
		public ITerminalNode ENCRYPT(int i) {
			return GetToken(oracleParser.ENCRYPT, i);
		}
		public ITerminalNode BASIC() { return GetToken(oracleParser.BASIC, 0); }
		public ITerminalNode FOR() { return GetToken(oracleParser.FOR, 0); }
		public Size_clauseContext[] size_clause() {
			return GetRuleContexts<Size_clauseContext>();
		}
		public Size_clauseContext size_clause(int i) {
			return GetRuleContext<Size_clauseContext>(i);
		}
		public ITerminalNode[] KEEP() { return GetTokens(oracleParser.KEEP); }
		public ITerminalNode KEEP(int i) {
			return GetToken(oracleParser.KEEP, i);
		}
		public ITerminalNode[] RECYCLE() { return GetTokens(oracleParser.RECYCLE); }
		public ITerminalNode RECYCLE(int i) {
			return GetToken(oracleParser.RECYCLE, i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(oracleParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(oracleParser.DEFAULT, i);
		}
		public ITerminalNode[] NONE() { return GetTokens(oracleParser.NONE); }
		public ITerminalNode NONE(int i) {
			return GetToken(oracleParser.NONE, i);
		}
		public ITerminalNode ENABLE() { return GetToken(oracleParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(oracleParser.DISABLE, 0); }
		public Primary_key_clauseContext[] primary_key_clause() {
			return GetRuleContexts<Primary_key_clauseContext>();
		}
		public Primary_key_clauseContext primary_key_clause(int i) {
			return GetRuleContext<Primary_key_clauseContext>(i);
		}
		public Foreign_key_clauseContext[] foreign_key_clause() {
			return GetRuleContexts<Foreign_key_clauseContext>();
		}
		public Foreign_key_clauseContext foreign_key_clause(int i) {
			return GetRuleContext<Foreign_key_clauseContext>(i);
		}
		public Unique_key_clauseContext[] unique_key_clause() {
			return GetRuleContexts<Unique_key_clauseContext>();
		}
		public Unique_key_clauseContext unique_key_clause(int i) {
			return GetRuleContext<Unique_key_clauseContext>(i);
		}
		public Check_constraintContext[] check_constraint() {
			return GetRuleContexts<Check_constraintContext>();
		}
		public Check_constraintContext check_constraint(int i) {
			return GetRuleContext<Check_constraintContext>(i);
		}
		public ITerminalNode[] UNLIMITED() { return GetTokens(oracleParser.UNLIMITED); }
		public ITerminalNode UNLIMITED(int i) {
			return GetToken(oracleParser.UNLIMITED, i);
		}
		public ITerminalNode[] NULL() { return GetTokens(oracleParser.NULL); }
		public ITerminalNode NULL(int i) {
			return GetToken(oracleParser.NULL, i);
		}
		public ITerminalNode OLTP() { return GetToken(oracleParser.OLTP, 0); }
		public ITerminalNode[] CONSTRAINT() { return GetTokens(oracleParser.CONSTRAINT); }
		public ITerminalNode CONSTRAINT(int i) {
			return GetToken(oracleParser.CONSTRAINT, i);
		}
		public Constraint_nameContext[] constraint_name() {
			return GetRuleContexts<Constraint_nameContext>();
		}
		public Constraint_nameContext constraint_name(int i) {
			return GetRuleContext<Constraint_nameContext>(i);
		}
		public ITerminalNode QUERY() { return GetToken(oracleParser.QUERY, 0); }
		public ITerminalNode LOW() { return GetToken(oracleParser.LOW, 0); }
		public ITerminalNode HIGH() { return GetToken(oracleParser.HIGH, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_tableContext create_table() {
		Create_tableContext _localctx = new Create_tableContext(Context, State);
		EnterRule(_localctx, 266, RULE_create_table);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2688; Match(CREATE);
			State = 2691;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL) {
				{
				State = 2689; Match(GLOBAL);
				State = 2690; Match(TEMPORARY);
				}
			}

			State = 2693; Match(TABLE);
			State = 2694; tableview_name();
			State = 2722;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 2695; Match(LEFT_PAREN);
				State = 2700;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2697;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2696; Match(COMMA);
							}
						}

						State = 2699; datatype_null_enable();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2702;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,286,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 2717;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2704; Match(COMMA);
					State = 2707;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CONSTRAINT) {
						{
						State = 2705; Match(CONSTRAINT);
						State = 2706; constraint_name();
						}
					}

					State = 2713;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PRIMARY:
						{
						State = 2709; primary_key_clause();
						}
						break;
					case FOREIGN:
						{
						State = 2710; foreign_key_clause();
						}
						break;
					case UNIQUE:
						{
						State = 2711; unique_key_clause();
						}
						break;
					case CHECK:
						{
						State = 2712; check_constraint();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 2719;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2720; Match(RIGHT_PAREN);
				}
			}

			State = 2728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 2724; Match(ON);
				State = 2725; Match(COMMIT);
				State = 2726;
				_la = TokenStream.LA(1);
				if ( !(_la==DELETE || _la==PRESERVE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2727; Match(ROWS);
				}
			}

			State = 2733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEGMENT) {
				{
				State = 2730; Match(SEGMENT);
				State = 2731; Match(CREATION);
				State = 2732;
				_la = TokenStream.LA(1);
				if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2743;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INITRANS || _la==PCTFREE || _la==PCTUSED) {
				{
				State = 2741;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PCTFREE:
					{
					State = 2735; Match(PCTFREE);
					State = 2736; _localctx.pctfree = Match(UNSIGNED_INTEGER);
					}
					break;
				case PCTUSED:
					{
					State = 2737; Match(PCTUSED);
					State = 2738; _localctx.pctused = Match(UNSIGNED_INTEGER);
					}
					break;
				case INITRANS:
					{
					State = 2739; Match(INITRANS);
					State = 2740; _localctx.inittrans = Match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 2745;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STORAGE) {
				{
				State = 2746; Match(STORAGE);
				State = 2747; Match(LEFT_PAREN);
				State = 2771;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 2771;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INITIAL:
						{
						State = 2748; Match(INITIAL);
						State = 2749; _localctx.initial_size = size_clause();
						}
						break;
					case NEXT:
						{
						State = 2750; Match(NEXT);
						State = 2751; _localctx.next_size = size_clause();
						}
						break;
					case MINEXTENTS:
						{
						State = 2752; Match(MINEXTENTS);
						State = 2753;
						_localctx.minextents = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==UNLIMITED || _la==UNSIGNED_INTEGER) ) {
							_localctx.minextents = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case PCTINCREASE:
						{
						State = 2754; Match(PCTINCREASE);
						State = 2755; _localctx.pctincrease = Match(UNSIGNED_INTEGER);
						}
						break;
					case FREELISTS:
						{
						State = 2756; Match(FREELISTS);
						State = 2757; _localctx.freelists = Match(UNSIGNED_INTEGER);
						}
						break;
					case FREELIST:
						{
						State = 2758; Match(FREELIST);
						State = 2759; Match(GROUPS);
						State = 2760; _localctx.freelist_groups = Match(UNSIGNED_INTEGER);
						}
						break;
					case OPTIMAL:
						{
						State = 2761; Match(OPTIMAL);
						State = 2764;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							State = 2762; size_clause();
							}
							break;
						case NULL:
							{
							State = 2763; Match(NULL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case BUFFER_POOL:
						{
						State = 2766; Match(BUFFER_POOL);
						State = 2767;
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==KEEP || _la==RECYCLE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case FLASH_CACHE:
						{
						State = 2768; Match(FLASH_CACHE);
						State = 2769;
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==KEEP || _la==NONE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case ENCRYPT:
						{
						State = 2770; Match(ENCRYPT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2773;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==BUFFER_POOL || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (ENCRYPT - 157)) | (1L << (FLASH_CACHE - 157)) | (1L << (FREELIST - 157)) | (1L << (FREELISTS - 157)))) != 0) || _la==INITIAL || _la==MINEXTENTS || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (NEXT - 321)) | (1L << (OPTIMAL - 321)) | (1L << (PCTINCREASE - 321)))) != 0) );
				State = 2775; Match(RIGHT_PAREN);
				}
			}

			State = 2780;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLESPACE) {
				{
				State = 2778; Match(TABLESPACE);
				State = 2779; _localctx.tablespace_name = id_expression();
				}
			}

			State = 2783;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) {
				{
				State = 2782;
				_la = TokenStream.LA(1);
				if ( !(_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2798;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMPRESS:
				{
				State = 2785; Match(COMPRESS);
				State = 2795;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BASIC:
					{
					State = 2786; Match(BASIC);
					}
					break;
				case FOR:
					{
					State = 2787; Match(FOR);
					State = 2793;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OLTP:
						{
						State = 2788; Match(OLTP);
						}
						break;
					case ARCHIVE:
					case QUERY:
						{
						State = 2789;
						_la = TokenStream.LA(1);
						if ( !(_la==ARCHIVE || _la==QUERY) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 2791;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==HIGH || _la==LOW) {
							{
							State = 2790;
							_la = TokenStream.LA(1);
							if ( !(_la==HIGH || _la==LOW) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case AS:
				case DISABLE:
				case ENABLE:
				case FLASHBACK:
				case NO:
				case PARTITION:
				case ROW:
				case SEMICOLON:
					break;
				default:
					break;
				}
				}
				break;
			case NOCOMPRESS:
				{
				State = 2797; Match(NOCOMPRESS);
				}
				break;
			case AS:
			case DISABLE:
			case ENABLE:
			case FLASHBACK:
			case NO:
			case PARTITION:
			case ROW:
			case SEMICOLON:
				break;
			default:
				break;
			}
			State = 2801;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2800; table_range_partition_by_clause();
				}
			}

			State = 2808;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE || _la==ENABLE || _la==ROW) {
				{
				State = 2804;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DISABLE || _la==ENABLE) {
					{
					State = 2803;
					_la = TokenStream.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2806; Match(ROW);
				State = 2807; Match(MOVEMENT);
				}
			}

			State = 2816;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FLASHBACK:
				{
				State = 2810; Match(FLASHBACK);
				State = 2811; Match(ARCHIVE);
				State = 2812; _localctx.flashback_archive = Match(REGULAR_ID);
				}
				break;
			case NO:
				{
				State = 2813; Match(NO);
				State = 2814; Match(FLASHBACK);
				State = 2815; Match(ARCHIVE);
				}
				break;
			case AS:
			case SEMICOLON:
				break;
			default:
				break;
			}
			State = 2820;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 2818; Match(AS);
				State = 2819; subquery();
				}
			}

			State = 2822; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_range_partition_by_clauseContext : ParserRuleContext {
		public IToken tablespace_name;
		public IToken partition_name;
		public IToken partition_tablespace;
		public IToken pctfree;
		public IToken pctused;
		public IToken inittrans;
		public Size_clauseContext initial_size;
		public Size_clauseContext next_size;
		public IToken minextents;
		public IToken pctincrease;
		public IToken freelists;
		public IToken freelist_groups;
		public ITerminalNode[] PARTITION() { return GetTokens(oracleParser.PARTITION); }
		public ITerminalNode PARTITION(int i) {
			return GetToken(oracleParser.PARTITION, i);
		}
		public ITerminalNode BY() { return GetToken(oracleParser.BY, 0); }
		public ITerminalNode RANGE() { return GetToken(oracleParser.RANGE, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode INTERVAL() { return GetToken(oracleParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] VALUES() { return GetTokens(oracleParser.VALUES); }
		public ITerminalNode VALUES(int i) {
			return GetToken(oracleParser.VALUES, i);
		}
		public ITerminalNode[] LESS() { return GetTokens(oracleParser.LESS); }
		public ITerminalNode LESS(int i) {
			return GetToken(oracleParser.LESS, i);
		}
		public ITerminalNode[] THAN() { return GetTokens(oracleParser.THAN); }
		public ITerminalNode THAN(int i) {
			return GetToken(oracleParser.THAN, i);
		}
		public ITerminalNode[] REGULAR_ID() { return GetTokens(oracleParser.REGULAR_ID); }
		public ITerminalNode REGULAR_ID(int i) {
			return GetToken(oracleParser.REGULAR_ID, i);
		}
		public ITerminalNode STORE() { return GetToken(oracleParser.STORE, 0); }
		public ITerminalNode IN() { return GetToken(oracleParser.IN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(oracleParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(oracleParser.COMMA, i);
		}
		public ITerminalNode[] CHAR_STRING() { return GetTokens(oracleParser.CHAR_STRING); }
		public ITerminalNode CHAR_STRING(int i) {
			return GetToken(oracleParser.CHAR_STRING, i);
		}
		public String_functionContext[] string_function() {
			return GetRuleContexts<String_functionContext>();
		}
		public String_functionContext string_function(int i) {
			return GetRuleContext<String_functionContext>(i);
		}
		public NumericContext[] numeric() {
			return GetRuleContexts<NumericContext>();
		}
		public NumericContext numeric(int i) {
			return GetRuleContext<NumericContext>(i);
		}
		public ITerminalNode[] MAXVALUE() { return GetTokens(oracleParser.MAXVALUE); }
		public ITerminalNode MAXVALUE(int i) {
			return GetToken(oracleParser.MAXVALUE, i);
		}
		public ITerminalNode[] TABLESPACE() { return GetTokens(oracleParser.TABLESPACE); }
		public ITerminalNode TABLESPACE(int i) {
			return GetToken(oracleParser.TABLESPACE, i);
		}
		public ITerminalNode[] ON() { return GetTokens(oracleParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(oracleParser.ON, i);
		}
		public ITerminalNode[] COMMIT() { return GetTokens(oracleParser.COMMIT); }
		public ITerminalNode COMMIT(int i) {
			return GetToken(oracleParser.COMMIT, i);
		}
		public ITerminalNode[] ROWS() { return GetTokens(oracleParser.ROWS); }
		public ITerminalNode ROWS(int i) {
			return GetToken(oracleParser.ROWS, i);
		}
		public ITerminalNode[] SEGMENT() { return GetTokens(oracleParser.SEGMENT); }
		public ITerminalNode SEGMENT(int i) {
			return GetToken(oracleParser.SEGMENT, i);
		}
		public ITerminalNode[] CREATION() { return GetTokens(oracleParser.CREATION); }
		public ITerminalNode CREATION(int i) {
			return GetToken(oracleParser.CREATION, i);
		}
		public ITerminalNode[] PCTFREE() { return GetTokens(oracleParser.PCTFREE); }
		public ITerminalNode PCTFREE(int i) {
			return GetToken(oracleParser.PCTFREE, i);
		}
		public ITerminalNode[] PCTUSED() { return GetTokens(oracleParser.PCTUSED); }
		public ITerminalNode PCTUSED(int i) {
			return GetToken(oracleParser.PCTUSED, i);
		}
		public ITerminalNode[] INITRANS() { return GetTokens(oracleParser.INITRANS); }
		public ITerminalNode INITRANS(int i) {
			return GetToken(oracleParser.INITRANS, i);
		}
		public ITerminalNode[] STORAGE() { return GetTokens(oracleParser.STORAGE); }
		public ITerminalNode STORAGE(int i) {
			return GetToken(oracleParser.STORAGE, i);
		}
		public ITerminalNode[] DELETE() { return GetTokens(oracleParser.DELETE); }
		public ITerminalNode DELETE(int i) {
			return GetToken(oracleParser.DELETE, i);
		}
		public ITerminalNode[] PRESERVE() { return GetTokens(oracleParser.PRESERVE); }
		public ITerminalNode PRESERVE(int i) {
			return GetToken(oracleParser.PRESERVE, i);
		}
		public ITerminalNode[] IMMEDIATE() { return GetTokens(oracleParser.IMMEDIATE); }
		public ITerminalNode IMMEDIATE(int i) {
			return GetToken(oracleParser.IMMEDIATE, i);
		}
		public ITerminalNode[] DEFERRED() { return GetTokens(oracleParser.DEFERRED); }
		public ITerminalNode DEFERRED(int i) {
			return GetToken(oracleParser.DEFERRED, i);
		}
		public ITerminalNode[] UNSIGNED_INTEGER() { return GetTokens(oracleParser.UNSIGNED_INTEGER); }
		public ITerminalNode UNSIGNED_INTEGER(int i) {
			return GetToken(oracleParser.UNSIGNED_INTEGER, i);
		}
		public ITerminalNode[] INITIAL() { return GetTokens(oracleParser.INITIAL); }
		public ITerminalNode INITIAL(int i) {
			return GetToken(oracleParser.INITIAL, i);
		}
		public ITerminalNode[] NEXT() { return GetTokens(oracleParser.NEXT); }
		public ITerminalNode NEXT(int i) {
			return GetToken(oracleParser.NEXT, i);
		}
		public ITerminalNode[] MINEXTENTS() { return GetTokens(oracleParser.MINEXTENTS); }
		public ITerminalNode MINEXTENTS(int i) {
			return GetToken(oracleParser.MINEXTENTS, i);
		}
		public ITerminalNode[] PCTINCREASE() { return GetTokens(oracleParser.PCTINCREASE); }
		public ITerminalNode PCTINCREASE(int i) {
			return GetToken(oracleParser.PCTINCREASE, i);
		}
		public ITerminalNode[] FREELISTS() { return GetTokens(oracleParser.FREELISTS); }
		public ITerminalNode FREELISTS(int i) {
			return GetToken(oracleParser.FREELISTS, i);
		}
		public ITerminalNode[] FREELIST() { return GetTokens(oracleParser.FREELIST); }
		public ITerminalNode FREELIST(int i) {
			return GetToken(oracleParser.FREELIST, i);
		}
		public ITerminalNode[] GROUPS() { return GetTokens(oracleParser.GROUPS); }
		public ITerminalNode GROUPS(int i) {
			return GetToken(oracleParser.GROUPS, i);
		}
		public ITerminalNode[] OPTIMAL() { return GetTokens(oracleParser.OPTIMAL); }
		public ITerminalNode OPTIMAL(int i) {
			return GetToken(oracleParser.OPTIMAL, i);
		}
		public ITerminalNode[] BUFFER_POOL() { return GetTokens(oracleParser.BUFFER_POOL); }
		public ITerminalNode BUFFER_POOL(int i) {
			return GetToken(oracleParser.BUFFER_POOL, i);
		}
		public ITerminalNode[] FLASH_CACHE() { return GetTokens(oracleParser.FLASH_CACHE); }
		public ITerminalNode FLASH_CACHE(int i) {
			return GetToken(oracleParser.FLASH_CACHE, i);
		}
		public ITerminalNode[] ENCRYPT() { return GetTokens(oracleParser.ENCRYPT); }
		public ITerminalNode ENCRYPT(int i) {
			return GetToken(oracleParser.ENCRYPT, i);
		}
		public Size_clauseContext[] size_clause() {
			return GetRuleContexts<Size_clauseContext>();
		}
		public Size_clauseContext size_clause(int i) {
			return GetRuleContext<Size_clauseContext>(i);
		}
		public ITerminalNode[] KEEP() { return GetTokens(oracleParser.KEEP); }
		public ITerminalNode KEEP(int i) {
			return GetToken(oracleParser.KEEP, i);
		}
		public ITerminalNode[] RECYCLE() { return GetTokens(oracleParser.RECYCLE); }
		public ITerminalNode RECYCLE(int i) {
			return GetToken(oracleParser.RECYCLE, i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(oracleParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(oracleParser.DEFAULT, i);
		}
		public ITerminalNode[] NONE() { return GetTokens(oracleParser.NONE); }
		public ITerminalNode NONE(int i) {
			return GetToken(oracleParser.NONE, i);
		}
		public ITerminalNode[] UNLIMITED() { return GetTokens(oracleParser.UNLIMITED); }
		public ITerminalNode UNLIMITED(int i) {
			return GetToken(oracleParser.UNLIMITED, i);
		}
		public ITerminalNode[] NULL() { return GetTokens(oracleParser.NULL); }
		public ITerminalNode NULL(int i) {
			return GetToken(oracleParser.NULL, i);
		}
		public Table_range_partition_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_range_partition_by_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_range_partition_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_range_partition_by_clauseContext table_range_partition_by_clause() {
		Table_range_partition_by_clauseContext _localctx = new Table_range_partition_by_clauseContext(Context, State);
		EnterRule(_localctx, 268, RULE_table_range_partition_by_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2824; Match(PARTITION);
			State = 2825; Match(BY);
			State = 2826; Match(RANGE);
			State = 2827; paren_column_list();
			State = 2846;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERVAL) {
				{
				State = 2828; Match(INTERVAL);
				State = 2829; Match(LEFT_PAREN);
				State = 2830; expression();
				State = 2831; Match(RIGHT_PAREN);
				State = 2844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORE) {
					{
					State = 2832; Match(STORE);
					State = 2833; Match(IN);
					State = 2834; Match(LEFT_PAREN);
					State = 2839;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 2836;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2835; Match(COMMA);
							}
						}

						State = 2838; _localctx.tablespace_name = Match(REGULAR_ID);
						}
						}
						State = 2841;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==COMMA || _la==REGULAR_ID );
					State = 2843; Match(RIGHT_PAREN);
					}
				}

				}
			}

			State = 2848; Match(LEFT_PAREN);
			State = 2937;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2850;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2849; Match(COMMA);
					}
				}

				State = 2852; Match(PARTITION);
				State = 2853; _localctx.partition_name = Match(REGULAR_ID);
				State = 2854; Match(VALUES);
				State = 2855; Match(LESS);
				State = 2856; Match(THAN);
				State = 2857; Match(LEFT_PAREN);
				State = 2874;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 2874;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,319,Context) ) {
					case 1:
						{
						State = 2859;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2858; Match(COMMA);
							}
						}

						State = 2861; Match(CHAR_STRING);
						}
						break;
					case 2:
						{
						State = 2863;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2862; Match(COMMA);
							}
						}

						State = 2865; string_function();
						}
						break;
					case 3:
						{
						State = 2867;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2866; Match(COMMA);
							}
						}

						State = 2869; numeric();
						}
						break;
					case 4:
						{
						State = 2871;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2870; Match(COMMA);
							}
						}

						State = 2873; Match(MAXVALUE);
						}
						break;
					}
					}
					State = 2876;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CHR || _la==MAXVALUE || ((((_la - 627)) & ~0x3f) == 0 && ((1L << (_la - 627)) & ((1L << (DECODE - 627)) | (1L << (NVL - 627)) | (1L << (SUBSTR - 627)) | (1L << (TO_CHAR - 627)) | (1L << (TRIM - 627)) | (1L << (TO_DATE - 627)) | (1L << (UNSIGNED_INTEGER - 627)) | (1L << (APPROXIMATE_NUM_LIT - 627)) | (1L << (CHAR_STRING - 627)) | (1L << (COMMA - 627)))) != 0) );
				State = 2878; Match(RIGHT_PAREN);
				State = 2881;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TABLESPACE) {
					{
					State = 2879; Match(TABLESPACE);
					State = 2880; _localctx.partition_tablespace = Match(REGULAR_ID);
					}
				}

				State = 2887;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 2883; Match(ON);
					State = 2884; Match(COMMIT);
					State = 2885;
					_la = TokenStream.LA(1);
					if ( !(_la==DELETE || _la==PRESERVE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2886; Match(ROWS);
					}
				}

				State = 2892;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEGMENT) {
					{
					State = 2889; Match(SEGMENT);
					State = 2890; Match(CREATION);
					State = 2891;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2902;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==INITRANS || _la==PCTFREE || _la==PCTUSED) {
					{
					State = 2900;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PCTFREE:
						{
						State = 2894; Match(PCTFREE);
						State = 2895; _localctx.pctfree = Match(UNSIGNED_INTEGER);
						}
						break;
					case PCTUSED:
						{
						State = 2896; Match(PCTUSED);
						State = 2897; _localctx.pctused = Match(UNSIGNED_INTEGER);
						}
						break;
					case INITRANS:
						{
						State = 2898; Match(INITRANS);
						State = 2899; _localctx.inittrans = Match(UNSIGNED_INTEGER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2904;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2935;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE) {
					{
					State = 2905; Match(STORAGE);
					State = 2906; Match(LEFT_PAREN);
					State = 2930;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						State = 2930;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case INITIAL:
							{
							State = 2907; Match(INITIAL);
							State = 2908; _localctx.initial_size = size_clause();
							}
							break;
						case NEXT:
							{
							State = 2909; Match(NEXT);
							State = 2910; _localctx.next_size = size_clause();
							}
							break;
						case MINEXTENTS:
							{
							State = 2911; Match(MINEXTENTS);
							State = 2912;
							_localctx.minextents = TokenStream.LT(1);
							_la = TokenStream.LA(1);
							if ( !(_la==UNLIMITED || _la==UNSIGNED_INTEGER) ) {
								_localctx.minextents = ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case PCTINCREASE:
							{
							State = 2913; Match(PCTINCREASE);
							State = 2914; _localctx.pctincrease = Match(UNSIGNED_INTEGER);
							}
							break;
						case FREELISTS:
							{
							State = 2915; Match(FREELISTS);
							State = 2916; _localctx.freelists = Match(UNSIGNED_INTEGER);
							}
							break;
						case FREELIST:
							{
							State = 2917; Match(FREELIST);
							State = 2918; Match(GROUPS);
							State = 2919; _localctx.freelist_groups = Match(UNSIGNED_INTEGER);
							}
							break;
						case OPTIMAL:
							{
							State = 2920; Match(OPTIMAL);
							State = 2923;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								State = 2921; size_clause();
								}
								break;
							case NULL:
								{
								State = 2922; Match(NULL);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case BUFFER_POOL:
							{
							State = 2925; Match(BUFFER_POOL);
							State = 2926;
							_la = TokenStream.LA(1);
							if ( !(_la==DEFAULT || _la==KEEP || _la==RECYCLE) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case FLASH_CACHE:
							{
							State = 2927; Match(FLASH_CACHE);
							State = 2928;
							_la = TokenStream.LA(1);
							if ( !(_la==DEFAULT || _la==KEEP || _la==NONE) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						case ENCRYPT:
							{
							State = 2929; Match(ENCRYPT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						State = 2932;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==BUFFER_POOL || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (ENCRYPT - 157)) | (1L << (FLASH_CACHE - 157)) | (1L << (FREELIST - 157)) | (1L << (FREELISTS - 157)))) != 0) || _la==INITIAL || _la==MINEXTENTS || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (NEXT - 321)) | (1L << (OPTIMAL - 321)) | (1L << (PCTINCREASE - 321)))) != 0) );
					State = 2934; Match(RIGHT_PAREN);
					}
				}

				}
				}
				State = 2939;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==PARTITION || _la==COMMA );
			State = 2941; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datatype_null_enableContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode SORT() { return GetToken(oracleParser.SORT, 0); }
		public ITerminalNode DEFAULT() { return GetToken(oracleParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ENCRYPT() { return GetToken(oracleParser.ENCRYPT, 0); }
		public ITerminalNode NOT() { return GetToken(oracleParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(oracleParser.NULL, 0); }
		public ITerminalNode ENABLE() { return GetToken(oracleParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(oracleParser.DISABLE, 0); }
		public ITerminalNode USING() { return GetToken(oracleParser.USING, 0); }
		public ITerminalNode[] CHAR_STRING() { return GetTokens(oracleParser.CHAR_STRING); }
		public ITerminalNode CHAR_STRING(int i) {
			return GetToken(oracleParser.CHAR_STRING, i);
		}
		public ITerminalNode IDENTIFIED() { return GetToken(oracleParser.IDENTIFIED, 0); }
		public ITerminalNode BY() { return GetToken(oracleParser.BY, 0); }
		public ITerminalNode REGULAR_ID() { return GetToken(oracleParser.REGULAR_ID, 0); }
		public ITerminalNode SALT() { return GetToken(oracleParser.SALT, 0); }
		public ITerminalNode NO() { return GetToken(oracleParser.NO, 0); }
		public Datatype_null_enableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype_null_enable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatatype_null_enable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datatype_null_enableContext datatype_null_enable() {
		Datatype_null_enableContext _localctx = new Datatype_null_enableContext(Context, State);
		EnterRule(_localctx, 270, RULE_datatype_null_enable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2943; column_name();
			State = 2944; datatype();
			State = 2946;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SORT) {
				{
				State = 2945; Match(SORT);
				}
			}

			State = 2950;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 2948; Match(DEFAULT);
				State = 2949; expression();
				}
			}

			State = 2971;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENCRYPT) {
				{
				State = 2952; Match(ENCRYPT);
				State = 2955;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2953; Match(USING);
					State = 2954; Match(CHAR_STRING);
					}
				}

				State = 2960;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIED) {
					{
					State = 2957; Match(IDENTIFIED);
					State = 2958; Match(BY);
					State = 2959; Match(REGULAR_ID);
					}
				}

				State = 2963;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CHAR_STRING) {
					{
					State = 2962; Match(CHAR_STRING);
					}
				}

				State = 2969;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,337,Context) ) {
				case 1:
					{
					State = 2966;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO) {
						{
						State = 2965; Match(NO);
						}
					}

					State = 2968; Match(SALT);
					}
					break;
				}
				}
			}

			State = 2975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 2973; Match(NOT);
				State = 2974; Match(NULL);
				}
			}

			State = 2978;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,340,Context) ) {
			case 1:
				{
				State = 2977;
				_la = TokenStream.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Size_clauseContext : ParserRuleContext {
		public ITerminalNode UNSIGNED_INTEGER() { return GetToken(oracleParser.UNSIGNED_INTEGER, 0); }
		public ITerminalNode REGULAR_ID() { return GetToken(oracleParser.REGULAR_ID, 0); }
		public Size_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_size_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSize_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Size_clauseContext size_clause() {
		Size_clauseContext _localctx = new Size_clauseContext(Context, State);
		EnterRule(_localctx, 272, RULE_size_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2980; Match(UNSIGNED_INTEGER);
			State = 2982;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REGULAR_ID) {
				{
				State = 2981; Match(REGULAR_ID);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_tableContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(oracleParser.DROP, 0); }
		public ITerminalNode TABLE() { return GetToken(oracleParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(oracleParser.SEMICOLON, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_tableContext drop_table() {
		Drop_tableContext _localctx = new Drop_tableContext(Context, State);
		EnterRule(_localctx, 274, RULE_drop_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2984; Match(DROP);
			State = 2985; Match(TABLE);
			State = 2986; tableview_name();
			State = 2987; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment_on_columnContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(oracleParser.COMMENT, 0); }
		public ITerminalNode ON() { return GetToken(oracleParser.ON, 0); }
		public ITerminalNode COLUMN() { return GetToken(oracleParser.COLUMN, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode PERIOD() { return GetToken(oracleParser.PERIOD, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode IS() { return GetToken(oracleParser.IS, 0); }
		public Quoted_stringContext quoted_string() {
			return GetRuleContext<Quoted_stringContext>(0);
		}
		public Comment_on_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment_on_column; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment_on_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comment_on_columnContext comment_on_column() {
		Comment_on_columnContext _localctx = new Comment_on_columnContext(Context, State);
		EnterRule(_localctx, 276, RULE_comment_on_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2989; Match(COMMENT);
			State = 2990; Match(ON);
			State = 2991; Match(COLUMN);
			State = 2992; tableview_name();
			State = 2993; Match(PERIOD);
			State = 2994; column_name();
			State = 2995; Match(IS);
			State = 2996; quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_synonymContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(oracleParser.CREATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(oracleParser.PUBLIC, 0); }
		public ITerminalNode SYNONYM() { return GetToken(oracleParser.SYNONYM, 0); }
		public Synonym_nameContext synonym_name() {
			return GetRuleContext<Synonym_nameContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(oracleParser.FOR, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public ITerminalNode OR() { return GetToken(oracleParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(oracleParser.REPLACE, 0); }
		public Schema_nameContext[] schema_name() {
			return GetRuleContexts<Schema_nameContext>();
		}
		public Schema_nameContext schema_name(int i) {
			return GetRuleContext<Schema_nameContext>(i);
		}
		public ITerminalNode[] PERIOD() { return GetTokens(oracleParser.PERIOD); }
		public ITerminalNode PERIOD(int i) {
			return GetToken(oracleParser.PERIOD, i);
		}
		public ITerminalNode AT_SIGN() { return GetToken(oracleParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return GetRuleContext<Link_nameContext>(0);
		}
		public Create_synonymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_synonym; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_synonym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_synonymContext create_synonym() {
		Create_synonymContext _localctx = new Create_synonymContext(Context, State);
		EnterRule(_localctx, 278, RULE_create_synonym);
		int _la;
		try {
			State = 3040;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,349,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2998; Match(CREATE);
				State = 3001;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 2999; Match(OR);
					State = 3000; Match(REPLACE);
					}
				}

				State = 3003; Match(PUBLIC);
				State = 3004; Match(SYNONYM);
				State = 3005; synonym_name();
				State = 3006; Match(FOR);
				State = 3010;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,343,Context) ) {
				case 1:
					{
					State = 3007; schema_name();
					State = 3008; Match(PERIOD);
					}
					break;
				}
				State = 3012; schema_object_name();
				State = 3015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN) {
					{
					State = 3013; Match(AT_SIGN);
					State = 3014; link_name();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3017; Match(CREATE);
				State = 3020;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 3018; Match(OR);
					State = 3019; Match(REPLACE);
					}
				}

				State = 3022; Match(SYNONYM);
				State = 3026;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,346,Context) ) {
				case 1:
					{
					State = 3023; schema_name();
					State = 3024; Match(PERIOD);
					}
					break;
				}
				State = 3028; synonym_name();
				State = 3029; Match(FOR);
				State = 3033;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,347,Context) ) {
				case 1:
					{
					State = 3030; schema_name();
					State = 3031; Match(PERIOD);
					}
					break;
				}
				State = 3035; schema_object_name();
				State = 3038;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN) {
					{
					State = 3036; Match(AT_SIGN);
					State = 3037; link_name();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment_on_tableContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(oracleParser.COMMENT, 0); }
		public ITerminalNode ON() { return GetToken(oracleParser.ON, 0); }
		public ITerminalNode TABLE() { return GetToken(oracleParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode IS() { return GetToken(oracleParser.IS, 0); }
		public Quoted_stringContext quoted_string() {
			return GetRuleContext<Quoted_stringContext>(0);
		}
		public Comment_on_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment_on_table; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment_on_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comment_on_tableContext comment_on_table() {
		Comment_on_tableContext _localctx = new Comment_on_tableContext(Context, State);
		EnterRule(_localctx, 280, RULE_comment_on_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3042; Match(COMMENT);
			State = 3043; Match(ON);
			State = 3044; Match(TABLE);
			State = 3045; tableview_name();
			State = 3046; Match(IS);
			State = 3047; quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_tableContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(oracleParser.ALTER, 0); }
		public ITerminalNode TABLE() { return GetToken(oracleParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Add_constraintContext add_constraint() {
			return GetRuleContext<Add_constraintContext>(0);
		}
		public Drop_constraintContext drop_constraint() {
			return GetRuleContext<Drop_constraintContext>(0);
		}
		public Enable_constraintContext enable_constraint() {
			return GetRuleContext<Enable_constraintContext>(0);
		}
		public Disable_constraintContext disable_constraint() {
			return GetRuleContext<Disable_constraintContext>(0);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_tableContext alter_table() {
		Alter_tableContext _localctx = new Alter_tableContext(Context, State);
		EnterRule(_localctx, 282, RULE_alter_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3049; Match(ALTER);
			State = 3050; Match(TABLE);
			State = 3051; tableview_name();
			State = 3056;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
				{
				State = 3052; add_constraint();
				}
				break;
			case DROP:
				{
				State = 3053; drop_constraint();
				}
				break;
			case ENABLE:
				{
				State = 3054; enable_constraint();
				}
				break;
			case DISABLE:
				{
				State = 3055; disable_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_constraintContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(oracleParser.ADD, 0); }
		public Primary_key_clauseContext primary_key_clause() {
			return GetRuleContext<Primary_key_clauseContext>(0);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		public Unique_key_clauseContext unique_key_clause() {
			return GetRuleContext<Unique_key_clauseContext>(0);
		}
		public Check_constraintContext check_constraint() {
			return GetRuleContext<Check_constraintContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(oracleParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Add_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_constraintContext add_constraint() {
		Add_constraintContext _localctx = new Add_constraintContext(Context, State);
		EnterRule(_localctx, 284, RULE_add_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3058; Match(ADD);
			State = 3061;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT) {
				{
				State = 3059; Match(CONSTRAINT);
				State = 3060; constraint_name();
				}
			}

			State = 3067;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY:
				{
				State = 3063; primary_key_clause();
				}
				break;
			case FOREIGN:
				{
				State = 3064; foreign_key_clause();
				}
				break;
			case UNIQUE:
				{
				State = 3065; unique_key_clause();
				}
				break;
			case CHECK:
				{
				State = 3066; check_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Check_constraintContext : ParserRuleContext {
		public ITerminalNode CHECK() { return GetToken(oracleParser.CHECK, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode DISABLE() { return GetToken(oracleParser.DISABLE, 0); }
		public Check_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheck_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Check_constraintContext check_constraint() {
		Check_constraintContext _localctx = new Check_constraintContext(Context, State);
		EnterRule(_localctx, 286, RULE_check_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3069; Match(CHECK);
			State = 3070; Match(LEFT_PAREN);
			State = 3071; condition();
			State = 3072; Match(RIGHT_PAREN);
			State = 3074;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,353,Context) ) {
			case 1:
				{
				State = 3073; Match(DISABLE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_constraintContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(oracleParser.DROP, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(oracleParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Drop_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_constraintContext drop_constraint() {
		Drop_constraintContext _localctx = new Drop_constraintContext(Context, State);
		EnterRule(_localctx, 288, RULE_drop_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3076; Match(DROP);
			State = 3077; Match(CONSTRAINT);
			State = 3078; constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enable_constraintContext : ParserRuleContext {
		public ITerminalNode ENABLE() { return GetToken(oracleParser.ENABLE, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(oracleParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Enable_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enable_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enable_constraintContext enable_constraint() {
		Enable_constraintContext _localctx = new Enable_constraintContext(Context, State);
		EnterRule(_localctx, 290, RULE_enable_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3080; Match(ENABLE);
			State = 3081; Match(CONSTRAINT);
			State = 3082; constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Disable_constraintContext : ParserRuleContext {
		public ITerminalNode DISABLE() { return GetToken(oracleParser.DISABLE, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(oracleParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Disable_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disable_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Disable_constraintContext disable_constraint() {
		Disable_constraintContext _localctx = new Disable_constraintContext(Context, State);
		EnterRule(_localctx, 292, RULE_disable_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3084; Match(DISABLE);
			State = 3085; Match(CONSTRAINT);
			State = 3086; constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_key_clauseContext : ParserRuleContext {
		public ITerminalNode FOREIGN() { return GetToken(oracleParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(oracleParser.KEY, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public References_clauseContext references_clause() {
			return GetRuleContext<References_clauseContext>(0);
		}
		public On_delete_clauseContext on_delete_clause() {
			return GetRuleContext<On_delete_clauseContext>(0);
		}
		public Foreign_key_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_key_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_key_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_key_clauseContext foreign_key_clause() {
		Foreign_key_clauseContext _localctx = new Foreign_key_clauseContext(Context, State);
		EnterRule(_localctx, 294, RULE_foreign_key_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3088; Match(FOREIGN);
			State = 3089; Match(KEY);
			State = 3090; paren_column_list();
			State = 3091; references_clause();
			State = 3093;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 3092; on_delete_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class References_clauseContext : ParserRuleContext {
		public ITerminalNode REFERENCES() { return GetToken(oracleParser.REFERENCES, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public References_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_references_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferences_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public References_clauseContext references_clause() {
		References_clauseContext _localctx = new References_clauseContext(Context, State);
		EnterRule(_localctx, 296, RULE_references_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3095; Match(REFERENCES);
			State = 3096; tableview_name();
			State = 3097; paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_delete_clauseContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(oracleParser.ON, 0); }
		public ITerminalNode DELETE() { return GetToken(oracleParser.DELETE, 0); }
		public ITerminalNode CASCADE() { return GetToken(oracleParser.CASCADE, 0); }
		public ITerminalNode SET() { return GetToken(oracleParser.SET, 0); }
		public ITerminalNode NULL() { return GetToken(oracleParser.NULL, 0); }
		public On_delete_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_delete_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_delete_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_delete_clauseContext on_delete_clause() {
		On_delete_clauseContext _localctx = new On_delete_clauseContext(Context, State);
		EnterRule(_localctx, 298, RULE_on_delete_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3099; Match(ON);
			State = 3100; Match(DELETE);
			State = 3104;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASCADE:
				{
				State = 3101; Match(CASCADE);
				}
				break;
			case SET:
				{
				State = 3102; Match(SET);
				State = 3103; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unique_key_clauseContext : ParserRuleContext {
		public ITerminalNode UNIQUE() { return GetToken(oracleParser.UNIQUE, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Unique_key_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unique_key_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnique_key_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unique_key_clauseContext unique_key_clause() {
		Unique_key_clauseContext _localctx = new Unique_key_clauseContext(Context, State);
		EnterRule(_localctx, 300, RULE_unique_key_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3106; Match(UNIQUE);
			State = 3107; paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_key_clauseContext : ParserRuleContext {
		public ITerminalNode PRIMARY() { return GetToken(oracleParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(oracleParser.KEY, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Primary_key_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_key_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_key_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_key_clauseContext primary_key_clause() {
		Primary_key_clauseContext _localctx = new Primary_key_clauseContext(Context, State);
		EnterRule(_localctx, 302, RULE_primary_key_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3109; Match(PRIMARY);
			State = 3110; Match(KEY);
			State = 3111; paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_blockContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(oracleParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public ITerminalNode END() { return GetToken(oracleParser.END, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(oracleParser.SEMICOLON, 0); }
		public ITerminalNode DECLARE() { return GetToken(oracleParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public ITerminalNode EXCEPTION() { return GetToken(oracleParser.EXCEPTION, 0); }
		public Exception_handlerContext[] exception_handler() {
			return GetRuleContexts<Exception_handlerContext>();
		}
		public Exception_handlerContext exception_handler(int i) {
			return GetRuleContext<Exception_handlerContext>(i);
		}
		public Anonymous_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_blockContext anonymous_block() {
		Anonymous_blockContext _localctx = new Anonymous_blockContext(Context, State);
		EnterRule(_localctx, 304, RULE_anonymous_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DECLARE) {
				{
				State = 3113; Match(DECLARE);
				State = 3114; seq_of_declare_specs();
				}
			}

			State = 3117; Match(BEGIN);
			State = 3118; seq_of_statements();
			State = 3125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCEPTION) {
				{
				State = 3119; Match(EXCEPTION);
				State = 3121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3120; exception_handler();
					}
					}
					State = 3123;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				}
			}

			State = 3127; Match(END);
			State = 3128; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Invoker_rights_clauseContext : ParserRuleContext {
		public ITerminalNode AUTHID() { return GetToken(oracleParser.AUTHID, 0); }
		public ITerminalNode CURRENT_USER() { return GetToken(oracleParser.CURRENT_USER, 0); }
		public ITerminalNode DEFINER() { return GetToken(oracleParser.DEFINER, 0); }
		public Invoker_rights_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invoker_rights_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvoker_rights_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Invoker_rights_clauseContext invoker_rights_clause() {
		Invoker_rights_clauseContext _localctx = new Invoker_rights_clauseContext(Context, State);
		EnterRule(_localctx, 306, RULE_invoker_rights_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3130; Match(AUTHID);
			State = 3131;
			_la = TokenStream.LA(1);
			if ( !(_la==CURRENT_USER || _la==DEFINER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compiler_parameters_clauseContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Compiler_parameters_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compiler_parameters_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompiler_parameters_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compiler_parameters_clauseContext compiler_parameters_clause() {
		Compiler_parameters_clauseContext _localctx = new Compiler_parameters_clauseContext(Context, State);
		EnterRule(_localctx, 308, RULE_compiler_parameters_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3133; identifier();
			State = 3134; Match(EQUALS_OP);
			State = 3135; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_specContext : ParserRuleContext {
		public ITerminalNode LANGUAGE() { return GetToken(oracleParser.LANGUAGE, 0); }
		public Java_specContext java_spec() {
			return GetRuleContext<Java_specContext>(0);
		}
		public C_specContext c_spec() {
			return GetRuleContext<C_specContext>(0);
		}
		public Call_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_specContext call_spec() {
		Call_specContext _localctx = new Call_specContext(Context, State);
		EnterRule(_localctx, 310, RULE_call_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3137; Match(LANGUAGE);
			State = 3140;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JAVA:
				{
				State = 3138; java_spec();
				}
				break;
			case C_LETTER:
				{
				State = 3139; c_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_specContext : ParserRuleContext {
		public ITerminalNode JAVA() { return GetToken(oracleParser.JAVA, 0); }
		public ITerminalNode NAME() { return GetToken(oracleParser.NAME, 0); }
		public ITerminalNode CHAR_STRING() { return GetToken(oracleParser.CHAR_STRING, 0); }
		public Java_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJava_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Java_specContext java_spec() {
		Java_specContext _localctx = new Java_specContext(Context, State);
		EnterRule(_localctx, 312, RULE_java_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3142; Match(JAVA);
			State = 3143; Match(NAME);
			State = 3144; Match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class C_specContext : ParserRuleContext {
		public ITerminalNode C_LETTER() { return GetToken(oracleParser.C_LETTER, 0); }
		public ITerminalNode LIBRARY() { return GetToken(oracleParser.LIBRARY, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(oracleParser.NAME, 0); }
		public ITerminalNode CHAR_STRING() { return GetToken(oracleParser.CHAR_STRING, 0); }
		public C_agent_in_clauseContext c_agent_in_clause() {
			return GetRuleContext<C_agent_in_clauseContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(oracleParser.WITH, 0); }
		public ITerminalNode CONTEXT() { return GetToken(oracleParser.CONTEXT, 0); }
		public C_parameters_clauseContext c_parameters_clause() {
			return GetRuleContext<C_parameters_clauseContext>(0);
		}
		public C_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_c_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitC_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public C_specContext c_spec() {
		C_specContext _localctx = new C_specContext(Context, State);
		EnterRule(_localctx, 314, RULE_c_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3146; Match(C_LETTER);
			State = 3149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 3147; Match(NAME);
				State = 3148; Match(CHAR_STRING);
				}
			}

			State = 3151; Match(LIBRARY);
			State = 3152; identifier();
			State = 3154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AGENT) {
				{
				State = 3153; c_agent_in_clause();
				}
			}

			State = 3158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3156; Match(WITH);
				State = 3157; Match(CONTEXT);
				}
			}

			State = 3161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARAMETERS) {
				{
				State = 3160; c_parameters_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class C_agent_in_clauseContext : ParserRuleContext {
		public ITerminalNode AGENT() { return GetToken(oracleParser.AGENT, 0); }
		public ITerminalNode IN() { return GetToken(oracleParser.IN, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public C_agent_in_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_c_agent_in_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitC_agent_in_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public C_agent_in_clauseContext c_agent_in_clause() {
		C_agent_in_clauseContext _localctx = new C_agent_in_clauseContext(Context, State);
		EnterRule(_localctx, 316, RULE_c_agent_in_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3163; Match(AGENT);
			State = 3164; Match(IN);
			State = 3165; Match(LEFT_PAREN);
			State = 3166; expressions();
			State = 3167; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class C_parameters_clauseContext : ParserRuleContext {
		public ITerminalNode PARAMETERS() { return GetToken(oracleParser.PARAMETERS, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public C_parameters_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_c_parameters_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitC_parameters_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public C_parameters_clauseContext c_parameters_clause() {
		C_parameters_clauseContext _localctx = new C_parameters_clauseContext(Context, State);
		EnterRule(_localctx, 318, RULE_c_parameters_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3169; Match(PARAMETERS);
			State = 3170; Match(LEFT_PAREN);
			State = 3175;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 3171; expressions();
				}
				break;
			case PERIOD:
				{
				State = 3172; Match(PERIOD);
				State = 3173; Match(PERIOD);
				State = 3174; Match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3177; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return GetRuleContext<Parameter_nameContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Default_value_partContext default_value_part() {
			return GetRuleContext<Default_value_partContext>(0);
		}
		public ITerminalNode[] IN() { return GetTokens(oracleParser.IN); }
		public ITerminalNode IN(int i) {
			return GetToken(oracleParser.IN, i);
		}
		public ITerminalNode[] OUT() { return GetTokens(oracleParser.OUT); }
		public ITerminalNode OUT(int i) {
			return GetToken(oracleParser.OUT, i);
		}
		public ITerminalNode[] INOUT() { return GetTokens(oracleParser.INOUT); }
		public ITerminalNode INOUT(int i) {
			return GetToken(oracleParser.INOUT, i);
		}
		public ITerminalNode[] NOCOPY() { return GetTokens(oracleParser.NOCOPY); }
		public ITerminalNode NOCOPY(int i) {
			return GetToken(oracleParser.NOCOPY, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 320, RULE_parameter);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3179; parameter_name();
			State = 3183;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,365,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3180;
					_la = TokenStream.LA(1);
					if ( !(_la==IN || _la==INOUT || _la==NOCOPY || _la==OUT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 3185;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,365,Context);
			}
			State = 3187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,366,Context) ) {
			case 1:
				{
				State = 3186; type_spec();
				}
				break;
			}
			State = 3190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				State = 3189; default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_value_partContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASSIGN_OP() { return GetToken(oracleParser.ASSIGN_OP, 0); }
		public ITerminalNode DEFAULT() { return GetToken(oracleParser.DEFAULT, 0); }
		public Default_value_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_value_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_value_partContext default_value_part() {
		Default_value_partContext _localctx = new Default_value_partContext(Context, State);
		EnterRule(_localctx, 322, RULE_default_value_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3192;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3193; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Seq_of_declare_specsContext : ParserRuleContext {
		public Declare_specContext[] declare_spec() {
			return GetRuleContexts<Declare_specContext>();
		}
		public Declare_specContext declare_spec(int i) {
			return GetRuleContext<Declare_specContext>(i);
		}
		public Seq_of_declare_specsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seq_of_declare_specs; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeq_of_declare_specs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Seq_of_declare_specsContext seq_of_declare_specs() {
		Seq_of_declare_specsContext _localctx = new Seq_of_declare_specsContext(Context, State);
		EnterRule(_localctx, 324, RULE_seq_of_declare_specs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3196;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3195; declare_spec();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3198;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,368,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_specContext : ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return GetRuleContext<Subtype_declarationContext>(0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return GetRuleContext<Cursor_declarationContext>(0);
		}
		public Exception_declarationContext exception_declaration() {
			return GetRuleContext<Exception_declarationContext>(0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return GetRuleContext<Pragma_declarationContext>(0);
		}
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Procedure_specContext procedure_spec() {
			return GetRuleContext<Procedure_specContext>(0);
		}
		public Function_specContext function_spec() {
			return GetRuleContext<Function_specContext>(0);
		}
		public Procedure_bodyContext procedure_body() {
			return GetRuleContext<Procedure_bodyContext>(0);
		}
		public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public Declare_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_specContext declare_spec() {
		Declare_specContext _localctx = new Declare_specContext(Context, State);
		EnterRule(_localctx, 326, RULE_declare_spec);
		try {
			State = 3210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,369,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3200; variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3201; subtype_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3202; cursor_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3203; exception_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3204; pragma_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3205; type_declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3206; procedure_spec();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3207; function_spec();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3208; procedure_body();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3209; function_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode CONSTANT() { return GetToken(oracleParser.CONSTANT, 0); }
		public ITerminalNode NOT() { return GetToken(oracleParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(oracleParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return GetRuleContext<Default_value_partContext>(0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 328, RULE_variable_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3212; identifier();
			State = 3214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,370,Context) ) {
			case 1:
				{
				State = 3213; Match(CONSTANT);
				}
				break;
			}
			State = 3216; type_spec();
			State = 3219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 3217; Match(NOT);
				State = 3218; Match(NULL);
				}
			}

			State = 3222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				State = 3221; default_value_part();
				}
			}

			State = 3224; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subtype_declarationContext : ParserRuleContext {
		public ITerminalNode SUBTYPE() { return GetToken(oracleParser.SUBTYPE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IS() { return GetToken(oracleParser.IS, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode RANGE() { return GetToken(oracleParser.RANGE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode NOT() { return GetToken(oracleParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(oracleParser.NULL, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtype_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtype_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subtype_declarationContext subtype_declaration() {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(Context, State);
		EnterRule(_localctx, 330, RULE_subtype_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3226; Match(SUBTYPE);
			State = 3227; identifier();
			State = 3228; Match(IS);
			State = 3229; type_spec();
			State = 3235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE) {
				{
				State = 3230; Match(RANGE);
				State = 3231; expression();
				State = 3232; Match(DOUBLE_PERIOD);
				State = 3233; expression();
				}
			}

			State = 3239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 3237; Match(NOT);
				State = 3238; Match(NULL);
				}
			}

			State = 3241; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_declarationContext : ParserRuleContext {
		public ITerminalNode CURSOR() { return GetToken(oracleParser.CURSOR, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(oracleParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode IS() { return GetToken(oracleParser.IS, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Parameter_specContext[] parameter_spec() {
			return GetRuleContexts<Parameter_specContext>();
		}
		public Parameter_specContext parameter_spec(int i) {
			return GetRuleContext<Parameter_specContext>(i);
		}
		public Cursor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_declarationContext cursor_declaration() {
		Cursor_declarationContext _localctx = new Cursor_declarationContext(Context, State);
		EnterRule(_localctx, 332, RULE_cursor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3243; Match(CURSOR);
			State = 3244; identifier();
			State = 3256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 3245; Match(LEFT_PAREN);
				State = 3250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3247;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3246; Match(COMMA);
						}
					}

					State = 3249; parameter_spec();
					}
					}
					State = 3252;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (COMMA - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
				State = 3254; Match(RIGHT_PAREN);
				}
			}

			State = 3260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURN) {
				{
				State = 3258; Match(RETURN);
				State = 3259; type_spec();
				}
			}

			State = 3264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IS) {
				{
				State = 3262; Match(IS);
				State = 3263; select_statement();
				}
			}

			State = 3266; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_specContext : ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return GetRuleContext<Parameter_nameContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Default_value_partContext default_value_part() {
			return GetRuleContext<Default_value_partContext>(0);
		}
		public ITerminalNode IN() { return GetToken(oracleParser.IN, 0); }
		public Parameter_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_specContext parameter_spec() {
		Parameter_specContext _localctx = new Parameter_specContext(Context, State);
		EnterRule(_localctx, 334, RULE_parameter_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3268; parameter_name();
			State = 3273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,381,Context) ) {
			case 1:
				{
				State = 3270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN) {
					{
					State = 3269; Match(IN);
					}
				}

				State = 3272; type_spec();
				}
				break;
			}
			State = 3276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				State = 3275; default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_declarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EXCEPTION() { return GetToken(oracleParser.EXCEPTION, 0); }
		public Exception_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitException_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exception_declarationContext exception_declaration() {
		Exception_declarationContext _localctx = new Exception_declarationContext(Context, State);
		EnterRule(_localctx, 336, RULE_exception_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3278; identifier();
			State = 3279; Match(EXCEPTION);
			State = 3280; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_declarationContext : ParserRuleContext {
		public IdentifierContext id1;
		public ITerminalNode PRAGMA() { return GetToken(oracleParser.PRAGMA, 0); }
		public ITerminalNode SERIALLY_REUSABLE() { return GetToken(oracleParser.SERIALLY_REUSABLE, 0); }
		public ITerminalNode AUTONOMOUS_TRANSACTION() { return GetToken(oracleParser.AUTONOMOUS_TRANSACTION, 0); }
		public ITerminalNode EXCEPTION_INIT() { return GetToken(oracleParser.EXCEPTION_INIT, 0); }
		public Exception_nameContext exception_name() {
			return GetRuleContext<Exception_nameContext>(0);
		}
		public Numeric_negativeContext numeric_negative() {
			return GetRuleContext<Numeric_negativeContext>(0);
		}
		public ITerminalNode INLINE() { return GetToken(oracleParser.INLINE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RESTRICT_REFERENCES() { return GetToken(oracleParser.RESTRICT_REFERENCES, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DEFAULT() { return GetToken(oracleParser.DEFAULT, 0); }
		public Pragma_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_declarationContext pragma_declaration() {
		Pragma_declarationContext _localctx = new Pragma_declarationContext(Context, State);
		EnterRule(_localctx, 338, RULE_pragma_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3282; Match(PRAGMA);
			State = 3313;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SERIALLY_REUSABLE:
				{
				State = 3283; Match(SERIALLY_REUSABLE);
				}
				break;
			case AUTONOMOUS_TRANSACTION:
				{
				State = 3284; Match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case EXCEPTION_INIT:
				{
				State = 3285; Match(EXCEPTION_INIT);
				State = 3286; Match(LEFT_PAREN);
				State = 3287; exception_name();
				State = 3288; Match(COMMA);
				State = 3289; numeric_negative();
				State = 3290; Match(RIGHT_PAREN);
				}
				break;
			case INLINE:
				{
				State = 3292; Match(INLINE);
				State = 3293; Match(LEFT_PAREN);
				State = 3294; _localctx.id1 = identifier();
				State = 3295; Match(COMMA);
				State = 3296; expression();
				State = 3297; Match(RIGHT_PAREN);
				}
				break;
			case RESTRICT_REFERENCES:
				{
				State = 3299; Match(RESTRICT_REFERENCES);
				State = 3300; Match(LEFT_PAREN);
				State = 3303;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					State = 3301; identifier();
					}
					break;
				case DEFAULT:
					{
					State = 3302; Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3305; Match(COMMA);
					State = 3306; identifier();
					}
					}
					State = 3309;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 3311; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3315; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Record_type_defContext : ParserRuleContext {
		public ITerminalNode RECORD() { return GetToken(oracleParser.RECORD, 0); }
		public Field_specContext[] field_spec() {
			return GetRuleContexts<Field_specContext>();
		}
		public Field_specContext field_spec(int i) {
			return GetRuleContext<Field_specContext>(i);
		}
		public Record_type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record_type_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecord_type_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Record_type_defContext record_type_def() {
		Record_type_defContext _localctx = new Record_type_defContext(Context, State);
		EnterRule(_localctx, 340, RULE_record_type_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3317; Match(RECORD);
			State = 3318; Match(LEFT_PAREN);
			State = 3323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3320;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3319; Match(COMMA);
					}
				}

				State = 3322; field_spec();
				}
				}
				State = 3325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (COMMA - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
			State = 3327; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_specContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(oracleParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(oracleParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return GetRuleContext<Default_value_partContext>(0);
		}
		public Field_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_specContext field_spec() {
		Field_specContext _localctx = new Field_specContext(Context, State);
		EnterRule(_localctx, 342, RULE_field_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3329; column_name();
			State = 3331;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,388,Context) ) {
			case 1:
				{
				State = 3330; type_spec();
				}
				break;
			}
			State = 3335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 3333; Match(NOT);
				State = 3334; Match(NULL);
				}
			}

			State = 3338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				State = 3337; default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_cursor_type_defContext : ParserRuleContext {
		public ITerminalNode REF() { return GetToken(oracleParser.REF, 0); }
		public ITerminalNode CURSOR() { return GetToken(oracleParser.CURSOR, 0); }
		public ITerminalNode RETURN() { return GetToken(oracleParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Ref_cursor_type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_cursor_type_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRef_cursor_type_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ref_cursor_type_defContext ref_cursor_type_def() {
		Ref_cursor_type_defContext _localctx = new Ref_cursor_type_defContext(Context, State);
		EnterRule(_localctx, 344, RULE_ref_cursor_type_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3340; Match(REF);
			State = 3341; Match(CURSOR);
			State = 3344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURN) {
				{
				State = 3342; Match(RETURN);
				State = 3343; type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(oracleParser.TYPE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IS() { return GetToken(oracleParser.IS, 0); }
		public Table_type_defContext table_type_def() {
			return GetRuleContext<Table_type_defContext>(0);
		}
		public Varray_type_defContext varray_type_def() {
			return GetRuleContext<Varray_type_defContext>(0);
		}
		public Record_type_defContext record_type_def() {
			return GetRuleContext<Record_type_defContext>(0);
		}
		public Ref_cursor_type_defContext ref_cursor_type_def() {
			return GetRuleContext<Ref_cursor_type_defContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 346, RULE_type_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3346; Match(TYPE);
			State = 3347; identifier();
			State = 3348; Match(IS);
			State = 3353;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLE:
				{
				State = 3349; table_type_def();
				}
				break;
			case VARRAY:
			case VARYING:
				{
				State = 3350; varray_type_def();
				}
				break;
			case RECORD:
				{
				State = 3351; record_type_def();
				}
				break;
			case REF:
				{
				State = 3352; ref_cursor_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3355; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_type_defContext : ParserRuleContext {
		public ITerminalNode TABLE() { return GetToken(oracleParser.TABLE, 0); }
		public ITerminalNode OF() { return GetToken(oracleParser.OF, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Table_indexed_by_partContext table_indexed_by_part() {
			return GetRuleContext<Table_indexed_by_partContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(oracleParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(oracleParser.NULL, 0); }
		public Table_type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_type_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_type_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_type_defContext table_type_def() {
		Table_type_defContext _localctx = new Table_type_defContext(Context, State);
		EnterRule(_localctx, 348, RULE_table_type_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3357; Match(TABLE);
			State = 3358; Match(OF);
			State = 3359; type_spec();
			State = 3361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEXED || _la==INDEX) {
				{
				State = 3360; table_indexed_by_part();
				}
			}

			State = 3365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 3363; Match(NOT);
				State = 3364; Match(NULL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_indexed_by_partContext : ParserRuleContext {
		public IToken idx1;
		public IToken idx2;
		public ITerminalNode BY() { return GetToken(oracleParser.BY, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode INDEXED() { return GetToken(oracleParser.INDEXED, 0); }
		public ITerminalNode INDEX() { return GetToken(oracleParser.INDEX, 0); }
		public Table_indexed_by_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_indexed_by_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_indexed_by_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_indexed_by_partContext table_indexed_by_part() {
		Table_indexed_by_partContext _localctx = new Table_indexed_by_partContext(Context, State);
		EnterRule(_localctx, 350, RULE_table_indexed_by_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3369;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEXED:
				{
				State = 3367; _localctx.idx1 = Match(INDEXED);
				}
				break;
			case INDEX:
				{
				State = 3368; _localctx.idx2 = Match(INDEX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3371; Match(BY);
			State = 3372; type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Varray_type_defContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OF() { return GetToken(oracleParser.OF, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode VARRAY() { return GetToken(oracleParser.VARRAY, 0); }
		public ITerminalNode VARYING() { return GetToken(oracleParser.VARYING, 0); }
		public ITerminalNode ARRAY() { return GetToken(oracleParser.ARRAY, 0); }
		public ITerminalNode NOT() { return GetToken(oracleParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(oracleParser.NULL, 0); }
		public Varray_type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varray_type_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarray_type_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Varray_type_defContext varray_type_def() {
		Varray_type_defContext _localctx = new Varray_type_defContext(Context, State);
		EnterRule(_localctx, 352, RULE_varray_type_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3377;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARRAY:
				{
				State = 3374; Match(VARRAY);
				}
				break;
			case VARYING:
				{
				State = 3375; Match(VARYING);
				State = 3376; Match(ARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3379; Match(LEFT_PAREN);
			State = 3380; expression();
			State = 3381; Match(RIGHT_PAREN);
			State = 3382; Match(OF);
			State = 3383; type_spec();
			State = 3386;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,397,Context) ) {
			case 1:
				{
				State = 3384; Match(NOT);
				State = 3385; Match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Seq_of_statementsContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Label_declarationContext[] label_declaration() {
			return GetRuleContexts<Label_declarationContext>();
		}
		public Label_declarationContext label_declaration(int i) {
			return GetRuleContext<Label_declarationContext>(i);
		}
		public ITerminalNode[] Eof() { return GetTokens(oracleParser.Eof); }
		public ITerminalNode Eof(int i) {
			return GetToken(oracleParser.Eof, i);
		}
		public Seq_of_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seq_of_statements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeq_of_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Seq_of_statementsContext seq_of_statements() {
		Seq_of_statementsContext _localctx = new Seq_of_statementsContext(Context, State);
		EnterRule(_localctx, 354, RULE_seq_of_statements);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3392;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 3392;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,398,Context) ) {
					case 1:
						{
						State = 3388; statement();
						State = 3389;
						_la = TokenStream.LA(1);
						if ( !(_la==Eof || _la==SEMICOLON) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 2:
						{
						State = 3391; label_declaration();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3394;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,399,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_declarationContext : ParserRuleContext {
		public IToken ltp1;
		public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		public Label_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_declarationContext label_declaration() {
		Label_declarationContext _localctx = new Label_declarationContext(Context, State);
		EnterRule(_localctx, 356, RULE_label_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3396; _localctx.ltp1 = Match(LESS_THAN_OP);
			State = 3397; Match(LESS_THAN_OP);
			State = 3398; label_name();
			State = 3399; Match(GREATER_THAN_OP);
			State = 3400; Match(GREATER_THAN_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(oracleParser.CREATE, 0); }
		public Swallow_to_semiContext swallow_to_semi() {
			return GetRuleContext<Swallow_to_semiContext>(0);
		}
		public ITerminalNode TRUNCATE() { return GetToken(oracleParser.TRUNCATE, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Assignment_statementContext assignment_statement() {
			return GetRuleContext<Assignment_statementContext>(0);
		}
		public Continue_statementContext continue_statement() {
			return GetRuleContext<Continue_statementContext>(0);
		}
		public Exit_statementContext exit_statement() {
			return GetRuleContext<Exit_statementContext>(0);
		}
		public Goto_statementContext goto_statement() {
			return GetRuleContext<Goto_statementContext>(0);
		}
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Loop_statementContext loop_statement() {
			return GetRuleContext<Loop_statementContext>(0);
		}
		public Forall_statementContext forall_statement() {
			return GetRuleContext<Forall_statementContext>(0);
		}
		public Null_statementContext null_statement() {
			return GetRuleContext<Null_statementContext>(0);
		}
		public Raise_statementContext raise_statement() {
			return GetRuleContext<Raise_statementContext>(0);
		}
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Case_statementContext case_statement() {
			return GetRuleContext<Case_statementContext>(0);
		}
		public Sql_statementContext sql_statement() {
			return GetRuleContext<Sql_statementContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Pipe_row_statementContext pipe_row_statement() {
			return GetRuleContext<Pipe_row_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 358, RULE_statement);
		try {
			State = 3422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,400,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3402; Match(CREATE);
				State = 3403; swallow_to_semi();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3404; Match(TRUNCATE);
				State = 3405; swallow_to_semi();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3406; body();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3407; block();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3408; assignment_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3409; continue_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3410; exit_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3411; goto_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3412; if_statement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3413; loop_statement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3414; forall_statement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3415; null_statement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 3416; raise_statement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 3417; return_statement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 3418; case_statement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 3419; sql_statement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 3420; function_call();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 3421; pipe_row_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Swallow_to_semiContext : ParserRuleContext {
		public Swallow_to_semiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_swallow_to_semi; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwallow_to_semi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Swallow_to_semiContext swallow_to_semi() {
		Swallow_to_semiContext _localctx = new Swallow_to_semiContext(Context, State);
		EnterRule(_localctx, 360, RULE_swallow_to_semi);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3424;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SEMICOLON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 3427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ACCOUNT) | (1L << ADD) | (1L << ADMIN) | (1L << ADMINISTER) | (1L << ADVISOR) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARCHIVE) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHENTICATED) | (1L << AUTHENTICATION) | (1L << AUTHID) | (1L << AUTOALLOCATE) | (1L << AUTO) | (1L << AUTOEXTEND) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BACKUP) | (1L << BASIC) | (1L << BATCH) | (1L << BECOME) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BIGFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BLOCKSIZE) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BUFFER_POOL) | (1L << BUILD) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CERTIFICATE) | (1L << CHANGE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHECK - 64)) | (1L << (CHR - 64)) | (1L << (CLASS - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMN - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (COMPRESS - 64)) | (1L << (COMPUTE - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONNECT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTAINER - 64)) | (1L << (CONTAINER_DATA - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CREATION - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATAFILE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DBA_RECYCLEBIN - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DEFERRABLE - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELEGATE - 128)) | (1L << (DELETE - 128)) | (1L << (DEPTH - 128)) | (1L << (DESC - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DICTIONARY - 128)) | (1L << (DIMENSION - 128)) | (1L << (DIRECTORY - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DISTINGUISHED - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (EDITION - 128)) | (1L << (EDITIONING - 128)) | (1L << (EDITIONS - 128)) | (1L << (ELEMENT - 128)) | (1L << (ELSE - 128)) | (1L << (ELSIF - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENCRYPT - 128)) | (1L << (ENCRYPTION - 128)) | (1L << (END - 128)) | (1L << (ENTERPRISE - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPT - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXEMPT - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPIRE - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTENT - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTERNALLY - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FILESYSTEM_LIKE_LOGGING - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLASHBACK - 128)) | (1L << (FLASH_CACHE - 128)) | (1L << (FLOAT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (FOLDER - 192)) | (1L << (FOLLOWING - 192)) | (1L << (FOLLOWS - 192)) | (1L << (FORALL - 192)) | (1L << (FORCE - 192)) | (1L << (FOREIGN - 192)) | (1L << (FOR - 192)) | (1L << (FREELIST - 192)) | (1L << (FREELISTS - 192)) | (1L << (FROM - 192)) | (1L << (FULL - 192)) | (1L << (FUNCTION - 192)) | (1L << (GLOBAL - 192)) | (1L << (GLOBALLY - 192)) | (1L << (GOTO - 192)) | (1L << (GRANT - 192)) | (1L << (GROUP - 192)) | (1L << (GROUPING - 192)) | (1L << (GROUPS - 192)) | (1L << (GUARANTEE - 192)) | (1L << (HASH - 192)) | (1L << (HAVING - 192)) | (1L << (HIDE - 192)) | (1L << (HIERARCHY - 192)) | (1L << (HIGH - 192)) | (1L << (HOUR - 192)) | (1L << (IDENTIFIED - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (ID - 192)) | (1L << (IF - 192)) | (1L << (IGNORE - 192)) | (1L << (IMMEDIATE - 192)) | (1L << (INCLUDE - 192)) | (1L << (INCLUDING - 192)) | (1L << (INCREMENT - 192)) | (1L << (INDENT - 192)) | (1L << (INDEXED - 192)) | (1L << (INDEX - 192)) | (1L << (INDEXTYPE - 192)) | (1L << (INDICATOR - 192)) | (1L << (INDICES - 192)) | (1L << (INFINITE - 192)) | (1L << (INHERIT - 192)) | (1L << (IN - 192)) | (1L << (INITIAL - 192)) | (1L << (INITIALLY - 192)) | (1L << (INITRANS - 192)) | (1L << (INLINE - 192)) | (1L << (INNER - 192)) | (1L << (INOUT - 192)) | (1L << (INSERT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERSECT - 192)) | (1L << (INTERVAL - 192)) | (1L << (INT - 192)) | (1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOB - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (JOIN - 256)) | (1L << (KEEP - 256)) | (1L << (KEY - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LAST - 256)) | (1L << (LAST_VALUE - 256)) | (1L << (LEADING - 256)) | (1L << (LEFT - 256)) | (1L << (LESS - 256)) | (1L << (LEVEL - 256)) | (1L << (LIBRARY - 256)) | (1L << (LIKE2 - 256)) | (1L << (LIKE4 - 256)) | (1L << (LIKEC - 256)) | (1L << (LIKE - 256)) | (1L << (LIMIT - 256)) | (1L << (LINK - 256)) | (1L << (LIST - 256)) | (1L << (LOCAL - 256)) | (1L << (LOCKED - 256)) | (1L << (LOCK - 256)) | (1L << (LOGGING - 256)) | (1L << (LOG - 256)) | (1L << (LOGMINING - 256)) | (1L << (LOGOFF - 256)) | (1L << (LOGON - 256)) | (1L << (LONG - 256)) | (1L << (LOOP - 256)) | (1L << (LOW - 256)) | (1L << (MAIN - 256)) | (1L << (MANAGE - 256)) | (1L << (MANAGEMENT - 256)) | (1L << (MANUAL - 256)) | (1L << (MAP - 256)) | (1L << (MATCHED - 256)) | (1L << (MATERIALIZED - 256)) | (1L << (MAXSIZE - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MEASURE - 256)) | (1L << (MEASURES - 256)) | (1L << (MEMBER - 256)) | (1L << (MERGE - 256)) | (1L << (MINEXTENTS - 256)) | (1L << (MINIMUM - 256)) | (1L << (MINING - 256)) | (1L << (MINUS - 256)) | (1L << (MINUTE - 256)) | (1L << (MINVALUE - 256)) | (1L << (MLSLABEL - 256)) | (1L << (MODEL - 256)) | (1L << (MODE - 256)) | (1L << (MODIFY - 256)) | (1L << (MONTH - 256)) | (1L << (MOVEMENT - 256)) | (1L << (MULTISET - 256)) | (1L << (NAME - 256)) | (1L << (NAN - 256)) | (1L << (NATURAL - 256)) | (1L << (NATURALN - 256)) | (1L << (NAV - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCHAR - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (NEW - 320)) | (1L << (NEXT - 320)) | (1L << (NOAUDIT - 320)) | (1L << (NOCACHE - 320)) | (1L << (NOCOMPRESS - 320)) | (1L << (NOCOPY - 320)) | (1L << (NOCYCLE - 320)) | (1L << (NOENTITYESCAPING - 320)) | (1L << (NOGUARANTEE - 320)) | (1L << (NOLOGGING - 320)) | (1L << (NOMAXVALUE - 320)) | (1L << (NOMINVALUE - 320)) | (1L << (NONE - 320)) | (1L << (NO - 320)) | (1L << (NOORDER - 320)) | (1L << (NORELY - 320)) | (1L << (NOSCHEMACHECK - 320)) | (1L << (NOTIFICATION - 320)) | (1L << (NOT - 320)) | (1L << (NOVALIDATE - 320)) | (1L << (NOWAIT - 320)) | (1L << (NULL - 320)) | (1L << (NULLS - 320)) | (1L << (NUMBER - 320)) | (1L << (NUMERIC - 320)) | (1L << (NVARCHAR2 - 320)) | (1L << (OBJECT - 320)) | (1L << (OFFLINE - 320)) | (1L << (OFF - 320)) | (1L << (OF - 320)) | (1L << (OID - 320)) | (1L << (OLD - 320)) | (1L << (OLTP - 320)) | (1L << (ONLINE - 320)) | (1L << (ONLY - 320)) | (1L << (ON - 320)) | (1L << (OPEN - 320)) | (1L << (OPERATOR - 320)) | (1L << (OPTIMAL - 320)) | (1L << (OPTION - 320)) | (1L << (ORADATA - 320)) | (1L << (ORDER - 320)) | (1L << (ORDINALITY - 320)) | (1L << (OR - 320)) | (1L << (OSERROR - 320)) | (1L << (OUTER - 320)) | (1L << (OUTLINE - 320)) | (1L << (OUT - 320)) | (1L << (OVER - 320)) | (1L << (OVERRIDING - 320)) | (1L << (PACKAGE - 320)) | (1L << (PARALLEL_ENABLE - 320)) | (1L << (PARAMETERS - 320)) | (1L << (PARENT - 320)) | (1L << (PARTITION - 320)) | (1L << (PASSING - 320)) | (1L << (PASSWORD - 320)) | (1L << (PATH - 320)) | (1L << (PCTFREE - 320)) | (1L << (PCTINCREASE - 320)) | (1L << (PCTUSED - 320)) | (1L << (PERCENT_FOUND - 320)) | (1L << (PERCENT_ISOPEN - 320)) | (1L << (PERCENT_NOTFOUND - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (PERCENT_ROWCOUNT - 384)) | (1L << (PERCENT_ROWTYPE - 384)) | (1L << (PERCENT_TYPE - 384)) | (1L << (PIPELINED - 384)) | (1L << (PIPE - 384)) | (1L << (PIVOT - 384)) | (1L << (PLAN - 384)) | (1L << (PLS_INTEGER - 384)) | (1L << (PLUGGABLE - 384)) | (1L << (POLICY - 384)) | (1L << (POSITIVEN - 384)) | (1L << (POSITIVE - 384)) | (1L << (PRAGMA - 384)) | (1L << (PRECEDING - 384)) | (1L << (PRECISION - 384)) | (1L << (PRESENT - 384)) | (1L << (PRESERVE - 384)) | (1L << (PRIMARY - 384)) | (1L << (PRIOR - 384)) | (1L << (PRIVILEGE - 384)) | (1L << (PRIVILEGES - 384)) | (1L << (PROCEDURE - 384)) | (1L << (PROCESS - 384)) | (1L << (PROFILE - 384)) | (1L << (PROGRAM - 384)) | (1L << (PUBLIC - 384)) | (1L << (PURGE - 384)) | (1L << (QUERY - 384)) | (1L << (QUOTA - 384)) | (1L << (RAISE - 384)) | (1L << (RANGE - 384)) | (1L << (RAW - 384)) | (1L << (READ - 384)) | (1L << (REAL - 384)) | (1L << (RECORD - 384)) | (1L << (RECYCLE - 384)) | (1L << (REDACTION - 384)) | (1L << (REFERENCE - 384)) | (1L << (REFERENCES - 384)) | (1L << (REFERENCING - 384)) | (1L << (REF - 384)) | (1L << (REFRESH - 384)) | (1L << (REJECT - 384)) | (1L << (RELIES_ON - 384)) | (1L << (RELY - 384)) | (1L << (REMOVE - 384)) | (1L << (RENAME - 384)) | (1L << (REPLACE - 384)) | (1L << (REQUIRED - 384)) | (1L << (RESOURCE - 384)) | (1L << (RESPECT - 384)) | (1L << (RESTRICTED - 384)) | (1L << (RESTRICT_REFERENCES - 384)) | (1L << (RESULT_CACHE - 384)) | (1L << (RESULT - 384)) | (1L << (RESUMABLE - 384)) | (1L << (RETENTION - 384)) | (1L << (RETURNING - 384)) | (1L << (RETURN - 384)) | (1L << (REUSE - 384)) | (1L << (REVERSE - 384)) | (1L << (REVOKE - 384)) | (1L << (REWRITE - 384)) | (1L << (RIGHT - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (ROLE - 448)) | (1L << (ROLES - 448)) | (1L << (ROLLBACK - 448)) | (1L << (ROLLUP - 448)) | (1L << (ROWID - 448)) | (1L << (ROW - 448)) | (1L << (ROWS - 448)) | (1L << (RULES - 448)) | (1L << (SALT - 448)) | (1L << (SAMPLE - 448)) | (1L << (SAVEPOINT - 448)) | (1L << (SAVE - 448)) | (1L << (SCHEDULER - 448)) | (1L << (SCHEMACHECK - 448)) | (1L << (SCHEMA - 448)) | (1L << (SCN - 448)) | (1L << (SEARCH - 448)) | (1L << (SECOND - 448)) | (1L << (SEED - 448)) | (1L << (SEGMENT - 448)) | (1L << (SELECT - 448)) | (1L << (SELF - 448)) | (1L << (SEQUENCE - 448)) | (1L << (SEQUENTIAL - 448)) | (1L << (SERIALIZABLE - 448)) | (1L << (SERIALLY_REUSABLE - 448)) | (1L << (SERVERERROR - 448)) | (1L << (SESSION - 448)) | (1L << (SESSIONTIMEZONE - 448)) | (1L << (SET - 448)) | (1L << (SETS - 448)) | (1L << (SETTINGS - 448)) | (1L << (SHARE - 448)) | (1L << (SHOW - 448)) | (1L << (SHUTDOWN - 448)) | (1L << (SIBLINGS - 448)) | (1L << (SIGNTYPE - 448)) | (1L << (SIMPLE_INTEGER - 448)) | (1L << (SINGLE - 448)) | (1L << (SIZE - 448)) | (1L << (SKIP_ - 448)) | (1L << (SMALLFILE - 448)) | (1L << (SMALLINT - 448)) | (1L << (SNAPSHOT - 448)) | (1L << (SOME - 448)) | (1L << (SORT - 448)) | (1L << (SOURCE - 448)) | (1L << (SPACE_KEYWORD - 448)) | (1L << (SPECIFICATION - 448)) | (1L << (SQLDATA - 448)) | (1L << (SQLERROR - 448)) | (1L << (SQL - 448)) | (1L << (STANDALONE - 448)) | (1L << (START - 448)) | (1L << (STARTUP - 448)) | (1L << (STATEMENT_ID - 448)) | (1L << (STATEMENT - 448)) | (1L << (STATIC - 448)) | (1L << (STATISTICS - 448)) | (1L << (STORAGE - 448)) | (1L << (STORE - 448)) | (1L << (STRING - 448)) | (1L << (SUBMULTISET - 448)) | (1L << (SUBPARTITION - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (SUBSTITUTABLE - 512)) | (1L << (SUBTYPE - 512)) | (1L << (SUCCESS - 512)) | (1L << (SUSPEND - 512)) | (1L << (SYNONYM - 512)) | (1L << (SYSBACKUP - 512)) | (1L << (SYSDATE - 512)) | (1L << (SYSDBA - 512)) | (1L << (SYSDG - 512)) | (1L << (SYSGUID - 512)) | (1L << (SYSKM - 512)) | (1L << (SYSOPER - 512)) | (1L << (TABLESPACE - 512)) | (1L << (TABLE - 512)) | (1L << (TEMPFILE - 512)) | (1L << (TEMPORARY - 512)) | (1L << (THAN - 512)) | (1L << (THEN - 512)) | (1L << (THE - 512)) | (1L << (THROUGH - 512)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 512)) | (1L << (TIMESTAMP - 512)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 512)) | (1L << (TIMESTAMP_UNCONSTRAINED - 512)) | (1L << (TIME - 512)) | (1L << (TIMEZONE_ABBR - 512)) | (1L << (TIMEZONE_HOUR - 512)) | (1L << (TIMEZONE_MINUTE - 512)) | (1L << (TIMEZONE_REGION - 512)) | (1L << (TO - 512)) | (1L << (TRAILING - 512)) | (1L << (TRANSACTION - 512)) | (1L << (TRANSLATE - 512)) | (1L << (TRANSLATION - 512)) | (1L << (TREAT - 512)) | (1L << (TRIGGER - 512)) | (1L << (TRUE - 512)) | (1L << (TRUNCATE - 512)) | (1L << (TUNING - 512)) | (1L << (TYPE - 512)) | (1L << (UNBOUNDED - 512)) | (1L << (UNDER - 512)) | (1L << (UNDO - 512)) | (1L << (UNIFORM - 512)) | (1L << (UNION - 512)) | (1L << (UNIQUE - 512)) | (1L << (UNLIMITED - 512)) | (1L << (UNLOCK - 512)) | (1L << (UNPIVOT - 512)) | (1L << (UNTIL - 512)) | (1L << (UPDATED - 512)) | (1L << (UPDATE - 512)) | (1L << (UPSERT - 512)) | (1L << (UROWID - 512)) | (1L << (USERS - 512)) | (1L << (USER - 512)) | (1L << (USE - 512)) | (1L << (USING - 512)) | (1L << (VALIDATE - 512)) | (1L << (VALUES - 512)) | (1L << (VALUE - 512)) | (1L << (VARCHAR2 - 512)) | (1L << (VARCHAR - 512)) | (1L << (VARIABLE - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (VARRAY - 576)) | (1L << (VARYING - 576)) | (1L << (VERSIONS - 576)) | (1L << (VERSION - 576)) | (1L << (VIEW - 576)) | (1L << (WAIT - 576)) | (1L << (WARNING - 576)) | (1L << (WELLFORMED - 576)) | (1L << (WHENEVER - 576)) | (1L << (WHEN - 576)) | (1L << (WHERE - 576)) | (1L << (WHILE - 576)) | (1L << (WITHIN - 576)) | (1L << (WITH - 576)) | (1L << (WORK - 576)) | (1L << (WRITE - 576)) | (1L << (XMLAGG - 576)) | (1L << (XMLATTRIBUTES - 576)) | (1L << (XMLCAST - 576)) | (1L << (XMLCOLATTVAL - 576)) | (1L << (XMLELEMENT - 576)) | (1L << (XMLEXISTS - 576)) | (1L << (XMLFOREST - 576)) | (1L << (XMLNAMESPACES - 576)) | (1L << (XMLPARSE - 576)) | (1L << (XMLPI - 576)) | (1L << (XMLQUERY - 576)) | (1L << (XMLROOT - 576)) | (1L << (XMLSERIALIZE - 576)) | (1L << (XMLTABLE - 576)) | (1L << (XML - 576)) | (1L << (YEAR - 576)) | (1L << (YES - 576)) | (1L << (YMINTERVAL_UNCONSTRAINED - 576)) | (1L << (ZONE - 576)) | (1L << (PREDICTION - 576)) | (1L << (PREDICTION_BOUNDS - 576)) | (1L << (PREDICTION_COST - 576)) | (1L << (PREDICTION_DETAILS - 576)) | (1L << (PREDICTION_PROBABILITY - 576)) | (1L << (PREDICTION_SET - 576)) | (1L << (CUME_DIST - 576)) | (1L << (DENSE_RANK - 576)) | (1L << (LISTAGG - 576)) | (1L << (PERCENT_RANK - 576)) | (1L << (PERCENTILE_CONT - 576)) | (1L << (PERCENTILE_DISC - 576)) | (1L << (RANK - 576)) | (1L << (AVG - 576)) | (1L << (CORR - 576)) | (1L << (COVAR_ - 576)) | (1L << (DECODE - 576)) | (1L << (LAG - 576)) | (1L << (LEAD - 576)) | (1L << (MAX - 576)) | (1L << (MEDIAN - 576)) | (1L << (MIN - 576)) | (1L << (NTILE - 576)) | (1L << (NVL - 576)) | (1L << (RATIO_TO_REPORT - 576)) | (1L << (REGR_ - 576)) | (1L << (ROUND - 576)) | (1L << (ROW_NUMBER - 576)) | (1L << (SUBSTR - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (TO_CHAR - 640)) | (1L << (TRIM - 640)) | (1L << (SUM - 640)) | (1L << (STDDEV - 640)) | (1L << (VAR_ - 640)) | (1L << (VARIANCE - 640)) | (1L << (LEAST - 640)) | (1L << (GREATEST - 640)) | (1L << (TO_DATE - 640)) | (1L << (NATIONAL_CHAR_STRING_LIT - 640)) | (1L << (BIT_STRING_LIT - 640)) | (1L << (HEX_STRING_LIT - 640)) | (1L << (DOUBLE_PERIOD - 640)) | (1L << (PERIOD - 640)) | (1L << (UNSIGNED_INTEGER - 640)) | (1L << (APPROXIMATE_NUM_LIT - 640)) | (1L << (CHAR_STRING - 640)) | (1L << (DELIMITED_ID - 640)) | (1L << (PERCENT - 640)) | (1L << (AMPERSAND - 640)) | (1L << (LEFT_PAREN - 640)) | (1L << (RIGHT_PAREN - 640)) | (1L << (DOUBLE_ASTERISK - 640)) | (1L << (ASTERISK - 640)) | (1L << (PLUS_SIGN - 640)) | (1L << (MINUS_SIGN - 640)) | (1L << (COMMA - 640)) | (1L << (SOLIDUS - 640)) | (1L << (AT_SIGN - 640)) | (1L << (ASSIGN_OP - 640)) | (1L << (BINDVAR - 640)) | (1L << (NOT_EQUAL_OP - 640)) | (1L << (CARRET_OPERATOR_PART - 640)) | (1L << (TILDE_OPERATOR_PART - 640)) | (1L << (EXCLAMATION_OPERATOR_PART - 640)) | (1L << (GREATER_THAN_OP - 640)) | (1L << (LESS_THAN_OP - 640)) | (1L << (COLON - 640)) | (1L << (BAR - 640)) | (1L << (EQUALS_OP - 640)) | (1L << (LEFT_BRACKET - 640)) | (1L << (RIGHT_BRACKET - 640)) | (1L << (INTRODUCER - 640)) | (1L << (SPACES - 640)) | (1L << (SINGLE_LINE_COMMENT - 640)) | (1L << (MULTI_LINE_COMMENT - 640)) | (1L << (PROMPT - 640)) | (1L << (START_CMD - 640)) | (1L << (REGULAR_ID - 640)) | (1L << (ZV - 640)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_statementContext : ParserRuleContext {
		public ITerminalNode ASSIGN_OP() { return GetToken(oracleParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public General_elementContext general_element() {
			return GetRuleContext<General_elementContext>(0);
		}
		public Bind_variableContext bind_variable() {
			return GetRuleContext<Bind_variableContext>(0);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_statementContext assignment_statement() {
		Assignment_statementContext _localctx = new Assignment_statementContext(Context, State);
		EnterRule(_localctx, 362, RULE_assignment_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3431;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 3429; general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				{
				State = 3430; bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3433; Match(ASSIGN_OP);
			State = 3434; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_statementContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(oracleParser.CONTINUE, 0); }
		public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		public ITerminalNode WHEN() { return GetToken(oracleParser.WHEN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Continue_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinue_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Continue_statementContext continue_statement() {
		Continue_statementContext _localctx = new Continue_statementContext(Context, State);
		EnterRule(_localctx, 364, RULE_continue_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3436; Match(CONTINUE);
			State = 3438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				State = 3437; label_name();
				}
			}

			State = 3442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 3440; Match(WHEN);
				State = 3441; condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exit_statementContext : ParserRuleContext {
		public ITerminalNode EXIT() { return GetToken(oracleParser.EXIT, 0); }
		public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		public ITerminalNode WHEN() { return GetToken(oracleParser.WHEN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Exit_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exit_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExit_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exit_statementContext exit_statement() {
		Exit_statementContext _localctx = new Exit_statementContext(Context, State);
		EnterRule(_localctx, 366, RULE_exit_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3444; Match(EXIT);
			State = 3446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				State = 3445; label_name();
				}
			}

			State = 3450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 3448; Match(WHEN);
				State = 3449; condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Goto_statementContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(oracleParser.GOTO, 0); }
		public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoto_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Goto_statementContext goto_statement() {
		Goto_statementContext _localctx = new Goto_statementContext(Context, State);
		EnterRule(_localctx, 368, RULE_goto_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3452; Match(GOTO);
			State = 3453; label_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ITerminalNode[] IF() { return GetTokens(oracleParser.IF); }
		public ITerminalNode IF(int i) {
			return GetToken(oracleParser.IF, i);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(oracleParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public ITerminalNode END() { return GetToken(oracleParser.END, 0); }
		public Elsif_partContext[] elsif_part() {
			return GetRuleContexts<Elsif_partContext>();
		}
		public Elsif_partContext elsif_part(int i) {
			return GetRuleContext<Elsif_partContext>(i);
		}
		public Else_partContext else_part() {
			return GetRuleContext<Else_partContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 370, RULE_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3455; Match(IF);
			State = 3456; condition();
			State = 3457; Match(THEN);
			State = 3458; seq_of_statements();
			State = 3462;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSIF) {
				{
				{
				State = 3459; elsif_part();
				}
				}
				State = 3464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3466;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 3465; else_part();
				}
			}

			State = 3468; Match(END);
			State = 3469; Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elsif_partContext : ParserRuleContext {
		public ITerminalNode ELSIF() { return GetToken(oracleParser.ELSIF, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(oracleParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public Elsif_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsif_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsif_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elsif_partContext elsif_part() {
		Elsif_partContext _localctx = new Elsif_partContext(Context, State);
		EnterRule(_localctx, 372, RULE_elsif_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3471; Match(ELSIF);
			State = 3472; condition();
			State = 3473; Match(THEN);
			State = 3474; seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_partContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(oracleParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public Else_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_partContext else_part() {
		Else_partContext _localctx = new Else_partContext(Context, State);
		EnterRule(_localctx, 374, RULE_else_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3476; Match(ELSE);
			State = 3477; seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_statementContext : ParserRuleContext {
		public ITerminalNode[] LOOP() { return GetTokens(oracleParser.LOOP); }
		public ITerminalNode LOOP(int i) {
			return GetToken(oracleParser.LOOP, i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public ITerminalNode END() { return GetToken(oracleParser.END, 0); }
		public Label_declarationContext label_declaration() {
			return GetRuleContext<Label_declarationContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(oracleParser.WHILE, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(oracleParser.FOR, 0); }
		public Cursor_loop_paramContext cursor_loop_param() {
			return GetRuleContext<Cursor_loop_paramContext>(0);
		}
		public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loop_statementContext loop_statement() {
		Loop_statementContext _localctx = new Loop_statementContext(Context, State);
		EnterRule(_localctx, 376, RULE_loop_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3480;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LESS_THAN_OP) {
				{
				State = 3479; label_declaration();
				}
			}

			State = 3486;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				{
				State = 3482; Match(WHILE);
				State = 3483; condition();
				}
				break;
			case FOR:
				{
				State = 3484; Match(FOR);
				State = 3485; cursor_loop_param();
				}
				break;
			case LOOP:
				break;
			default:
				break;
			}
			State = 3488; Match(LOOP);
			State = 3489; seq_of_statements();
			State = 3490; Match(END);
			State = 3491; Match(LOOP);
			State = 3493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				State = 3492; label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_loop_paramContext : ParserRuleContext {
		public IToken range_separator;
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(oracleParser.IN, 0); }
		public Lower_boundContext lower_bound() {
			return GetRuleContext<Lower_boundContext>(0);
		}
		public Upper_boundContext upper_bound() {
			return GetRuleContext<Upper_boundContext>(0);
		}
		public ITerminalNode REVERSE() { return GetToken(oracleParser.REVERSE, 0); }
		public Record_nameContext record_name() {
			return GetRuleContext<Record_nameContext>(0);
		}
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_loop_param; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_loop_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_loop_paramContext cursor_loop_param() {
		Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(Context, State);
		EnterRule(_localctx, 378, RULE_cursor_loop_param);
		int _la;
		try {
			State = 3520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,416,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3495; index_name();
				State = 3496; Match(IN);
				State = 3498;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,412,Context) ) {
				case 1:
					{
					State = 3497; Match(REVERSE);
					}
					break;
				}
				State = 3500; lower_bound();
				State = 3501; _localctx.range_separator = Match(DOUBLE_PERIOD);
				State = 3502; upper_bound();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3504; record_name();
				State = 3505; Match(IN);
				State = 3518;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					State = 3506; cursor_name();
					State = 3512;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LEFT_PAREN) {
						{
						State = 3507; Match(LEFT_PAREN);
						State = 3509;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
							{
							State = 3508; expressions();
							}
						}

						State = 3511; Match(RIGHT_PAREN);
						}
					}

					}
					break;
				case LEFT_PAREN:
					{
					State = 3514; Match(LEFT_PAREN);
					State = 3515; select_statement();
					State = 3516; Match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Forall_statementContext : ParserRuleContext {
		public ITerminalNode FORALL() { return GetToken(oracleParser.FORALL, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(oracleParser.IN, 0); }
		public Bounds_clauseContext bounds_clause() {
			return GetRuleContext<Bounds_clauseContext>(0);
		}
		public Sql_statementContext sql_statement() {
			return GetRuleContext<Sql_statementContext>(0);
		}
		public ITerminalNode SAVE() { return GetToken(oracleParser.SAVE, 0); }
		public ITerminalNode EXCEPTIONS() { return GetToken(oracleParser.EXCEPTIONS, 0); }
		public Forall_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forall_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForall_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Forall_statementContext forall_statement() {
		Forall_statementContext _localctx = new Forall_statementContext(Context, State);
		EnterRule(_localctx, 380, RULE_forall_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3522; Match(FORALL);
			State = 3523; index_name();
			State = 3524; Match(IN);
			State = 3525; bounds_clause();
			State = 3526; sql_statement();
			State = 3529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SAVE) {
				{
				State = 3527; Match(SAVE);
				State = 3528; Match(EXCEPTIONS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bounds_clauseContext : ParserRuleContext {
		public Lower_boundContext lower_bound() {
			return GetRuleContext<Lower_boundContext>(0);
		}
		public Upper_boundContext upper_bound() {
			return GetRuleContext<Upper_boundContext>(0);
		}
		public ITerminalNode INDICES() { return GetToken(oracleParser.INDICES, 0); }
		public ITerminalNode OF() { return GetToken(oracleParser.OF, 0); }
		public Collection_nameContext collection_name() {
			return GetRuleContext<Collection_nameContext>(0);
		}
		public Between_boundContext between_bound() {
			return GetRuleContext<Between_boundContext>(0);
		}
		public ITerminalNode VALUES() { return GetToken(oracleParser.VALUES, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public Bounds_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bounds_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBounds_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bounds_clauseContext bounds_clause() {
		Bounds_clauseContext _localctx = new Bounds_clauseContext(Context, State);
		EnterRule(_localctx, 382, RULE_bounds_clause);
		int _la;
		try {
			State = 3544;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,419,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3531; lower_bound();
				State = 3532; Match(DOUBLE_PERIOD);
				State = 3533; upper_bound();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3535; Match(INDICES);
				State = 3536; Match(OF);
				State = 3537; collection_name();
				State = 3539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BETWEEN) {
					{
					State = 3538; between_bound();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3541; Match(VALUES);
				State = 3542; Match(OF);
				State = 3543; index_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Between_boundContext : ParserRuleContext {
		public ITerminalNode BETWEEN() { return GetToken(oracleParser.BETWEEN, 0); }
		public Lower_boundContext lower_bound() {
			return GetRuleContext<Lower_boundContext>(0);
		}
		public ITerminalNode AND() { return GetToken(oracleParser.AND, 0); }
		public Upper_boundContext upper_bound() {
			return GetRuleContext<Upper_boundContext>(0);
		}
		public Between_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_between_bound; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetween_bound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Between_boundContext between_bound() {
		Between_boundContext _localctx = new Between_boundContext(Context, State);
		EnterRule(_localctx, 384, RULE_between_bound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3546; Match(BETWEEN);
			State = 3547; lower_bound();
			State = 3548; Match(AND);
			State = 3549; upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lower_boundContext : ParserRuleContext {
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lower_bound; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLower_bound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lower_boundContext lower_bound() {
		Lower_boundContext _localctx = new Lower_boundContext(Context, State);
		EnterRule(_localctx, 386, RULE_lower_bound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3551; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Upper_boundContext : ParserRuleContext {
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upper_bound; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpper_bound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Upper_boundContext upper_bound() {
		Upper_boundContext _localctx = new Upper_boundContext(Context, State);
		EnterRule(_localctx, 388, RULE_upper_bound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3553; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_statementContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(oracleParser.NULL, 0); }
		public Null_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_statementContext null_statement() {
		Null_statementContext _localctx = new Null_statementContext(Context, State);
		EnterRule(_localctx, 390, RULE_null_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3555; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raise_statementContext : ParserRuleContext {
		public ITerminalNode RAISE() { return GetToken(oracleParser.RAISE, 0); }
		public Exception_nameContext exception_name() {
			return GetRuleContext<Exception_nameContext>(0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raise_statementContext raise_statement() {
		Raise_statementContext _localctx = new Raise_statementContext(Context, State);
		EnterRule(_localctx, 392, RULE_raise_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3557; Match(RAISE);
			State = 3559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				State = 3558; exception_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(oracleParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 394, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3561; Match(RETURN);
			State = 3563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				State = 3562; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Routine_nameContext routine_name() {
			return GetRuleContext<Routine_nameContext>(0);
		}
		public ITerminalNode CALL() { return GetToken(oracleParser.CALL, 0); }
		public Function_argumentContext function_argument() {
			return GetRuleContext<Function_argumentContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 396, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3566;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,422,Context) ) {
			case 1:
				{
				State = 3565; Match(CALL);
				}
				break;
			}
			State = 3568; routine_name();
			State = 3570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 3569; function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pipe_row_statementContext : ParserRuleContext {
		public ITerminalNode PIPE() { return GetToken(oracleParser.PIPE, 0); }
		public ITerminalNode ROW() { return GetToken(oracleParser.ROW, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Pipe_row_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pipe_row_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPipe_row_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pipe_row_statementContext pipe_row_statement() {
		Pipe_row_statementContext _localctx = new Pipe_row_statementContext(Context, State);
		EnterRule(_localctx, 398, RULE_pipe_row_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3572; Match(PIPE);
			State = 3573; Match(ROW);
			State = 3574; Match(LEFT_PAREN);
			State = 3575; expression();
			State = 3576; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(oracleParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public ITerminalNode END() { return GetToken(oracleParser.END, 0); }
		public ITerminalNode EXCEPTION() { return GetToken(oracleParser.EXCEPTION, 0); }
		public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		public Exception_handlerContext[] exception_handler() {
			return GetRuleContexts<Exception_handlerContext>();
		}
		public Exception_handlerContext exception_handler(int i) {
			return GetRuleContext<Exception_handlerContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 400, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3578; Match(BEGIN);
			State = 3579; seq_of_statements();
			State = 3586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCEPTION) {
				{
				State = 3580; Match(EXCEPTION);
				State = 3582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3581; exception_handler();
					}
					}
					State = 3584;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				}
			}

			State = 3588; Match(END);
			State = 3590;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,426,Context) ) {
			case 1:
				{
				State = 3589; label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_handlerContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(oracleParser.WHEN, 0); }
		public Exception_nameContext[] exception_name() {
			return GetRuleContexts<Exception_nameContext>();
		}
		public Exception_nameContext exception_name(int i) {
			return GetRuleContext<Exception_nameContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(oracleParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public ITerminalNode[] OR() { return GetTokens(oracleParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(oracleParser.OR, i);
		}
		public Exception_handlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_handler; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitException_handler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exception_handlerContext exception_handler() {
		Exception_handlerContext _localctx = new Exception_handlerContext(Context, State);
		EnterRule(_localctx, 402, RULE_exception_handler);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3592; Match(WHEN);
			State = 3593; exception_name();
			State = 3598;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 3594; Match(OR);
				State = 3595; exception_name();
				}
				}
				State = 3600;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3601; Match(THEN);
			State = 3602; seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_blockContext : ParserRuleContext {
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode DECLARE() { return GetToken(oracleParser.DECLARE, 0); }
		public Declare_specContext[] declare_spec() {
			return GetRuleContexts<Declare_specContext>();
		}
		public Declare_specContext declare_spec(int i) {
			return GetRuleContext<Declare_specContext>(i);
		}
		public Trigger_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_blockContext trigger_block() {
		Trigger_blockContext _localctx = new Trigger_blockContext(Context, State);
		EnterRule(_localctx, 404, RULE_trigger_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROCEDURE - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				State = 3605;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECLARE) {
					{
					State = 3604; Match(DECLARE);
					}
				}

				State = 3608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3607; declare_spec();
					}
					}
					State = 3610;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROCEDURE - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
				}
			}

			State = 3614; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode DECLARE() { return GetToken(oracleParser.DECLARE, 0); }
		public Declare_specContext[] declare_spec() {
			return GetRuleContexts<Declare_specContext>();
		}
		public Declare_specContext declare_spec(int i) {
			return GetRuleContext<Declare_specContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 406, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DECLARE) {
				{
				State = 3616; Match(DECLARE);
				}
			}

			State = 3620;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3619; declare_spec();
				}
				}
				State = 3622;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROCEDURE - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
			State = 3624; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_statementContext : ParserRuleContext {
		public Execute_immediateContext execute_immediate() {
			return GetRuleContext<Execute_immediateContext>(0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return GetRuleContext<Data_manipulation_language_statementsContext>(0);
		}
		public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
			return GetRuleContext<Cursor_manipulation_statementsContext>(0);
		}
		public Transaction_control_statementsContext transaction_control_statements() {
			return GetRuleContext<Transaction_control_statementsContext>(0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_statementContext sql_statement() {
		Sql_statementContext _localctx = new Sql_statementContext(Context, State);
		EnterRule(_localctx, 408, RULE_sql_statement);
		try {
			State = 3630;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXECUTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3626; execute_immediate();
				}
				break;
			case DELETE:
			case EXPLAIN:
			case INSERT:
			case LOCK:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3627; data_manipulation_language_statements();
				}
				break;
			case CLOSE:
			case FETCH:
			case OPEN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3628; cursor_manipulation_statements();
				}
				break;
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case SET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3629; transaction_control_statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_immediateContext : ParserRuleContext {
		public ITerminalNode EXECUTE() { return GetToken(oracleParser.EXECUTE, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(oracleParser.IMMEDIATE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Into_clauseContext into_clause() {
			return GetRuleContext<Into_clauseContext>(0);
		}
		public Using_clauseContext using_clause() {
			return GetRuleContext<Using_clauseContext>(0);
		}
		public Dynamic_returning_clauseContext dynamic_returning_clause() {
			return GetRuleContext<Dynamic_returning_clauseContext>(0);
		}
		public Execute_immediateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_immediate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_immediate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_immediateContext execute_immediate() {
		Execute_immediateContext _localctx = new Execute_immediateContext(Context, State);
		EnterRule(_localctx, 410, RULE_execute_immediate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3632; Match(EXECUTE);
			State = 3633; Match(IMMEDIATE);
			State = 3634; expression();
			State = 3644;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BULK:
			case INTO:
				{
				State = 3635; into_clause();
				State = 3637;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 3636; using_clause();
					}
				}

				}
				break;
			case USING:
				{
				State = 3639; using_clause();
				State = 3641;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNING || _la==RETURN) {
					{
					State = 3640; dynamic_returning_clause();
					}
				}

				}
				break;
			case RETURNING:
			case RETURN:
				{
				State = 3643; dynamic_returning_clause();
				}
				break;
			case Eof:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dynamic_returning_clauseContext : ParserRuleContext {
		public Into_clauseContext into_clause() {
			return GetRuleContext<Into_clauseContext>(0);
		}
		public ITerminalNode RETURNING() { return GetToken(oracleParser.RETURNING, 0); }
		public ITerminalNode RETURN() { return GetToken(oracleParser.RETURN, 0); }
		public Dynamic_returning_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamic_returning_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamic_returning_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dynamic_returning_clauseContext dynamic_returning_clause() {
		Dynamic_returning_clauseContext _localctx = new Dynamic_returning_clauseContext(Context, State);
		EnterRule(_localctx, 412, RULE_dynamic_returning_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3646;
			_la = TokenStream.LA(1);
			if ( !(_la==RETURNING || _la==RETURN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3647; into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_manipulation_language_statementsContext : ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return GetRuleContext<Merge_statementContext>(0);
		}
		public Lock_table_statementContext lock_table_statement() {
			return GetRuleContext<Lock_table_statementContext>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Update_statementContext update_statement() {
			return GetRuleContext<Update_statementContext>(0);
		}
		public Delete_statementContext delete_statement() {
			return GetRuleContext<Delete_statementContext>(0);
		}
		public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		public Explain_statementContext explain_statement() {
			return GetRuleContext<Explain_statementContext>(0);
		}
		public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_manipulation_language_statements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_manipulation_language_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
		Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(Context, State);
		EnterRule(_localctx, 414, RULE_data_manipulation_language_statements);
		try {
			State = 3656;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MERGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3649; merge_statement();
				}
				break;
			case LOCK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3650; lock_table_statement();
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3651; select_statement();
				}
				break;
			case UPDATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3652; update_statement();
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3653; delete_statement();
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3654; insert_statement();
				}
				break;
			case EXPLAIN:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3655; explain_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_manipulation_statementsContext : ParserRuleContext {
		public Close_statementContext close_statement() {
			return GetRuleContext<Close_statementContext>(0);
		}
		public Open_statementContext open_statement() {
			return GetRuleContext<Open_statementContext>(0);
		}
		public Fetch_statementContext fetch_statement() {
			return GetRuleContext<Fetch_statementContext>(0);
		}
		public Open_for_statementContext open_for_statement() {
			return GetRuleContext<Open_for_statementContext>(0);
		}
		public Cursor_manipulation_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_manipulation_statements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_manipulation_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
		Cursor_manipulation_statementsContext _localctx = new Cursor_manipulation_statementsContext(Context, State);
		EnterRule(_localctx, 416, RULE_cursor_manipulation_statements);
		try {
			State = 3662;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,438,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3658; close_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3659; open_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3660; fetch_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3661; open_for_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Close_statementContext : ParserRuleContext {
		public ITerminalNode CLOSE() { return GetToken(oracleParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_close_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClose_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Close_statementContext close_statement() {
		Close_statementContext _localctx = new Close_statementContext(Context, State);
		EnterRule(_localctx, 418, RULE_close_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3664; Match(CLOSE);
			State = 3665; cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_statementContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(oracleParser.OPEN, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_statementContext open_statement() {
		Open_statementContext _localctx = new Open_statementContext(Context, State);
		EnterRule(_localctx, 420, RULE_open_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3667; Match(OPEN);
			State = 3668; cursor_name();
			State = 3674;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 3669; Match(LEFT_PAREN);
				State = 3671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
					{
					State = 3670; expressions();
					}
				}

				State = 3673; Match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_statementContext : ParserRuleContext {
		public IToken it1;
		public ITerminalNode FETCH() { return GetToken(oracleParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode BULK() { return GetToken(oracleParser.BULK, 0); }
		public ITerminalNode COLLECT() { return GetToken(oracleParser.COLLECT, 0); }
		public ITerminalNode INTO() { return GetToken(oracleParser.INTO, 0); }
		public Variable_nameContext[] variable_name() {
			return GetRuleContexts<Variable_nameContext>();
		}
		public Variable_nameContext variable_name(int i) {
			return GetRuleContext<Variable_nameContext>(i);
		}
		public Fetch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFetch_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_statementContext fetch_statement() {
		Fetch_statementContext _localctx = new Fetch_statementContext(Context, State);
		EnterRule(_localctx, 422, RULE_fetch_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3676; Match(FETCH);
			State = 3677; cursor_name();
			State = 3698;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTO:
				{
				State = 3678; _localctx.it1 = Match(INTO);
				State = 3683;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3680;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 3679; Match(COMMA);
							}
						}

						State = 3682; variable_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3685;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,442,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case BULK:
				{
				State = 3687; Match(BULK);
				State = 3688; Match(COLLECT);
				State = 3689; Match(INTO);
				State = 3694;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3691;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 3690; Match(COMMA);
							}
						}

						State = 3693; variable_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3696;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,444,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_for_statementContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(oracleParser.OPEN, 0); }
		public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(oracleParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Using_clauseContext using_clause() {
			return GetRuleContext<Using_clauseContext>(0);
		}
		public Open_for_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_for_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_for_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_for_statementContext open_for_statement() {
		Open_for_statementContext _localctx = new Open_for_statementContext(Context, State);
		EnterRule(_localctx, 424, RULE_open_for_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3700; Match(OPEN);
			State = 3701; variable_name();
			State = 3702; Match(FOR);
			State = 3705;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,446,Context) ) {
			case 1:
				{
				State = 3703; select_statement();
				}
				break;
			case 2:
				{
				State = 3704; expression();
				}
				break;
			}
			State = 3708;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 3707; using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_control_statementsContext : ParserRuleContext {
		public Set_transaction_commandContext set_transaction_command() {
			return GetRuleContext<Set_transaction_commandContext>(0);
		}
		public Set_constraint_commandContext set_constraint_command() {
			return GetRuleContext<Set_constraint_commandContext>(0);
		}
		public Commit_statementContext commit_statement() {
			return GetRuleContext<Commit_statementContext>(0);
		}
		public Rollback_statementContext rollback_statement() {
			return GetRuleContext<Rollback_statementContext>(0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return GetRuleContext<Savepoint_statementContext>(0);
		}
		public Transaction_control_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_control_statements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransaction_control_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_control_statementsContext transaction_control_statements() {
		Transaction_control_statementsContext _localctx = new Transaction_control_statementsContext(Context, State);
		EnterRule(_localctx, 426, RULE_transaction_control_statements);
		try {
			State = 3715;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,448,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3710; set_transaction_command();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3711; set_constraint_command();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3712; commit_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3713; rollback_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3714; savepoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_transaction_commandContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(oracleParser.SET, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(oracleParser.TRANSACTION, 0); }
		public ITerminalNode READ() { return GetToken(oracleParser.READ, 0); }
		public ITerminalNode ISOLATION() { return GetToken(oracleParser.ISOLATION, 0); }
		public ITerminalNode LEVEL() { return GetToken(oracleParser.LEVEL, 0); }
		public ITerminalNode USE() { return GetToken(oracleParser.USE, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(oracleParser.ROLLBACK, 0); }
		public ITerminalNode SEGMENT() { return GetToken(oracleParser.SEGMENT, 0); }
		public Rollback_segment_nameContext rollback_segment_name() {
			return GetRuleContext<Rollback_segment_nameContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(oracleParser.NAME, 0); }
		public Quoted_stringContext quoted_string() {
			return GetRuleContext<Quoted_stringContext>(0);
		}
		public ITerminalNode ONLY() { return GetToken(oracleParser.ONLY, 0); }
		public ITerminalNode WRITE() { return GetToken(oracleParser.WRITE, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(oracleParser.SERIALIZABLE, 0); }
		public ITerminalNode COMMITTED() { return GetToken(oracleParser.COMMITTED, 0); }
		public Set_transaction_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_transaction_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_transaction_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_transaction_commandContext set_transaction_command() {
		Set_transaction_commandContext _localctx = new Set_transaction_commandContext(Context, State);
		EnterRule(_localctx, 428, RULE_set_transaction_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3717; Match(SET);
			State = 3718; Match(TRANSACTION);
			State = 3732;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,450,Context) ) {
			case 1:
				{
				State = 3719; Match(READ);
				State = 3720;
				_la = TokenStream.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				{
				State = 3721; Match(ISOLATION);
				State = 3722; Match(LEVEL);
				State = 3726;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SERIALIZABLE:
					{
					State = 3723; Match(SERIALIZABLE);
					}
					break;
				case READ:
					{
					State = 3724; Match(READ);
					State = 3725; Match(COMMITTED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				State = 3728; Match(USE);
				State = 3729; Match(ROLLBACK);
				State = 3730; Match(SEGMENT);
				State = 3731; rollback_segment_name();
				}
				break;
			}
			State = 3736;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,451,Context) ) {
			case 1:
				{
				State = 3734; Match(NAME);
				State = 3735; quoted_string();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_constraint_commandContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(oracleParser.SET, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(oracleParser.CONSTRAINT, 0); }
		public ITerminalNode CONSTRAINTS() { return GetToken(oracleParser.CONSTRAINTS, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(oracleParser.IMMEDIATE, 0); }
		public ITerminalNode DEFERRED() { return GetToken(oracleParser.DEFERRED, 0); }
		public ITerminalNode ALL() { return GetToken(oracleParser.ALL, 0); }
		public Constraint_nameContext[] constraint_name() {
			return GetRuleContexts<Constraint_nameContext>();
		}
		public Constraint_nameContext constraint_name(int i) {
			return GetRuleContext<Constraint_nameContext>(i);
		}
		public Set_constraint_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_constraint_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_constraint_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_constraint_commandContext set_constraint_command() {
		Set_constraint_commandContext _localctx = new Set_constraint_commandContext(Context, State);
		EnterRule(_localctx, 430, RULE_set_constraint_command);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3738; Match(SET);
			State = 3739;
			_la = TokenStream.LA(1);
			if ( !(_la==CONSTRAINT || _la==CONSTRAINTS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3749;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				{
				State = 3740; Match(ALL);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case COMMA:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 3745;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3742;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 3741; Match(COMMA);
							}
						}

						State = 3744; constraint_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3747;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,453,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3751;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commit_statementContext : ParserRuleContext {
		public ITerminalNode COMMIT() { return GetToken(oracleParser.COMMIT, 0); }
		public ITerminalNode WORK() { return GetToken(oracleParser.WORK, 0); }
		public ITerminalNode COMMENT() { return GetToken(oracleParser.COMMENT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode FORCE() { return GetToken(oracleParser.FORCE, 0); }
		public Write_clauseContext write_clause() {
			return GetRuleContext<Write_clauseContext>(0);
		}
		public ITerminalNode CORRUPT_XID() { return GetToken(oracleParser.CORRUPT_XID, 0); }
		public ITerminalNode CORRUPT_XID_ALL() { return GetToken(oracleParser.CORRUPT_XID_ALL, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commit_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommit_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Commit_statementContext commit_statement() {
		Commit_statementContext _localctx = new Commit_statementContext(Context, State);
		EnterRule(_localctx, 432, RULE_commit_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3753; Match(COMMIT);
			State = 3755;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,455,Context) ) {
			case 1:
				{
				State = 3754; Match(WORK);
				}
				break;
			}
			State = 3770;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,458,Context) ) {
			case 1:
				{
				State = 3757; Match(COMMENT);
				State = 3758; expression();
				}
				break;
			case 2:
				{
				State = 3759; Match(FORCE);
				State = 3768;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,457,Context) ) {
				case 1:
					{
					State = 3760; Match(CORRUPT_XID);
					State = 3761; expression();
					}
					break;
				case 2:
					{
					State = 3762; Match(CORRUPT_XID_ALL);
					}
					break;
				case 3:
					{
					State = 3763; expression();
					State = 3766;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,456,Context) ) {
					case 1:
						{
						State = 3764; Match(COMMA);
						State = 3765; expression();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			State = 3773;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,459,Context) ) {
			case 1:
				{
				State = 3772; write_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Write_clauseContext : ParserRuleContext {
		public ITerminalNode WRITE() { return GetToken(oracleParser.WRITE, 0); }
		public ITerminalNode WAIT() { return GetToken(oracleParser.WAIT, 0); }
		public ITerminalNode NOWAIT() { return GetToken(oracleParser.NOWAIT, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(oracleParser.IMMEDIATE, 0); }
		public ITerminalNode BATCH() { return GetToken(oracleParser.BATCH, 0); }
		public Write_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWrite_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Write_clauseContext write_clause() {
		Write_clauseContext _localctx = new Write_clauseContext(Context, State);
		EnterRule(_localctx, 434, RULE_write_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3775; Match(WRITE);
			State = 3777;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,460,Context) ) {
			case 1:
				{
				State = 3776;
				_la = TokenStream.LA(1);
				if ( !(_la==NOWAIT || _la==WAIT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 3780;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,461,Context) ) {
			case 1:
				{
				State = 3779;
				_la = TokenStream.LA(1);
				if ( !(_la==BATCH || _la==IMMEDIATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollback_statementContext : ParserRuleContext {
		public ITerminalNode ROLLBACK() { return GetToken(oracleParser.ROLLBACK, 0); }
		public ITerminalNode WORK() { return GetToken(oracleParser.WORK, 0); }
		public ITerminalNode TO() { return GetToken(oracleParser.TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public ITerminalNode FORCE() { return GetToken(oracleParser.FORCE, 0); }
		public Quoted_stringContext quoted_string() {
			return GetRuleContext<Quoted_stringContext>(0);
		}
		public ITerminalNode SAVEPOINT() { return GetToken(oracleParser.SAVEPOINT, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollback_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollback_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollback_statementContext rollback_statement() {
		Rollback_statementContext _localctx = new Rollback_statementContext(Context, State);
		EnterRule(_localctx, 436, RULE_rollback_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3782; Match(ROLLBACK);
			State = 3784;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,462,Context) ) {
			case 1:
				{
				State = 3783; Match(WORK);
				}
				break;
			}
			State = 3793;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,464,Context) ) {
			case 1:
				{
				State = 3786; Match(TO);
				State = 3788;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,463,Context) ) {
				case 1:
					{
					State = 3787; Match(SAVEPOINT);
					}
					break;
				}
				State = 3790; savepoint_name();
				}
				break;
			case 2:
				{
				State = 3791; Match(FORCE);
				State = 3792; quoted_string();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_statementContext : ParserRuleContext {
		public ITerminalNode SAVEPOINT() { return GetToken(oracleParser.SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_statementContext savepoint_statement() {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(Context, State);
		EnterRule(_localctx, 438, RULE_savepoint_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3795; Match(SAVEPOINT);
			State = 3796; savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explain_statementContext : ParserRuleContext {
		public ITerminalNode EXPLAIN() { return GetToken(oracleParser.EXPLAIN, 0); }
		public ITerminalNode PLAN() { return GetToken(oracleParser.PLAN, 0); }
		public ITerminalNode FOR() { return GetToken(oracleParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Update_statementContext update_statement() {
			return GetRuleContext<Update_statementContext>(0);
		}
		public Delete_statementContext delete_statement() {
			return GetRuleContext<Delete_statementContext>(0);
		}
		public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		public Merge_statementContext merge_statement() {
			return GetRuleContext<Merge_statementContext>(0);
		}
		public ITerminalNode SET() { return GetToken(oracleParser.SET, 0); }
		public ITerminalNode STATEMENT_ID() { return GetToken(oracleParser.STATEMENT_ID, 0); }
		public Quoted_stringContext quoted_string() {
			return GetRuleContext<Quoted_stringContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(oracleParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Explain_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explain_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplain_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explain_statementContext explain_statement() {
		Explain_statementContext _localctx = new Explain_statementContext(Context, State);
		EnterRule(_localctx, 440, RULE_explain_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3798; Match(EXPLAIN);
			State = 3799; Match(PLAN);
			State = 3804;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET) {
				{
				State = 3800; Match(SET);
				State = 3801; Match(STATEMENT_ID);
				State = 3802; Match(EQUALS_OP);
				State = 3803; quoted_string();
				}
			}

			State = 3808;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 3806; Match(INTO);
				State = 3807; tableview_name();
				}
			}

			State = 3810; Match(FOR);
			State = 3816;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				State = 3811; select_statement();
				}
				break;
			case UPDATE:
				{
				State = 3812; update_statement();
				}
				break;
			case DELETE:
				{
				State = 3813; delete_statement();
				}
				break;
			case INSERT:
				{
				State = 3814; insert_statement();
				}
				break;
			case MERGE:
				{
				State = 3815; merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statementContext : ParserRuleContext {
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Subquery_factoring_clauseContext subquery_factoring_clause() {
			return GetRuleContext<Subquery_factoring_clauseContext>(0);
		}
		public For_update_clauseContext[] for_update_clause() {
			return GetRuleContexts<For_update_clauseContext>();
		}
		public For_update_clauseContext for_update_clause(int i) {
			return GetRuleContext<For_update_clauseContext>(i);
		}
		public Order_by_clauseContext[] order_by_clause() {
			return GetRuleContexts<Order_by_clauseContext>();
		}
		public Order_by_clauseContext order_by_clause(int i) {
			return GetRuleContext<Order_by_clauseContext>(i);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_statementContext select_statement() {
		Select_statementContext _localctx = new Select_statementContext(Context, State);
		EnterRule(_localctx, 442, RULE_select_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3819;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3818; subquery_factoring_clause();
				}
			}

			State = 3821; subquery();
			State = 3826;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FOR || _la==ORDER) {
				{
				State = 3824;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FOR:
					{
					State = 3822; for_update_clause();
					}
					break;
				case ORDER:
					{
					State = 3823; order_by_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 3828;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subquery_factoring_clauseContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(oracleParser.WITH, 0); }
		public Factoring_elementContext[] factoring_element() {
			return GetRuleContexts<Factoring_elementContext>();
		}
		public Factoring_elementContext factoring_element(int i) {
			return GetRuleContext<Factoring_elementContext>(i);
		}
		public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery_factoring_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery_factoring_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subquery_factoring_clauseContext subquery_factoring_clause() {
		Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(Context, State);
		EnterRule(_localctx, 444, RULE_subquery_factoring_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3829; Match(WITH);
			State = 3834;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3830; Match(COMMA);
					}
				}

				State = 3833; factoring_element();
				}
				}
				State = 3836;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (COMMA - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Factoring_elementContext : ParserRuleContext {
		public Query_nameContext query_name() {
			return GetRuleContext<Query_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Search_clauseContext search_clause() {
			return GetRuleContext<Search_clauseContext>(0);
		}
		public Cycle_clauseContext cycle_clause() {
			return GetRuleContext<Cycle_clauseContext>(0);
		}
		public Factoring_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factoring_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactoring_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Factoring_elementContext factoring_element() {
		Factoring_elementContext _localctx = new Factoring_elementContext(Context, State);
		EnterRule(_localctx, 446, RULE_factoring_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3838; query_name();
			State = 3840;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 3839; paren_column_list();
				}
			}

			State = 3842; Match(AS);
			State = 3843; Match(LEFT_PAREN);
			State = 3844; subquery();
			State = 3846;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 3845; order_by_clause();
				}
			}

			State = 3848; Match(RIGHT_PAREN);
			State = 3850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEARCH) {
				{
				State = 3849; search_clause();
				}
			}

			State = 3853;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,476,Context) ) {
			case 1:
				{
				State = 3852; cycle_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_clauseContext : ParserRuleContext {
		public ITerminalNode SEARCH() { return GetToken(oracleParser.SEARCH, 0); }
		public ITerminalNode[] FIRST() { return GetTokens(oracleParser.FIRST); }
		public ITerminalNode FIRST(int i) {
			return GetToken(oracleParser.FIRST, i);
		}
		public ITerminalNode BY() { return GetToken(oracleParser.BY, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode SET() { return GetToken(oracleParser.SET, 0); }
		public ITerminalNode DEPTH() { return GetToken(oracleParser.DEPTH, 0); }
		public ITerminalNode BREADTH() { return GetToken(oracleParser.BREADTH, 0); }
		public ITerminalNode[] ASC() { return GetTokens(oracleParser.ASC); }
		public ITerminalNode ASC(int i) {
			return GetToken(oracleParser.ASC, i);
		}
		public ITerminalNode[] DESC() { return GetTokens(oracleParser.DESC); }
		public ITerminalNode DESC(int i) {
			return GetToken(oracleParser.DESC, i);
		}
		public ITerminalNode[] NULLS() { return GetTokens(oracleParser.NULLS); }
		public ITerminalNode NULLS(int i) {
			return GetToken(oracleParser.NULLS, i);
		}
		public ITerminalNode[] LAST() { return GetTokens(oracleParser.LAST); }
		public ITerminalNode LAST(int i) {
			return GetToken(oracleParser.LAST, i);
		}
		public Search_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_clauseContext search_clause() {
		Search_clauseContext _localctx = new Search_clauseContext(Context, State);
		EnterRule(_localctx, 448, RULE_search_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3855; Match(SEARCH);
			State = 3856;
			_la = TokenStream.LA(1);
			if ( !(_la==BREADTH || _la==DEPTH) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3857; Match(FIRST);
			State = 3858; Match(BY);
			State = 3859; column_name();
			State = 3861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC) {
				{
				State = 3860; Match(ASC);
				}
			}

			State = 3864;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DESC) {
				{
				State = 3863; Match(DESC);
				}
			}

			State = 3868;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,479,Context) ) {
			case 1:
				{
				State = 3866; Match(NULLS);
				State = 3867; Match(FIRST);
				}
				break;
			}
			State = 3872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NULLS) {
				{
				State = 3870; Match(NULLS);
				State = 3871; Match(LAST);
				}
			}

			State = 3892;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3874; Match(COMMA);
				State = 3875; column_name();
				State = 3877;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC) {
					{
					State = 3876; Match(ASC);
					}
				}

				State = 3880;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DESC) {
					{
					State = 3879; Match(DESC);
					}
				}

				State = 3884;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,483,Context) ) {
				case 1:
					{
					State = 3882; Match(NULLS);
					State = 3883; Match(FIRST);
					}
					break;
				}
				State = 3888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NULLS) {
					{
					State = 3886; Match(NULLS);
					State = 3887; Match(LAST);
					}
				}

				}
				}
				State = 3894;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3895; Match(SET);
			State = 3896; column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cycle_clauseContext : ParserRuleContext {
		public ITerminalNode CYCLE() { return GetToken(oracleParser.CYCLE, 0); }
		public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		public ITerminalNode SET() { return GetToken(oracleParser.SET, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode TO() { return GetToken(oracleParser.TO, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DEFAULT() { return GetToken(oracleParser.DEFAULT, 0); }
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycle_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCycle_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cycle_clauseContext cycle_clause() {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(Context, State);
		EnterRule(_localctx, 450, RULE_cycle_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3898; Match(CYCLE);
			State = 3899; column_list();
			State = 3900; Match(SET);
			State = 3901; column_name();
			State = 3902; Match(TO);
			State = 3903; expression();
			State = 3904; Match(DEFAULT);
			State = 3905; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return GetRuleContext<Subquery_basic_elementsContext>(0);
		}
		public Subquery_operation_partContext[] subquery_operation_part() {
			return GetRuleContexts<Subquery_operation_partContext>();
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return GetRuleContext<Subquery_operation_partContext>(i);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(Context, State);
		EnterRule(_localctx, 452, RULE_subquery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3907; subquery_basic_elements();
			State = 3911;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INTERSECT || _la==MINUS || _la==UNION) {
				{
				{
				State = 3908; subquery_operation_part();
				}
				}
				State = 3913;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subquery_basic_elementsContext : ParserRuleContext {
		public Query_blockContext query_block() {
			return GetRuleContext<Query_blockContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Subquery_basic_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery_basic_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery_basic_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subquery_basic_elementsContext subquery_basic_elements() {
		Subquery_basic_elementsContext _localctx = new Subquery_basic_elementsContext(Context, State);
		EnterRule(_localctx, 454, RULE_subquery_basic_elements);
		try {
			State = 3919;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3914; query_block();
				}
				break;
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3915; Match(LEFT_PAREN);
				State = 3916; subquery();
				State = 3917; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subquery_operation_partContext : ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return GetRuleContext<Subquery_basic_elementsContext>(0);
		}
		public ITerminalNode UNION() { return GetToken(oracleParser.UNION, 0); }
		public ITerminalNode INTERSECT() { return GetToken(oracleParser.INTERSECT, 0); }
		public ITerminalNode MINUS() { return GetToken(oracleParser.MINUS, 0); }
		public ITerminalNode ALL() { return GetToken(oracleParser.ALL, 0); }
		public Subquery_operation_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery_operation_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery_operation_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subquery_operation_partContext subquery_operation_part() {
		Subquery_operation_partContext _localctx = new Subquery_operation_partContext(Context, State);
		EnterRule(_localctx, 456, RULE_subquery_operation_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3927;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNION:
				{
				State = 3921; Match(UNION);
				State = 3923;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL) {
					{
					State = 3922; Match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				{
				State = 3925; Match(INTERSECT);
				}
				break;
			case MINUS:
				{
				State = 3926; Match(MINUS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3929; subquery_basic_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_blockContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(oracleParser.SELECT, 0); }
		public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		public Into_clauseContext into_clause() {
			return GetRuleContext<Into_clauseContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return GetRuleContext<Hierarchical_query_clauseContext>(0);
		}
		public Group_by_clauseContext group_by_clause() {
			return GetRuleContext<Group_by_clauseContext>(0);
		}
		public Model_clauseContext model_clause() {
			return GetRuleContext<Model_clauseContext>(0);
		}
		public ITerminalNode DISTINCT() { return GetToken(oracleParser.DISTINCT, 0); }
		public ITerminalNode UNIQUE() { return GetToken(oracleParser.UNIQUE, 0); }
		public ITerminalNode ALL() { return GetToken(oracleParser.ALL, 0); }
		public Selected_elementContext[] selected_element() {
			return GetRuleContexts<Selected_elementContext>();
		}
		public Selected_elementContext selected_element(int i) {
			return GetRuleContext<Selected_elementContext>(i);
		}
		public Query_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_blockContext query_block() {
		Query_blockContext _localctx = new Query_blockContext(Context, State);
		EnterRule(_localctx, 458, RULE_query_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3931; Match(SELECT);
			State = 3933;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,490,Context) ) {
			case 1:
				{
				State = 3932;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 3944;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASTERISK:
				{
				State = 3935; Match(ASTERISK);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case COMMA:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 3940;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3937;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 3936; Match(COMMA);
							}
						}

						State = 3939; selected_element();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3942;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,492,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3947;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BULK || _la==INTO) {
				{
				State = 3946; into_clause();
				}
			}

			State = 3949; from_clause();
			State = 3951;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,495,Context) ) {
			case 1:
				{
				State = 3950; where_clause();
				}
				break;
			}
			State = 3954;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,496,Context) ) {
			case 1:
				{
				State = 3953; hierarchical_query_clause();
				}
				break;
			}
			State = 3957;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,497,Context) ) {
			case 1:
				{
				State = 3956; group_by_clause();
				}
				break;
			}
			State = 3960;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,498,Context) ) {
			case 1:
				{
				State = 3959; model_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selected_elementContext : ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return GetRuleContext<Select_list_elementsContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public Selected_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selected_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelected_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selected_elementContext selected_element() {
		Selected_elementContext _localctx = new Selected_elementContext(Context, State);
		EnterRule(_localctx, 460, RULE_selected_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3962; select_list_elements();
			State = 3964;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,499,Context) ) {
			case 1:
				{
				State = 3963; column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(oracleParser.FROM, 0); }
		public Table_ref_listContext table_ref_list() {
			return GetRuleContext<Table_ref_listContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 462, RULE_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3966; Match(FROM);
			State = 3967; table_ref_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_list_elementsContext : ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Regular_idContext regular_id() {
			return GetRuleContext<Regular_idContext>(0);
		}
		public Select_list_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_list_elementsContext select_list_elements() {
		Select_list_elementsContext _localctx = new Select_list_elementsContext(Context, State);
		EnterRule(_localctx, 464, RULE_select_list_elements);
		try {
			State = 3979;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,501,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3969; tableview_name();
				State = 3970; Match(PERIOD);
				State = 3971; Match(ASTERISK);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3976;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,500,Context) ) {
				case 1:
					{
					State = 3973; regular_id();
					State = 3974; Match(PERIOD);
					}
					break;
				}
				State = 3978; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_ref_listContext : ParserRuleContext {
		public Table_refContext[] table_ref() {
			return GetRuleContexts<Table_refContext>();
		}
		public Table_refContext table_ref(int i) {
			return GetRuleContext<Table_refContext>(i);
		}
		public Table_ref_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_ref_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_ref_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_ref_listContext table_ref_list() {
		Table_ref_listContext _localctx = new Table_ref_listContext(Context, State);
		EnterRule(_localctx, 466, RULE_table_ref_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3985;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3982;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3981; Match(COMMA);
						}
					}

					State = 3984; table_ref();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3987;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,503,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_refContext : ParserRuleContext {
		public Table_ref_auxContext table_ref_aux() {
			return GetRuleContext<Table_ref_auxContext>(0);
		}
		public Join_clauseContext[] join_clause() {
			return GetRuleContexts<Join_clauseContext>();
		}
		public Join_clauseContext join_clause(int i) {
			return GetRuleContext<Join_clauseContext>(i);
		}
		public Pivot_clauseContext pivot_clause() {
			return GetRuleContext<Pivot_clauseContext>(0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return GetRuleContext<Unpivot_clauseContext>(0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_ref; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_refContext table_ref() {
		Table_refContext _localctx = new Table_refContext(Context, State);
		EnterRule(_localctx, 468, RULE_table_ref);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3989; table_ref_aux();
			State = 3993;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,504,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3990; join_clause();
					}
					} 
				}
				State = 3995;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,504,Context);
			}
			State = 3998;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,505,Context) ) {
			case 1:
				{
				State = 3996; pivot_clause();
				}
				break;
			case 2:
				{
				State = 3997; unpivot_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_ref_auxContext : ParserRuleContext {
		public Table_ref_aux_internalContext table_ref_aux_internal() {
			return GetRuleContext<Table_ref_aux_internalContext>(0);
		}
		public Flashback_query_clauseContext[] flashback_query_clause() {
			return GetRuleContexts<Flashback_query_clauseContext>();
		}
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return GetRuleContext<Flashback_query_clauseContext>(i);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Table_ref_auxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_ref_aux; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_ref_aux(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_ref_auxContext table_ref_aux() {
		Table_ref_auxContext _localctx = new Table_ref_auxContext(Context, State);
		EnterRule(_localctx, 470, RULE_table_ref_aux);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4000; table_ref_aux_internal();
			State = 4004;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,506,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4001; flashback_query_clause();
					}
					} 
				}
				State = 4006;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,506,Context);
			}
			State = 4008;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,507,Context) ) {
			case 1:
				{
				State = 4007; table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_ref_aux_internalContext : ParserRuleContext {
		public Table_ref_aux_internalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_ref_aux_internal; } }
	 
		public Table_ref_aux_internalContext() { }
		public virtual void CopyFrom(Table_ref_aux_internalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Table_ref_aux_internal_threeContext : Table_ref_aux_internalContext {
		public ITerminalNode ONLY() { return GetToken(oracleParser.ONLY, 0); }
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return GetRuleContext<Dml_table_expression_clauseContext>(0);
		}
		public Table_ref_aux_internal_threeContext(Table_ref_aux_internalContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_ref_aux_internal_three(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Table_ref_aux_internal_oneContext : Table_ref_aux_internalContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return GetRuleContext<Dml_table_expression_clauseContext>(0);
		}
		public Pivot_clauseContext pivot_clause() {
			return GetRuleContext<Pivot_clauseContext>(0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return GetRuleContext<Unpivot_clauseContext>(0);
		}
		public Table_ref_aux_internal_oneContext(Table_ref_aux_internalContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_ref_aux_internal_one(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Table_ref_aux_internal_twoContext : Table_ref_aux_internalContext {
		public Table_refContext table_ref() {
			return GetRuleContext<Table_refContext>(0);
		}
		public Subquery_operation_partContext[] subquery_operation_part() {
			return GetRuleContexts<Subquery_operation_partContext>();
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return GetRuleContext<Subquery_operation_partContext>(i);
		}
		public Pivot_clauseContext pivot_clause() {
			return GetRuleContext<Pivot_clauseContext>(0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return GetRuleContext<Unpivot_clauseContext>(0);
		}
		public Table_ref_aux_internal_twoContext(Table_ref_aux_internalContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_ref_aux_internal_two(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_ref_aux_internalContext table_ref_aux_internal() {
		Table_ref_aux_internalContext _localctx = new Table_ref_aux_internalContext(Context, State);
		EnterRule(_localctx, 472, RULE_table_ref_aux_internal);
		int _la;
		try {
			State = 4033;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,511,Context) ) {
			case 1:
				_localctx = new Table_ref_aux_internal_oneContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4010; dml_table_expression_clause();
				State = 4013;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,508,Context) ) {
				case 1:
					{
					State = 4011; pivot_clause();
					}
					break;
				case 2:
					{
					State = 4012; unpivot_clause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new Table_ref_aux_internal_twoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4015; Match(LEFT_PAREN);
				State = 4016; table_ref();
				State = 4020;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==INTERSECT || _la==MINUS || _la==UNION) {
					{
					{
					State = 4017; subquery_operation_part();
					}
					}
					State = 4022;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4023; Match(RIGHT_PAREN);
				State = 4026;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,510,Context) ) {
				case 1:
					{
					State = 4024; pivot_clause();
					}
					break;
				case 2:
					{
					State = 4025; unpivot_clause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new Table_ref_aux_internal_threeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4028; Match(ONLY);
				State = 4029; Match(LEFT_PAREN);
				State = 4030; dml_table_expression_clause();
				State = 4031; Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		public ITerminalNode JOIN() { return GetToken(oracleParser.JOIN, 0); }
		public Table_ref_auxContext table_ref_aux() {
			return GetRuleContext<Table_ref_auxContext>(0);
		}
		public Query_partition_clauseContext[] query_partition_clause() {
			return GetRuleContexts<Query_partition_clauseContext>();
		}
		public Query_partition_clauseContext query_partition_clause(int i) {
			return GetRuleContext<Query_partition_clauseContext>(i);
		}
		public ITerminalNode INNER() { return GetToken(oracleParser.INNER, 0); }
		public Outer_join_typeContext outer_join_type() {
			return GetRuleContext<Outer_join_typeContext>(0);
		}
		public Join_on_partContext[] join_on_part() {
			return GetRuleContexts<Join_on_partContext>();
		}
		public Join_on_partContext join_on_part(int i) {
			return GetRuleContext<Join_on_partContext>(i);
		}
		public Join_using_partContext[] join_using_part() {
			return GetRuleContexts<Join_using_partContext>();
		}
		public Join_using_partContext join_using_part(int i) {
			return GetRuleContext<Join_using_partContext>(i);
		}
		public ITerminalNode CROSS() { return GetToken(oracleParser.CROSS, 0); }
		public ITerminalNode NATURAL() { return GetToken(oracleParser.NATURAL, 0); }
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		Join_clauseContext _localctx = new Join_clauseContext(Context, State);
		EnterRule(_localctx, 474, RULE_join_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4036;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 4035; query_partition_clause();
				}
			}

			State = 4039;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CROSS || _la==NATURAL) {
				{
				State = 4038;
				_la = TokenStream.LA(1);
				if ( !(_la==CROSS || _la==NATURAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 4043;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER:
				{
				State = 4041; Match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				State = 4042; outer_join_type();
				}
				break;
			case JOIN:
				break;
			default:
				break;
			}
			State = 4045; Match(JOIN);
			State = 4046; table_ref_aux();
			State = 4048;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,515,Context) ) {
			case 1:
				{
				State = 4047; query_partition_clause();
				}
				break;
			}
			State = 4054;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,517,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 4052;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ON:
						{
						State = 4050; join_on_part();
						}
						break;
					case USING:
						{
						State = 4051; join_using_part();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 4056;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,517,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_on_partContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(oracleParser.ON, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Join_on_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_on_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_on_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_on_partContext join_on_part() {
		Join_on_partContext _localctx = new Join_on_partContext(Context, State);
		EnterRule(_localctx, 476, RULE_join_on_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4057; Match(ON);
			State = 4058; condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_using_partContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(oracleParser.USING, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Join_using_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_using_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_using_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_using_partContext join_using_part() {
		Join_using_partContext _localctx = new Join_using_partContext(Context, State);
		EnterRule(_localctx, 478, RULE_join_using_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4060; Match(USING);
			State = 4061; paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Outer_join_typeContext : ParserRuleContext {
		public ITerminalNode FULL() { return GetToken(oracleParser.FULL, 0); }
		public ITerminalNode LEFT() { return GetToken(oracleParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(oracleParser.RIGHT, 0); }
		public ITerminalNode OUTER() { return GetToken(oracleParser.OUTER, 0); }
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outer_join_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOuter_join_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Outer_join_typeContext outer_join_type() {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(Context, State);
		EnterRule(_localctx, 480, RULE_outer_join_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4063;
			_la = TokenStream.LA(1);
			if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4065;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUTER) {
				{
				State = 4064; Match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_partition_clauseContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(oracleParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(oracleParser.BY, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Query_partition_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_partition_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_partition_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_partition_clauseContext query_partition_clause() {
		Query_partition_clauseContext _localctx = new Query_partition_clauseContext(Context, State);
		EnterRule(_localctx, 482, RULE_query_partition_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4067; Match(PARTITION);
			State = 4068; Match(BY);
			State = 4076;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,520,Context) ) {
			case 1:
				{
				{
				State = 4069; Match(LEFT_PAREN);
				State = 4072;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,519,Context) ) {
				case 1:
					{
					State = 4070; subquery();
					}
					break;
				case 2:
					{
					State = 4071; expressions();
					}
					break;
				}
				State = 4074; Match(RIGHT_PAREN);
				}
				}
				break;
			case 2:
				{
				State = 4075; expressions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flashback_query_clauseContext : ParserRuleContext {
		public ITerminalNode VERSIONS() { return GetToken(oracleParser.VERSIONS, 0); }
		public ITerminalNode BETWEEN() { return GetToken(oracleParser.BETWEEN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SCN() { return GetToken(oracleParser.SCN, 0); }
		public ITerminalNode TIMESTAMP() { return GetToken(oracleParser.TIMESTAMP, 0); }
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public ITerminalNode OF() { return GetToken(oracleParser.OF, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(oracleParser.SNAPSHOT, 0); }
		public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flashback_query_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlashback_query_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Flashback_query_clauseContext flashback_query_clause() {
		Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(Context, State);
		EnterRule(_localctx, 484, RULE_flashback_query_clause);
		int _la;
		try {
			State = 4086;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VERSIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4078; Match(VERSIONS);
				State = 4079; Match(BETWEEN);
				State = 4080;
				_la = TokenStream.LA(1);
				if ( !(_la==SCN || _la==TIMESTAMP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4081; expression();
				}
				break;
			case AS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4082; Match(AS);
				State = 4083; Match(OF);
				State = 4084;
				_la = TokenStream.LA(1);
				if ( !(_la==SCN || _la==SNAPSHOT || _la==TIMESTAMP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4085; expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_clauseContext : ParserRuleContext {
		public ITerminalNode PIVOT() { return GetToken(oracleParser.PIVOT, 0); }
		public Pivot_for_clauseContext pivot_for_clause() {
			return GetRuleContext<Pivot_for_clauseContext>(0);
		}
		public Pivot_in_clauseContext pivot_in_clause() {
			return GetRuleContext<Pivot_in_clauseContext>(0);
		}
		public ITerminalNode XML() { return GetToken(oracleParser.XML, 0); }
		public Pivot_elementContext[] pivot_element() {
			return GetRuleContexts<Pivot_elementContext>();
		}
		public Pivot_elementContext pivot_element(int i) {
			return GetRuleContext<Pivot_elementContext>(i);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_clauseContext pivot_clause() {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(Context, State);
		EnterRule(_localctx, 486, RULE_pivot_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4088; Match(PIVOT);
			State = 4090;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==XML) {
				{
				State = 4089; Match(XML);
				}
			}

			State = 4092; Match(LEFT_PAREN);
			State = 4097;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4094;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4093; Match(COMMA);
					}
				}

				State = 4096; pivot_element();
				}
				}
				State = 4099;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (COMMA - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
			State = 4101; pivot_for_clause();
			State = 4102; pivot_in_clause();
			State = 4103; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_elementContext : ParserRuleContext {
		public Aggregate_function_nameContext aggregate_function_name() {
			return GetRuleContext<Aggregate_function_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public Pivot_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_elementContext pivot_element() {
		Pivot_elementContext _localctx = new Pivot_elementContext(Context, State);
		EnterRule(_localctx, 488, RULE_pivot_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4105; aggregate_function_name();
			State = 4106; Match(LEFT_PAREN);
			State = 4107; expression();
			State = 4108; Match(RIGHT_PAREN);
			State = 4110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,525,Context) ) {
			case 1:
				{
				State = 4109; column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_for_clauseContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(oracleParser.FOR, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_for_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_for_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_for_clauseContext pivot_for_clause() {
		Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(Context, State);
		EnterRule(_localctx, 490, RULE_pivot_for_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4112; Match(FOR);
			State = 4115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 4113; column_name();
				}
				break;
			case LEFT_PAREN:
				{
				State = 4114; paren_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_in_clauseContext : ParserRuleContext {
		public ITerminalNode IN() { return GetToken(oracleParser.IN, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode[] ANY() { return GetTokens(oracleParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(oracleParser.ANY, i);
		}
		public Pivot_in_clause_elementContext[] pivot_in_clause_element() {
			return GetRuleContexts<Pivot_in_clause_elementContext>();
		}
		public Pivot_in_clause_elementContext pivot_in_clause_element(int i) {
			return GetRuleContext<Pivot_in_clause_elementContext>(i);
		}
		public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_in_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_in_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_in_clauseContext pivot_in_clause() {
		Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(Context, State);
		EnterRule(_localctx, 492, RULE_pivot_in_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4117; Match(IN);
			State = 4118; Match(LEFT_PAREN);
			State = 4136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,531,Context) ) {
			case 1:
				{
				State = 4119; subquery();
				}
				break;
			case 2:
				{
				State = 4124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 4121;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4120; Match(COMMA);
						}
					}

					State = 4123; Match(ANY);
					}
					}
					State = 4126;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ANY || _la==COMMA );
				}
				break;
			case 3:
				{
				State = 4132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 4129;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4128; Match(COMMA);
						}
					}

					State = 4131; pivot_in_clause_element();
					}
					}
					State = 4134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (COMMA - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
				}
				break;
			}
			State = 4138; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_in_clause_elementContext : ParserRuleContext {
		public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
			return GetRuleContext<Pivot_in_clause_elementsContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public Pivot_in_clause_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_in_clause_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_in_clause_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_in_clause_elementContext pivot_in_clause_element() {
		Pivot_in_clause_elementContext _localctx = new Pivot_in_clause_elementContext(Context, State);
		EnterRule(_localctx, 494, RULE_pivot_in_clause_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4140; pivot_in_clause_elements();
			State = 4142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,532,Context) ) {
			case 1:
				{
				State = 4141; column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_in_clause_elementsContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Pivot_in_clause_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_in_clause_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_in_clause_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
		Pivot_in_clause_elementsContext _localctx = new Pivot_in_clause_elementsContext(Context, State);
		EnterRule(_localctx, 496, RULE_pivot_in_clause_elements);
		int _la;
		try {
			State = 4150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,534,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4144; expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4145; Match(LEFT_PAREN);
				State = 4147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
					{
					State = 4146; expressions();
					}
				}

				State = 4149; Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unpivot_clauseContext : ParserRuleContext {
		public ITerminalNode UNPIVOT() { return GetToken(oracleParser.UNPIVOT, 0); }
		public Pivot_for_clauseContext pivot_for_clause() {
			return GetRuleContext<Pivot_for_clauseContext>(0);
		}
		public Unpivot_in_clauseContext unpivot_in_clause() {
			return GetRuleContext<Unpivot_in_clauseContext>(0);
		}
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode NULLS() { return GetToken(oracleParser.NULLS, 0); }
		public ITerminalNode INCLUDE() { return GetToken(oracleParser.INCLUDE, 0); }
		public ITerminalNode EXCLUDE() { return GetToken(oracleParser.EXCLUDE, 0); }
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpivot_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unpivot_clauseContext unpivot_clause() {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(Context, State);
		EnterRule(_localctx, 498, RULE_unpivot_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4152; Match(UNPIVOT);
			State = 4155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				State = 4153;
				_la = TokenStream.LA(1);
				if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4154; Match(NULLS);
				}
			}

			State = 4157; Match(LEFT_PAREN);
			State = 4160;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 4158; column_name();
				}
				break;
			case LEFT_PAREN:
				{
				State = 4159; paren_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4162; pivot_for_clause();
			State = 4163; unpivot_in_clause();
			State = 4164; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unpivot_in_clauseContext : ParserRuleContext {
		public ITerminalNode IN() { return GetToken(oracleParser.IN, 0); }
		public Unpivot_in_elementsContext[] unpivot_in_elements() {
			return GetRuleContexts<Unpivot_in_elementsContext>();
		}
		public Unpivot_in_elementsContext unpivot_in_elements(int i) {
			return GetRuleContext<Unpivot_in_elementsContext>(i);
		}
		public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot_in_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpivot_in_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unpivot_in_clauseContext unpivot_in_clause() {
		Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(Context, State);
		EnterRule(_localctx, 500, RULE_unpivot_in_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4166; Match(IN);
			State = 4167; Match(LEFT_PAREN);
			State = 4172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4168; Match(COMMA);
					}
				}

				State = 4171; unpivot_in_elements();
				}
				}
				State = 4174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (COMMA - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
			State = 4176; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unpivot_in_elementsContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public Unpivot_in_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot_in_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpivot_in_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unpivot_in_elementsContext unpivot_in_elements() {
		Unpivot_in_elementsContext _localctx = new Unpivot_in_elementsContext(Context, State);
		EnterRule(_localctx, 502, RULE_unpivot_in_elements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4180;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 4178; column_name();
				}
				break;
			case LEFT_PAREN:
				{
				State = 4179; paren_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 4182; Match(AS);
				State = 4195;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DATE:
				case DBTIMEZONE:
				case DEFAULT:
				case FALSE:
				case INTERVAL:
				case MAXVALUE:
				case MINVALUE:
				case NULL:
				case SESSIONTIMEZONE:
				case TIMESTAMP:
				case TRUE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
					{
					State = 4183; constant();
					}
					break;
				case LEFT_PAREN:
					{
					State = 4184; Match(LEFT_PAREN);
					State = 4189;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 4186;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 4185; Match(COMMA);
							}
						}

						State = 4188; constant();
						}
						}
						State = 4191;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (DATE - 114)) | (1L << (DBTIMEZONE - 114)) | (1L << (DEFAULT - 114)))) != 0) || _la==FALSE || ((((_la - 247)) & ~0x3f) == 0 && ((1L << (_la - 247)) & ((1L << (INTERVAL - 247)) | (1L << (MAXVALUE - 247)) | (1L << (MINVALUE - 247)))) != 0) || _la==NULL || _la==SESSIONTIMEZONE || _la==TIMESTAMP || _la==TRUE || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (NATIONAL_CHAR_STRING_LIT - 649)) | (1L << (UNSIGNED_INTEGER - 649)) | (1L << (APPROXIMATE_NUM_LIT - 649)) | (1L << (CHAR_STRING - 649)) | (1L << (COMMA - 649)))) != 0) );
					State = 4193; Match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hierarchical_query_clauseContext : ParserRuleContext {
		public ITerminalNode CONNECT() { return GetToken(oracleParser.CONNECT, 0); }
		public ITerminalNode BY() { return GetToken(oracleParser.BY, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode NOCYCLE() { return GetToken(oracleParser.NOCYCLE, 0); }
		public Start_partContext start_part() {
			return GetRuleContext<Start_partContext>(0);
		}
		public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hierarchical_query_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHierarchical_query_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hierarchical_query_clauseContext hierarchical_query_clause() {
		Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(Context, State);
		EnterRule(_localctx, 504, RULE_hierarchical_query_clause);
		try {
			State = 4216;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONNECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4199; Match(CONNECT);
				State = 4200; Match(BY);
				State = 4202;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,544,Context) ) {
				case 1:
					{
					State = 4201; Match(NOCYCLE);
					}
					break;
				}
				State = 4204; condition();
				State = 4206;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,545,Context) ) {
				case 1:
					{
					State = 4205; start_part();
					}
					break;
				}
				}
				break;
			case START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4208; start_part();
				State = 4209; Match(CONNECT);
				State = 4210; Match(BY);
				State = 4212;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,546,Context) ) {
				case 1:
					{
					State = 4211; Match(NOCYCLE);
					}
					break;
				}
				State = 4214; condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_partContext : ParserRuleContext {
		public ITerminalNode START() { return GetToken(oracleParser.START, 0); }
		public ITerminalNode WITH() { return GetToken(oracleParser.WITH, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Start_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Start_partContext start_part() {
		Start_partContext _localctx = new Start_partContext(Context, State);
		EnterRule(_localctx, 506, RULE_start_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4218; Match(START);
			State = 4219; Match(WITH);
			State = 4220; condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_clauseContext : ParserRuleContext {
		public ITerminalNode GROUP() { return GetToken(oracleParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(oracleParser.BY, 0); }
		public Group_by_elementsContext[] group_by_elements() {
			return GetRuleContexts<Group_by_elementsContext>();
		}
		public Group_by_elementsContext group_by_elements(int i) {
			return GetRuleContext<Group_by_elementsContext>(i);
		}
		public Having_clauseContext having_clause() {
			return GetRuleContext<Having_clauseContext>(0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_clauseContext group_by_clause() {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(Context, State);
		EnterRule(_localctx, 508, RULE_group_by_clause);
		int _la;
		try {
			int _alt;
			State = 4248;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GROUP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4222; Match(GROUP);
				State = 4223; Match(BY);
				State = 4228;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 4225;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 4224; Match(COMMA);
							}
						}

						State = 4227; group_by_elements();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 4230;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,549,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 4233;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,550,Context) ) {
				case 1:
					{
					State = 4232; having_clause();
					}
					break;
				}
				}
				break;
			case HAVING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4235; having_clause();
				State = 4246;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,553,Context) ) {
				case 1:
					{
					State = 4236; Match(GROUP);
					State = 4237; Match(BY);
					State = 4242;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 4239;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4238; Match(COMMA);
								}
							}

							State = 4241; group_by_elements();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 4244;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,552,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_elementsContext : ParserRuleContext {
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return GetRuleContext<Grouping_sets_clauseContext>(0);
		}
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return GetRuleContext<Rollup_cube_clauseContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Group_by_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_elementsContext group_by_elements() {
		Group_by_elementsContext _localctx = new Group_by_elementsContext(Context, State);
		EnterRule(_localctx, 510, RULE_group_by_elements);
		try {
			State = 4253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,555,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4250; grouping_sets_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4251; rollup_cube_clause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4252; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollup_cube_clauseContext : ParserRuleContext {
		public ITerminalNode ROLLUP() { return GetToken(oracleParser.ROLLUP, 0); }
		public ITerminalNode CUBE() { return GetToken(oracleParser.CUBE, 0); }
		public Grouping_sets_elementsContext[] grouping_sets_elements() {
			return GetRuleContexts<Grouping_sets_elementsContext>();
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return GetRuleContext<Grouping_sets_elementsContext>(i);
		}
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollup_cube_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollup_cube_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollup_cube_clauseContext rollup_cube_clause() {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(Context, State);
		EnterRule(_localctx, 512, RULE_rollup_cube_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4255;
			_la = TokenStream.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4256; Match(LEFT_PAREN);
			State = 4261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4257; Match(COMMA);
					}
				}

				State = 4260; grouping_sets_elements();
				}
				}
				State = 4263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (COMMA - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
			State = 4265; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_sets_clauseContext : ParserRuleContext {
		public ITerminalNode GROUPING() { return GetToken(oracleParser.GROUPING, 0); }
		public ITerminalNode SETS() { return GetToken(oracleParser.SETS, 0); }
		public Grouping_sets_elementsContext[] grouping_sets_elements() {
			return GetRuleContexts<Grouping_sets_elementsContext>();
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return GetRuleContext<Grouping_sets_elementsContext>(i);
		}
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_sets_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_sets_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_sets_clauseContext grouping_sets_clause() {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(Context, State);
		EnterRule(_localctx, 514, RULE_grouping_sets_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4267; Match(GROUPING);
			State = 4268; Match(SETS);
			State = 4269; Match(LEFT_PAREN);
			State = 4274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4270; Match(COMMA);
					}
				}

				State = 4273; grouping_sets_elements();
				}
				}
				State = 4276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (COMMA - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
			State = 4278; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_sets_elementsContext : ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return GetRuleContext<Rollup_cube_clauseContext>(0);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_sets_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_sets_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_sets_elementsContext grouping_sets_elements() {
		Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(Context, State);
		EnterRule(_localctx, 516, RULE_grouping_sets_elements);
		int _la;
		try {
			State = 4287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,561,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4280; rollup_cube_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4281; Match(LEFT_PAREN);
				State = 4283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
					{
					State = 4282; expressions();
					}
				}

				State = 4285; Match(RIGHT_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4286; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Having_clauseContext : ParserRuleContext {
		public ITerminalNode HAVING() { return GetToken(oracleParser.HAVING, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_having_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHaving_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Having_clauseContext having_clause() {
		Having_clauseContext _localctx = new Having_clauseContext(Context, State);
		EnterRule(_localctx, 518, RULE_having_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4289; Match(HAVING);
			State = 4290; condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_clauseContext : ParserRuleContext {
		public ITerminalNode MODEL() { return GetToken(oracleParser.MODEL, 0); }
		public Main_modelContext main_model() {
			return GetRuleContext<Main_modelContext>(0);
		}
		public Cell_reference_optionsContext[] cell_reference_options() {
			return GetRuleContexts<Cell_reference_optionsContext>();
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return GetRuleContext<Cell_reference_optionsContext>(i);
		}
		public Return_rows_clauseContext return_rows_clause() {
			return GetRuleContext<Return_rows_clauseContext>(0);
		}
		public Reference_modelContext[] reference_model() {
			return GetRuleContexts<Reference_modelContext>();
		}
		public Reference_modelContext reference_model(int i) {
			return GetRuleContext<Reference_modelContext>(i);
		}
		public Model_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_clauseContext model_clause() {
		Model_clauseContext _localctx = new Model_clauseContext(Context, State);
		EnterRule(_localctx, 520, RULE_model_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4292; Match(MODEL);
			State = 4296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				State = 4293; cell_reference_options();
				}
				}
				State = 4298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURN) {
				{
				State = 4299; return_rows_clause();
				}
			}

			State = 4305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==REFERENCE) {
				{
				{
				State = 4302; reference_model();
				}
				}
				State = 4307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4308; main_model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cell_reference_optionsContext : ParserRuleContext {
		public ITerminalNode NAV() { return GetToken(oracleParser.NAV, 0); }
		public ITerminalNode IGNORE() { return GetToken(oracleParser.IGNORE, 0); }
		public ITerminalNode KEEP() { return GetToken(oracleParser.KEEP, 0); }
		public ITerminalNode UNIQUE() { return GetToken(oracleParser.UNIQUE, 0); }
		public ITerminalNode DIMENSION() { return GetToken(oracleParser.DIMENSION, 0); }
		public ITerminalNode SINGLE() { return GetToken(oracleParser.SINGLE, 0); }
		public ITerminalNode REFERENCE() { return GetToken(oracleParser.REFERENCE, 0); }
		public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cell_reference_options; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCell_reference_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cell_reference_optionsContext cell_reference_options() {
		Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(Context, State);
		EnterRule(_localctx, 522, RULE_cell_reference_options);
		int _la;
		try {
			State = 4318;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IGNORE:
			case KEEP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4310;
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE || _la==KEEP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4311; Match(NAV);
				}
				break;
			case UNIQUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4312; Match(UNIQUE);
				State = 4316;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DIMENSION:
					{
					State = 4313; Match(DIMENSION);
					}
					break;
				case SINGLE:
					{
					State = 4314; Match(SINGLE);
					State = 4315; Match(REFERENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_rows_clauseContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(oracleParser.RETURN, 0); }
		public ITerminalNode ROWS() { return GetToken(oracleParser.ROWS, 0); }
		public ITerminalNode UPDATED() { return GetToken(oracleParser.UPDATED, 0); }
		public ITerminalNode ALL() { return GetToken(oracleParser.ALL, 0); }
		public Return_rows_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_rows_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_rows_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_rows_clauseContext return_rows_clause() {
		Return_rows_clauseContext _localctx = new Return_rows_clauseContext(Context, State);
		EnterRule(_localctx, 524, RULE_return_rows_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4320; Match(RETURN);
			State = 4321;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==UPDATED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4322; Match(ROWS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reference_modelContext : ParserRuleContext {
		public ITerminalNode REFERENCE() { return GetToken(oracleParser.REFERENCE, 0); }
		public Reference_model_nameContext reference_model_name() {
			return GetRuleContext<Reference_model_nameContext>(0);
		}
		public ITerminalNode ON() { return GetToken(oracleParser.ON, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Model_column_clausesContext model_column_clauses() {
			return GetRuleContext<Model_column_clausesContext>(0);
		}
		public Cell_reference_optionsContext[] cell_reference_options() {
			return GetRuleContexts<Cell_reference_optionsContext>();
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return GetRuleContext<Cell_reference_optionsContext>(i);
		}
		public Reference_modelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference_model; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReference_model(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reference_modelContext reference_model() {
		Reference_modelContext _localctx = new Reference_modelContext(Context, State);
		EnterRule(_localctx, 526, RULE_reference_model);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4324; Match(REFERENCE);
			State = 4325; reference_model_name();
			State = 4326; Match(ON);
			State = 4327; Match(LEFT_PAREN);
			State = 4328; subquery();
			State = 4329; Match(RIGHT_PAREN);
			State = 4330; model_column_clauses();
			State = 4334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				State = 4331; cell_reference_options();
				}
				}
				State = 4336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Main_modelContext : ParserRuleContext {
		public Model_column_clausesContext model_column_clauses() {
			return GetRuleContext<Model_column_clausesContext>(0);
		}
		public Model_rules_clauseContext model_rules_clause() {
			return GetRuleContext<Model_rules_clauseContext>(0);
		}
		public ITerminalNode MAIN() { return GetToken(oracleParser.MAIN, 0); }
		public Main_model_nameContext main_model_name() {
			return GetRuleContext<Main_model_nameContext>(0);
		}
		public Cell_reference_optionsContext[] cell_reference_options() {
			return GetRuleContexts<Cell_reference_optionsContext>();
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return GetRuleContext<Cell_reference_optionsContext>(i);
		}
		public Main_modelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main_model; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain_model(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Main_modelContext main_model() {
		Main_modelContext _localctx = new Main_modelContext(Context, State);
		EnterRule(_localctx, 528, RULE_main_model);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MAIN) {
				{
				State = 4337; Match(MAIN);
				State = 4338; main_model_name();
				}
			}

			State = 4341; model_column_clauses();
			State = 4345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				State = 4342; cell_reference_options();
				}
				}
				State = 4347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4348; model_rules_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_column_clausesContext : ParserRuleContext {
		public ITerminalNode DIMENSION() { return GetToken(oracleParser.DIMENSION, 0); }
		public ITerminalNode BY() { return GetToken(oracleParser.BY, 0); }
		public Model_column_listContext[] model_column_list() {
			return GetRuleContexts<Model_column_listContext>();
		}
		public Model_column_listContext model_column_list(int i) {
			return GetRuleContext<Model_column_listContext>(i);
		}
		public ITerminalNode MEASURES() { return GetToken(oracleParser.MEASURES, 0); }
		public Model_column_partition_partContext model_column_partition_part() {
			return GetRuleContext<Model_column_partition_partContext>(0);
		}
		public Model_column_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_column_clauses; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_column_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_column_clausesContext model_column_clauses() {
		Model_column_clausesContext _localctx = new Model_column_clausesContext(Context, State);
		EnterRule(_localctx, 530, RULE_model_column_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 4350; model_column_partition_part();
				}
			}

			State = 4353; Match(DIMENSION);
			State = 4354; Match(BY);
			State = 4355; model_column_list();
			State = 4356; Match(MEASURES);
			State = 4357; model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_column_partition_partContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(oracleParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(oracleParser.BY, 0); }
		public Model_column_listContext model_column_list() {
			return GetRuleContext<Model_column_listContext>(0);
		}
		public Model_column_partition_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_column_partition_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_column_partition_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_column_partition_partContext model_column_partition_part() {
		Model_column_partition_partContext _localctx = new Model_column_partition_partContext(Context, State);
		EnterRule(_localctx, 532, RULE_model_column_partition_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4359; Match(PARTITION);
			State = 4360; Match(BY);
			State = 4361; model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_column_listContext : ParserRuleContext {
		public Model_columnContext[] model_column() {
			return GetRuleContexts<Model_columnContext>();
		}
		public Model_columnContext model_column(int i) {
			return GetRuleContext<Model_columnContext>(i);
		}
		public Model_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_column_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_column_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_column_listContext model_column_list() {
		Model_column_listContext _localctx = new Model_column_listContext(Context, State);
		EnterRule(_localctx, 534, RULE_model_column_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4363; Match(LEFT_PAREN);
			State = 4368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4364; Match(COMMA);
					}
				}

				State = 4367; model_column();
				}
				}
				State = 4370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELECT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (COMMA - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
			State = 4372; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_columnContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Query_blockContext query_block() {
			return GetRuleContext<Query_blockContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public Model_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_column; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_columnContext model_column() {
		Model_columnContext _localctx = new Model_columnContext(Context, State);
		EnterRule(_localctx, 536, RULE_model_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4376;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 4374; expression();
				}
				break;
			case SELECT:
				{
				State = 4375; query_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4379;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,574,Context) ) {
			case 1:
				{
				State = 4378; column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_rules_clauseContext : ParserRuleContext {
		public Model_rules_partContext model_rules_part() {
			return GetRuleContext<Model_rules_partContext>(0);
		}
		public Model_rules_elementContext[] model_rules_element() {
			return GetRuleContexts<Model_rules_elementContext>();
		}
		public Model_rules_elementContext model_rules_element(int i) {
			return GetRuleContext<Model_rules_elementContext>(i);
		}
		public Model_rules_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_rules_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_rules_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_rules_clauseContext model_rules_clause() {
		Model_rules_clauseContext _localctx = new Model_rules_clauseContext(Context, State);
		EnterRule(_localctx, 538, RULE_model_rules_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RULES) {
				{
				State = 4381; model_rules_part();
				}
			}

			State = 4384; Match(LEFT_PAREN);
			State = 4391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPDATE - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (COMMA - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				{
				State = 4386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4385; Match(COMMA);
					}
				}

				State = 4388; model_rules_element();
				}
				}
				State = 4393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4394; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_rules_partContext : ParserRuleContext {
		public ITerminalNode RULES() { return GetToken(oracleParser.RULES, 0); }
		public ITerminalNode UPDATE() { return GetToken(oracleParser.UPDATE, 0); }
		public ITerminalNode UPSERT() { return GetToken(oracleParser.UPSERT, 0); }
		public ITerminalNode ORDER() { return GetToken(oracleParser.ORDER, 0); }
		public Model_iterate_clauseContext model_iterate_clause() {
			return GetRuleContext<Model_iterate_clauseContext>(0);
		}
		public ITerminalNode AUTOMATIC() { return GetToken(oracleParser.AUTOMATIC, 0); }
		public ITerminalNode SEQUENTIAL() { return GetToken(oracleParser.SEQUENTIAL, 0); }
		public ITerminalNode ALL() { return GetToken(oracleParser.ALL, 0); }
		public Model_rules_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_rules_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_rules_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_rules_partContext model_rules_part() {
		Model_rules_partContext _localctx = new Model_rules_partContext(Context, State);
		EnterRule(_localctx, 540, RULE_model_rules_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4396; Match(RULES);
			State = 4402;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UPDATE:
				{
				State = 4397; Match(UPDATE);
				}
				break;
			case UPSERT:
				{
				State = 4398; Match(UPSERT);
				State = 4400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL) {
					{
					State = 4399; Match(ALL);
					}
				}

				}
				break;
			case AUTOMATIC:
			case ITERATE:
			case SEQUENTIAL:
			case LEFT_PAREN:
				break;
			default:
				break;
			}
			State = 4406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTOMATIC || _la==SEQUENTIAL) {
				{
				State = 4404;
				_la = TokenStream.LA(1);
				if ( !(_la==AUTOMATIC || _la==SEQUENTIAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4405; Match(ORDER);
				}
			}

			State = 4409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ITERATE) {
				{
				State = 4408; model_iterate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_rules_elementContext : ParserRuleContext {
		public Cell_assignmentContext cell_assignment() {
			return GetRuleContext<Cell_assignmentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode UPDATE() { return GetToken(oracleParser.UPDATE, 0); }
		public ITerminalNode UPSERT() { return GetToken(oracleParser.UPSERT, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(oracleParser.ALL, 0); }
		public Model_rules_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_rules_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_rules_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_rules_elementContext model_rules_element() {
		Model_rules_elementContext _localctx = new Model_rules_elementContext(Context, State);
		EnterRule(_localctx, 542, RULE_model_rules_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4416;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,583,Context) ) {
			case 1:
				{
				State = 4411; Match(UPDATE);
				}
				break;
			case 2:
				{
				State = 4412; Match(UPSERT);
				State = 4414;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,582,Context) ) {
				case 1:
					{
					State = 4413; Match(ALL);
					}
					break;
				}
				}
				break;
			}
			State = 4418; cell_assignment();
			State = 4420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 4419; order_by_clause();
				}
			}

			State = 4422; Match(EQUALS_OP);
			State = 4423; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cell_assignmentContext : ParserRuleContext {
		public Model_expressionContext model_expression() {
			return GetRuleContext<Model_expressionContext>(0);
		}
		public Cell_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cell_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCell_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cell_assignmentContext cell_assignment() {
		Cell_assignmentContext _localctx = new Cell_assignmentContext(Context, State);
		EnterRule(_localctx, 544, RULE_cell_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4425; model_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_iterate_clauseContext : ParserRuleContext {
		public ITerminalNode ITERATE() { return GetToken(oracleParser.ITERATE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Until_partContext until_part() {
			return GetRuleContext<Until_partContext>(0);
		}
		public Model_iterate_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_iterate_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_iterate_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_iterate_clauseContext model_iterate_clause() {
		Model_iterate_clauseContext _localctx = new Model_iterate_clauseContext(Context, State);
		EnterRule(_localctx, 546, RULE_model_iterate_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4427; Match(ITERATE);
			State = 4428; Match(LEFT_PAREN);
			State = 4429; expression();
			State = 4430; Match(RIGHT_PAREN);
			State = 4432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNTIL) {
				{
				State = 4431; until_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Until_partContext : ParserRuleContext {
		public ITerminalNode UNTIL() { return GetToken(oracleParser.UNTIL, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Until_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_until_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntil_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Until_partContext until_part() {
		Until_partContext _localctx = new Until_partContext(Context, State);
		EnterRule(_localctx, 548, RULE_until_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4434; Match(UNTIL);
			State = 4435; Match(LEFT_PAREN);
			State = 4436; condition();
			State = 4437; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		public ITerminalNode ORDER() { return GetToken(oracleParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(oracleParser.BY, 0); }
		public ITerminalNode SIBLINGS() { return GetToken(oracleParser.SIBLINGS, 0); }
		public Order_by_elementsContext[] order_by_elements() {
			return GetRuleContexts<Order_by_elementsContext>();
		}
		public Order_by_elementsContext order_by_elements(int i) {
			return GetRuleContext<Order_by_elementsContext>(i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(Context, State);
		EnterRule(_localctx, 550, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4439; Match(ORDER);
			State = 4441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SIBLINGS) {
				{
				State = 4440; Match(SIBLINGS);
				}
			}

			State = 4443; Match(BY);
			State = 4448;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4445;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4444; Match(COMMA);
						}
					}

					State = 4447; order_by_elements();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4450;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,588,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_elementsContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode NULLS() { return GetToken(oracleParser.NULLS, 0); }
		public ITerminalNode ASC() { return GetToken(oracleParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(oracleParser.DESC, 0); }
		public ITerminalNode FIRST() { return GetToken(oracleParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(oracleParser.LAST, 0); }
		public Order_by_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_elementsContext order_by_elements() {
		Order_by_elementsContext _localctx = new Order_by_elementsContext(Context, State);
		EnterRule(_localctx, 552, RULE_order_by_elements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4452; expression();
			State = 4454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 4453;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 4458;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,590,Context) ) {
			case 1:
				{
				State = 4456; Match(NULLS);
				State = 4457;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_update_clauseContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(oracleParser.FOR, 0); }
		public ITerminalNode UPDATE() { return GetToken(oracleParser.UPDATE, 0); }
		public For_update_of_partContext for_update_of_part() {
			return GetRuleContext<For_update_of_partContext>(0);
		}
		public For_update_optionsContext for_update_options() {
			return GetRuleContext<For_update_optionsContext>(0);
		}
		public For_update_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_update_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_update_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_update_clauseContext for_update_clause() {
		For_update_clauseContext _localctx = new For_update_clauseContext(Context, State);
		EnterRule(_localctx, 554, RULE_for_update_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4460; Match(FOR);
			State = 4461; Match(UPDATE);
			State = 4463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OF) {
				{
				State = 4462; for_update_of_part();
				}
			}

			State = 4466;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,592,Context) ) {
			case 1:
				{
				State = 4465; for_update_options();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_update_of_partContext : ParserRuleContext {
		public ITerminalNode OF() { return GetToken(oracleParser.OF, 0); }
		public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		public For_update_of_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_update_of_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_update_of_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_update_of_partContext for_update_of_part() {
		For_update_of_partContext _localctx = new For_update_of_partContext(Context, State);
		EnterRule(_localctx, 556, RULE_for_update_of_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4468; Match(OF);
			State = 4469; column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_update_optionsContext : ParserRuleContext {
		public ITerminalNode SKIP_() { return GetToken(oracleParser.SKIP_, 0); }
		public ITerminalNode LOCKED() { return GetToken(oracleParser.LOCKED, 0); }
		public ITerminalNode NOWAIT() { return GetToken(oracleParser.NOWAIT, 0); }
		public ITerminalNode WAIT() { return GetToken(oracleParser.WAIT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public For_update_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_update_options; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_update_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_update_optionsContext for_update_options() {
		For_update_optionsContext _localctx = new For_update_optionsContext(Context, State);
		EnterRule(_localctx, 558, RULE_for_update_options);
		try {
			State = 4476;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SKIP_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4471; Match(SKIP_);
				State = 4472; Match(LOCKED);
				}
				break;
			case NOWAIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4473; Match(NOWAIT);
				}
				break;
			case WAIT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4474; Match(WAIT);
				State = 4475; expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statementContext : ParserRuleContext {
		public ITerminalNode UPDATE() { return GetToken(oracleParser.UPDATE, 0); }
		public General_table_refContext general_table_ref() {
			return GetRuleContext<General_table_refContext>(0);
		}
		public Update_set_clauseContext update_set_clause() {
			return GetRuleContext<Update_set_clauseContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return GetRuleContext<Static_returning_clauseContext>(0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return GetRuleContext<Error_logging_clauseContext>(0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_statementContext update_statement() {
		Update_statementContext _localctx = new Update_statementContext(Context, State);
		EnterRule(_localctx, 560, RULE_update_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4478; Match(UPDATE);
			State = 4479; general_table_ref();
			State = 4480; update_set_clause();
			State = 4482;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 4481; where_clause();
				}
			}

			State = 4485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,595,Context) ) {
			case 1:
				{
				State = 4484; static_returning_clause();
				}
				break;
			}
			State = 4488;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,596,Context) ) {
			case 1:
				{
				State = 4487; error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_set_clauseContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(oracleParser.SET, 0); }
		public ITerminalNode VALUE() { return GetToken(oracleParser.VALUE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Column_based_update_set_clauseContext[] column_based_update_set_clause() {
			return GetRuleContexts<Column_based_update_set_clauseContext>();
		}
		public Column_based_update_set_clauseContext column_based_update_set_clause(int i) {
			return GetRuleContext<Column_based_update_set_clauseContext>(i);
		}
		public Update_set_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_set_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_set_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_set_clauseContext update_set_clause() {
		Update_set_clauseContext _localctx = new Update_set_clauseContext(Context, State);
		EnterRule(_localctx, 562, RULE_update_set_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4490; Match(SET);
			State = 4506;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,599,Context) ) {
			case 1:
				{
				State = 4495;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 4492;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 4491; Match(COMMA);
							}
						}

						State = 4494; column_based_update_set_clause();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 4497;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,598,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				State = 4499; Match(VALUE);
				State = 4500; Match(LEFT_PAREN);
				State = 4501; identifier();
				State = 4502; Match(RIGHT_PAREN);
				State = 4503; Match(EQUALS_OP);
				State = 4504; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_based_update_set_clauseContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Column_based_update_set_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_based_update_set_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_based_update_set_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_based_update_set_clauseContext column_based_update_set_clause() {
		Column_based_update_set_clauseContext _localctx = new Column_based_update_set_clauseContext(Context, State);
		EnterRule(_localctx, 564, RULE_column_based_update_set_clause);
		try {
			State = 4516;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4508; column_name();
				State = 4509; Match(EQUALS_OP);
				State = 4510; expression();
				}
				break;
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4512; paren_column_list();
				State = 4513; Match(EQUALS_OP);
				State = 4514; subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statementContext : ParserRuleContext {
		public ITerminalNode DELETE() { return GetToken(oracleParser.DELETE, 0); }
		public General_table_refContext general_table_ref() {
			return GetRuleContext<General_table_refContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(oracleParser.FROM, 0); }
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return GetRuleContext<Static_returning_clauseContext>(0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return GetRuleContext<Error_logging_clauseContext>(0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statementContext delete_statement() {
		Delete_statementContext _localctx = new Delete_statementContext(Context, State);
		EnterRule(_localctx, 566, RULE_delete_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4518; Match(DELETE);
			State = 4520;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 4519; Match(FROM);
				}
			}

			State = 4522; general_table_ref();
			State = 4524;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 4523; where_clause();
				}
			}

			State = 4527;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,603,Context) ) {
			case 1:
				{
				State = 4526; static_returning_clause();
				}
				break;
			}
			State = 4530;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,604,Context) ) {
			case 1:
				{
				State = 4529; error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statementContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(oracleParser.INSERT, 0); }
		public Single_table_insertContext single_table_insert() {
			return GetRuleContext<Single_table_insertContext>(0);
		}
		public Multi_table_insertContext multi_table_insert() {
			return GetRuleContext<Multi_table_insertContext>(0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statementContext insert_statement() {
		Insert_statementContext _localctx = new Insert_statementContext(Context, State);
		EnterRule(_localctx, 568, RULE_insert_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4532; Match(INSERT);
			State = 4535;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTO:
				{
				State = 4533; single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				State = 4534; multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_table_insertContext : ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return GetRuleContext<Insert_into_clauseContext>(0);
		}
		public Values_clauseContext values_clause() {
			return GetRuleContext<Values_clauseContext>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return GetRuleContext<Error_logging_clauseContext>(0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return GetRuleContext<Static_returning_clauseContext>(0);
		}
		public Single_table_insertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_table_insert; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_table_insert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_table_insertContext single_table_insert() {
		Single_table_insertContext _localctx = new Single_table_insertContext(Context, State);
		EnterRule(_localctx, 570, RULE_single_table_insert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4537; insert_into_clause();
			State = 4543;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUES:
				{
				State = 4538; values_clause();
				State = 4540;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,606,Context) ) {
				case 1:
					{
					State = 4539; static_returning_clause();
					}
					break;
				}
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				State = 4542; select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4546;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,608,Context) ) {
			case 1:
				{
				State = 4545; error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multi_table_insertContext : ParserRuleContext {
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(oracleParser.ALL, 0); }
		public Conditional_insert_clauseContext conditional_insert_clause() {
			return GetRuleContext<Conditional_insert_clauseContext>(0);
		}
		public Multi_table_elementContext[] multi_table_element() {
			return GetRuleContexts<Multi_table_elementContext>();
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return GetRuleContext<Multi_table_elementContext>(i);
		}
		public Multi_table_insertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multi_table_insert; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulti_table_insert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multi_table_insertContext multi_table_insert() {
		Multi_table_insertContext _localctx = new Multi_table_insertContext(Context, State);
		EnterRule(_localctx, 572, RULE_multi_table_insert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4555;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,610,Context) ) {
			case 1:
				{
				State = 4548; Match(ALL);
				State = 4550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 4549; multi_table_element();
					}
					}
					State = 4552;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==INTO );
				}
				break;
			case 2:
				{
				State = 4554; conditional_insert_clause();
				}
				break;
			}
			State = 4557; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multi_table_elementContext : ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return GetRuleContext<Insert_into_clauseContext>(0);
		}
		public Values_clauseContext values_clause() {
			return GetRuleContext<Values_clauseContext>(0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return GetRuleContext<Error_logging_clauseContext>(0);
		}
		public Multi_table_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multi_table_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulti_table_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multi_table_elementContext multi_table_element() {
		Multi_table_elementContext _localctx = new Multi_table_elementContext(Context, State);
		EnterRule(_localctx, 574, RULE_multi_table_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4559; insert_into_clause();
			State = 4561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VALUES) {
				{
				State = 4560; values_clause();
				}
			}

			State = 4564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOG) {
				{
				State = 4563; error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_insert_clauseContext : ParserRuleContext {
		public Conditional_insert_when_partContext[] conditional_insert_when_part() {
			return GetRuleContexts<Conditional_insert_when_partContext>();
		}
		public Conditional_insert_when_partContext conditional_insert_when_part(int i) {
			return GetRuleContext<Conditional_insert_when_partContext>(i);
		}
		public Conditional_insert_else_partContext conditional_insert_else_part() {
			return GetRuleContext<Conditional_insert_else_partContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(oracleParser.ALL, 0); }
		public ITerminalNode FIRST() { return GetToken(oracleParser.FIRST, 0); }
		public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_insert_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_insert_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_insert_clauseContext conditional_insert_clause() {
		Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(Context, State);
		EnterRule(_localctx, 576, RULE_conditional_insert_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4567;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==FIRST) {
				{
				State = 4566;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==FIRST) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 4570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4569; conditional_insert_when_part();
				}
				}
				State = 4572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 4575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 4574; conditional_insert_else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_insert_when_partContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(oracleParser.WHEN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(oracleParser.THEN, 0); }
		public Multi_table_elementContext[] multi_table_element() {
			return GetRuleContexts<Multi_table_elementContext>();
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return GetRuleContext<Multi_table_elementContext>(i);
		}
		public Conditional_insert_when_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_insert_when_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_insert_when_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_insert_when_partContext conditional_insert_when_part() {
		Conditional_insert_when_partContext _localctx = new Conditional_insert_when_partContext(Context, State);
		EnterRule(_localctx, 578, RULE_conditional_insert_when_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4577; Match(WHEN);
			State = 4578; condition();
			State = 4579; Match(THEN);
			State = 4581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4580; multi_table_element();
				}
				}
				State = 4583;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_insert_else_partContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(oracleParser.ELSE, 0); }
		public Multi_table_elementContext[] multi_table_element() {
			return GetRuleContexts<Multi_table_elementContext>();
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return GetRuleContext<Multi_table_elementContext>(i);
		}
		public Conditional_insert_else_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_insert_else_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_insert_else_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_insert_else_partContext conditional_insert_else_part() {
		Conditional_insert_else_partContext _localctx = new Conditional_insert_else_partContext(Context, State);
		EnterRule(_localctx, 580, RULE_conditional_insert_else_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4585; Match(ELSE);
			State = 4587;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4586; multi_table_element();
				}
				}
				State = 4589;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_into_clauseContext : ParserRuleContext {
		public ITerminalNode INTO() { return GetToken(oracleParser.INTO, 0); }
		public General_table_refContext general_table_ref() {
			return GetRuleContext<General_table_refContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Insert_into_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_into_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_into_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_into_clauseContext insert_into_clause() {
		Insert_into_clauseContext _localctx = new Insert_into_clauseContext(Context, State);
		EnterRule(_localctx, 582, RULE_insert_into_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4591; Match(INTO);
			State = 4592; general_table_ref();
			State = 4594;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,618,Context) ) {
			case 1:
				{
				State = 4593; paren_column_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_clauseContext : ParserRuleContext {
		public ITerminalNode VALUES() { return GetToken(oracleParser.VALUES, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValues_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Values_clauseContext values_clause() {
		Values_clauseContext _localctx = new Values_clauseContext(Context, State);
		EnterRule(_localctx, 584, RULE_values_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4596; Match(VALUES);
			State = 4597; Match(LEFT_PAREN);
			State = 4599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				State = 4598; expressions();
				}
			}

			State = 4601; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_statementContext : ParserRuleContext {
		public ITerminalNode MERGE() { return GetToken(oracleParser.MERGE, 0); }
		public ITerminalNode INTO() { return GetToken(oracleParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode USING() { return GetToken(oracleParser.USING, 0); }
		public Selected_tableviewContext selected_tableview() {
			return GetRuleContext<Selected_tableviewContext>(0);
		}
		public ITerminalNode ON() { return GetToken(oracleParser.ON, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return GetRuleContext<Merge_update_clauseContext>(0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return GetRuleContext<Merge_insert_clauseContext>(0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return GetRuleContext<Error_logging_clauseContext>(0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_statementContext merge_statement() {
		Merge_statementContext _localctx = new Merge_statementContext(Context, State);
		EnterRule(_localctx, 586, RULE_merge_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4603; Match(MERGE);
			State = 4604; Match(INTO);
			State = 4605; tableview_name();
			State = 4607;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				State = 4606; table_alias();
				}
			}

			State = 4609; Match(USING);
			State = 4610; selected_tableview();
			State = 4611; Match(ON);
			State = 4612; Match(LEFT_PAREN);
			State = 4613; condition();
			State = 4614; Match(RIGHT_PAREN);
			State = 4623;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,623,Context) ) {
			case 1:
				{
				State = 4615; merge_update_clause();
				State = 4617;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHEN) {
					{
					State = 4616; merge_insert_clause();
					}
				}

				}
				break;
			case 2:
				{
				State = 4619; merge_insert_clause();
				State = 4621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHEN) {
					{
					State = 4620; merge_update_clause();
					}
				}

				}
				break;
			}
			State = 4626;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,624,Context) ) {
			case 1:
				{
				State = 4625; error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_update_clauseContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(oracleParser.WHEN, 0); }
		public ITerminalNode MATCHED() { return GetToken(oracleParser.MATCHED, 0); }
		public ITerminalNode THEN() { return GetToken(oracleParser.THEN, 0); }
		public ITerminalNode UPDATE() { return GetToken(oracleParser.UPDATE, 0); }
		public ITerminalNode SET() { return GetToken(oracleParser.SET, 0); }
		public Merge_elementContext[] merge_element() {
			return GetRuleContexts<Merge_elementContext>();
		}
		public Merge_elementContext merge_element(int i) {
			return GetRuleContext<Merge_elementContext>(i);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Merge_update_delete_partContext merge_update_delete_part() {
			return GetRuleContext<Merge_update_delete_partContext>(0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_update_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_update_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_update_clauseContext merge_update_clause() {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(Context, State);
		EnterRule(_localctx, 588, RULE_merge_update_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4628; Match(WHEN);
			State = 4629; Match(MATCHED);
			State = 4630; Match(THEN);
			State = 4631; Match(UPDATE);
			State = 4632; Match(SET);
			State = 4633; merge_element();
			State = 4638;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,625,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4634; Match(COMMA);
					State = 4635; merge_element();
					}
					} 
				}
				State = 4640;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,625,Context);
			}
			State = 4642;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 4641; where_clause();
				}
			}

			State = 4645;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,627,Context) ) {
			case 1:
				{
				State = 4644; merge_update_delete_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_elementContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Merge_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_elementContext merge_element() {
		Merge_elementContext _localctx = new Merge_elementContext(Context, State);
		EnterRule(_localctx, 590, RULE_merge_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4647; column_name();
			State = 4648; Match(EQUALS_OP);
			State = 4649; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_update_delete_partContext : ParserRuleContext {
		public ITerminalNode DELETE() { return GetToken(oracleParser.DELETE, 0); }
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Merge_update_delete_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_update_delete_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_update_delete_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_update_delete_partContext merge_update_delete_part() {
		Merge_update_delete_partContext _localctx = new Merge_update_delete_partContext(Context, State);
		EnterRule(_localctx, 592, RULE_merge_update_delete_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4651; Match(DELETE);
			State = 4652; where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_insert_clauseContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(oracleParser.WHEN, 0); }
		public ITerminalNode NOT() { return GetToken(oracleParser.NOT, 0); }
		public ITerminalNode MATCHED() { return GetToken(oracleParser.MATCHED, 0); }
		public ITerminalNode THEN() { return GetToken(oracleParser.THEN, 0); }
		public ITerminalNode INSERT() { return GetToken(oracleParser.INSERT, 0); }
		public ITerminalNode VALUES() { return GetToken(oracleParser.VALUES, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_insert_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_insert_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_insert_clauseContext merge_insert_clause() {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(Context, State);
		EnterRule(_localctx, 594, RULE_merge_insert_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4654; Match(WHEN);
			State = 4655; Match(NOT);
			State = 4656; Match(MATCHED);
			State = 4657; Match(THEN);
			State = 4658; Match(INSERT);
			State = 4660;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 4659; paren_column_list();
				}
			}

			State = 4662; Match(VALUES);
			State = 4663; Match(LEFT_PAREN);
			State = 4665;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				State = 4664; expressions();
				}
			}

			State = 4667; Match(RIGHT_PAREN);
			State = 4669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 4668; where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selected_tableviewContext : ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Selected_tableviewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selected_tableview; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelected_tableview(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selected_tableviewContext selected_tableview() {
		Selected_tableviewContext _localctx = new Selected_tableviewContext(Context, State);
		EnterRule(_localctx, 596, RULE_selected_tableview);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4676;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 4671; tableview_name();
				}
				break;
			case LEFT_PAREN:
				{
				State = 4672; Match(LEFT_PAREN);
				State = 4673; select_statement();
				State = 4674; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4679;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				State = 4678; table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_table_statementContext : ParserRuleContext {
		public ITerminalNode LOCK() { return GetToken(oracleParser.LOCK, 0); }
		public ITerminalNode TABLE() { return GetToken(oracleParser.TABLE, 0); }
		public Lock_table_elementContext[] lock_table_element() {
			return GetRuleContexts<Lock_table_elementContext>();
		}
		public Lock_table_elementContext lock_table_element(int i) {
			return GetRuleContext<Lock_table_elementContext>(i);
		}
		public ITerminalNode IN() { return GetToken(oracleParser.IN, 0); }
		public Lock_modeContext lock_mode() {
			return GetRuleContext<Lock_modeContext>(0);
		}
		public ITerminalNode MODE() { return GetToken(oracleParser.MODE, 0); }
		public Wait_nowait_partContext wait_nowait_part() {
			return GetRuleContext<Wait_nowait_partContext>(0);
		}
		public Lock_table_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_table_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock_table_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lock_table_statementContext lock_table_statement() {
		Lock_table_statementContext _localctx = new Lock_table_statementContext(Context, State);
		EnterRule(_localctx, 598, RULE_lock_table_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4681; Match(LOCK);
			State = 4682; Match(TABLE);
			State = 4683; lock_table_element();
			State = 4688;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4684; Match(COMMA);
				State = 4685; lock_table_element();
				}
				}
				State = 4690;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4691; Match(IN);
			State = 4692; lock_mode();
			State = 4693; Match(MODE);
			State = 4695;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,634,Context) ) {
			case 1:
				{
				State = 4694; wait_nowait_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wait_nowait_partContext : ParserRuleContext {
		public ITerminalNode WAIT() { return GetToken(oracleParser.WAIT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode NOWAIT() { return GetToken(oracleParser.NOWAIT, 0); }
		public Wait_nowait_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wait_nowait_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWait_nowait_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Wait_nowait_partContext wait_nowait_part() {
		Wait_nowait_partContext _localctx = new Wait_nowait_partContext(Context, State);
		EnterRule(_localctx, 600, RULE_wait_nowait_part);
		try {
			State = 4700;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WAIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4697; Match(WAIT);
				State = 4698; expression();
				}
				break;
			case NOWAIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4699; Match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_table_elementContext : ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return GetRuleContext<Partition_extension_clauseContext>(0);
		}
		public Lock_table_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_table_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock_table_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lock_table_elementContext lock_table_element() {
		Lock_table_elementContext _localctx = new Lock_table_elementContext(Context, State);
		EnterRule(_localctx, 602, RULE_lock_table_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4702; tableview_name();
			State = 4704;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION || _la==SUBPARTITION) {
				{
				State = 4703; partition_extension_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_modeContext : ParserRuleContext {
		public ITerminalNode ROW() { return GetToken(oracleParser.ROW, 0); }
		public ITerminalNode SHARE() { return GetToken(oracleParser.SHARE, 0); }
		public ITerminalNode EXCLUSIVE() { return GetToken(oracleParser.EXCLUSIVE, 0); }
		public ITerminalNode UPDATE() { return GetToken(oracleParser.UPDATE, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_mode; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock_mode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lock_modeContext lock_mode() {
		Lock_modeContext _localctx = new Lock_modeContext(Context, State);
		EnterRule(_localctx, 604, RULE_lock_mode);
		int _la;
		try {
			State = 4718;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,638,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4706; Match(ROW);
				State = 4707; Match(SHARE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4708; Match(ROW);
				State = 4709; Match(EXCLUSIVE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4710; Match(SHARE);
				State = 4712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UPDATE) {
					{
					State = 4711; Match(UPDATE);
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4714; Match(SHARE);
				State = 4715; Match(ROW);
				State = 4716; Match(EXCLUSIVE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4717; Match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_table_refContext : ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return GetRuleContext<Dml_table_expression_clauseContext>(0);
		}
		public ITerminalNode ONLY() { return GetToken(oracleParser.ONLY, 0); }
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public General_table_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_table_ref; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_table_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_table_refContext general_table_ref() {
		General_table_refContext _localctx = new General_table_refContext(Context, State);
		EnterRule(_localctx, 606, RULE_general_table_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4726;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,639,Context) ) {
			case 1:
				{
				State = 4720; dml_table_expression_clause();
				}
				break;
			case 2:
				{
				State = 4721; Match(ONLY);
				State = 4722; Match(LEFT_PAREN);
				State = 4723; dml_table_expression_clause();
				State = 4724; Match(RIGHT_PAREN);
				}
				break;
			}
			State = 4729;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,640,Context) ) {
			case 1:
				{
				State = 4728; table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_returning_clauseContext : ParserRuleContext {
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Into_clauseContext into_clause() {
			return GetRuleContext<Into_clauseContext>(0);
		}
		public ITerminalNode RETURNING() { return GetToken(oracleParser.RETURNING, 0); }
		public ITerminalNode RETURN() { return GetToken(oracleParser.RETURN, 0); }
		public Static_returning_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_returning_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatic_returning_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Static_returning_clauseContext static_returning_clause() {
		Static_returning_clauseContext _localctx = new Static_returning_clauseContext(Context, State);
		EnterRule(_localctx, 608, RULE_static_returning_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4731;
			_la = TokenStream.LA(1);
			if ( !(_la==RETURNING || _la==RETURN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4732; expressions();
			State = 4733; into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_logging_clauseContext : ParserRuleContext {
		public ITerminalNode LOG() { return GetToken(oracleParser.LOG, 0); }
		public ITerminalNode ERRORS() { return GetToken(oracleParser.ERRORS, 0); }
		public Error_logging_into_partContext error_logging_into_part() {
			return GetRuleContext<Error_logging_into_partContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Error_logging_reject_partContext error_logging_reject_part() {
			return GetRuleContext<Error_logging_reject_partContext>(0);
		}
		public Error_logging_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_logging_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_logging_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_logging_clauseContext error_logging_clause() {
		Error_logging_clauseContext _localctx = new Error_logging_clauseContext(Context, State);
		EnterRule(_localctx, 610, RULE_error_logging_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4735; Match(LOG);
			State = 4736; Match(ERRORS);
			State = 4738;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,641,Context) ) {
			case 1:
				{
				State = 4737; error_logging_into_part();
				}
				break;
			}
			State = 4741;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,642,Context) ) {
			case 1:
				{
				State = 4740; expression();
				}
				break;
			}
			State = 4744;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,643,Context) ) {
			case 1:
				{
				State = 4743; error_logging_reject_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_logging_into_partContext : ParserRuleContext {
		public ITerminalNode INTO() { return GetToken(oracleParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Error_logging_into_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_logging_into_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_logging_into_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_logging_into_partContext error_logging_into_part() {
		Error_logging_into_partContext _localctx = new Error_logging_into_partContext(Context, State);
		EnterRule(_localctx, 612, RULE_error_logging_into_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4746; Match(INTO);
			State = 4747; tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_logging_reject_partContext : ParserRuleContext {
		public ITerminalNode REJECT() { return GetToken(oracleParser.REJECT, 0); }
		public ITerminalNode LIMIT() { return GetToken(oracleParser.LIMIT, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(oracleParser.UNLIMITED, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Error_logging_reject_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_logging_reject_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_logging_reject_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_logging_reject_partContext error_logging_reject_part() {
		Error_logging_reject_partContext _localctx = new Error_logging_reject_partContext(Context, State);
		EnterRule(_localctx, 614, RULE_error_logging_reject_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4749; Match(REJECT);
			State = 4750; Match(LIMIT);
			State = 4753;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,644,Context) ) {
			case 1:
				{
				State = 4751; Match(UNLIMITED);
				}
				break;
			case 2:
				{
				State = 4752; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_table_expression_clauseContext : ParserRuleContext {
		public Table_collection_expressionContext table_collection_expression() {
			return GetRuleContext<Table_collection_expressionContext>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return GetRuleContext<Subquery_restriction_clauseContext>(0);
		}
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Sample_clauseContext sample_clause() {
			return GetRuleContext<Sample_clauseContext>(0);
		}
		public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_table_expression_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_table_expression_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_table_expression_clauseContext dml_table_expression_clause() {
		Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(Context, State);
		EnterRule(_localctx, 616, RULE_dml_table_expression_clause);
		int _la;
		try {
			State = 4767;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLE:
			case THE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4755; table_collection_expression();
				}
				break;
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4756; Match(LEFT_PAREN);
				State = 4757; select_statement();
				State = 4759;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4758; subquery_restriction_clause();
					}
				}

				State = 4761; Match(RIGHT_PAREN);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4763; tableview_name();
				State = 4765;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,646,Context) ) {
				case 1:
					{
					State = 4764; sample_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_collection_expressionContext : ParserRuleContext {
		public ITerminalNode TABLE() { return GetToken(oracleParser.TABLE, 0); }
		public ITerminalNode THE() { return GetToken(oracleParser.THE, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Table_collection_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_collection_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_collection_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_collection_expressionContext table_collection_expression() {
		Table_collection_expressionContext _localctx = new Table_collection_expressionContext(Context, State);
		EnterRule(_localctx, 618, RULE_table_collection_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4769;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==THE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4782;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,649,Context) ) {
			case 1:
				{
				State = 4770; Match(LEFT_PAREN);
				State = 4771; subquery();
				State = 4772; Match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				State = 4774; Match(LEFT_PAREN);
				State = 4775; expression();
				State = 4776; Match(RIGHT_PAREN);
				State = 4780;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,648,Context) ) {
				case 1:
					{
					State = 4777; Match(LEFT_PAREN);
					State = 4778; Match(PLUS_SIGN);
					State = 4779; Match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subquery_restriction_clauseContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(oracleParser.WITH, 0); }
		public ITerminalNode READ() { return GetToken(oracleParser.READ, 0); }
		public ITerminalNode ONLY() { return GetToken(oracleParser.ONLY, 0); }
		public ITerminalNode CHECK() { return GetToken(oracleParser.CHECK, 0); }
		public ITerminalNode OPTION() { return GetToken(oracleParser.OPTION, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(oracleParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Subquery_restriction_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery_restriction_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery_restriction_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subquery_restriction_clauseContext subquery_restriction_clause() {
		Subquery_restriction_clauseContext _localctx = new Subquery_restriction_clauseContext(Context, State);
		EnterRule(_localctx, 620, RULE_subquery_restriction_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4784; Match(WITH);
			State = 4793;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ:
				{
				State = 4785; Match(READ);
				State = 4786; Match(ONLY);
				}
				break;
			case CHECK:
				{
				State = 4787; Match(CHECK);
				State = 4788; Match(OPTION);
				State = 4791;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,650,Context) ) {
				case 1:
					{
					State = 4789; Match(CONSTRAINT);
					State = 4790; constraint_name();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sample_clauseContext : ParserRuleContext {
		public ITerminalNode SAMPLE() { return GetToken(oracleParser.SAMPLE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BLOCK() { return GetToken(oracleParser.BLOCK, 0); }
		public Seed_partContext seed_part() {
			return GetRuleContext<Seed_partContext>(0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sample_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSample_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sample_clauseContext sample_clause() {
		Sample_clauseContext _localctx = new Sample_clauseContext(Context, State);
		EnterRule(_localctx, 622, RULE_sample_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4795; Match(SAMPLE);
			State = 4797;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BLOCK) {
				{
				State = 4796; Match(BLOCK);
				}
			}

			State = 4799; Match(LEFT_PAREN);
			State = 4800; expression();
			State = 4803;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 4801; Match(COMMA);
				State = 4802; expression();
				}
			}

			State = 4805; Match(RIGHT_PAREN);
			State = 4807;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,654,Context) ) {
			case 1:
				{
				State = 4806; seed_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Seed_partContext : ParserRuleContext {
		public ITerminalNode SEED() { return GetToken(oracleParser.SEED, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Seed_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seed_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeed_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Seed_partContext seed_part() {
		Seed_partContext _localctx = new Seed_partContext(Context, State);
		EnterRule(_localctx, 624, RULE_seed_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4809; Match(SEED);
			State = 4810; Match(LEFT_PAREN);
			State = 4811; expression();
			State = 4812; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 626, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4814; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 628, RULE_expressions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4816; expression();
			State = 4821;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,655,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4817; Match(COMMA);
					State = 4818; expression();
					}
					} 
				}
				State = 4823;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,655,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Cursor_expressionContext cursor_expression() {
			return GetRuleContext<Cursor_expressionContext>(0);
		}
		public Logical_expressionContext logical_expression() {
			return GetRuleContext<Logical_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 630, RULE_expression);
		try {
			State = 4826;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,656,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4824; cursor_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4825; logical_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_expressionContext : ParserRuleContext {
		public ITerminalNode CURSOR() { return GetToken(oracleParser.CURSOR, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Cursor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_expressionContext cursor_expression() {
		Cursor_expressionContext _localctx = new Cursor_expressionContext(Context, State);
		EnterRule(_localctx, 632, RULE_cursor_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4828; Match(CURSOR);
			State = 4829; Match(LEFT_PAREN);
			State = 4830; subquery();
			State = 4831; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_expressionContext : ParserRuleContext {
		public Multiset_expressionContext multiset_expression() {
			return GetRuleContext<Multiset_expressionContext>(0);
		}
		public ITerminalNode[] IS() { return GetTokens(oracleParser.IS); }
		public ITerminalNode IS(int i) {
			return GetToken(oracleParser.IS, i);
		}
		public ITerminalNode[] NULL() { return GetTokens(oracleParser.NULL); }
		public ITerminalNode NULL(int i) {
			return GetToken(oracleParser.NULL, i);
		}
		public ITerminalNode[] NAN() { return GetTokens(oracleParser.NAN); }
		public ITerminalNode NAN(int i) {
			return GetToken(oracleParser.NAN, i);
		}
		public ITerminalNode[] PRESENT() { return GetTokens(oracleParser.PRESENT); }
		public ITerminalNode PRESENT(int i) {
			return GetToken(oracleParser.PRESENT, i);
		}
		public ITerminalNode[] INFINITE() { return GetTokens(oracleParser.INFINITE); }
		public ITerminalNode INFINITE(int i) {
			return GetToken(oracleParser.INFINITE, i);
		}
		public ITerminalNode[] A_LETTER() { return GetTokens(oracleParser.A_LETTER); }
		public ITerminalNode A_LETTER(int i) {
			return GetToken(oracleParser.A_LETTER, i);
		}
		public ITerminalNode[] SET() { return GetTokens(oracleParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(oracleParser.SET, i);
		}
		public ITerminalNode[] EMPTY() { return GetTokens(oracleParser.EMPTY); }
		public ITerminalNode EMPTY(int i) {
			return GetToken(oracleParser.EMPTY, i);
		}
		public ITerminalNode[] OF() { return GetTokens(oracleParser.OF); }
		public ITerminalNode OF(int i) {
			return GetToken(oracleParser.OF, i);
		}
		public Type_specContext[] type_spec() {
			return GetRuleContexts<Type_specContext>();
		}
		public Type_specContext type_spec(int i) {
			return GetRuleContext<Type_specContext>(i);
		}
		public ITerminalNode[] NOT() { return GetTokens(oracleParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(oracleParser.NOT, i);
		}
		public ITerminalNode[] TYPE() { return GetTokens(oracleParser.TYPE); }
		public ITerminalNode TYPE(int i) {
			return GetToken(oracleParser.TYPE, i);
		}
		public ITerminalNode[] ONLY() { return GetTokens(oracleParser.ONLY); }
		public ITerminalNode ONLY(int i) {
			return GetToken(oracleParser.ONLY, i);
		}
		public Logical_expressionContext[] logical_expression() {
			return GetRuleContexts<Logical_expressionContext>();
		}
		public Logical_expressionContext logical_expression(int i) {
			return GetRuleContext<Logical_expressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(oracleParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(oracleParser.OR, 0); }
		public Logical_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_expressionContext logical_expression() {
		return logical_expression(0);
	}

	private Logical_expressionContext logical_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_expressionContext _localctx = new Logical_expressionContext(Context, _parentState);
		Logical_expressionContext _prevctx = _localctx;
		int _startState = 634;
		EnterRecursionRule(_localctx, 634, RULE_logical_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4873;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 4834; multiset_expression();
				State = 4868;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,662,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4835; Match(IS);
						State = 4837;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 4836; Match(NOT);
							}
						}

						State = 4864;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NULL:
							{
							State = 4839; Match(NULL);
							}
							break;
						case NAN:
							{
							State = 4840; Match(NAN);
							}
							break;
						case PRESENT:
							{
							State = 4841; Match(PRESENT);
							}
							break;
						case INFINITE:
							{
							State = 4842; Match(INFINITE);
							}
							break;
						case A_LETTER:
							{
							State = 4843; Match(A_LETTER);
							State = 4844; Match(SET);
							}
							break;
						case EMPTY:
							{
							State = 4845; Match(EMPTY);
							}
							break;
						case OF:
							{
							State = 4846; Match(OF);
							State = 4848;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==TYPE) {
								{
								State = 4847; Match(TYPE);
								}
							}

							State = 4850; Match(LEFT_PAREN);
							State = 4852;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,659,Context) ) {
							case 1:
								{
								State = 4851; Match(ONLY);
								}
								break;
							}
							State = 4854; type_spec();
							State = 4859;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMMA) {
								{
								{
								State = 4855; Match(COMMA);
								State = 4856; type_spec();
								}
								}
								State = 4861;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 4862; Match(RIGHT_PAREN);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					State = 4870;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,662,Context);
				}
				}
				break;
			case NOT:
				{
				State = 4871; Match(NOT);
				State = 4872; logical_expression(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 4883;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,665,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 4881;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,664,Context) ) {
					case 1:
						{
						_localctx = new Logical_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logical_expression);
						State = 4875;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 4876; Match(AND);
						State = 4877; logical_expression(3);
						}
						break;
					case 2:
						{
						_localctx = new Logical_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logical_expression);
						State = 4878;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 4879; Match(OR);
						State = 4880; logical_expression(2);
						}
						break;
					}
					} 
				}
				State = 4885;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,665,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Multiset_expressionContext : ParserRuleContext {
		public IToken multiset_type;
		public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public ITerminalNode MEMBER() { return GetToken(oracleParser.MEMBER, 0); }
		public ITerminalNode SUBMULTISET() { return GetToken(oracleParser.SUBMULTISET, 0); }
		public ITerminalNode OF() { return GetToken(oracleParser.OF, 0); }
		public Multiset_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiset_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiset_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiset_expressionContext multiset_expression() {
		Multiset_expressionContext _localctx = new Multiset_expressionContext(Context, State);
		EnterRule(_localctx, 636, RULE_multiset_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4886; relational_expression(0);
			State = 4892;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,667,Context) ) {
			case 1:
				{
				State = 4887;
				_localctx.multiset_type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
					_localctx.multiset_type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4889;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OF) {
					{
					State = 4888; Match(OF);
					}
				}

				State = 4891; concatenation(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		public Compound_expressionContext compound_expression() {
			return GetRuleContext<Compound_expressionContext>(0);
		}
		public Relational_expressionContext[] relational_expression() {
			return GetRuleContexts<Relational_expressionContext>();
		}
		public Relational_expressionContext relational_expression(int i) {
			return GetRuleContext<Relational_expressionContext>(i);
		}
		public Relational_operatorContext relational_operator() {
			return GetRuleContext<Relational_operatorContext>(0);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		return relational_expression(0);
	}

	private Relational_expressionContext relational_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Relational_expressionContext _localctx = new Relational_expressionContext(Context, _parentState);
		Relational_expressionContext _prevctx = _localctx;
		int _startState = 638;
		EnterRecursionRule(_localctx, 638, RULE_relational_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 4895; compound_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 4903;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,668,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Relational_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
					State = 4897;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 4898; relational_operator();
					State = 4899; relational_expression(3);
					}
					} 
				}
				State = 4905;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,668,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Compound_expressionContext : ParserRuleContext {
		public IToken like_type;
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public ITerminalNode IN() { return GetToken(oracleParser.IN, 0); }
		public In_elementsContext in_elements() {
			return GetRuleContext<In_elementsContext>(0);
		}
		public ITerminalNode BETWEEN() { return GetToken(oracleParser.BETWEEN, 0); }
		public Between_elementsContext between_elements() {
			return GetRuleContext<Between_elementsContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(oracleParser.NOT, 0); }
		public ITerminalNode LIKE() { return GetToken(oracleParser.LIKE, 0); }
		public ITerminalNode LIKEC() { return GetToken(oracleParser.LIKEC, 0); }
		public ITerminalNode LIKE2() { return GetToken(oracleParser.LIKE2, 0); }
		public ITerminalNode LIKE4() { return GetToken(oracleParser.LIKE4, 0); }
		public ITerminalNode ESCAPE() { return GetToken(oracleParser.ESCAPE, 0); }
		public Compound_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_expressionContext compound_expression() {
		Compound_expressionContext _localctx = new Compound_expressionContext(Context, State);
		EnterRule(_localctx, 640, RULE_compound_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4906; concatenation(0);
			State = 4922;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,672,Context) ) {
			case 1:
				{
				State = 4908;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 4907; Match(NOT);
					}
				}

				State = 4920;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IN:
					{
					State = 4910; Match(IN);
					State = 4911; in_elements();
					}
					break;
				case BETWEEN:
					{
					State = 4912; Match(BETWEEN);
					State = 4913; between_elements();
					}
					break;
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIKE:
					{
					State = 4914;
					_localctx.like_type = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & ((1L << (LIKE2 - 267)) | (1L << (LIKE4 - 267)) | (1L << (LIKEC - 267)) | (1L << (LIKE - 267)))) != 0)) ) {
						_localctx.like_type = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 4915; concatenation(0);
					State = 4918;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,670,Context) ) {
					case 1:
						{
						State = 4916; Match(ESCAPE);
						State = 4917; concatenation(0);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_operatorContext : ParserRuleContext {
		public ITerminalNode NOT_EQUAL_OP() { return GetToken(oracleParser.NOT_EQUAL_OP, 0); }
		public Relational_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_operatorContext relational_operator() {
		Relational_operatorContext _localctx = new Relational_operatorContext(Context, State);
		EnterRule(_localctx, 642, RULE_relational_operator);
		int _la;
		try {
			State = 4938;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,675,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4924; Match(EQUALS_OP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4932;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NOT_EQUAL_OP:
					{
					State = 4925; Match(NOT_EQUAL_OP);
					}
					break;
				case LESS_THAN_OP:
					{
					State = 4926; Match(LESS_THAN_OP);
					State = 4927; Match(GREATER_THAN_OP);
					}
					break;
				case EXCLAMATION_OPERATOR_PART:
					{
					State = 4928; Match(EXCLAMATION_OPERATOR_PART);
					State = 4929; Match(EQUALS_OP);
					}
					break;
				case CARRET_OPERATOR_PART:
					{
					State = 4930; Match(CARRET_OPERATOR_PART);
					State = 4931; Match(EQUALS_OP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4934;
				_la = TokenStream.LA(1);
				if ( !(_la==GREATER_THAN_OP || _la==LESS_THAN_OP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4936;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUALS_OP) {
					{
					State = 4935; Match(EQUALS_OP);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_elementsContext : ParserRuleContext {
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Bind_variableContext bind_variable() {
			return GetRuleContext<Bind_variableContext>(0);
		}
		public General_elementContext general_element() {
			return GetRuleContext<General_elementContext>(0);
		}
		public In_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIn_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public In_elementsContext in_elements() {
		In_elementsContext _localctx = new In_elementsContext(Context, State);
		EnterRule(_localctx, 644, RULE_in_elements);
		int _la;
		try {
			State = 4958;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,677,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4940; Match(LEFT_PAREN);
				State = 4941; subquery();
				State = 4942; Match(RIGHT_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4944; Match(LEFT_PAREN);
				State = 4945; concatenation(0);
				State = 4950;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4946; Match(COMMA);
					State = 4947; concatenation(0);
					}
					}
					State = 4952;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4953; Match(RIGHT_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4955; constant();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4956; bind_variable();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4957; general_element();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Between_elementsContext : ParserRuleContext {
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public ITerminalNode AND() { return GetToken(oracleParser.AND, 0); }
		public Between_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_between_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetween_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Between_elementsContext between_elements() {
		Between_elementsContext _localctx = new Between_elementsContext(Context, State);
		EnterRule(_localctx, 646, RULE_between_elements);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4960; concatenation(0);
			State = 4961; Match(AND);
			State = 4962; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatenationContext : ParserRuleContext {
		public IToken op;
		public Model_expressionContext model_expression() {
			return GetRuleContext<Model_expressionContext>(0);
		}
		public ITerminalNode AT() { return GetToken(oracleParser.AT, 0); }
		public Interval_expressionContext interval_expression() {
			return GetRuleContext<Interval_expressionContext>(0);
		}
		public ITerminalNode LOCAL() { return GetToken(oracleParser.LOCAL, 0); }
		public ITerminalNode TIME() { return GetToken(oracleParser.TIME, 0); }
		public ITerminalNode ZONE() { return GetToken(oracleParser.ZONE, 0); }
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public ITerminalNode ASTERISK() { return GetToken(oracleParser.ASTERISK, 0); }
		public ITerminalNode SOLIDUS() { return GetToken(oracleParser.SOLIDUS, 0); }
		public ITerminalNode PLUS_SIGN() { return GetToken(oracleParser.PLUS_SIGN, 0); }
		public ITerminalNode MINUS_SIGN() { return GetToken(oracleParser.MINUS_SIGN, 0); }
		public ITerminalNode[] BAR() { return GetTokens(oracleParser.BAR); }
		public ITerminalNode BAR(int i) {
			return GetToken(oracleParser.BAR, i);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatenation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatenationContext concatenation() {
		return concatenation(0);
	}

	private ConcatenationContext concatenation(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConcatenationContext _localctx = new ConcatenationContext(Context, _parentState);
		ConcatenationContext _prevctx = _localctx;
		int _startState = 648;
		EnterRecursionRule(_localctx, 648, RULE_concatenation, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 4965; model_expression();
			State = 4974;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,679,Context) ) {
			case 1:
				{
				State = 4966; Match(AT);
				State = 4971;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LOCAL:
					{
					State = 4967; Match(LOCAL);
					}
					break;
				case TIME:
					{
					State = 4968; Match(TIME);
					State = 4969; Match(ZONE);
					State = 4970; concatenation(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				State = 4973; interval_expression();
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 4988;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,681,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 4986;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,680,Context) ) {
					case 1:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						State = 4976;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 4977;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 4978; concatenation(4);
						}
						break;
					case 2:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						State = 4979;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 4980;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 4981; concatenation(3);
						}
						break;
					case 3:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						State = 4982;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 4983; Match(BAR);
						State = 4984; Match(BAR);
						State = 4985; concatenation(2);
						}
						break;
					}
					} 
				}
				State = 4990;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,681,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Interval_expressionContext : ParserRuleContext {
		public ITerminalNode DAY() { return GetToken(oracleParser.DAY, 0); }
		public ITerminalNode TO() { return GetToken(oracleParser.TO, 0); }
		public ITerminalNode SECOND() { return GetToken(oracleParser.SECOND, 0); }
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public ITerminalNode YEAR() { return GetToken(oracleParser.YEAR, 0); }
		public ITerminalNode MONTH() { return GetToken(oracleParser.MONTH, 0); }
		public Interval_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterval_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interval_expressionContext interval_expression() {
		Interval_expressionContext _localctx = new Interval_expressionContext(Context, State);
		EnterRule(_localctx, 650, RULE_interval_expression);
		int _la;
		try {
			State = 5015;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DAY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4991; Match(DAY);
				State = 4996;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_PAREN) {
					{
					State = 4992; Match(LEFT_PAREN);
					State = 4993; concatenation(0);
					State = 4994; Match(RIGHT_PAREN);
					}
				}

				State = 4998; Match(TO);
				State = 4999; Match(SECOND);
				State = 5004;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,683,Context) ) {
				case 1:
					{
					State = 5000; Match(LEFT_PAREN);
					State = 5001; concatenation(0);
					State = 5002; Match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5006; Match(YEAR);
				State = 5011;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_PAREN) {
					{
					State = 5007; Match(LEFT_PAREN);
					State = 5008; concatenation(0);
					State = 5009; Match(RIGHT_PAREN);
					}
				}

				State = 5013; Match(TO);
				State = 5014; Match(MONTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_expressionContext : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Model_expression_elementContext model_expression_element() {
			return GetRuleContext<Model_expression_elementContext>(0);
		}
		public Model_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_expressionContext model_expression() {
		Model_expressionContext _localctx = new Model_expressionContext(Context, State);
		EnterRule(_localctx, 652, RULE_model_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5017; unary_expression();
			State = 5022;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,686,Context) ) {
			case 1:
				{
				State = 5018; Match(LEFT_BRACKET);
				State = 5019; model_expression_element();
				State = 5020; Match(RIGHT_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_expression_elementContext : ParserRuleContext {
		public ITerminalNode[] ANY() { return GetTokens(oracleParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(oracleParser.ANY, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Single_column_for_loopContext[] single_column_for_loop() {
			return GetRuleContexts<Single_column_for_loopContext>();
		}
		public Single_column_for_loopContext single_column_for_loop(int i) {
			return GetRuleContext<Single_column_for_loopContext>(i);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return GetRuleContext<Multi_column_for_loopContext>(0);
		}
		public Model_expression_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_expression_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_expression_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_expression_elementContext model_expression_element() {
		Model_expression_elementContext _localctx = new Model_expression_elementContext(Context, State);
		EnterRule(_localctx, 654, RULE_model_expression_element);
		int _la;
		try {
			State = 5047;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,691,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5026;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,687,Context) ) {
				case 1:
					{
					State = 5024; Match(ANY);
					}
					break;
				case 2:
					{
					State = 5025; expression();
					}
					break;
				}
				State = 5035;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5028; Match(COMMA);
					State = 5031;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,688,Context) ) {
					case 1:
						{
						State = 5029; Match(ANY);
						}
						break;
					case 2:
						{
						State = 5030; expression();
						}
						break;
					}
					}
					}
					State = 5037;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5038; single_column_for_loop();
				State = 5043;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5039; Match(COMMA);
					State = 5040; single_column_for_loop();
					}
					}
					State = 5045;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5046; multi_column_for_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_column_for_loopContext : ParserRuleContext {
		public ExpressionContext fromExpr;
		public ExpressionContext toExpr;
		public IToken action_type;
		public ExpressionContext action_expr;
		public ITerminalNode FOR() { return GetToken(oracleParser.FOR, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(oracleParser.IN, 0); }
		public ITerminalNode FROM() { return GetToken(oracleParser.FROM, 0); }
		public ITerminalNode TO() { return GetToken(oracleParser.TO, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode INCREMENT() { return GetToken(oracleParser.INCREMENT, 0); }
		public ITerminalNode DECREMENT() { return GetToken(oracleParser.DECREMENT, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ITerminalNode LIKE() { return GetToken(oracleParser.LIKE, 0); }
		public Single_column_for_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_column_for_loop; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_column_for_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_column_for_loopContext single_column_for_loop() {
		Single_column_for_loopContext _localctx = new Single_column_for_loopContext(Context, State);
		EnterRule(_localctx, 656, RULE_single_column_for_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5049; Match(FOR);
			State = 5050; column_name();
			State = 5068;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN:
				{
				State = 5051; Match(IN);
				State = 5052; Match(LEFT_PAREN);
				State = 5054;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
					{
					State = 5053; expressions();
					}
				}

				State = 5056; Match(RIGHT_PAREN);
				}
				break;
			case FROM:
			case LIKE:
				{
				State = 5059;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE) {
					{
					State = 5057; Match(LIKE);
					State = 5058; expression();
					}
				}

				State = 5061; Match(FROM);
				State = 5062; _localctx.fromExpr = expression();
				State = 5063; Match(TO);
				State = 5064; _localctx.toExpr = expression();
				State = 5065;
				_localctx.action_type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DECREMENT || _la==INCREMENT) ) {
					_localctx.action_type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5066; _localctx.action_expr = expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multi_column_for_loopContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(oracleParser.FOR, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode IN() { return GetToken(oracleParser.IN, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multi_column_for_loop; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulti_column_for_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multi_column_for_loopContext multi_column_for_loop() {
		Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(Context, State);
		EnterRule(_localctx, 658, RULE_multi_column_for_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5070; Match(FOR);
			State = 5071; paren_column_list();
			State = 5072; Match(IN);
			State = 5073; Match(LEFT_PAREN);
			State = 5080;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,696,Context) ) {
			case 1:
				{
				State = 5074; subquery();
				}
				break;
			case 2:
				{
				State = 5075; Match(LEFT_PAREN);
				State = 5077;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
					{
					State = 5076; expressions();
					}
				}

				State = 5079; Match(RIGHT_PAREN);
				}
				break;
			}
			State = 5082; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public ITerminalNode PRIOR() { return GetToken(oracleParser.PRIOR, 0); }
		public ITerminalNode CONNECT_BY_ROOT() { return GetToken(oracleParser.CONNECT_BY_ROOT, 0); }
		public ITerminalNode NEW() { return GetToken(oracleParser.NEW, 0); }
		public ITerminalNode DISTINCT() { return GetToken(oracleParser.DISTINCT, 0); }
		public ITerminalNode ALL() { return GetToken(oracleParser.ALL, 0); }
		public Case_statementContext case_statement() {
			return GetRuleContext<Case_statementContext>(0);
		}
		public Quantified_expressionContext quantified_expression() {
			return GetRuleContext<Quantified_expressionContext>(0);
		}
		public Standard_functionContext standard_function() {
			return GetRuleContext<Standard_functionContext>(0);
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 660, RULE_unary_expression);
		int _la;
		try {
			State = 5100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,697,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5084;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5085; unary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5086; Match(PRIOR);
				State = 5087; unary_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5088; Match(CONNECT_BY_ROOT);
				State = 5089; unary_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5090; Match(NEW);
				State = 5091; unary_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5092; Match(DISTINCT);
				State = 5093; unary_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5094; Match(ALL);
				State = 5095; unary_expression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5096; case_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5097; quantified_expression();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5098; standard_function();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5099; atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_statementContext : ParserRuleContext {
		public Searched_case_statementContext searched_case_statement() {
			return GetRuleContext<Searched_case_statementContext>(0);
		}
		public Simple_case_statementContext simple_case_statement() {
			return GetRuleContext<Simple_case_statementContext>(0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_statementContext case_statement() {
		Case_statementContext _localctx = new Case_statementContext(Context, State);
		EnterRule(_localctx, 662, RULE_case_statement);
		try {
			State = 5104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,698,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5102; searched_case_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5103; simple_case_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_case_statementContext : ParserRuleContext {
		public IToken ck1;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode END() { return GetToken(oracleParser.END, 0); }
		public ITerminalNode[] CASE() { return GetTokens(oracleParser.CASE); }
		public ITerminalNode CASE(int i) {
			return GetToken(oracleParser.CASE, i);
		}
		public Label_nameContext[] label_name() {
			return GetRuleContexts<Label_nameContext>();
		}
		public Label_nameContext label_name(int i) {
			return GetRuleContext<Label_nameContext>(i);
		}
		public Simple_case_when_partContext[] simple_case_when_part() {
			return GetRuleContexts<Simple_case_when_partContext>();
		}
		public Simple_case_when_partContext simple_case_when_part(int i) {
			return GetRuleContext<Simple_case_when_partContext>(i);
		}
		public Case_else_partContext case_else_part() {
			return GetRuleContext<Case_else_partContext>(0);
		}
		public Simple_case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_case_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_case_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_case_statementContext simple_case_statement() {
		Simple_case_statementContext _localctx = new Simple_case_statementContext(Context, State);
		EnterRule(_localctx, 664, RULE_simple_case_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				State = 5106; label_name();
				}
			}

			State = 5109; _localctx.ck1 = Match(CASE);
			State = 5110; expression();
			State = 5112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5111; simple_case_when_part();
				}
				}
				State = 5114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 5117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 5116; case_else_part();
				}
			}

			State = 5119; Match(END);
			State = 5121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,702,Context) ) {
			case 1:
				{
				State = 5120; Match(CASE);
				}
				break;
			}
			State = 5124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,703,Context) ) {
			case 1:
				{
				State = 5123; label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_case_when_partContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(oracleParser.WHEN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(oracleParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public Simple_case_when_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_case_when_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_case_when_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_case_when_partContext simple_case_when_part() {
		Simple_case_when_partContext _localctx = new Simple_case_when_partContext(Context, State);
		EnterRule(_localctx, 666, RULE_simple_case_when_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5126; Match(WHEN);
			State = 5127; expression();
			State = 5128; Match(THEN);
			State = 5131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,704,Context) ) {
			case 1:
				{
				State = 5129; seq_of_statements();
				}
				break;
			case 2:
				{
				State = 5130; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Searched_case_statementContext : ParserRuleContext {
		public IToken ck1;
		public ITerminalNode END() { return GetToken(oracleParser.END, 0); }
		public ITerminalNode[] CASE() { return GetTokens(oracleParser.CASE); }
		public ITerminalNode CASE(int i) {
			return GetToken(oracleParser.CASE, i);
		}
		public Label_nameContext[] label_name() {
			return GetRuleContexts<Label_nameContext>();
		}
		public Label_nameContext label_name(int i) {
			return GetRuleContext<Label_nameContext>(i);
		}
		public Searched_case_when_partContext[] searched_case_when_part() {
			return GetRuleContexts<Searched_case_when_partContext>();
		}
		public Searched_case_when_partContext searched_case_when_part(int i) {
			return GetRuleContext<Searched_case_when_partContext>(i);
		}
		public Case_else_partContext case_else_part() {
			return GetRuleContext<Case_else_partContext>(0);
		}
		public Searched_case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_searched_case_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearched_case_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Searched_case_statementContext searched_case_statement() {
		Searched_case_statementContext _localctx = new Searched_case_statementContext(Context, State);
		EnterRule(_localctx, 668, RULE_searched_case_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				State = 5133; label_name();
				}
			}

			State = 5136; _localctx.ck1 = Match(CASE);
			State = 5138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5137; searched_case_when_part();
				}
				}
				State = 5140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 5143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 5142; case_else_part();
				}
			}

			State = 5145; Match(END);
			State = 5147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,708,Context) ) {
			case 1:
				{
				State = 5146; Match(CASE);
				}
				break;
			}
			State = 5150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,709,Context) ) {
			case 1:
				{
				State = 5149; label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Searched_case_when_partContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(oracleParser.WHEN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(oracleParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public Searched_case_when_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_searched_case_when_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearched_case_when_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Searched_case_when_partContext searched_case_when_part() {
		Searched_case_when_partContext _localctx = new Searched_case_when_partContext(Context, State);
		EnterRule(_localctx, 670, RULE_searched_case_when_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5152; Match(WHEN);
			State = 5153; expression();
			State = 5154; Match(THEN);
			State = 5157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,710,Context) ) {
			case 1:
				{
				State = 5155; seq_of_statements();
				}
				break;
			case 2:
				{
				State = 5156; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_else_partContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(oracleParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Case_else_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_else_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_else_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_else_partContext case_else_part() {
		Case_else_partContext _localctx = new Case_else_partContext(Context, State);
		EnterRule(_localctx, 672, RULE_case_else_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5159; Match(ELSE);
			State = 5162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,711,Context) ) {
			case 1:
				{
				State = 5160; seq_of_statements();
				}
				break;
			case 2:
				{
				State = 5161; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public Table_elementContext table_element() {
			return GetRuleContext<Table_elementContext>(0);
		}
		public Outer_join_signContext outer_join_sign() {
			return GetRuleContext<Outer_join_signContext>(0);
		}
		public Bind_variableContext bind_variable() {
			return GetRuleContext<Bind_variableContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public General_elementContext general_element() {
			return GetRuleContext<General_elementContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Subquery_operation_partContext[] subquery_operation_part() {
			return GetRuleContexts<Subquery_operation_partContext>();
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return GetRuleContext<Subquery_operation_partContext>(i);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 674, RULE_atom);
		try {
			int _alt;
			State = 5183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,713,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5164; table_element();
				State = 5165; outer_join_sign();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5167; bind_variable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5168; constant();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5169; general_element();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5170; Match(LEFT_PAREN);
				State = 5171; subquery();
				State = 5172; Match(RIGHT_PAREN);
				State = 5176;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,712,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 5173; subquery_operation_part();
						}
						} 
					}
					State = 5178;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,712,Context);
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5179; Match(LEFT_PAREN);
				State = 5180; expressions();
				State = 5181; Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Quantified_expressionContext : ParserRuleContext {
		public ITerminalNode SOME() { return GetToken(oracleParser.SOME, 0); }
		public ITerminalNode EXISTS() { return GetToken(oracleParser.EXISTS, 0); }
		public ITerminalNode ALL() { return GetToken(oracleParser.ALL, 0); }
		public ITerminalNode ANY() { return GetToken(oracleParser.ANY, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Quantified_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantified_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantified_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Quantified_expressionContext quantified_expression() {
		Quantified_expressionContext _localctx = new Quantified_expressionContext(Context, State);
		EnterRule(_localctx, 676, RULE_quantified_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5185;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,714,Context) ) {
			case 1:
				{
				State = 5186; Match(LEFT_PAREN);
				State = 5187; subquery();
				State = 5188; Match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				State = 5190; Match(LEFT_PAREN);
				State = 5191; expression();
				State = 5192; Match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_functionContext : ParserRuleContext {
		public ITerminalNode SUBSTR() { return GetToken(oracleParser.SUBSTR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TO_CHAR() { return GetToken(oracleParser.TO_CHAR, 0); }
		public Table_elementContext table_element() {
			return GetRuleContext<Table_elementContext>(0);
		}
		public Standard_functionContext standard_function() {
			return GetRuleContext<Standard_functionContext>(0);
		}
		public Quoted_stringContext[] quoted_string() {
			return GetRuleContexts<Quoted_stringContext>();
		}
		public Quoted_stringContext quoted_string(int i) {
			return GetRuleContext<Quoted_stringContext>(i);
		}
		public ITerminalNode DECODE() { return GetToken(oracleParser.DECODE, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ITerminalNode CHR() { return GetToken(oracleParser.CHR, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public ITerminalNode USING() { return GetToken(oracleParser.USING, 0); }
		public ITerminalNode NCHAR_CS() { return GetToken(oracleParser.NCHAR_CS, 0); }
		public ITerminalNode NVL() { return GetToken(oracleParser.NVL, 0); }
		public ITerminalNode TRIM() { return GetToken(oracleParser.TRIM, 0); }
		public ITerminalNode FROM() { return GetToken(oracleParser.FROM, 0); }
		public ITerminalNode LEADING() { return GetToken(oracleParser.LEADING, 0); }
		public ITerminalNode TRAILING() { return GetToken(oracleParser.TRAILING, 0); }
		public ITerminalNode BOTH() { return GetToken(oracleParser.BOTH, 0); }
		public ITerminalNode TO_DATE() { return GetToken(oracleParser.TO_DATE, 0); }
		public String_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_functionContext string_function() {
		String_functionContext _localctx = new String_functionContext(Context, State);
		EnterRule(_localctx, 678, RULE_string_function);
		int _la;
		try {
			State = 5266;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUBSTR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5196; Match(SUBSTR);
				State = 5197; Match(LEFT_PAREN);
				State = 5198; expression();
				State = 5199; Match(COMMA);
				State = 5200; expression();
				State = 5203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5201; Match(COMMA);
					State = 5202; expression();
					}
				}

				State = 5205; Match(RIGHT_PAREN);
				}
				break;
			case TO_CHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5207; Match(TO_CHAR);
				State = 5208; Match(LEFT_PAREN);
				State = 5212;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,716,Context) ) {
				case 1:
					{
					State = 5209; table_element();
					}
					break;
				case 2:
					{
					State = 5210; standard_function();
					}
					break;
				case 3:
					{
					State = 5211; expression();
					}
					break;
				}
				State = 5216;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,717,Context) ) {
				case 1:
					{
					State = 5214; Match(COMMA);
					State = 5215; quoted_string();
					}
					break;
				}
				State = 5220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5218; Match(COMMA);
					State = 5219; quoted_string();
					}
				}

				State = 5222; Match(RIGHT_PAREN);
				}
				break;
			case DECODE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5224; Match(DECODE);
				State = 5225; Match(LEFT_PAREN);
				State = 5226; expressions();
				State = 5227; Match(RIGHT_PAREN);
				}
				break;
			case CHR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5229; Match(CHR);
				State = 5230; Match(LEFT_PAREN);
				State = 5231; concatenation(0);
				State = 5232; Match(USING);
				State = 5233; Match(NCHAR_CS);
				State = 5234; Match(RIGHT_PAREN);
				}
				break;
			case NVL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5236; Match(NVL);
				State = 5237; Match(LEFT_PAREN);
				State = 5238; expression();
				State = 5239; Match(COMMA);
				State = 5240; expression();
				State = 5241; Match(RIGHT_PAREN);
				}
				break;
			case TRIM:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5243; Match(TRIM);
				State = 5244; Match(LEFT_PAREN);
				State = 5252;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,721,Context) ) {
				case 1:
					{
					State = 5246;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						State = 5245;
						_la = TokenStream.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 5249;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						State = 5248; quoted_string();
						}
					}

					State = 5251; Match(FROM);
					}
					break;
				}
				State = 5254; concatenation(0);
				State = 5255; Match(RIGHT_PAREN);
				}
				break;
			case TO_DATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5257; Match(TO_DATE);
				State = 5258; Match(LEFT_PAREN);
				State = 5259; expression();
				State = 5262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5260; Match(COMMA);
					State = 5261; quoted_string();
					}
				}

				State = 5264; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Standard_functionContext : ParserRuleContext {
		public String_functionContext string_function() {
			return GetRuleContext<String_functionContext>(0);
		}
		public Numeric_function_wrapperContext numeric_function_wrapper() {
			return GetRuleContext<Numeric_function_wrapperContext>(0);
		}
		public Other_functionContext other_function() {
			return GetRuleContext<Other_functionContext>(0);
		}
		public Standard_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standard_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandard_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Standard_functionContext standard_function() {
		Standard_functionContext _localctx = new Standard_functionContext(Context, State);
		EnterRule(_localctx, 680, RULE_standard_function);
		try {
			State = 5271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,724,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5268; string_function();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5269; numeric_function_wrapper();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5270; other_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_function_wrapperContext : ParserRuleContext {
		public Numeric_functionContext numeric_function() {
			return GetRuleContext<Numeric_functionContext>(0);
		}
		public Single_column_for_loopContext single_column_for_loop() {
			return GetRuleContext<Single_column_for_loopContext>(0);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return GetRuleContext<Multi_column_for_loopContext>(0);
		}
		public Numeric_function_wrapperContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_function_wrapper; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_function_wrapper(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_function_wrapperContext numeric_function_wrapper() {
		Numeric_function_wrapperContext _localctx = new Numeric_function_wrapperContext(Context, State);
		EnterRule(_localctx, 682, RULE_numeric_function_wrapper);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5273; numeric_function();
			State = 5276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,725,Context) ) {
			case 1:
				{
				State = 5274; single_column_for_loop();
				}
				break;
			case 2:
				{
				State = 5275; multi_column_for_loop();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_functionContext : ParserRuleContext {
		public ITerminalNode SUM() { return GetToken(oracleParser.SUM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DISTINCT() { return GetToken(oracleParser.DISTINCT, 0); }
		public ITerminalNode ALL() { return GetToken(oracleParser.ALL, 0); }
		public ITerminalNode COUNT() { return GetToken(oracleParser.COUNT, 0); }
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(oracleParser.UNIQUE, 0); }
		public ITerminalNode ROUND() { return GetToken(oracleParser.ROUND, 0); }
		public ITerminalNode UNSIGNED_INTEGER() { return GetToken(oracleParser.UNSIGNED_INTEGER, 0); }
		public ITerminalNode AVG() { return GetToken(oracleParser.AVG, 0); }
		public ITerminalNode MAX() { return GetToken(oracleParser.MAX, 0); }
		public ITerminalNode LEAST() { return GetToken(oracleParser.LEAST, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ITerminalNode GREATEST() { return GetToken(oracleParser.GREATEST, 0); }
		public Numeric_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_functionContext numeric_function() {
		Numeric_functionContext _localctx = new Numeric_functionContext(Context, State);
		EnterRule(_localctx, 684, RULE_numeric_function);
		int _la;
		try {
			State = 5336;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5278; Match(SUM);
				State = 5279; Match(LEFT_PAREN);
				State = 5281;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,726,Context) ) {
				case 1:
					{
					State = 5280;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5283; expression();
				State = 5284; Match(RIGHT_PAREN);
				}
				break;
			case COUNT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5286; Match(COUNT);
				State = 5287; Match(LEFT_PAREN);
				State = 5295;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASTERISK:
					{
					State = 5288; Match(ASTERISK);
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case DECODE:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case NVL:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROUND:
				case ROW_NUMBER:
				case SUBSTR:
				case TO_CHAR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case LEAST:
				case GREATEST:
				case TO_DATE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case RIGHT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					State = 5293;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNIQUE - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
						{
						State = 5290;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,727,Context) ) {
						case 1:
							{
							State = 5289;
							_la = TokenStream.LA(1);
							if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						}
						State = 5292; concatenation(0);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5297; Match(RIGHT_PAREN);
				State = 5299;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,730,Context) ) {
				case 1:
					{
					State = 5298; over_clause();
					}
					break;
				}
				}
				break;
			case ROUND:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5301; Match(ROUND);
				State = 5302; Match(LEFT_PAREN);
				State = 5303; expression();
				State = 5306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5304; Match(COMMA);
					State = 5305; Match(UNSIGNED_INTEGER);
					}
				}

				State = 5308; Match(RIGHT_PAREN);
				}
				break;
			case AVG:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5310; Match(AVG);
				State = 5311; Match(LEFT_PAREN);
				State = 5313;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,732,Context) ) {
				case 1:
					{
					State = 5312;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5315; expression();
				State = 5316; Match(RIGHT_PAREN);
				}
				break;
			case MAX:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5318; Match(MAX);
				State = 5319; Match(LEFT_PAREN);
				State = 5321;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,733,Context) ) {
				case 1:
					{
					State = 5320;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5323; expression();
				State = 5324; Match(RIGHT_PAREN);
				}
				break;
			case LEAST:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5326; Match(LEAST);
				State = 5327; Match(LEFT_PAREN);
				State = 5328; expressions();
				State = 5329; Match(RIGHT_PAREN);
				}
				break;
			case GREATEST:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5331; Match(GREATEST);
				State = 5332; Match(LEFT_PAREN);
				State = 5333; expressions();
				State = 5334; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_functionContext : ParserRuleContext {
		public Over_clause_keywordContext over_clause_keyword() {
			return GetRuleContext<Over_clause_keywordContext>(0);
		}
		public Function_argument_analyticContext function_argument_analytic() {
			return GetRuleContext<Function_argument_analyticContext>(0);
		}
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public Regular_idContext regular_id() {
			return GetRuleContext<Regular_idContext>(0);
		}
		public Function_argument_modelingContext function_argument_modeling() {
			return GetRuleContext<Function_argument_modelingContext>(0);
		}
		public Using_clauseContext using_clause() {
			return GetRuleContext<Using_clauseContext>(0);
		}
		public ITerminalNode COUNT() { return GetToken(oracleParser.COUNT, 0); }
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public ITerminalNode DISTINCT() { return GetToken(oracleParser.DISTINCT, 0); }
		public ITerminalNode UNIQUE() { return GetToken(oracleParser.UNIQUE, 0); }
		public ITerminalNode ALL() { return GetToken(oracleParser.ALL, 0); }
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode CAST() { return GetToken(oracleParser.CAST, 0); }
		public ITerminalNode XMLCAST() { return GetToken(oracleParser.XMLCAST, 0); }
		public ITerminalNode MULTISET() { return GetToken(oracleParser.MULTISET, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode COALESCE() { return GetToken(oracleParser.COALESCE, 0); }
		public Table_elementContext table_element() {
			return GetRuleContext<Table_elementContext>(0);
		}
		public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		public Quoted_stringContext quoted_string() {
			return GetRuleContext<Quoted_stringContext>(0);
		}
		public ITerminalNode COLLECT() { return GetToken(oracleParser.COLLECT, 0); }
		public Collect_order_by_partContext collect_order_by_part() {
			return GetRuleContext<Collect_order_by_partContext>(0);
		}
		public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
			return GetRuleContext<Within_or_over_clause_keywordContext>(0);
		}
		public Function_argumentContext function_argument() {
			return GetRuleContext<Function_argumentContext>(0);
		}
		public Within_or_over_partContext[] within_or_over_part() {
			return GetRuleContexts<Within_or_over_partContext>();
		}
		public Within_or_over_partContext within_or_over_part(int i) {
			return GetRuleContext<Within_or_over_partContext>(i);
		}
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode PERCENT_ISOPEN() { return GetToken(oracleParser.PERCENT_ISOPEN, 0); }
		public ITerminalNode PERCENT_FOUND() { return GetToken(oracleParser.PERCENT_FOUND, 0); }
		public ITerminalNode PERCENT_NOTFOUND() { return GetToken(oracleParser.PERCENT_NOTFOUND, 0); }
		public ITerminalNode PERCENT_ROWCOUNT() { return GetToken(oracleParser.PERCENT_ROWCOUNT, 0); }
		public ITerminalNode DECOMPOSE() { return GetToken(oracleParser.DECOMPOSE, 0); }
		public ITerminalNode CANONICAL() { return GetToken(oracleParser.CANONICAL, 0); }
		public ITerminalNode COMPATIBILITY() { return GetToken(oracleParser.COMPATIBILITY, 0); }
		public ITerminalNode EXTRACT() { return GetToken(oracleParser.EXTRACT, 0); }
		public ITerminalNode FROM() { return GetToken(oracleParser.FROM, 0); }
		public ITerminalNode FIRST_VALUE() { return GetToken(oracleParser.FIRST_VALUE, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(oracleParser.LAST_VALUE, 0); }
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
			return GetRuleContext<Respect_or_ignore_nullsContext>(0);
		}
		public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
			return GetRuleContext<Standard_prediction_function_keywordContext>(0);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Cost_matrix_clauseContext cost_matrix_clause() {
			return GetRuleContext<Cost_matrix_clauseContext>(0);
		}
		public ITerminalNode TRANSLATE() { return GetToken(oracleParser.TRANSLATE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode USING() { return GetToken(oracleParser.USING, 0); }
		public ITerminalNode CHAR_CS() { return GetToken(oracleParser.CHAR_CS, 0); }
		public ITerminalNode NCHAR_CS() { return GetToken(oracleParser.NCHAR_CS, 0); }
		public ITerminalNode TREAT() { return GetToken(oracleParser.TREAT, 0); }
		public ITerminalNode REF() { return GetToken(oracleParser.REF, 0); }
		public ITerminalNode TRIM() { return GetToken(oracleParser.TRIM, 0); }
		public ITerminalNode LEADING() { return GetToken(oracleParser.LEADING, 0); }
		public ITerminalNode TRAILING() { return GetToken(oracleParser.TRAILING, 0); }
		public ITerminalNode BOTH() { return GetToken(oracleParser.BOTH, 0); }
		public ITerminalNode XMLAGG() { return GetToken(oracleParser.XMLAGG, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public General_element_partContext general_element_part() {
			return GetRuleContext<General_element_partContext>(0);
		}
		public ITerminalNode XMLCOLATTVAL() { return GetToken(oracleParser.XMLCOLATTVAL, 0); }
		public ITerminalNode XMLFOREST() { return GetToken(oracleParser.XMLFOREST, 0); }
		public Xml_multiuse_expression_elementContext[] xml_multiuse_expression_element() {
			return GetRuleContexts<Xml_multiuse_expression_elementContext>();
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return GetRuleContext<Xml_multiuse_expression_elementContext>(i);
		}
		public ITerminalNode XMLELEMENT() { return GetToken(oracleParser.XMLELEMENT, 0); }
		public Xml_attributes_clauseContext xml_attributes_clause() {
			return GetRuleContext<Xml_attributes_clauseContext>(0);
		}
		public ITerminalNode ENTITYESCAPING() { return GetToken(oracleParser.ENTITYESCAPING, 0); }
		public ITerminalNode NOENTITYESCAPING() { return GetToken(oracleParser.NOENTITYESCAPING, 0); }
		public ITerminalNode NAME() { return GetToken(oracleParser.NAME, 0); }
		public ITerminalNode EVALNAME() { return GetToken(oracleParser.EVALNAME, 0); }
		public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		public ITerminalNode XMLEXISTS() { return GetToken(oracleParser.XMLEXISTS, 0); }
		public Xml_passing_clauseContext xml_passing_clause() {
			return GetRuleContext<Xml_passing_clauseContext>(0);
		}
		public ITerminalNode XMLPARSE() { return GetToken(oracleParser.XMLPARSE, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(oracleParser.DOCUMENT, 0); }
		public ITerminalNode CONTENT() { return GetToken(oracleParser.CONTENT, 0); }
		public ITerminalNode WELLFORMED() { return GetToken(oracleParser.WELLFORMED, 0); }
		public ITerminalNode XMLPI() { return GetToken(oracleParser.XMLPI, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode XMLQUERY() { return GetToken(oracleParser.XMLQUERY, 0); }
		public ITerminalNode RETURNING() { return GetToken(oracleParser.RETURNING, 0); }
		public ITerminalNode NULL() { return GetToken(oracleParser.NULL, 0); }
		public ITerminalNode ON() { return GetToken(oracleParser.ON, 0); }
		public ITerminalNode EMPTY() { return GetToken(oracleParser.EMPTY, 0); }
		public ITerminalNode XMLROOT() { return GetToken(oracleParser.XMLROOT, 0); }
		public Xmlroot_param_version_partContext xmlroot_param_version_part() {
			return GetRuleContext<Xmlroot_param_version_partContext>(0);
		}
		public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
			return GetRuleContext<Xmlroot_param_standalone_partContext>(0);
		}
		public ITerminalNode XMLSERIALIZE() { return GetToken(oracleParser.XMLSERIALIZE, 0); }
		public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
			return GetRuleContext<Xmlserialize_param_enconding_partContext>(0);
		}
		public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
			return GetRuleContext<Xmlserialize_param_version_partContext>(0);
		}
		public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
			return GetRuleContext<Xmlserialize_param_ident_partContext>(0);
		}
		public ITerminalNode DEFAULTS() { return GetToken(oracleParser.DEFAULTS, 0); }
		public ITerminalNode HIDE() { return GetToken(oracleParser.HIDE, 0); }
		public ITerminalNode SHOW() { return GetToken(oracleParser.SHOW, 0); }
		public ITerminalNode XMLTABLE() { return GetToken(oracleParser.XMLTABLE, 0); }
		public Xml_namespaces_clauseContext xml_namespaces_clause() {
			return GetRuleContext<Xml_namespaces_clauseContext>(0);
		}
		public ITerminalNode COLUMNS() { return GetToken(oracleParser.COLUMNS, 0); }
		public Xml_table_columnContext[] xml_table_column() {
			return GetRuleContexts<Xml_table_columnContext>();
		}
		public Xml_table_columnContext xml_table_column(int i) {
			return GetRuleContext<Xml_table_columnContext>(i);
		}
		public Other_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOther_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Other_functionContext other_function() {
		Other_functionContext _localctx = new Other_functionContext(Context, State);
		EnterRule(_localctx, 686, RULE_other_function);
		int _la;
		try {
			int _alt;
			State = 5653;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,789,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5338; over_clause_keyword();
				State = 5339; function_argument_analytic();
				State = 5341;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,735,Context) ) {
				case 1:
					{
					State = 5340; over_clause();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5343; regular_id();
				State = 5344; function_argument_modeling();
				State = 5346;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,736,Context) ) {
				case 1:
					{
					State = 5345; using_clause();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5348; Match(COUNT);
				State = 5349; Match(LEFT_PAREN);
				State = 5355;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASTERISK:
					{
					State = 5350; Match(ASTERISK);
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case DECODE:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case NVL:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROUND:
				case ROW_NUMBER:
				case SUBSTR:
				case TO_CHAR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case LEAST:
				case GREATEST:
				case TO_DATE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					State = 5352;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,737,Context) ) {
					case 1:
						{
						State = 5351;
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					State = 5354; concatenation(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5357; Match(RIGHT_PAREN);
				State = 5359;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,739,Context) ) {
				case 1:
					{
					State = 5358; over_clause();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5361;
				_la = TokenStream.LA(1);
				if ( !(_la==CAST || _la==XMLCAST) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5362; Match(LEFT_PAREN);
				State = 5369;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,740,Context) ) {
				case 1:
					{
					State = 5363; Match(MULTISET);
					State = 5364; Match(LEFT_PAREN);
					State = 5365; subquery();
					State = 5366; Match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					State = 5368; concatenation(0);
					}
					break;
				}
				State = 5371; Match(AS);
				State = 5372; type_spec();
				State = 5373; Match(RIGHT_PAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5375; Match(COALESCE);
				State = 5376; Match(LEFT_PAREN);
				State = 5377; table_element();
				State = 5383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5378; Match(COMMA);
					State = 5381;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						State = 5379; numeric();
						}
						break;
					case NATIONAL_CHAR_STRING_LIT:
					case CHAR_STRING:
						{
						State = 5380; quoted_string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 5385; Match(RIGHT_PAREN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5387; Match(COLLECT);
				State = 5388; Match(LEFT_PAREN);
				State = 5390;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,743,Context) ) {
				case 1:
					{
					State = 5389;
					_la = TokenStream.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5392; concatenation(0);
				State = 5394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 5393; collect_order_by_part();
					}
				}

				State = 5396; Match(RIGHT_PAREN);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5398; within_or_over_clause_keyword();
				State = 5399; function_argument();
				State = 5401;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 5400; within_or_over_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5403;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,745,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5405; cursor_name();
				State = 5406;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 381)) & ~0x3f) == 0 && ((1L << (_la - 381)) & ((1L << (PERCENT_FOUND - 381)) | (1L << (PERCENT_ISOPEN - 381)) | (1L << (PERCENT_NOTFOUND - 381)) | (1L << (PERCENT_ROWCOUNT - 381)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5408; Match(DECOMPOSE);
				State = 5409; Match(LEFT_PAREN);
				State = 5410; concatenation(0);
				State = 5412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CANONICAL || _la==COMPATIBILITY) {
					{
					State = 5411;
					_la = TokenStream.LA(1);
					if ( !(_la==CANONICAL || _la==COMPATIBILITY) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5414; Match(RIGHT_PAREN);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5416; Match(EXTRACT);
				State = 5417; Match(LEFT_PAREN);
				State = 5418; regular_id();
				State = 5419; Match(FROM);
				State = 5420; concatenation(0);
				State = 5421; Match(RIGHT_PAREN);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5423;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5424; function_argument_analytic();
				State = 5426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					State = 5425; respect_or_ignore_nulls();
					}
				}

				State = 5428; over_clause();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5430; standard_prediction_function_keyword();
				State = 5431; Match(LEFT_PAREN);
				State = 5432; expressions();
				State = 5434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COST) {
					{
					State = 5433; cost_matrix_clause();
					}
				}

				State = 5437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 5436; using_clause();
					}
				}

				State = 5439; Match(RIGHT_PAREN);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5441; Match(TRANSLATE);
				State = 5442; Match(LEFT_PAREN);
				State = 5443; expression();
				State = 5446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 5444; Match(USING);
					State = 5445;
					_la = TokenStream.LA(1);
					if ( !(_la==CHAR_CS || _la==NCHAR_CS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5448; Match(COMMA);
					State = 5449; expression();
					}
					}
					State = 5454;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5455; Match(RIGHT_PAREN);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 5457; Match(TREAT);
				State = 5458; Match(LEFT_PAREN);
				State = 5459; expression();
				State = 5460; Match(AS);
				State = 5462;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,752,Context) ) {
				case 1:
					{
					State = 5461; Match(REF);
					}
					break;
				}
				State = 5464; type_spec();
				State = 5465; Match(RIGHT_PAREN);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 5467; Match(TRIM);
				State = 5468; Match(LEFT_PAREN);
				State = 5476;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,755,Context) ) {
				case 1:
					{
					State = 5470;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						State = 5469;
						_la = TokenStream.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 5473;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						State = 5472; quoted_string();
						}
					}

					State = 5475; Match(FROM);
					}
					break;
				}
				State = 5478; concatenation(0);
				State = 5479; Match(RIGHT_PAREN);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 5481; Match(XMLAGG);
				State = 5482; Match(LEFT_PAREN);
				State = 5483; expression();
				State = 5485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 5484; order_by_clause();
					}
				}

				State = 5487; Match(RIGHT_PAREN);
				State = 5490;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,757,Context) ) {
				case 1:
					{
					State = 5488; Match(PERIOD);
					State = 5489; general_element_part();
					}
					break;
				}
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 5492;
				_la = TokenStream.LA(1);
				if ( !(_la==XMLCOLATTVAL || _la==XMLFOREST) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5493; Match(LEFT_PAREN);
				State = 5498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5495;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 5494; Match(COMMA);
						}
					}

					State = 5497; xml_multiuse_expression_element();
					}
					}
					State = 5500;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (COMMA - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
				State = 5502; Match(RIGHT_PAREN);
				State = 5505;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,760,Context) ) {
				case 1:
					{
					State = 5503; Match(PERIOD);
					State = 5504; general_element_part();
					}
					break;
				}
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 5507; Match(XMLELEMENT);
				State = 5508; Match(LEFT_PAREN);
				State = 5510;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,761,Context) ) {
				case 1:
					{
					State = 5509;
					_la = TokenStream.LA(1);
					if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5513;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,762,Context) ) {
				case 1:
					{
					State = 5512;
					_la = TokenStream.LA(1);
					if ( !(_la==EVALNAME || _la==NAME) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5515; expression();
				State = 5518;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,763,Context) ) {
				case 1:
					{
					State = 5516; Match(COMMA);
					State = 5517; xml_attributes_clause();
					}
					break;
				}
				State = 5527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5520; Match(COMMA);
					State = 5521; expression();
					State = 5523;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
						{
						State = 5522; column_alias();
						}
					}

					}
					}
					State = 5529;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5530; Match(RIGHT_PAREN);
				State = 5533;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,766,Context) ) {
				case 1:
					{
					State = 5531; Match(PERIOD);
					State = 5532; general_element_part();
					}
					break;
				}
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 5535; Match(XMLEXISTS);
				State = 5536; Match(LEFT_PAREN);
				State = 5537; expression();
				State = 5539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PASSING) {
					{
					State = 5538; xml_passing_clause();
					}
				}

				State = 5541; Match(RIGHT_PAREN);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 5543; Match(XMLPARSE);
				State = 5544; Match(LEFT_PAREN);
				State = 5545;
				_la = TokenStream.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5546; concatenation(0);
				State = 5548;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WELLFORMED) {
					{
					State = 5547; Match(WELLFORMED);
					}
				}

				State = 5550; Match(RIGHT_PAREN);
				State = 5553;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,769,Context) ) {
				case 1:
					{
					State = 5551; Match(PERIOD);
					State = 5552; general_element_part();
					}
					break;
				}
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 5555; Match(XMLPI);
				State = 5556; Match(LEFT_PAREN);
				State = 5561;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NAME:
					{
					State = 5557; Match(NAME);
					State = 5558; identifier();
					}
					break;
				case EVALNAME:
					{
					State = 5559; Match(EVALNAME);
					State = 5560; concatenation(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5563; Match(COMMA);
					State = 5564; concatenation(0);
					}
				}

				State = 5567; Match(RIGHT_PAREN);
				State = 5570;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,772,Context) ) {
				case 1:
					{
					State = 5568; Match(PERIOD);
					State = 5569; general_element_part();
					}
					break;
				}
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 5572; Match(XMLQUERY);
				State = 5573; Match(LEFT_PAREN);
				State = 5574; concatenation(0);
				State = 5576;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PASSING) {
					{
					State = 5575; xml_passing_clause();
					}
				}

				State = 5578; Match(RETURNING);
				State = 5579; Match(CONTENT);
				State = 5583;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NULL) {
					{
					State = 5580; Match(NULL);
					State = 5581; Match(ON);
					State = 5582; Match(EMPTY);
					}
				}

				State = 5585; Match(RIGHT_PAREN);
				State = 5588;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,775,Context) ) {
				case 1:
					{
					State = 5586; Match(PERIOD);
					State = 5587; general_element_part();
					}
					break;
				}
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 5590; Match(XMLROOT);
				State = 5591; Match(LEFT_PAREN);
				State = 5592; concatenation(0);
				State = 5595;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,776,Context) ) {
				case 1:
					{
					State = 5593; Match(COMMA);
					State = 5594; xmlroot_param_version_part();
					}
					break;
				}
				State = 5599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5597; Match(COMMA);
					State = 5598; xmlroot_param_standalone_part();
					}
				}

				State = 5601; Match(RIGHT_PAREN);
				State = 5604;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,778,Context) ) {
				case 1:
					{
					State = 5602; Match(PERIOD);
					State = 5603; general_element_part();
					}
					break;
				}
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 5606; Match(XMLSERIALIZE);
				State = 5607; Match(LEFT_PAREN);
				State = 5608;
				_la = TokenStream.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5609; concatenation(0);
				State = 5612;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 5610; Match(AS);
					State = 5611; type_spec();
					}
				}

				State = 5615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ENCODING) {
					{
					State = 5614; xmlserialize_param_enconding_part();
					}
				}

				State = 5618;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VERSION) {
					{
					State = 5617; xmlserialize_param_version_part();
					}
				}

				State = 5621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDENT || _la==NO) {
					{
					State = 5620; xmlserialize_param_ident_part();
					}
				}

				State = 5625;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HIDE || _la==SHOW) {
					{
					State = 5623;
					_la = TokenStream.LA(1);
					if ( !(_la==HIDE || _la==SHOW) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5624; Match(DEFAULTS);
					}
				}

				State = 5627; Match(RIGHT_PAREN);
				State = 5630;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,784,Context) ) {
				case 1:
					{
					State = 5628; Match(PERIOD);
					State = 5629; general_element_part();
					}
					break;
				}
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 5632; Match(XMLTABLE);
				State = 5633; Match(LEFT_PAREN);
				State = 5635;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,785,Context) ) {
				case 1:
					{
					State = 5634; xml_namespaces_clause();
					}
					break;
				}
				State = 5637; concatenation(0);
				State = 5639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PASSING) {
					{
					State = 5638; xml_passing_clause();
					}
				}

				State = 5646;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMNS) {
					{
					State = 5641; Match(COLUMNS);
					State = 5642; xml_table_column();
					{
					State = 5643; Match(COMMA);
					State = 5644; xml_table_column();
					}
					}
				}

				State = 5648; Match(RIGHT_PAREN);
				State = 5651;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,788,Context) ) {
				case 1:
					{
					State = 5649; Match(PERIOD);
					State = 5650; general_element_part();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clause_keywordContext : ParserRuleContext {
		public ITerminalNode AVG() { return GetToken(oracleParser.AVG, 0); }
		public ITerminalNode CORR() { return GetToken(oracleParser.CORR, 0); }
		public ITerminalNode LAG() { return GetToken(oracleParser.LAG, 0); }
		public ITerminalNode LEAD() { return GetToken(oracleParser.LEAD, 0); }
		public ITerminalNode MAX() { return GetToken(oracleParser.MAX, 0); }
		public ITerminalNode MEDIAN() { return GetToken(oracleParser.MEDIAN, 0); }
		public ITerminalNode MIN() { return GetToken(oracleParser.MIN, 0); }
		public ITerminalNode NTILE() { return GetToken(oracleParser.NTILE, 0); }
		public ITerminalNode RATIO_TO_REPORT() { return GetToken(oracleParser.RATIO_TO_REPORT, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(oracleParser.ROW_NUMBER, 0); }
		public ITerminalNode SUM() { return GetToken(oracleParser.SUM, 0); }
		public ITerminalNode VARIANCE() { return GetToken(oracleParser.VARIANCE, 0); }
		public ITerminalNode REGR_() { return GetToken(oracleParser.REGR_, 0); }
		public ITerminalNode STDDEV() { return GetToken(oracleParser.STDDEV, 0); }
		public ITerminalNode VAR_() { return GetToken(oracleParser.VAR_, 0); }
		public ITerminalNode COVAR_() { return GetToken(oracleParser.COVAR_, 0); }
		public Over_clause_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause_keyword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver_clause_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Over_clause_keywordContext over_clause_keyword() {
		Over_clause_keywordContext _localctx = new Over_clause_keywordContext(Context, State);
		EnterRule(_localctx, 688, RULE_over_clause_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5655;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 624)) & ~0x3f) == 0 && ((1L << (_la - 624)) & ((1L << (AVG - 624)) | (1L << (CORR - 624)) | (1L << (COVAR_ - 624)) | (1L << (LAG - 624)) | (1L << (LEAD - 624)) | (1L << (MAX - 624)) | (1L << (MEDIAN - 624)) | (1L << (MIN - 624)) | (1L << (NTILE - 624)) | (1L << (RATIO_TO_REPORT - 624)) | (1L << (REGR_ - 624)) | (1L << (ROW_NUMBER - 624)) | (1L << (SUM - 624)) | (1L << (STDDEV - 624)) | (1L << (VAR_ - 624)) | (1L << (VARIANCE - 624)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Within_or_over_clause_keywordContext : ParserRuleContext {
		public ITerminalNode CUME_DIST() { return GetToken(oracleParser.CUME_DIST, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(oracleParser.DENSE_RANK, 0); }
		public ITerminalNode LISTAGG() { return GetToken(oracleParser.LISTAGG, 0); }
		public ITerminalNode PERCENT_RANK() { return GetToken(oracleParser.PERCENT_RANK, 0); }
		public ITerminalNode PERCENTILE_CONT() { return GetToken(oracleParser.PERCENTILE_CONT, 0); }
		public ITerminalNode PERCENTILE_DISC() { return GetToken(oracleParser.PERCENTILE_DISC, 0); }
		public ITerminalNode RANK() { return GetToken(oracleParser.RANK, 0); }
		public Within_or_over_clause_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_within_or_over_clause_keyword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithin_or_over_clause_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
		Within_or_over_clause_keywordContext _localctx = new Within_or_over_clause_keywordContext(Context, State);
		EnterRule(_localctx, 690, RULE_within_or_over_clause_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5657;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 617)) & ~0x3f) == 0 && ((1L << (_la - 617)) & ((1L << (CUME_DIST - 617)) | (1L << (DENSE_RANK - 617)) | (1L << (LISTAGG - 617)) | (1L << (PERCENT_RANK - 617)) | (1L << (PERCENTILE_CONT - 617)) | (1L << (PERCENTILE_DISC - 617)) | (1L << (RANK - 617)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Standard_prediction_function_keywordContext : ParserRuleContext {
		public ITerminalNode PREDICTION() { return GetToken(oracleParser.PREDICTION, 0); }
		public ITerminalNode PREDICTION_BOUNDS() { return GetToken(oracleParser.PREDICTION_BOUNDS, 0); }
		public ITerminalNode PREDICTION_COST() { return GetToken(oracleParser.PREDICTION_COST, 0); }
		public ITerminalNode PREDICTION_DETAILS() { return GetToken(oracleParser.PREDICTION_DETAILS, 0); }
		public ITerminalNode PREDICTION_PROBABILITY() { return GetToken(oracleParser.PREDICTION_PROBABILITY, 0); }
		public ITerminalNode PREDICTION_SET() { return GetToken(oracleParser.PREDICTION_SET, 0); }
		public Standard_prediction_function_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standard_prediction_function_keyword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandard_prediction_function_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
		Standard_prediction_function_keywordContext _localctx = new Standard_prediction_function_keywordContext(Context, State);
		EnterRule(_localctx, 692, RULE_standard_prediction_function_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5659;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 611)) & ~0x3f) == 0 && ((1L << (_la - 611)) & ((1L << (PREDICTION - 611)) | (1L << (PREDICTION_BOUNDS - 611)) | (1L << (PREDICTION_COST - 611)) | (1L << (PREDICTION_DETAILS - 611)) | (1L << (PREDICTION_PROBABILITY - 611)) | (1L << (PREDICTION_SET - 611)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		public ITerminalNode OVER() { return GetToken(oracleParser.OVER, 0); }
		public Query_partition_clauseContext query_partition_clause() {
			return GetRuleContext<Query_partition_clauseContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Windowing_clauseContext windowing_clause() {
			return GetRuleContext<Windowing_clauseContext>(0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(Context, State);
		EnterRule(_localctx, 694, RULE_over_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5661; Match(OVER);
			State = 5662; Match(LEFT_PAREN);
			State = 5664;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 5663; query_partition_clause();
				}
			}

			State = 5670;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 5666; order_by_clause();
				State = 5668;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					State = 5667; windowing_clause();
					}
				}

				}
			}

			State = 5672; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Windowing_clauseContext : ParserRuleContext {
		public Windowing_typeContext windowing_type() {
			return GetRuleContext<Windowing_typeContext>(0);
		}
		public ITerminalNode BETWEEN() { return GetToken(oracleParser.BETWEEN, 0); }
		public Windowing_elementsContext[] windowing_elements() {
			return GetRuleContexts<Windowing_elementsContext>();
		}
		public Windowing_elementsContext windowing_elements(int i) {
			return GetRuleContext<Windowing_elementsContext>(i);
		}
		public ITerminalNode AND() { return GetToken(oracleParser.AND, 0); }
		public Windowing_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowing_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowing_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Windowing_clauseContext windowing_clause() {
		Windowing_clauseContext _localctx = new Windowing_clauseContext(Context, State);
		EnterRule(_localctx, 696, RULE_windowing_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5674; windowing_type();
			State = 5681;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BETWEEN:
				{
				State = 5675; Match(BETWEEN);
				State = 5676; windowing_elements();
				State = 5677; Match(AND);
				State = 5678; windowing_elements();
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 5680; windowing_elements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Windowing_typeContext : ParserRuleContext {
		public ITerminalNode ROWS() { return GetToken(oracleParser.ROWS, 0); }
		public ITerminalNode RANGE() { return GetToken(oracleParser.RANGE, 0); }
		public Windowing_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowing_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowing_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Windowing_typeContext windowing_type() {
		Windowing_typeContext _localctx = new Windowing_typeContext(Context, State);
		EnterRule(_localctx, 698, RULE_windowing_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5683;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Windowing_elementsContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED() { return GetToken(oracleParser.UNBOUNDED, 0); }
		public ITerminalNode PRECEDING() { return GetToken(oracleParser.PRECEDING, 0); }
		public ITerminalNode CURRENT() { return GetToken(oracleParser.CURRENT, 0); }
		public ITerminalNode ROW() { return GetToken(oracleParser.ROW, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public ITerminalNode FOLLOWING() { return GetToken(oracleParser.FOLLOWING, 0); }
		public Windowing_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowing_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowing_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Windowing_elementsContext windowing_elements() {
		Windowing_elementsContext _localctx = new Windowing_elementsContext(Context, State);
		EnterRule(_localctx, 700, RULE_windowing_elements);
		int _la;
		try {
			State = 5692;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,794,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5685; Match(UNBOUNDED);
				State = 5686; Match(PRECEDING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5687; Match(CURRENT);
				State = 5688; Match(ROW);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5689; concatenation(0);
				State = 5690;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_clauseContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(oracleParser.USING, 0); }
		public Using_elementContext[] using_element() {
			return GetRuleContexts<Using_elementContext>();
		}
		public Using_elementContext using_element(int i) {
			return GetRuleContext<Using_elementContext>(i);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_clauseContext using_clause() {
		Using_clauseContext _localctx = new Using_clauseContext(Context, State);
		EnterRule(_localctx, 702, RULE_using_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5694; Match(USING);
			State = 5704;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASTERISK:
				{
				State = 5695; Match(ASTERISK);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case IN:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case COMMA:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 5700;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 5697;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5696; Match(COMMA);
							}
						}

						State = 5699; using_element();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5702;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,796,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_elementContext : ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return GetRuleContext<Select_list_elementsContext>(0);
		}
		public ITerminalNode IN() { return GetToken(oracleParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(oracleParser.OUT, 0); }
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public Using_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_elementContext using_element() {
		Using_elementContext _localctx = new Using_elementContext(Context, State);
		EnterRule(_localctx, 704, RULE_using_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5711;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,799,Context) ) {
			case 1:
				{
				State = 5706; Match(IN);
				State = 5708;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,798,Context) ) {
				case 1:
					{
					State = 5707; Match(OUT);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 5710; Match(OUT);
				}
				break;
			}
			State = 5713; select_list_elements();
			State = 5715;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,800,Context) ) {
			case 1:
				{
				State = 5714; column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collect_order_by_partContext : ParserRuleContext {
		public ITerminalNode ORDER() { return GetToken(oracleParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(oracleParser.BY, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Collect_order_by_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collect_order_by_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollect_order_by_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collect_order_by_partContext collect_order_by_part() {
		Collect_order_by_partContext _localctx = new Collect_order_by_partContext(Context, State);
		EnterRule(_localctx, 706, RULE_collect_order_by_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5717; Match(ORDER);
			State = 5718; Match(BY);
			State = 5719; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Within_or_over_partContext : ParserRuleContext {
		public ITerminalNode WITHIN() { return GetToken(oracleParser.WITHIN, 0); }
		public ITerminalNode GROUP() { return GetToken(oracleParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public Within_or_over_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_within_or_over_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithin_or_over_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Within_or_over_partContext within_or_over_part() {
		Within_or_over_partContext _localctx = new Within_or_over_partContext(Context, State);
		EnterRule(_localctx, 708, RULE_within_or_over_part);
		try {
			State = 5728;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITHIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5721; Match(WITHIN);
				State = 5722; Match(GROUP);
				State = 5723; Match(LEFT_PAREN);
				State = 5724; order_by_clause();
				State = 5725; Match(RIGHT_PAREN);
				}
				break;
			case OVER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5727; over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cost_matrix_clauseContext : ParserRuleContext {
		public ITerminalNode COST() { return GetToken(oracleParser.COST, 0); }
		public ITerminalNode MODEL() { return GetToken(oracleParser.MODEL, 0); }
		public ITerminalNode VALUES() { return GetToken(oracleParser.VALUES, 0); }
		public ITerminalNode AUTO() { return GetToken(oracleParser.AUTO, 0); }
		public Cost_class_nameContext[] cost_class_name() {
			return GetRuleContexts<Cost_class_nameContext>();
		}
		public Cost_class_nameContext cost_class_name(int i) {
			return GetRuleContext<Cost_class_nameContext>(i);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Cost_matrix_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cost_matrix_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCost_matrix_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cost_matrix_clauseContext cost_matrix_clause() {
		Cost_matrix_clauseContext _localctx = new Cost_matrix_clauseContext(Context, State);
		EnterRule(_localctx, 710, RULE_cost_matrix_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5730; Match(COST);
			State = 5752;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODEL:
				{
				State = 5731; Match(MODEL);
				State = 5733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AUTO) {
					{
					State = 5732; Match(AUTO);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				State = 5735; Match(LEFT_PAREN);
				State = 5740;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5737;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 5736; Match(COMMA);
						}
					}

					State = 5739; cost_class_name();
					}
					}
					State = 5742;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (COMMA - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
				State = 5744; Match(RIGHT_PAREN);
				State = 5745; Match(VALUES);
				State = 5746; Match(LEFT_PAREN);
				State = 5748;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
					{
					State = 5747; expressions();
					}
				}

				State = 5750; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_passing_clauseContext : ParserRuleContext {
		public ITerminalNode PASSING() { return GetToken(oracleParser.PASSING, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BY() { return GetToken(oracleParser.BY, 0); }
		public ITerminalNode VALUE() { return GetToken(oracleParser.VALUE, 0); }
		public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		public Xml_passing_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_passing_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_passing_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_passing_clauseContext xml_passing_clause() {
		Xml_passing_clauseContext _localctx = new Xml_passing_clauseContext(Context, State);
		EnterRule(_localctx, 712, RULE_xml_passing_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5754; Match(PASSING);
			State = 5757;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BY) {
				{
				State = 5755; Match(BY);
				State = 5756; Match(VALUE);
				}
			}

			State = 5759; expression();
			State = 5761;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				State = 5760; column_alias();
				}
			}

			{
			State = 5763; Match(COMMA);
			State = 5764; expression();
			State = 5766;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,809,Context) ) {
			case 1:
				{
				State = 5765; column_alias();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_attributes_clauseContext : ParserRuleContext {
		public ITerminalNode XMLATTRIBUTES() { return GetToken(oracleParser.XMLATTRIBUTES, 0); }
		public Xml_multiuse_expression_elementContext[] xml_multiuse_expression_element() {
			return GetRuleContexts<Xml_multiuse_expression_elementContext>();
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return GetRuleContext<Xml_multiuse_expression_elementContext>(i);
		}
		public ITerminalNode ENTITYESCAPING() { return GetToken(oracleParser.ENTITYESCAPING, 0); }
		public ITerminalNode NOENTITYESCAPING() { return GetToken(oracleParser.NOENTITYESCAPING, 0); }
		public ITerminalNode SCHEMACHECK() { return GetToken(oracleParser.SCHEMACHECK, 0); }
		public ITerminalNode NOSCHEMACHECK() { return GetToken(oracleParser.NOSCHEMACHECK, 0); }
		public Xml_attributes_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_attributes_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_attributes_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_attributes_clauseContext xml_attributes_clause() {
		Xml_attributes_clauseContext _localctx = new Xml_attributes_clauseContext(Context, State);
		EnterRule(_localctx, 714, RULE_xml_attributes_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5768; Match(XMLATTRIBUTES);
			State = 5769; Match(LEFT_PAREN);
			State = 5771;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,810,Context) ) {
			case 1:
				{
				State = 5770;
				_la = TokenStream.LA(1);
				if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 5774;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,811,Context) ) {
			case 1:
				{
				State = 5773;
				_la = TokenStream.LA(1);
				if ( !(_la==NOSCHEMACHECK || _la==SCHEMACHECK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 5780;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5777;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5776; Match(COMMA);
					}
				}

				State = 5779; xml_multiuse_expression_element();
				}
				}
				State = 5782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (COMMA - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
			State = 5784; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_namespaces_clauseContext : ParserRuleContext {
		public ITerminalNode XMLNAMESPACES() { return GetToken(oracleParser.XMLNAMESPACES, 0); }
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return GetRuleContext<Xml_general_default_partContext>(0);
		}
		public Xml_namespaces_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_namespaces_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_namespaces_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_namespaces_clauseContext xml_namespaces_clause() {
		Xml_namespaces_clauseContext _localctx = new Xml_namespaces_clauseContext(Context, State);
		EnterRule(_localctx, 716, RULE_xml_namespaces_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5786; Match(XMLNAMESPACES);
			State = 5787; Match(LEFT_PAREN);
			State = 5791;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,814,Context) ) {
			case 1:
				{
				State = 5788; concatenation(0);
				State = 5789; column_alias();
				}
				break;
			}
			State = 5799;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5793; Match(COMMA);
				State = 5794; concatenation(0);
				State = 5795; column_alias();
				}
				}
				State = 5801;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5803;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 5802; xml_general_default_part();
				}
			}

			State = 5805; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_table_columnContext : ParserRuleContext {
		public Xml_column_nameContext xml_column_name() {
			return GetRuleContext<Xml_column_nameContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(oracleParser.FOR, 0); }
		public ITerminalNode ORDINALITY() { return GetToken(oracleParser.ORDINALITY, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode PATH() { return GetToken(oracleParser.PATH, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return GetRuleContext<Xml_general_default_partContext>(0);
		}
		public Xml_table_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_table_column; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_table_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_table_columnContext xml_table_column() {
		Xml_table_columnContext _localctx = new Xml_table_columnContext(Context, State);
		EnterRule(_localctx, 718, RULE_xml_table_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5807; xml_column_name();
			State = 5818;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				{
				State = 5808; Match(FOR);
				State = 5809; Match(ORDINALITY);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				State = 5810; type_spec();
				State = 5813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PATH) {
					{
					State = 5811; Match(PATH);
					State = 5812; concatenation(0);
					}
				}

				State = 5816;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 5815; xml_general_default_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_general_default_partContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(oracleParser.DEFAULT, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Xml_general_default_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_general_default_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_general_default_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_general_default_partContext xml_general_default_part() {
		Xml_general_default_partContext _localctx = new Xml_general_default_partContext(Context, State);
		EnterRule(_localctx, 720, RULE_xml_general_default_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5820; Match(DEFAULT);
			State = 5821; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_multiuse_expression_elementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public ITerminalNode EVALNAME() { return GetToken(oracleParser.EVALNAME, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Xml_multiuse_expression_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_multiuse_expression_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_multiuse_expression_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_multiuse_expression_elementContext xml_multiuse_expression_element() {
		Xml_multiuse_expression_elementContext _localctx = new Xml_multiuse_expression_elementContext(Context, State);
		EnterRule(_localctx, 722, RULE_xml_multiuse_expression_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5823; expression();
			State = 5830;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 5824; Match(AS);
				State = 5828;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,820,Context) ) {
				case 1:
					{
					State = 5825; id_expression();
					}
					break;
				case 2:
					{
					State = 5826; Match(EVALNAME);
					State = 5827; concatenation(0);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlroot_param_version_partContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(oracleParser.VERSION, 0); }
		public ITerminalNode NO() { return GetToken(oracleParser.NO, 0); }
		public ITerminalNode VALUE() { return GetToken(oracleParser.VALUE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Xmlroot_param_version_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlroot_param_version_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlroot_param_version_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmlroot_param_version_partContext xmlroot_param_version_part() {
		Xmlroot_param_version_partContext _localctx = new Xmlroot_param_version_partContext(Context, State);
		EnterRule(_localctx, 724, RULE_xmlroot_param_version_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5832; Match(VERSION);
			State = 5836;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,822,Context) ) {
			case 1:
				{
				State = 5833; Match(NO);
				State = 5834; Match(VALUE);
				}
				break;
			case 2:
				{
				State = 5835; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlroot_param_standalone_partContext : ParserRuleContext {
		public ITerminalNode STANDALONE() { return GetToken(oracleParser.STANDALONE, 0); }
		public ITerminalNode YES() { return GetToken(oracleParser.YES, 0); }
		public ITerminalNode NO() { return GetToken(oracleParser.NO, 0); }
		public ITerminalNode VALUE() { return GetToken(oracleParser.VALUE, 0); }
		public Xmlroot_param_standalone_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlroot_param_standalone_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlroot_param_standalone_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
		Xmlroot_param_standalone_partContext _localctx = new Xmlroot_param_standalone_partContext(Context, State);
		EnterRule(_localctx, 726, RULE_xmlroot_param_standalone_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5838; Match(STANDALONE);
			State = 5844;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case YES:
				{
				State = 5839; Match(YES);
				}
				break;
			case NO:
				{
				State = 5840; Match(NO);
				State = 5842;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 5841; Match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlserialize_param_enconding_partContext : ParserRuleContext {
		public ITerminalNode ENCODING() { return GetToken(oracleParser.ENCODING, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Xmlserialize_param_enconding_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlserialize_param_enconding_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlserialize_param_enconding_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
		Xmlserialize_param_enconding_partContext _localctx = new Xmlserialize_param_enconding_partContext(Context, State);
		EnterRule(_localctx, 728, RULE_xmlserialize_param_enconding_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5846; Match(ENCODING);
			State = 5847; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlserialize_param_version_partContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(oracleParser.VERSION, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Xmlserialize_param_version_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlserialize_param_version_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlserialize_param_version_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
		Xmlserialize_param_version_partContext _localctx = new Xmlserialize_param_version_partContext(Context, State);
		EnterRule(_localctx, 730, RULE_xmlserialize_param_version_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5849; Match(VERSION);
			State = 5850; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlserialize_param_ident_partContext : ParserRuleContext {
		public ITerminalNode NO() { return GetToken(oracleParser.NO, 0); }
		public ITerminalNode INDENT() { return GetToken(oracleParser.INDENT, 0); }
		public ITerminalNode SIZE() { return GetToken(oracleParser.SIZE, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Xmlserialize_param_ident_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlserialize_param_ident_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlserialize_param_ident_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
		Xmlserialize_param_ident_partContext _localctx = new Xmlserialize_param_ident_partContext(Context, State);
		EnterRule(_localctx, 732, RULE_xmlserialize_param_ident_part);
		int _la;
		try {
			State = 5860;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5852; Match(NO);
				State = 5853; Match(INDENT);
				}
				break;
			case INDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5854; Match(INDENT);
				State = 5858;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SIZE) {
					{
					State = 5855; Match(SIZE);
					State = 5856; Match(EQUALS_OP);
					State = 5857; concatenation(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_plus_commandContext : ParserRuleContext {
		public ITerminalNode EXIT() { return GetToken(oracleParser.EXIT, 0); }
		public ITerminalNode PROMPT() { return GetToken(oracleParser.PROMPT, 0); }
		public ITerminalNode SHOW() { return GetToken(oracleParser.SHOW, 0); }
		public ITerminalNode ERR() { return GetToken(oracleParser.ERR, 0); }
		public ITerminalNode ERRORS() { return GetToken(oracleParser.ERRORS, 0); }
		public ITerminalNode START_CMD() { return GetToken(oracleParser.START_CMD, 0); }
		public Whenever_commandContext whenever_command() {
			return GetRuleContext<Whenever_commandContext>(0);
		}
		public Set_commandContext set_command() {
			return GetRuleContext<Set_commandContext>(0);
		}
		public Sql_plus_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_plus_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_plus_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_plus_commandContext sql_plus_command() {
		Sql_plus_commandContext _localctx = new Sql_plus_commandContext(Context, State);
		EnterRule(_localctx, 734, RULE_sql_plus_command);
		int _la;
		try {
			State = 5870;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SOLIDUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5862; Match(SOLIDUS);
				}
				break;
			case EXIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5863; Match(EXIT);
				}
				break;
			case PROMPT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5864; Match(PROMPT);
				}
				break;
			case SHOW:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5865; Match(SHOW);
				State = 5866;
				_la = TokenStream.LA(1);
				if ( !(_la==ERR || _la==ERRORS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case START_CMD:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5867; Match(START_CMD);
				}
				break;
			case WHENEVER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5868; whenever_command();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5869; set_command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Whenever_commandContext : ParserRuleContext {
		public ITerminalNode WHENEVER() { return GetToken(oracleParser.WHENEVER, 0); }
		public ITerminalNode SQLERROR() { return GetToken(oracleParser.SQLERROR, 0); }
		public ITerminalNode OSERROR() { return GetToken(oracleParser.OSERROR, 0); }
		public ITerminalNode EXIT() { return GetToken(oracleParser.EXIT, 0); }
		public ITerminalNode CONTINUE() { return GetToken(oracleParser.CONTINUE, 0); }
		public ITerminalNode SUCCESS() { return GetToken(oracleParser.SUCCESS, 0); }
		public ITerminalNode FAILURE() { return GetToken(oracleParser.FAILURE, 0); }
		public ITerminalNode WARNING() { return GetToken(oracleParser.WARNING, 0); }
		public ITerminalNode COMMIT() { return GetToken(oracleParser.COMMIT, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(oracleParser.ROLLBACK, 0); }
		public ITerminalNode NONE() { return GetToken(oracleParser.NONE, 0); }
		public Whenever_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenever_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenever_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Whenever_commandContext whenever_command() {
		Whenever_commandContext _localctx = new Whenever_commandContext(Context, State);
		EnterRule(_localctx, 736, RULE_whenever_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5872; Match(WHENEVER);
			State = 5873;
			_la = TokenStream.LA(1);
			if ( !(_la==OSERROR || _la==SQLERROR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5879;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXIT:
				{
				State = 5874; Match(EXIT);
				State = 5875;
				_la = TokenStream.LA(1);
				if ( !(_la==FAILURE || _la==SUCCESS || _la==WARNING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5876;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMIT || _la==ROLLBACK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case CONTINUE:
				{
				State = 5877; Match(CONTINUE);
				State = 5878;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMIT || _la==NONE || _la==ROLLBACK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_commandContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(oracleParser.SET, 0); }
		public Regular_idContext[] regular_id() {
			return GetRuleContexts<Regular_idContext>();
		}
		public Regular_idContext regular_id(int i) {
			return GetRuleContext<Regular_idContext>(i);
		}
		public ITerminalNode CHAR_STRING() { return GetToken(oracleParser.CHAR_STRING, 0); }
		public ITerminalNode ON() { return GetToken(oracleParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(oracleParser.OFF, 0); }
		public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		public Set_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_commandContext set_command() {
		Set_commandContext _localctx = new Set_commandContext(Context, State);
		EnterRule(_localctx, 738, RULE_set_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5881; Match(SET);
			State = 5882; regular_id();
			State = 5888;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,829,Context) ) {
			case 1:
				{
				State = 5883; Match(CHAR_STRING);
				}
				break;
			case 2:
				{
				State = 5884; Match(ON);
				}
				break;
			case 3:
				{
				State = 5885; Match(OFF);
				}
				break;
			case 4:
				{
				State = 5886; numeric();
				}
				break;
			case 5:
				{
				State = 5887; regular_id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_extension_clauseContext : ParserRuleContext {
		public ITerminalNode SUBPARTITION() { return GetToken(oracleParser.SUBPARTITION, 0); }
		public ITerminalNode PARTITION() { return GetToken(oracleParser.PARTITION, 0); }
		public ITerminalNode FOR() { return GetToken(oracleParser.FOR, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_extension_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartition_extension_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partition_extension_clauseContext partition_extension_clause() {
		Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(Context, State);
		EnterRule(_localctx, 740, RULE_partition_extension_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5890;
			_la = TokenStream.LA(1);
			if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5892;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 5891; Match(FOR);
				}
			}

			State = 5894; Match(LEFT_PAREN);
			State = 5896;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				State = 5895; expressions();
				}
			}

			State = 5898; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Quoted_stringContext quoted_string() {
			return GetRuleContext<Quoted_stringContext>(0);
		}
		public ITerminalNode AS() { return GetToken(oracleParser.AS, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(Context, State);
		EnterRule(_localctx, 742, RULE_column_alias);
		int _la;
		try {
			State = 5908;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,834,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5901;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 5900; Match(AS);
					}
				}

				State = 5905;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					State = 5903; identifier();
					}
					break;
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					State = 5904; quoted_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5907; Match(AS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Quoted_stringContext quoted_string() {
			return GetRuleContext<Quoted_stringContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(Context, State);
		EnterRule(_localctx, 744, RULE_table_alias);
		try {
			State = 5912;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5910; identifier();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5911; quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(oracleParser.WHERE, 0); }
		public ITerminalNode CURRENT() { return GetToken(oracleParser.CURRENT, 0); }
		public ITerminalNode OF() { return GetToken(oracleParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 746, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5914; Match(WHERE);
			State = 5919;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT:
				{
				State = 5915; Match(CURRENT);
				State = 5916; Match(OF);
				State = 5917; cursor_name();
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 5918; expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Into_clauseContext : ParserRuleContext {
		public ITerminalNode INTO() { return GetToken(oracleParser.INTO, 0); }
		public ITerminalNode BULK() { return GetToken(oracleParser.BULK, 0); }
		public ITerminalNode COLLECT() { return GetToken(oracleParser.COLLECT, 0); }
		public Variable_nameContext[] variable_name() {
			return GetRuleContexts<Variable_nameContext>();
		}
		public Variable_nameContext variable_name(int i) {
			return GetRuleContext<Variable_nameContext>(i);
		}
		public Into_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_into_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInto_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Into_clauseContext into_clause() {
		Into_clauseContext _localctx = new Into_clauseContext(Context, State);
		EnterRule(_localctx, 748, RULE_into_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5923;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BULK) {
				{
				State = 5921; Match(BULK);
				State = 5922; Match(COLLECT);
				}
			}

			State = 5925; Match(INTO);
			State = 5930;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 5927;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 5926; Match(COMMA);
						}
					}

					State = 5929; variable_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5932;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,839,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_column_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Quoted_stringContext quoted_string() {
			return GetRuleContext<Quoted_stringContext>(0);
		}
		public Xml_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_column_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_column_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_column_nameContext xml_column_name() {
		Xml_column_nameContext _localctx = new Xml_column_nameContext(Context, State);
		EnterRule(_localctx, 750, RULE_xml_column_name);
		try {
			State = 5936;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5934; identifier();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5935; quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cost_class_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Cost_class_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cost_class_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCost_class_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cost_class_nameContext cost_class_name() {
		Cost_class_nameContext _localctx = new Cost_class_nameContext(Context, State);
		EnterRule(_localctx, 752, RULE_cost_class_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5938; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_nameContext attribute_name() {
		Attribute_nameContext _localctx = new Attribute_nameContext(Context, State);
		EnterRule(_localctx, 754, RULE_attribute_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5940; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_nameContext savepoint_name() {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(Context, State);
		EnterRule(_localctx, 756, RULE_savepoint_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5942; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollback_segment_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Rollback_segment_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollback_segment_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollback_segment_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollback_segment_nameContext rollback_segment_name() {
		Rollback_segment_nameContext _localctx = new Rollback_segment_nameContext(Context, State);
		EnterRule(_localctx, 758, RULE_rollback_segment_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5944; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_var_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Table_var_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_var_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_var_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_var_nameContext table_var_name() {
		Table_var_nameContext _localctx = new Table_var_nameContext(Context, State);
		EnterRule(_localctx, 760, RULE_table_var_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5946; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Schema_nameContext schema_name() {
		Schema_nameContext _localctx = new Schema_nameContext(Context, State);
		EnterRule(_localctx, 762, RULE_schema_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5948; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Routine_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Id_expressionContext[] id_expression() {
			return GetRuleContexts<Id_expressionContext>();
		}
		public Id_expressionContext id_expression(int i) {
			return GetRuleContext<Id_expressionContext>(i);
		}
		public Link_nameContext link_name() {
			return GetRuleContext<Link_nameContext>(0);
		}
		public Routine_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routine_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutine_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Routine_nameContext routine_name() {
		Routine_nameContext _localctx = new Routine_nameContext(Context, State);
		EnterRule(_localctx, 764, RULE_routine_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5950; identifier();
			State = 5955;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PERIOD) {
				{
				{
				State = 5951; Match(PERIOD);
				State = 5952; id_expression();
				}
				}
				State = 5957;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5960;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_SIGN) {
				{
				State = 5958; Match(AT_SIGN);
				State = 5959; link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Package_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_nameContext package_name() {
		Package_nameContext _localctx = new Package_nameContext(Context, State);
		EnterRule(_localctx, 766, RULE_package_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5962; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implementation_type_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Implementation_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementation_type_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementation_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Implementation_type_nameContext implementation_type_name() {
		Implementation_type_nameContext _localctx = new Implementation_type_nameContext(Context, State);
		EnterRule(_localctx, 768, RULE_implementation_type_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5964; identifier();
			State = 5967;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PERIOD) {
				{
				State = 5965; Match(PERIOD);
				State = 5966; id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_nameContext parameter_name() {
		Parameter_nameContext _localctx = new Parameter_nameContext(Context, State);
		EnterRule(_localctx, 770, RULE_parameter_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5969; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reference_model_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Reference_model_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference_model_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReference_model_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reference_model_nameContext reference_model_name() {
		Reference_model_nameContext _localctx = new Reference_model_nameContext(Context, State);
		EnterRule(_localctx, 772, RULE_reference_model_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5971; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Main_model_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Main_model_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main_model_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain_model_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Main_model_nameContext main_model_name() {
		Main_model_nameContext _localctx = new Main_model_nameContext(Context, State);
		EnterRule(_localctx, 774, RULE_main_model_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5973; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Container_tableview_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Container_tableview_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_container_tableview_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainer_tableview_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Container_tableview_nameContext container_tableview_name() {
		Container_tableview_nameContext _localctx = new Container_tableview_nameContext(Context, State);
		EnterRule(_localctx, 776, RULE_container_tableview_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5975; identifier();
			State = 5978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PERIOD) {
				{
				State = 5976; Match(PERIOD);
				State = 5977; id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_function_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Id_expressionContext[] id_expression() {
			return GetRuleContexts<Id_expressionContext>();
		}
		public Id_expressionContext id_expression(int i) {
			return GetRuleContext<Id_expressionContext>(i);
		}
		public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_function_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate_function_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_function_nameContext aggregate_function_name() {
		Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(Context, State);
		EnterRule(_localctx, 778, RULE_aggregate_function_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5980; identifier();
			State = 5985;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PERIOD) {
				{
				{
				State = 5981; Match(PERIOD);
				State = 5982; id_expression();
				}
				}
				State = 5987;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Query_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_nameContext query_name() {
		Query_nameContext _localctx = new Query_nameContext(Context, State);
		EnterRule(_localctx, 780, RULE_query_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5988; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grantee_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Identified_byContext identified_by() {
			return GetRuleContext<Identified_byContext>(0);
		}
		public Grantee_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantee_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantee_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grantee_nameContext grantee_name() {
		Grantee_nameContext _localctx = new Grantee_nameContext(Context, State);
		EnterRule(_localctx, 782, RULE_grantee_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5990; id_expression();
			State = 5992;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIED) {
				{
				State = 5991; identified_by();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Role_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public ITerminalNode CONNECT() { return GetToken(oracleParser.CONNECT, 0); }
		public Role_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_role_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRole_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Role_nameContext role_name() {
		Role_nameContext _localctx = new Role_nameContext(Context, State);
		EnterRule(_localctx, 784, RULE_role_name);
		try {
			State = 5996;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5994; id_expression();
				}
				break;
			case CONNECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5995; Match(CONNECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constraint_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Id_expressionContext[] id_expression() {
			return GetRuleContexts<Id_expressionContext>();
		}
		public Id_expressionContext id_expression(int i) {
			return GetRuleContext<Id_expressionContext>(i);
		}
		public Link_nameContext link_name() {
			return GetRuleContext<Link_nameContext>(0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constraint_nameContext constraint_name() {
		Constraint_nameContext _localctx = new Constraint_nameContext(Context, State);
		EnterRule(_localctx, 786, RULE_constraint_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5998; identifier();
			State = 6003;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PERIOD) {
				{
				{
				State = 5999; Match(PERIOD);
				State = 6000; id_expression();
				}
				}
				State = 6005;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6008;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_SIGN) {
				{
				State = 6006; Match(AT_SIGN);
				State = 6007; link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Label_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_nameContext label_name() {
		Label_nameContext _localctx = new Label_nameContext(Context, State);
		EnterRule(_localctx, 788, RULE_label_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6010; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public Id_expressionContext[] id_expression() {
			return GetRuleContexts<Id_expressionContext>();
		}
		public Id_expressionContext id_expression(int i) {
			return GetRuleContext<Id_expressionContext>(i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 790, RULE_type_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6012; id_expression();
			State = 6017;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PERIOD) {
				{
				{
				State = 6013; Match(PERIOD);
				State = 6014; id_expression();
				}
				}
				State = 6019;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequence_nameContext : ParserRuleContext {
		public Id_expressionContext[] id_expression() {
			return GetRuleContexts<Id_expressionContext>();
		}
		public Id_expressionContext id_expression(int i) {
			return GetRuleContext<Id_expressionContext>(i);
		}
		public Sequence_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sequence_nameContext sequence_name() {
		Sequence_nameContext _localctx = new Sequence_nameContext(Context, State);
		EnterRule(_localctx, 792, RULE_sequence_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6020; id_expression();
			State = 6025;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PERIOD) {
				{
				{
				State = 6021; Match(PERIOD);
				State = 6022; id_expression();
				}
				}
				State = 6027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Id_expressionContext[] id_expression() {
			return GetRuleContexts<Id_expressionContext>();
		}
		public Id_expressionContext id_expression(int i) {
			return GetRuleContext<Id_expressionContext>(i);
		}
		public Exception_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitException_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exception_nameContext exception_name() {
		Exception_nameContext _localctx = new Exception_nameContext(Context, State);
		EnterRule(_localctx, 794, RULE_exception_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6028; identifier();
			State = 6033;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PERIOD) {
				{
				{
				State = 6029; Match(PERIOD);
				State = 6030; id_expression();
				}
				}
				State = 6035;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 796, RULE_function_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6036; identifier();
			State = 6039;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PERIOD) {
				{
				State = 6037; Match(PERIOD);
				State = 6038; id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_nameContext procedure_name() {
		Procedure_nameContext _localctx = new Procedure_nameContext(Context, State);
		EnterRule(_localctx, 798, RULE_procedure_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6041; identifier();
			State = 6044;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PERIOD) {
				{
				State = 6042; Match(PERIOD);
				State = 6043; id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_nameContext trigger_name() {
		Trigger_nameContext _localctx = new Trigger_nameContext(Context, State);
		EnterRule(_localctx, 800, RULE_trigger_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6046; identifier();
			State = 6049;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PERIOD) {
				{
				State = 6047; Match(PERIOD);
				State = 6048; id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_nameContext : ParserRuleContext {
		public Id_expressionContext[] id_expression() {
			return GetRuleContexts<Id_expressionContext>();
		}
		public Id_expressionContext id_expression(int i) {
			return GetRuleContext<Id_expressionContext>(i);
		}
		public ITerminalNode INTRODUCER() { return GetToken(oracleParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return GetRuleContext<Char_set_nameContext>(0);
		}
		public Bind_variableContext bind_variable() {
			return GetRuleContext<Bind_variableContext>(0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_nameContext variable_name() {
		Variable_nameContext _localctx = new Variable_nameContext(Context, State);
		EnterRule(_localctx, 802, RULE_variable_name);
		int _la;
		try {
			State = 6061;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6053;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTRODUCER) {
					{
					State = 6051; Match(INTRODUCER);
					State = 6052; char_set_name();
					}
				}

				State = 6055; id_expression();
				State = 6058;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PERIOD) {
					{
					State = 6056; Match(PERIOD);
					State = 6057; id_expression();
					}
				}

				}
				break;
			case BINDVAR:
			case COLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6060; bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_nameContext index_name() {
		Index_nameContext _localctx = new Index_nameContext(Context, State);
		EnterRule(_localctx, 804, RULE_index_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6063; identifier();
			State = 6066;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PERIOD) {
				{
				State = 6064; Match(PERIOD);
				State = 6065; id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_nameContext : ParserRuleContext {
		public General_elementContext general_element() {
			return GetRuleContext<General_elementContext>(0);
		}
		public Bind_variableContext bind_variable() {
			return GetRuleContext<Bind_variableContext>(0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_nameContext cursor_name() {
		Cursor_nameContext _localctx = new Cursor_nameContext(Context, State);
		EnterRule(_localctx, 806, RULE_cursor_name);
		try {
			State = 6070;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6068; general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6069; bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Record_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Bind_variableContext bind_variable() {
			return GetRuleContext<Bind_variableContext>(0);
		}
		public Record_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecord_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Record_nameContext record_name() {
		Record_nameContext _localctx = new Record_nameContext(Context, State);
		EnterRule(_localctx, 808, RULE_record_name);
		try {
			State = 6074;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6072; identifier();
				}
				break;
			case BINDVAR:
			case COLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6073; bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Collection_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollection_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collection_nameContext collection_name() {
		Collection_nameContext _localctx = new Collection_nameContext(Context, State);
		EnterRule(_localctx, 810, RULE_collection_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6076; identifier();
			State = 6079;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PERIOD) {
				{
				State = 6077; Match(PERIOD);
				State = 6078; id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Link_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Link_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_link_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLink_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Link_nameContext link_name() {
		Link_nameContext _localctx = new Link_nameContext(Context, State);
		EnterRule(_localctx, 812, RULE_link_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6081; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Id_expressionContext[] id_expression() {
			return GetRuleContexts<Id_expressionContext>();
		}
		public Id_expressionContext id_expression(int i) {
			return GetRuleContext<Id_expressionContext>(i);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(Context, State);
		EnterRule(_localctx, 814, RULE_column_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6083; identifier();
			State = 6088;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PERIOD) {
				{
				{
				State = 6084; Match(PERIOD);
				State = 6085; id_expression();
				}
				}
				State = 6090;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tableview_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Link_nameContext link_name() {
			return GetRuleContext<Link_nameContext>(0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return GetRuleContext<Partition_extension_clauseContext>(0);
		}
		public Tableview_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableview_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableview_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tableview_nameContext tableview_name() {
		Tableview_nameContext _localctx = new Tableview_nameContext(Context, State);
		EnterRule(_localctx, 816, RULE_tableview_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6091; identifier();
			State = 6094;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,864,Context) ) {
			case 1:
				{
				State = 6092; Match(PERIOD);
				State = 6093; id_expression();
				}
				break;
			}
			State = 6099;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,865,Context) ) {
			case 1:
				{
				State = 6096; Match(AT_SIGN);
				State = 6097; link_name();
				}
				break;
			case 2:
				{
				State = 6098; partition_extension_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Char_set_nameContext : ParserRuleContext {
		public Id_expressionContext[] id_expression() {
			return GetRuleContexts<Id_expressionContext>();
		}
		public Id_expressionContext id_expression(int i) {
			return GetRuleContext<Id_expressionContext>(i);
		}
		public Char_set_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char_set_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChar_set_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Char_set_nameContext char_set_name() {
		Char_set_nameContext _localctx = new Char_set_nameContext(Context, State);
		EnterRule(_localctx, 818, RULE_char_set_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6101; id_expression();
			State = 6106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PERIOD) {
				{
				{
				State = 6102; Match(PERIOD);
				State = 6103; id_expression();
				}
				}
				State = 6108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Synonym_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Synonym_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_synonym_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSynonym_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Synonym_nameContext synonym_name() {
		Synonym_nameContext _localctx = new Synonym_nameContext(Context, State);
		EnterRule(_localctx, 820, RULE_synonym_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6109; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_object_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Schema_object_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_object_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema_object_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Schema_object_nameContext schema_object_name() {
		Schema_object_nameContext _localctx = new Schema_object_nameContext(Context, State);
		EnterRule(_localctx, 822, RULE_schema_object_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6111; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dir_object_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Dir_object_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dir_object_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDir_object_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dir_object_nameContext dir_object_name() {
		Dir_object_nameContext _localctx = new Dir_object_nameContext(Context, State);
		EnterRule(_localctx, 824, RULE_dir_object_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6113; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class User_object_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public User_object_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user_object_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUser_object_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public User_object_nameContext user_object_name() {
		User_object_nameContext _localctx = new User_object_nameContext(Context, State);
		EnterRule(_localctx, 826, RULE_user_object_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6115; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_object_nameContext : ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode USER() { return GetToken(oracleParser.USER, 0); }
		public User_object_nameContext[] user_object_name() {
			return GetRuleContexts<User_object_nameContext>();
		}
		public User_object_nameContext user_object_name(int i) {
			return GetRuleContext<User_object_nameContext>(i);
		}
		public ITerminalNode DIRECTORY() { return GetToken(oracleParser.DIRECTORY, 0); }
		public Dir_object_nameContext dir_object_name() {
			return GetRuleContext<Dir_object_nameContext>(0);
		}
		public ITerminalNode EDITION() { return GetToken(oracleParser.EDITION, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public ITerminalNode MINING() { return GetToken(oracleParser.MINING, 0); }
		public ITerminalNode MODEL() { return GetToken(oracleParser.MODEL, 0); }
		public ITerminalNode JAVA() { return GetToken(oracleParser.JAVA, 0); }
		public ITerminalNode SOURCE() { return GetToken(oracleParser.SOURCE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(oracleParser.RESOURCE, 0); }
		public ITerminalNode SQL() { return GetToken(oracleParser.SQL, 0); }
		public ITerminalNode TRANSLATION() { return GetToken(oracleParser.TRANSLATION, 0); }
		public ITerminalNode PROFILE() { return GetToken(oracleParser.PROFILE, 0); }
		public Grant_object_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_object_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrant_object_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grant_object_nameContext grant_object_name() {
		Grant_object_nameContext _localctx = new Grant_object_nameContext(Context, State);
		EnterRule(_localctx, 828, RULE_grant_object_name);
		int _la;
		try {
			State = 6141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,869,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6117; tableview_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6118; Match(USER);
				State = 6123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6120;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 6119; Match(COMMA);
						}
					}

					State = 6122; user_object_name();
					}
					}
					State = 6125;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (COMMA - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6127; Match(DIRECTORY);
				State = 6128; dir_object_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6129; Match(EDITION);
				State = 6130; schema_object_name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6131; Match(MINING);
				State = 6132; Match(MODEL);
				State = 6133; schema_object_name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6134; Match(JAVA);
				State = 6135;
				_la = TokenStream.LA(1);
				if ( !(_la==RESOURCE || _la==SOURCE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6136; schema_object_name();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6137; Match(SQL);
				State = 6138; Match(TRANSLATION);
				State = 6139; Match(PROFILE);
				State = 6140; schema_object_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_listContext : ParserRuleContext {
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_listContext column_list() {
		Column_listContext _localctx = new Column_listContext(Context, State);
		EnterRule(_localctx, 830, RULE_column_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6147;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6144;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 6143; Match(COMMA);
						}
					}

					State = 6146; column_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,871,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Paren_column_listContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(oracleParser.LEFT_PAREN, 0); }
		public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(oracleParser.RIGHT_PAREN, 0); }
		public Paren_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paren_column_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParen_column_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Paren_column_listContext paren_column_list() {
		Paren_column_listContext _localctx = new Paren_column_listContext(Context, State);
		EnterRule(_localctx, 832, RULE_paren_column_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6151; Match(LEFT_PAREN);
			State = 6152; column_list();
			State = 6153; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keep_clauseContext : ParserRuleContext {
		public ITerminalNode KEEP() { return GetToken(oracleParser.KEEP, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(oracleParser.DENSE_RANK, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public ITerminalNode FIRST() { return GetToken(oracleParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(oracleParser.LAST, 0); }
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public Keep_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keep_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeep_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Keep_clauseContext keep_clause() {
		Keep_clauseContext _localctx = new Keep_clauseContext(Context, State);
		EnterRule(_localctx, 834, RULE_keep_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6155; Match(KEEP);
			State = 6156; Match(LEFT_PAREN);
			State = 6157; Match(DENSE_RANK);
			State = 6158;
			_la = TokenStream.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6159; order_by_clause();
			State = 6160; Match(RIGHT_PAREN);
			State = 6162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,872,Context) ) {
			case 1:
				{
				State = 6161; over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argumentContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public Keep_clauseContext keep_clause() {
			return GetRuleContext<Keep_clauseContext>(0);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_argument; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argumentContext function_argument() {
		Function_argumentContext _localctx = new Function_argumentContext(Context, State);
		EnterRule(_localctx, 836, RULE_function_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6164; Match(LEFT_PAREN);
			State = 6171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (COMMA - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				{
				State = 6166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6165; Match(COMMA);
					}
				}

				State = 6168; argument();
				}
				}
				State = 6173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6174; Match(RIGHT_PAREN);
			State = 6176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,875,Context) ) {
			case 1:
				{
				State = 6175; keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argument_analyticContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public Keep_clauseContext keep_clause() {
			return GetRuleContext<Keep_clauseContext>(0);
		}
		public Respect_or_ignore_nullsContext[] respect_or_ignore_nulls() {
			return GetRuleContexts<Respect_or_ignore_nullsContext>();
		}
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls(int i) {
			return GetRuleContext<Respect_or_ignore_nullsContext>(i);
		}
		public Function_argument_analyticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_argument_analytic; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_argument_analytic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argument_analyticContext function_argument_analytic() {
		Function_argument_analyticContext _localctx = new Function_argument_analyticContext(Context, State);
		EnterRule(_localctx, 838, RULE_function_argument_analytic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6178; Match(LEFT_PAREN);
			State = 6188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (COMMA - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) {
				{
				{
				State = 6180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6179; Match(COMMA);
					}
				}

				State = 6182; argument();
				State = 6184;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,877,Context) ) {
				case 1:
					{
					State = 6183; respect_or_ignore_nulls();
					}
					break;
				}
				}
				}
				State = 6190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6191; Match(RIGHT_PAREN);
			State = 6193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,879,Context) ) {
			case 1:
				{
				State = 6192; keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argument_modelingContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode USING() { return GetToken(oracleParser.USING, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Keep_clauseContext keep_clause() {
			return GetRuleContext<Keep_clauseContext>(0);
		}
		public NumericContext[] numeric() {
			return GetRuleContexts<NumericContext>();
		}
		public NumericContext numeric(int i) {
			return GetRuleContext<NumericContext>(i);
		}
		public ITerminalNode[] NULL() { return GetTokens(oracleParser.NULL); }
		public ITerminalNode NULL(int i) {
			return GetToken(oracleParser.NULL, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		public Function_argument_modelingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_argument_modeling; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_argument_modeling(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argument_modelingContext function_argument_modeling() {
		Function_argument_modelingContext _localctx = new Function_argument_modelingContext(Context, State);
		EnterRule(_localctx, 840, RULE_function_argument_modeling);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6195; Match(LEFT_PAREN);
			State = 6196; column_name();
			State = 6209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 6197; Match(COMMA);
				State = 6200;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
					{
					State = 6198; numeric();
					}
					break;
				case NULL:
					{
					State = 6199; Match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6202; Match(COMMA);
					State = 6205;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						State = 6203; numeric();
						}
						break;
					case NULL:
						{
						State = 6204; Match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			State = 6211; Match(USING);
			State = 6228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,887,Context) ) {
			case 1:
				{
				State = 6212; tableview_name();
				State = 6213; Match(PERIOD);
				State = 6214; Match(ASTERISK);
				}
				break;
			case 2:
				{
				State = 6216; Match(ASTERISK);
				}
				break;
			case 3:
				{
				State = 6224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6218;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 6217; Match(COMMA);
						}
					}

					State = 6220; expression();
					State = 6222;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,885,Context) ) {
					case 1:
						{
						State = 6221; column_alias();
						}
						break;
					}
					}
					}
					State = 6226;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PRIOR - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (DECODE - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (NVL - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROUND - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TO_CHAR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (LEAST - 643)) | (1L << (GREATEST - 643)) | (1L << (TO_DATE - 643)) | (1L << (NATIONAL_CHAR_STRING_LIT - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (DELIMITED_ID - 643)) | (1L << (LEFT_PAREN - 643)) | (1L << (PLUS_SIGN - 643)) | (1L << (MINUS_SIGN - 643)) | (1L << (COMMA - 643)) | (1L << (BINDVAR - 643)) | (1L << (COLON - 643)) | (1L << (INTRODUCER - 643)) | (1L << (REGULAR_ID - 643)))) != 0) );
				}
				break;
			}
			State = 6230; Match(RIGHT_PAREN);
			State = 6232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,888,Context) ) {
			case 1:
				{
				State = 6231; keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Respect_or_ignore_nullsContext : ParserRuleContext {
		public ITerminalNode NULLS() { return GetToken(oracleParser.NULLS, 0); }
		public ITerminalNode RESPECT() { return GetToken(oracleParser.RESPECT, 0); }
		public ITerminalNode IGNORE() { return GetToken(oracleParser.IGNORE, 0); }
		public Respect_or_ignore_nullsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_respect_or_ignore_nulls; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRespect_or_ignore_nulls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
		Respect_or_ignore_nullsContext _localctx = new Respect_or_ignore_nullsContext(Context, State);
		EnterRule(_localctx, 842, RULE_respect_or_ignore_nulls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6234;
			_la = TokenStream.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6235; Match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 844, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,889,Context) ) {
			case 1:
				{
				State = 6237; identifier();
				State = 6238; Match(EQUALS_OP);
				State = 6239; Match(GREATER_THAN_OP);
				}
				break;
			}
			State = 6243; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_specContext : ParserRuleContext {
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode REF() { return GetToken(oracleParser.REF, 0); }
		public ITerminalNode PERCENT_ROWTYPE() { return GetToken(oracleParser.PERCENT_ROWTYPE, 0); }
		public ITerminalNode PERCENT_TYPE() { return GetToken(oracleParser.PERCENT_TYPE, 0); }
		public Type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_specContext type_spec() {
		Type_specContext _localctx = new Type_specContext(Context, State);
		EnterRule(_localctx, 846, RULE_type_spec);
		int _la;
		try {
			State = 6253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,892,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6245; datatype();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6247;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,890,Context) ) {
				case 1:
					{
					State = 6246; Match(REF);
					}
					break;
				}
				State = 6249; type_name();
				State = 6251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) {
					{
					State = 6250;
					_la = TokenStream.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : ParserRuleContext {
		public Native_datatype_elementContext native_datatype_element() {
			return GetRuleContext<Native_datatype_elementContext>(0);
		}
		public Precision_partContext precision_part() {
			return GetRuleContext<Precision_partContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(oracleParser.WITH, 0); }
		public ITerminalNode TIME() { return GetToken(oracleParser.TIME, 0); }
		public ITerminalNode ZONE() { return GetToken(oracleParser.ZONE, 0); }
		public ITerminalNode CHARACTER() { return GetToken(oracleParser.CHARACTER, 0); }
		public ITerminalNode SET() { return GetToken(oracleParser.SET, 0); }
		public Char_set_nameContext char_set_name() {
			return GetRuleContext<Char_set_nameContext>(0);
		}
		public ITerminalNode LOCAL() { return GetToken(oracleParser.LOCAL, 0); }
		public ITerminalNode INTERVAL() { return GetToken(oracleParser.INTERVAL, 0); }
		public ITerminalNode TO() { return GetToken(oracleParser.TO, 0); }
		public ITerminalNode YEAR() { return GetToken(oracleParser.YEAR, 0); }
		public ITerminalNode DAY() { return GetToken(oracleParser.DAY, 0); }
		public ITerminalNode MONTH() { return GetToken(oracleParser.MONTH, 0); }
		public ITerminalNode SECOND() { return GetToken(oracleParser.SECOND, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatatype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(Context, State);
		EnterRule(_localctx, 848, RULE_datatype);
		int _la;
		try {
			State = 6286;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BOOLEAN:
			case CHARACTER:
			case CHAR:
			case CLOB:
			case DATE:
			case DAY:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case FLOAT:
			case HOUR:
			case INTEGER:
			case INT:
			case LONG:
			case MINUTE:
			case MLSLABEL:
			case MONTH:
			case NATURAL:
			case NATURALN:
			case NCHAR:
			case NCLOB:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case RAW:
			case REAL:
			case ROWID:
			case SECOND:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SMALLINT:
			case STRING:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case UROWID:
			case VARCHAR2:
			case VARCHAR:
			case YEAR:
			case YMINTERVAL_UNCONSTRAINED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6255; native_datatype_element();
				State = 6257;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,893,Context) ) {
				case 1:
					{
					State = 6256; precision_part();
					}
					break;
				}
				State = 6268;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,895,Context) ) {
				case 1:
					{
					State = 6259; Match(WITH);
					State = 6261;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LOCAL) {
						{
						State = 6260; Match(LOCAL);
						}
					}

					State = 6263; Match(TIME);
					State = 6264; Match(ZONE);
					}
					break;
				case 2:
					{
					State = 6265; Match(CHARACTER);
					State = 6266; Match(SET);
					State = 6267; char_set_name();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6270; Match(INTERVAL);
				State = 6271;
				_la = TokenStream.LA(1);
				if ( !(_la==DAY || _la==YEAR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_PAREN) {
					{
					State = 6272; Match(LEFT_PAREN);
					State = 6273; expression();
					State = 6274; Match(RIGHT_PAREN);
					}
				}

				State = 6278; Match(TO);
				State = 6279;
				_la = TokenStream.LA(1);
				if ( !(_la==MONTH || _la==SECOND) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6284;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,897,Context) ) {
				case 1:
					{
					State = 6280; Match(LEFT_PAREN);
					State = 6281; expression();
					State = 6282; Match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Precision_partContext : ParserRuleContext {
		public NumericContext[] numeric() {
			return GetRuleContexts<NumericContext>();
		}
		public NumericContext numeric(int i) {
			return GetRuleContext<NumericContext>(i);
		}
		public ITerminalNode CHAR() { return GetToken(oracleParser.CHAR, 0); }
		public ITerminalNode BYTE() { return GetToken(oracleParser.BYTE, 0); }
		public Precision_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precision_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecision_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Precision_partContext precision_part() {
		Precision_partContext _localctx = new Precision_partContext(Context, State);
		EnterRule(_localctx, 850, RULE_precision_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6288; Match(LEFT_PAREN);
			State = 6289; numeric();
			State = 6292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 6290; Match(COMMA);
				State = 6291; numeric();
				}
			}

			State = 6295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				State = 6294;
				_la = TokenStream.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 6297; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_datatype_elementContext : ParserRuleContext {
		public ITerminalNode BINARY_INTEGER() { return GetToken(oracleParser.BINARY_INTEGER, 0); }
		public ITerminalNode PLS_INTEGER() { return GetToken(oracleParser.PLS_INTEGER, 0); }
		public ITerminalNode NATURAL() { return GetToken(oracleParser.NATURAL, 0); }
		public ITerminalNode BINARY_FLOAT() { return GetToken(oracleParser.BINARY_FLOAT, 0); }
		public ITerminalNode BINARY_DOUBLE() { return GetToken(oracleParser.BINARY_DOUBLE, 0); }
		public ITerminalNode NATURALN() { return GetToken(oracleParser.NATURALN, 0); }
		public ITerminalNode POSITIVE() { return GetToken(oracleParser.POSITIVE, 0); }
		public ITerminalNode POSITIVEN() { return GetToken(oracleParser.POSITIVEN, 0); }
		public ITerminalNode SIGNTYPE() { return GetToken(oracleParser.SIGNTYPE, 0); }
		public ITerminalNode SIMPLE_INTEGER() { return GetToken(oracleParser.SIMPLE_INTEGER, 0); }
		public ITerminalNode NVARCHAR2() { return GetToken(oracleParser.NVARCHAR2, 0); }
		public ITerminalNode DEC() { return GetToken(oracleParser.DEC, 0); }
		public ITerminalNode INTEGER() { return GetToken(oracleParser.INTEGER, 0); }
		public ITerminalNode INT() { return GetToken(oracleParser.INT, 0); }
		public ITerminalNode NUMERIC() { return GetToken(oracleParser.NUMERIC, 0); }
		public ITerminalNode SMALLINT() { return GetToken(oracleParser.SMALLINT, 0); }
		public ITerminalNode NUMBER() { return GetToken(oracleParser.NUMBER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(oracleParser.DECIMAL, 0); }
		public ITerminalNode DOUBLE() { return GetToken(oracleParser.DOUBLE, 0); }
		public ITerminalNode PRECISION() { return GetToken(oracleParser.PRECISION, 0); }
		public ITerminalNode FLOAT() { return GetToken(oracleParser.FLOAT, 0); }
		public ITerminalNode REAL() { return GetToken(oracleParser.REAL, 0); }
		public ITerminalNode NCHAR() { return GetToken(oracleParser.NCHAR, 0); }
		public ITerminalNode LONG() { return GetToken(oracleParser.LONG, 0); }
		public ITerminalNode RAW() { return GetToken(oracleParser.RAW, 0); }
		public ITerminalNode CHAR() { return GetToken(oracleParser.CHAR, 0); }
		public ITerminalNode CHARACTER() { return GetToken(oracleParser.CHARACTER, 0); }
		public ITerminalNode VARCHAR2() { return GetToken(oracleParser.VARCHAR2, 0); }
		public ITerminalNode VARCHAR() { return GetToken(oracleParser.VARCHAR, 0); }
		public ITerminalNode STRING() { return GetToken(oracleParser.STRING, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(oracleParser.BOOLEAN, 0); }
		public ITerminalNode DATE() { return GetToken(oracleParser.DATE, 0); }
		public ITerminalNode ROWID() { return GetToken(oracleParser.ROWID, 0); }
		public ITerminalNode UROWID() { return GetToken(oracleParser.UROWID, 0); }
		public ITerminalNode YEAR() { return GetToken(oracleParser.YEAR, 0); }
		public ITerminalNode MONTH() { return GetToken(oracleParser.MONTH, 0); }
		public ITerminalNode DAY() { return GetToken(oracleParser.DAY, 0); }
		public ITerminalNode HOUR() { return GetToken(oracleParser.HOUR, 0); }
		public ITerminalNode MINUTE() { return GetToken(oracleParser.MINUTE, 0); }
		public ITerminalNode SECOND() { return GetToken(oracleParser.SECOND, 0); }
		public ITerminalNode TIMEZONE_HOUR() { return GetToken(oracleParser.TIMEZONE_HOUR, 0); }
		public ITerminalNode TIMEZONE_MINUTE() { return GetToken(oracleParser.TIMEZONE_MINUTE, 0); }
		public ITerminalNode TIMEZONE_REGION() { return GetToken(oracleParser.TIMEZONE_REGION, 0); }
		public ITerminalNode TIMEZONE_ABBR() { return GetToken(oracleParser.TIMEZONE_ABBR, 0); }
		public ITerminalNode TIMESTAMP() { return GetToken(oracleParser.TIMESTAMP, 0); }
		public ITerminalNode TIMESTAMP_UNCONSTRAINED() { return GetToken(oracleParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public ITerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return GetToken(oracleParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public ITerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return GetToken(oracleParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public ITerminalNode YMINTERVAL_UNCONSTRAINED() { return GetToken(oracleParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public ITerminalNode DSINTERVAL_UNCONSTRAINED() { return GetToken(oracleParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public ITerminalNode BFILE() { return GetToken(oracleParser.BFILE, 0); }
		public ITerminalNode BLOB() { return GetToken(oracleParser.BLOB, 0); }
		public ITerminalNode CLOB() { return GetToken(oracleParser.CLOB, 0); }
		public ITerminalNode NCLOB() { return GetToken(oracleParser.NCLOB, 0); }
		public ITerminalNode MLSLABEL() { return GetToken(oracleParser.MLSLABEL, 0); }
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_datatype_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNative_datatype_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Native_datatype_elementContext native_datatype_element() {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(Context, State);
		EnterRule(_localctx, 852, RULE_native_datatype_element);
		try {
			State = 6359;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY_INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6299; Match(BINARY_INTEGER);
				}
				break;
			case PLS_INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6300; Match(PLS_INTEGER);
				}
				break;
			case NATURAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6301; Match(NATURAL);
				}
				break;
			case BINARY_FLOAT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6302; Match(BINARY_FLOAT);
				}
				break;
			case BINARY_DOUBLE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6303; Match(BINARY_DOUBLE);
				}
				break;
			case NATURALN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6304; Match(NATURALN);
				}
				break;
			case POSITIVE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6305; Match(POSITIVE);
				}
				break;
			case POSITIVEN:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6306; Match(POSITIVEN);
				}
				break;
			case SIGNTYPE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6307; Match(SIGNTYPE);
				}
				break;
			case SIMPLE_INTEGER:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6308; Match(SIMPLE_INTEGER);
				}
				break;
			case NVARCHAR2:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6309; Match(NVARCHAR2);
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6310; Match(DEC);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6311; Match(INTEGER);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6312; Match(INT);
				}
				break;
			case NUMERIC:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6313; Match(NUMERIC);
				}
				break;
			case SMALLINT:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6314; Match(SMALLINT);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6315; Match(NUMBER);
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6316; Match(DECIMAL);
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6317; Match(DOUBLE);
				State = 6319;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,901,Context) ) {
				case 1:
					{
					State = 6318; Match(PRECISION);
					}
					break;
				}
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6321; Match(FLOAT);
				}
				break;
			case REAL:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6322; Match(REAL);
				}
				break;
			case NCHAR:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6323; Match(NCHAR);
				}
				break;
			case LONG:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6324; Match(LONG);
				State = 6326;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,902,Context) ) {
				case 1:
					{
					State = 6325; Match(RAW);
					}
					break;
				}
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 24);
				{
				State = 6328; Match(CHAR);
				}
				break;
			case CHARACTER:
				EnterOuterAlt(_localctx, 25);
				{
				State = 6329; Match(CHARACTER);
				}
				break;
			case VARCHAR2:
				EnterOuterAlt(_localctx, 26);
				{
				State = 6330; Match(VARCHAR2);
				}
				break;
			case VARCHAR:
				EnterOuterAlt(_localctx, 27);
				{
				State = 6331; Match(VARCHAR);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 28);
				{
				State = 6332; Match(STRING);
				}
				break;
			case RAW:
				EnterOuterAlt(_localctx, 29);
				{
				State = 6333; Match(RAW);
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 30);
				{
				State = 6334; Match(BOOLEAN);
				}
				break;
			case DATE:
				EnterOuterAlt(_localctx, 31);
				{
				State = 6335; Match(DATE);
				}
				break;
			case ROWID:
				EnterOuterAlt(_localctx, 32);
				{
				State = 6336; Match(ROWID);
				}
				break;
			case UROWID:
				EnterOuterAlt(_localctx, 33);
				{
				State = 6337; Match(UROWID);
				}
				break;
			case YEAR:
				EnterOuterAlt(_localctx, 34);
				{
				State = 6338; Match(YEAR);
				}
				break;
			case MONTH:
				EnterOuterAlt(_localctx, 35);
				{
				State = 6339; Match(MONTH);
				}
				break;
			case DAY:
				EnterOuterAlt(_localctx, 36);
				{
				State = 6340; Match(DAY);
				}
				break;
			case HOUR:
				EnterOuterAlt(_localctx, 37);
				{
				State = 6341; Match(HOUR);
				}
				break;
			case MINUTE:
				EnterOuterAlt(_localctx, 38);
				{
				State = 6342; Match(MINUTE);
				}
				break;
			case SECOND:
				EnterOuterAlt(_localctx, 39);
				{
				State = 6343; Match(SECOND);
				}
				break;
			case TIMEZONE_HOUR:
				EnterOuterAlt(_localctx, 40);
				{
				State = 6344; Match(TIMEZONE_HOUR);
				}
				break;
			case TIMEZONE_MINUTE:
				EnterOuterAlt(_localctx, 41);
				{
				State = 6345; Match(TIMEZONE_MINUTE);
				}
				break;
			case TIMEZONE_REGION:
				EnterOuterAlt(_localctx, 42);
				{
				State = 6346; Match(TIMEZONE_REGION);
				}
				break;
			case TIMEZONE_ABBR:
				EnterOuterAlt(_localctx, 43);
				{
				State = 6347; Match(TIMEZONE_ABBR);
				}
				break;
			case TIMESTAMP:
				EnterOuterAlt(_localctx, 44);
				{
				State = 6348; Match(TIMESTAMP);
				}
				break;
			case TIMESTAMP_UNCONSTRAINED:
				EnterOuterAlt(_localctx, 45);
				{
				State = 6349; Match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED:
				EnterOuterAlt(_localctx, 46);
				{
				State = 6350; Match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED:
				EnterOuterAlt(_localctx, 47);
				{
				State = 6351; Match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case YMINTERVAL_UNCONSTRAINED:
				EnterOuterAlt(_localctx, 48);
				{
				State = 6352; Match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case DSINTERVAL_UNCONSTRAINED:
				EnterOuterAlt(_localctx, 49);
				{
				State = 6353; Match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case BFILE:
				EnterOuterAlt(_localctx, 50);
				{
				State = 6354; Match(BFILE);
				}
				break;
			case BLOB:
				EnterOuterAlt(_localctx, 51);
				{
				State = 6355; Match(BLOB);
				}
				break;
			case CLOB:
				EnterOuterAlt(_localctx, 52);
				{
				State = 6356; Match(CLOB);
				}
				break;
			case NCLOB:
				EnterOuterAlt(_localctx, 53);
				{
				State = 6357; Match(NCLOB);
				}
				break;
			case MLSLABEL:
				EnterOuterAlt(_localctx, 54);
				{
				State = 6358; Match(MLSLABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bind_variableContext : ParserRuleContext {
		public ITerminalNode[] BINDVAR() { return GetTokens(oracleParser.BINDVAR); }
		public ITerminalNode BINDVAR(int i) {
			return GetToken(oracleParser.BINDVAR, i);
		}
		public ITerminalNode[] UNSIGNED_INTEGER() { return GetTokens(oracleParser.UNSIGNED_INTEGER); }
		public ITerminalNode UNSIGNED_INTEGER(int i) {
			return GetToken(oracleParser.UNSIGNED_INTEGER, i);
		}
		public General_element_partContext[] general_element_part() {
			return GetRuleContexts<General_element_partContext>();
		}
		public General_element_partContext general_element_part(int i) {
			return GetRuleContext<General_element_partContext>(i);
		}
		public ITerminalNode INDICATOR() { return GetToken(oracleParser.INDICATOR, 0); }
		public Bind_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bind_variable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBind_variable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bind_variableContext bind_variable() {
		Bind_variableContext _localctx = new Bind_variableContext(Context, State);
		EnterRule(_localctx, 854, RULE_bind_variable);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6364;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINDVAR:
				{
				State = 6361; Match(BINDVAR);
				}
				break;
			case COLON:
				{
				State = 6362; Match(COLON);
				State = 6363; Match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6374;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,907,Context) ) {
			case 1:
				{
				State = 6367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDICATOR) {
					{
					State = 6366; Match(INDICATOR);
					}
				}

				State = 6372;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINDVAR:
					{
					State = 6369; Match(BINDVAR);
					}
					break;
				case COLON:
					{
					State = 6370; Match(COLON);
					State = 6371; Match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			State = 6380;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,908,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6376; Match(PERIOD);
					State = 6377; general_element_part();
					}
					} 
				}
				State = 6382;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,908,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_elementContext : ParserRuleContext {
		public General_element_partContext[] general_element_part() {
			return GetRuleContexts<General_element_partContext>();
		}
		public General_element_partContext general_element_part(int i) {
			return GetRuleContext<General_element_partContext>(i);
		}
		public General_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_elementContext general_element() {
		General_elementContext _localctx = new General_elementContext(Context, State);
		EnterRule(_localctx, 856, RULE_general_element);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6383; general_element_part();
			State = 6388;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,909,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6384; Match(PERIOD);
					State = 6385; general_element_part();
					}
					} 
				}
				State = 6390;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,909,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_element_partContext : ParserRuleContext {
		public Id_expressionContext[] id_expression() {
			return GetRuleContexts<Id_expressionContext>();
		}
		public Id_expressionContext id_expression(int i) {
			return GetRuleContext<Id_expressionContext>(i);
		}
		public ITerminalNode INTRODUCER() { return GetToken(oracleParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return GetRuleContext<Char_set_nameContext>(0);
		}
		public Link_nameContext link_name() {
			return GetRuleContext<Link_nameContext>(0);
		}
		public Function_argumentContext function_argument() {
			return GetRuleContext<Function_argumentContext>(0);
		}
		public General_element_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_element_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_element_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_element_partContext general_element_part() {
		General_element_partContext _localctx = new General_element_partContext(Context, State);
		EnterRule(_localctx, 858, RULE_general_element_part);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTRODUCER) {
				{
				State = 6391; Match(INTRODUCER);
				State = 6392; char_set_name();
				}
			}

			State = 6395; id_expression();
			State = 6400;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,911,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6396; Match(PERIOD);
					State = 6397; id_expression();
					}
					} 
				}
				State = 6402;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,911,Context);
			}
			State = 6405;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,912,Context) ) {
			case 1:
				{
				State = 6403; Match(AT_SIGN);
				State = 6404; link_name();
				}
				break;
			}
			State = 6408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,913,Context) ) {
			case 1:
				{
				State = 6407; function_argument();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_elementContext : ParserRuleContext {
		public Id_expressionContext[] id_expression() {
			return GetRuleContexts<Id_expressionContext>();
		}
		public Id_expressionContext id_expression(int i) {
			return GetRuleContext<Id_expressionContext>(i);
		}
		public ITerminalNode INTRODUCER() { return GetToken(oracleParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return GetRuleContext<Char_set_nameContext>(0);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_elementContext table_element() {
		Table_elementContext _localctx = new Table_elementContext(Context, State);
		EnterRule(_localctx, 860, RULE_table_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6412;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTRODUCER) {
				{
				State = 6410; Match(INTRODUCER);
				State = 6411; char_set_name();
				}
			}

			State = 6414; id_expression();
			State = 6419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PERIOD) {
				{
				{
				State = 6415; Match(PERIOD);
				State = 6416; id_expression();
				}
				}
				State = 6421;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_privilegeContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(oracleParser.ALL, 0); }
		public ITerminalNode PRIVILEGES() { return GetToken(oracleParser.PRIVILEGES, 0); }
		public ITerminalNode ALTER() { return GetToken(oracleParser.ALTER, 0); }
		public ITerminalNode DEBUG() { return GetToken(oracleParser.DEBUG, 0); }
		public ITerminalNode DELETE() { return GetToken(oracleParser.DELETE, 0); }
		public ITerminalNode EXECUTE() { return GetToken(oracleParser.EXECUTE, 0); }
		public ITerminalNode FLASHBACK() { return GetToken(oracleParser.FLASHBACK, 0); }
		public ITerminalNode ARCHIVE() { return GetToken(oracleParser.ARCHIVE, 0); }
		public ITerminalNode INDEX() { return GetToken(oracleParser.INDEX, 0); }
		public ITerminalNode INHERIT() { return GetToken(oracleParser.INHERIT, 0); }
		public ITerminalNode INSERT() { return GetToken(oracleParser.INSERT, 0); }
		public ITerminalNode KEEP() { return GetToken(oracleParser.KEEP, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(oracleParser.SEQUENCE, 0); }
		public ITerminalNode MERGE() { return GetToken(oracleParser.MERGE, 0); }
		public ITerminalNode VIEW() { return GetToken(oracleParser.VIEW, 0); }
		public ITerminalNode ON() { return GetToken(oracleParser.ON, 0); }
		public ITerminalNode COMMIT() { return GetToken(oracleParser.COMMIT, 0); }
		public ITerminalNode REFRESH() { return GetToken(oracleParser.REFRESH, 0); }
		public ITerminalNode QUERY() { return GetToken(oracleParser.QUERY, 0); }
		public ITerminalNode REWRITE() { return GetToken(oracleParser.REWRITE, 0); }
		public ITerminalNode READ() { return GetToken(oracleParser.READ, 0); }
		public ITerminalNode REFERENCES() { return GetToken(oracleParser.REFERENCES, 0); }
		public ITerminalNode SELECT() { return GetToken(oracleParser.SELECT, 0); }
		public ITerminalNode TRANSLATE() { return GetToken(oracleParser.TRANSLATE, 0); }
		public ITerminalNode SQL() { return GetToken(oracleParser.SQL, 0); }
		public ITerminalNode UNDER() { return GetToken(oracleParser.UNDER, 0); }
		public ITerminalNode UPDATE() { return GetToken(oracleParser.UPDATE, 0); }
		public ITerminalNode USE() { return GetToken(oracleParser.USE, 0); }
		public ITerminalNode WRITE() { return GetToken(oracleParser.WRITE, 0); }
		public Object_privilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_privilege; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_privilege(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_privilegeContext object_privilege() {
		Object_privilegeContext _localctx = new Object_privilegeContext(Context, State);
		EnterRule(_localctx, 862, RULE_object_privilege);
		int _la;
		try {
			State = 6454;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6422; Match(ALL);
				State = 6424;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVILEGES) {
					{
					State = 6423; Match(PRIVILEGES);
					}
				}

				}
				break;
			case ALTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6426; Match(ALTER);
				}
				break;
			case DEBUG:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6427; Match(DEBUG);
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6428; Match(DELETE);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6429; Match(EXECUTE);
				}
				break;
			case FLASHBACK:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6430; Match(FLASHBACK);
				State = 6431; Match(ARCHIVE);
				}
				break;
			case INDEX:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6432; Match(INDEX);
				}
				break;
			case INHERIT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6433; Match(INHERIT);
				State = 6434; Match(PRIVILEGES);
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6435; Match(INSERT);
				}
				break;
			case KEEP:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6436; Match(KEEP);
				State = 6437; Match(SEQUENCE);
				}
				break;
			case MERGE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6438; Match(MERGE);
				State = 6439; Match(VIEW);
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6440; Match(ON);
				State = 6441; Match(COMMIT);
				State = 6442; Match(REFRESH);
				}
				break;
			case QUERY:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6443; Match(QUERY);
				State = 6444; Match(REWRITE);
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6445; Match(READ);
				}
				break;
			case REFERENCES:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6446; Match(REFERENCES);
				}
				break;
			case SELECT:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6447; Match(SELECT);
				}
				break;
			case TRANSLATE:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6448; Match(TRANSLATE);
				State = 6449; Match(SQL);
				}
				break;
			case UNDER:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6450; Match(UNDER);
				}
				break;
			case UPDATE:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6451; Match(UPDATE);
				}
				break;
			case USE:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6452; Match(USE);
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6453; Match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class System_privilegeContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(oracleParser.ALL, 0); }
		public ITerminalNode PRIVILEGES() { return GetToken(oracleParser.PRIVILEGES, 0); }
		public ITerminalNode ADVISOR() { return GetToken(oracleParser.ADVISOR, 0); }
		public ITerminalNode ADMINISTER() { return GetToken(oracleParser.ADMINISTER, 0); }
		public ITerminalNode SQL() { return GetToken(oracleParser.SQL, 0); }
		public ITerminalNode TUNING() { return GetToken(oracleParser.TUNING, 0); }
		public ITerminalNode SET() { return GetToken(oracleParser.SET, 0); }
		public ITerminalNode ANY() { return GetToken(oracleParser.ANY, 0); }
		public ITerminalNode PROFILE() { return GetToken(oracleParser.PROFILE, 0); }
		public ITerminalNode ALTER() { return GetToken(oracleParser.ALTER, 0); }
		public ITerminalNode CREATE() { return GetToken(oracleParser.CREATE, 0); }
		public ITerminalNode DROP() { return GetToken(oracleParser.DROP, 0); }
		public ITerminalNode MANAGEMENT() { return GetToken(oracleParser.MANAGEMENT, 0); }
		public ITerminalNode OBJECT() { return GetToken(oracleParser.OBJECT, 0); }
		public ITerminalNode CLUSTER() { return GetToken(oracleParser.CLUSTER, 0); }
		public ITerminalNode CONTEXT() { return GetToken(oracleParser.CONTEXT, 0); }
		public ITerminalNode EXEMPT() { return GetToken(oracleParser.EXEMPT, 0); }
		public ITerminalNode REDACTION() { return GetToken(oracleParser.REDACTION, 0); }
		public ITerminalNode POLICY() { return GetToken(oracleParser.POLICY, 0); }
		public ITerminalNode DATABASE() { return GetToken(oracleParser.DATABASE, 0); }
		public ITerminalNode LINK() { return GetToken(oracleParser.LINK, 0); }
		public ITerminalNode PUBLIC() { return GetToken(oracleParser.PUBLIC, 0); }
		public ITerminalNode DEBUG() { return GetToken(oracleParser.DEBUG, 0); }
		public ITerminalNode CONNECT() { return GetToken(oracleParser.CONNECT, 0); }
		public ITerminalNode SESSION() { return GetToken(oracleParser.SESSION, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(oracleParser.PROCEDURE, 0); }
		public ITerminalNode ANALYZE() { return GetToken(oracleParser.ANALYZE, 0); }
		public ITerminalNode DICTIONARY() { return GetToken(oracleParser.DICTIONARY, 0); }
		public ITerminalNode DIMENSION() { return GetToken(oracleParser.DIMENSION, 0); }
		public ITerminalNode DIRECTORY() { return GetToken(oracleParser.DIRECTORY, 0); }
		public ITerminalNode EDITION() { return GetToken(oracleParser.EDITION, 0); }
		public ITerminalNode FLASHBACK() { return GetToken(oracleParser.FLASHBACK, 0); }
		public ITerminalNode ARCHIVE() { return GetToken(oracleParser.ARCHIVE, 0); }
		public ITerminalNode TABLE() { return GetToken(oracleParser.TABLE, 0); }
		public ITerminalNode INDEX() { return GetToken(oracleParser.INDEX, 0); }
		public ITerminalNode INDEXTYPE() { return GetToken(oracleParser.INDEXTYPE, 0); }
		public ITerminalNode EXECUTE() { return GetToken(oracleParser.EXECUTE, 0); }
		public ITerminalNode JOB() { return GetToken(oracleParser.JOB, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(oracleParser.EXTERNAL, 0); }
		public ITerminalNode CLASS() { return GetToken(oracleParser.CLASS, 0); }
		public ITerminalNode PROGRAM() { return GetToken(oracleParser.PROGRAM, 0); }
		public ITerminalNode MANAGE() { return GetToken(oracleParser.MANAGE, 0); }
		public ITerminalNode SCHEDULER() { return GetToken(oracleParser.SCHEDULER, 0); }
		public ITerminalNode KEY() { return GetToken(oracleParser.KEY, 0); }
		public ITerminalNode LIBRARY() { return GetToken(oracleParser.LIBRARY, 0); }
		public ITerminalNode LOGMINING() { return GetToken(oracleParser.LOGMINING, 0); }
		public ITerminalNode MATERIALIZED() { return GetToken(oracleParser.MATERIALIZED, 0); }
		public ITerminalNode VIEW() { return GetToken(oracleParser.VIEW, 0); }
		public ITerminalNode QUERY() { return GetToken(oracleParser.QUERY, 0); }
		public ITerminalNode REWRITE() { return GetToken(oracleParser.REWRITE, 0); }
		public ITerminalNode GLOBAL() { return GetToken(oracleParser.GLOBAL, 0); }
		public ITerminalNode ON() { return GetToken(oracleParser.ON, 0); }
		public ITerminalNode COMMIT() { return GetToken(oracleParser.COMMIT, 0); }
		public ITerminalNode REFRESH() { return GetToken(oracleParser.REFRESH, 0); }
		public ITerminalNode MINING() { return GetToken(oracleParser.MINING, 0); }
		public ITerminalNode MODEL() { return GetToken(oracleParser.MODEL, 0); }
		public ITerminalNode SELECT() { return GetToken(oracleParser.SELECT, 0); }
		public ITerminalNode COMMENT() { return GetToken(oracleParser.COMMENT, 0); }
		public ITerminalNode CUBE() { return GetToken(oracleParser.CUBE, 0); }
		public ITerminalNode UPDATE() { return GetToken(oracleParser.UPDATE, 0); }
		public ITerminalNode MEASURE() { return GetToken(oracleParser.MEASURE, 0); }
		public ITerminalNode FOLDER() { return GetToken(oracleParser.FOLDER, 0); }
		public ITerminalNode DELETE() { return GetToken(oracleParser.DELETE, 0); }
		public ITerminalNode INSERT() { return GetToken(oracleParser.INSERT, 0); }
		public ITerminalNode BUILD() { return GetToken(oracleParser.BUILD, 0); }
		public ITerminalNode PROCESS() { return GetToken(oracleParser.PROCESS, 0); }
		public ITerminalNode OPERATOR() { return GetToken(oracleParser.OPERATOR, 0); }
		public ITerminalNode OUTLINE() { return GetToken(oracleParser.OUTLINE, 0); }
		public ITerminalNode PLUGGABLE() { return GetToken(oracleParser.PLUGGABLE, 0); }
		public ITerminalNode CONTAINER() { return GetToken(oracleParser.CONTAINER, 0); }
		public ITerminalNode ROLE() { return GetToken(oracleParser.ROLE, 0); }
		public ITerminalNode GRANT() { return GetToken(oracleParser.GRANT, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(oracleParser.ROLLBACK, 0); }
		public ITerminalNode SEGMENT() { return GetToken(oracleParser.SEGMENT, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(oracleParser.SEQUENCE, 0); }
		public ITerminalNode RESTRICTED() { return GetToken(oracleParser.RESTRICTED, 0); }
		public ITerminalNode RESOURCE() { return GetToken(oracleParser.RESOURCE, 0); }
		public ITerminalNode COST() { return GetToken(oracleParser.COST, 0); }
		public ITerminalNode TRANSLATION() { return GetToken(oracleParser.TRANSLATION, 0); }
		public ITerminalNode USE() { return GetToken(oracleParser.USE, 0); }
		public ITerminalNode TRANSLATE() { return GetToken(oracleParser.TRANSLATE, 0); }
		public ITerminalNode SYNONYM() { return GetToken(oracleParser.SYNONYM, 0); }
		public ITerminalNode BACKUP() { return GetToken(oracleParser.BACKUP, 0); }
		public ITerminalNode LOCK() { return GetToken(oracleParser.LOCK, 0); }
		public ITerminalNode READ() { return GetToken(oracleParser.READ, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(oracleParser.TABLESPACE, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(oracleParser.UNLIMITED, 0); }
		public ITerminalNode TRIGGER() { return GetToken(oracleParser.TRIGGER, 0); }
		public ITerminalNode TYPE() { return GetToken(oracleParser.TYPE, 0); }
		public ITerminalNode UNDER() { return GetToken(oracleParser.UNDER, 0); }
		public ITerminalNode USER() { return GetToken(oracleParser.USER, 0); }
		public ITerminalNode MERGE() { return GetToken(oracleParser.MERGE, 0); }
		public ITerminalNode AUDIT() { return GetToken(oracleParser.AUDIT, 0); }
		public ITerminalNode BECOME() { return GetToken(oracleParser.BECOME, 0); }
		public ITerminalNode CHANGE() { return GetToken(oracleParser.CHANGE, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(oracleParser.NOTIFICATION, 0); }
		public ITerminalNode ACCESS() { return GetToken(oracleParser.ACCESS, 0); }
		public ITerminalNode FORCE() { return GetToken(oracleParser.FORCE, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(oracleParser.TRANSACTION, 0); }
		public ITerminalNode PRIVILEGE() { return GetToken(oracleParser.PRIVILEGE, 0); }
		public ITerminalNode INHERIT() { return GetToken(oracleParser.INHERIT, 0); }
		public ITerminalNode KEEP() { return GetToken(oracleParser.KEEP, 0); }
		public ITerminalNode DATE() { return GetToken(oracleParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(oracleParser.TIME, 0); }
		public ITerminalNode SYSGUID() { return GetToken(oracleParser.SYSGUID, 0); }
		public ITerminalNode PURGE() { return GetToken(oracleParser.PURGE, 0); }
		public ITerminalNode DBA_RECYCLEBIN() { return GetToken(oracleParser.DBA_RECYCLEBIN, 0); }
		public ITerminalNode RESUMABLE() { return GetToken(oracleParser.RESUMABLE, 0); }
		public ITerminalNode SYSBACKUP() { return GetToken(oracleParser.SYSBACKUP, 0); }
		public ITerminalNode SYSDBA() { return GetToken(oracleParser.SYSDBA, 0); }
		public ITerminalNode SYSDG() { return GetToken(oracleParser.SYSDG, 0); }
		public ITerminalNode SYSKM() { return GetToken(oracleParser.SYSKM, 0); }
		public ITerminalNode SYSOPER() { return GetToken(oracleParser.SYSOPER, 0); }
		public System_privilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_system_privilege; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSystem_privilege(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public System_privilegeContext system_privilege() {
		System_privilegeContext _localctx = new System_privilegeContext(Context, State);
		EnterRule(_localctx, 864, RULE_system_privilege);
		int _la;
		try {
			State = 6782;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,944,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6456; Match(ALL);
				State = 6457; Match(PRIVILEGES);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6458; Match(ADVISOR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6459; Match(ADMINISTER);
				State = 6461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6460; Match(ANY);
					}
				}

				State = 6463; Match(SQL);
				State = 6464; Match(TUNING);
				State = 6465; Match(SET);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6466;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6467; Match(ANY);
				State = 6468; Match(SQL);
				State = 6469; Match(PROFILE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6470; Match(ADMINISTER);
				State = 6471; Match(SQL);
				State = 6472; Match(MANAGEMENT);
				State = 6473; Match(OBJECT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6474; Match(CREATE);
				State = 6476;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6475; Match(ANY);
					}
				}

				State = 6478; Match(CLUSTER);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6479;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6480; Match(ANY);
				State = 6481; Match(CLUSTER);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6482;
				_la = TokenStream.LA(1);
				if ( !(_la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6483; Match(ANY);
				State = 6484; Match(CONTEXT);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6485; Match(EXEMPT);
				State = 6486; Match(REDACTION);
				State = 6487; Match(POLICY);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6488; Match(ALTER);
				State = 6489; Match(DATABASE);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6490;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUBLIC) {
					{
					State = 6491; Match(PUBLIC);
					}
				}

				State = 6494; Match(DATABASE);
				State = 6495; Match(LINK);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6496; Match(DROP);
				State = 6497; Match(PUBLIC);
				State = 6498; Match(DATABASE);
				State = 6499; Match(LINK);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6500; Match(DEBUG);
				State = 6501; Match(CONNECT);
				State = 6502; Match(SESSION);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6503; Match(DEBUG);
				State = 6504; Match(ANY);
				State = 6505; Match(PROCEDURE);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6506; Match(ANALYZE);
				State = 6507; Match(ANY);
				State = 6508; Match(DICTIONARY);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6509; Match(CREATE);
				State = 6511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6510; Match(ANY);
					}
				}

				State = 6513; Match(DIMENSION);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6514;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6515; Match(ANY);
				State = 6516; Match(DIMENSION);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6517;
				_la = TokenStream.LA(1);
				if ( !(_la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6518; Match(ANY);
				State = 6519; Match(DIRECTORY);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6520;
				_la = TokenStream.LA(1);
				if ( !(_la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6521; Match(ANY);
				State = 6522; Match(EDITION);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6523; Match(FLASHBACK);
				State = 6528;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ARCHIVE:
					{
					State = 6524; Match(ARCHIVE);
					State = 6525; Match(ADMINISTER);
					}
					break;
				case ANY:
					{
					State = 6526; Match(ANY);
					State = 6527; Match(TABLE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6530;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6531; Match(ANY);
				State = 6532; Match(INDEX);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6533; Match(CREATE);
				State = 6535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6534; Match(ANY);
					}
				}

				State = 6537; Match(INDEXTYPE);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6538;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6539; Match(ANY);
				State = 6540; Match(INDEXTYPE);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 6541; Match(CREATE);
				State = 6543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY || _la==EXTERNAL) {
					{
					State = 6542;
					_la = TokenStream.LA(1);
					if ( !(_la==ANY || _la==EXTERNAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 6545; Match(JOB);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 6546; Match(EXECUTE);
				State = 6547; Match(ANY);
				State = 6548;
				_la = TokenStream.LA(1);
				if ( !(_la==CLASS || _la==PROGRAM) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 6549; Match(MANAGE);
				State = 6550; Match(SCHEDULER);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 6551; Match(ADMINISTER);
				State = 6552; Match(KEY);
				State = 6553; Match(MANAGEMENT);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 6554; Match(CREATE);
				State = 6556;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6555; Match(ANY);
					}
				}

				State = 6558; Match(LIBRARY);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 6559;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6560; Match(ANY);
				State = 6561; Match(LIBRARY);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 6562; Match(LOGMINING);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 6563; Match(CREATE);
				State = 6565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6564; Match(ANY);
					}
				}

				State = 6567; Match(MATERIALIZED);
				State = 6568; Match(VIEW);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 6569;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6570; Match(ANY);
				State = 6571; Match(MATERIALIZED);
				State = 6572; Match(VIEW);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 6574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL) {
					{
					State = 6573; Match(GLOBAL);
					}
				}

				State = 6576; Match(QUERY);
				State = 6577; Match(REWRITE);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 6578; Match(ON);
				State = 6579; Match(COMMIT);
				State = 6580; Match(REFRESH);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 6581; Match(CREATE);
				State = 6583;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6582; Match(ANY);
					}
				}

				State = 6585; Match(MINING);
				State = 6586; Match(MODEL);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 6587;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==COMMENT || _la==DROP || _la==SELECT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6588; Match(ANY);
				State = 6589; Match(MINING);
				State = 6590; Match(MODEL);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 6591; Match(CREATE);
				State = 6593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6592; Match(ANY);
					}
				}

				State = 6595; Match(CUBE);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 6596;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==SELECT || _la==UPDATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6597; Match(ANY);
				State = 6598; Match(CUBE);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 6599; Match(CREATE);
				State = 6601;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6600; Match(ANY);
					}
				}

				State = 6603; Match(MEASURE);
				State = 6604; Match(FOLDER);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 6605;
				_la = TokenStream.LA(1);
				if ( !(_la==DELETE || _la==DROP || _la==INSERT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6606; Match(ANY);
				State = 6607; Match(MEASURE);
				State = 6608; Match(FOLDER);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 6609; Match(CREATE);
				State = 6611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6610; Match(ANY);
					}
				}

				State = 6613; Match(CUBE);
				State = 6614; Match(DIMENSION);
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 6615;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DELETE || _la==DROP || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6616; Match(ANY);
				State = 6617; Match(CUBE);
				State = 6618; Match(DIMENSION);
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 6619; Match(CREATE);
				State = 6621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6620; Match(ANY);
					}
				}

				State = 6623; Match(CUBE);
				State = 6624; Match(BUILD);
				State = 6625; Match(PROCESS);
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 6626;
				_la = TokenStream.LA(1);
				if ( !(_la==DROP || _la==UPDATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6627; Match(ANY);
				State = 6628; Match(CUBE);
				State = 6629; Match(BUILD);
				State = 6630; Match(PROCESS);
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 6631; Match(CREATE);
				State = 6633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6632; Match(ANY);
					}
				}

				State = 6635; Match(OPERATOR);
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 6636;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6637; Match(ANY);
				State = 6638; Match(OPERATOR);
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 6639;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6640; Match(ANY);
				State = 6641; Match(OUTLINE);
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 6642; Match(CREATE);
				State = 6643; Match(PLUGGABLE);
				State = 6644; Match(DATABASE);
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 6645; Match(SET);
				State = 6646; Match(CONTAINER);
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 6647; Match(CREATE);
				State = 6649;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6648; Match(ANY);
					}
				}

				State = 6651; Match(PROCEDURE);
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 6652;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6653; Match(ANY);
				State = 6654; Match(PROCEDURE);
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 6655;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6656; Match(PROFILE);
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 6657; Match(CREATE);
				State = 6658; Match(ROLE);
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 6659;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==GRANT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6660; Match(ANY);
				State = 6661; Match(ROLE);
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 6662;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6663; Match(ROLLBACK);
				State = 6664; Match(SEGMENT);
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 6665; Match(CREATE);
				State = 6667;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6666; Match(ANY);
					}
				}

				State = 6669; Match(SEQUENCE);
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 6670;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==SELECT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6671; Match(ANY);
				State = 6672; Match(SEQUENCE);
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 6673;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==RESTRICTED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6674; Match(SESSION);
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 6675; Match(ALTER);
				State = 6676; Match(RESOURCE);
				State = 6677; Match(COST);
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 6678; Match(CREATE);
				State = 6680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6679; Match(ANY);
					}
				}

				State = 6682; Match(SQL);
				State = 6683; Match(TRANSLATION);
				State = 6684; Match(PROFILE);
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 6685;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==USE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6686; Match(ANY);
				State = 6687; Match(SQL);
				State = 6688; Match(TRANSLATION);
				State = 6689; Match(PROFILE);
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 6690; Match(TRANSLATE);
				State = 6691; Match(ANY);
				State = 6692; Match(SQL);
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 6693; Match(CREATE);
				State = 6695;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6694; Match(ANY);
					}
				}

				State = 6697; Match(SYNONYM);
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 6698; Match(DROP);
				State = 6699; Match(ANY);
				State = 6700; Match(SYNONYM);
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 6701;
				_la = TokenStream.LA(1);
				if ( !(_la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6702; Match(PUBLIC);
				State = 6703; Match(SYNONYM);
				}
				break;
			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 6704; Match(CREATE);
				State = 6706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6705; Match(ANY);
					}
				}

				State = 6708; Match(TABLE);
				}
				break;
			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 6709;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==BACKUP || _la==COMMENT || _la==DELETE || _la==DROP || _la==INSERT || _la==LOCK || _la==READ || _la==SELECT || _la==UPDATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6710; Match(ANY);
				State = 6711; Match(TABLE);
				}
				break;
			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 6712;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP || _la==MANAGE || _la==UNLIMITED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6713; Match(TABLESPACE);
				}
				break;
			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 6714; Match(CREATE);
				State = 6716;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6715; Match(ANY);
					}
				}

				State = 6718; Match(TRIGGER);
				}
				break;
			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 6719;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6720; Match(ANY);
				State = 6721; Match(TRIGGER);
				}
				break;
			case 71:
				EnterOuterAlt(_localctx, 71);
				{
				State = 6722; Match(ADMINISTER);
				State = 6723; Match(DATABASE);
				State = 6724; Match(TRIGGER);
				}
				break;
			case 72:
				EnterOuterAlt(_localctx, 72);
				{
				State = 6725; Match(CREATE);
				State = 6727;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6726; Match(ANY);
					}
				}

				State = 6729; Match(TYPE);
				}
				break;
			case 73:
				EnterOuterAlt(_localctx, 73);
				{
				State = 6730;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE || _la==UNDER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6731; Match(ANY);
				State = 6732; Match(TYPE);
				}
				break;
			case 74:
				EnterOuterAlt(_localctx, 74);
				{
				State = 6733;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6734; Match(USER);
				}
				break;
			case 75:
				EnterOuterAlt(_localctx, 75);
				{
				State = 6735; Match(CREATE);
				State = 6737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6736; Match(ANY);
					}
				}

				State = 6739; Match(VIEW);
				}
				break;
			case 76:
				EnterOuterAlt(_localctx, 76);
				{
				State = 6740;
				_la = TokenStream.LA(1);
				if ( !(_la==DROP || _la==MERGE || _la==UNDER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6741; Match(ANY);
				State = 6742; Match(VIEW);
				}
				break;
			case 77:
				EnterOuterAlt(_localctx, 77);
				{
				State = 6743;
				_la = TokenStream.LA(1);
				if ( !(_la==ANALYZE || _la==AUDIT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6744; Match(ANY);
				}
				break;
			case 78:
				EnterOuterAlt(_localctx, 78);
				{
				State = 6745; Match(BECOME);
				State = 6746; Match(USER);
				}
				break;
			case 79:
				EnterOuterAlt(_localctx, 79);
				{
				State = 6747; Match(CHANGE);
				State = 6748; Match(NOTIFICATION);
				}
				break;
			case 80:
				EnterOuterAlt(_localctx, 80);
				{
				State = 6749; Match(EXEMPT);
				State = 6750; Match(ACCESS);
				State = 6751; Match(POLICY);
				}
				break;
			case 81:
				EnterOuterAlt(_localctx, 81);
				{
				State = 6752; Match(FORCE);
				State = 6754;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6753; Match(ANY);
					}
				}

				State = 6756; Match(TRANSACTION);
				}
				break;
			case 82:
				EnterOuterAlt(_localctx, 82);
				{
				State = 6757; Match(GRANT);
				State = 6758; Match(ANY);
				State = 6760;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OBJECT) {
					{
					State = 6759; Match(OBJECT);
					}
				}

				State = 6762; Match(PRIVILEGE);
				}
				break;
			case 83:
				EnterOuterAlt(_localctx, 83);
				{
				State = 6763; Match(INHERIT);
				State = 6764; Match(ANY);
				State = 6765; Match(PRIVILEGES);
				}
				break;
			case 84:
				EnterOuterAlt(_localctx, 84);
				{
				State = 6766; Match(KEEP);
				State = 6767; Match(DATE);
				State = 6768; Match(TIME);
				}
				break;
			case 85:
				EnterOuterAlt(_localctx, 85);
				{
				State = 6769; Match(KEEP);
				State = 6770; Match(SYSGUID);
				}
				break;
			case 86:
				EnterOuterAlt(_localctx, 86);
				{
				State = 6771; Match(PURGE);
				State = 6772; Match(DBA_RECYCLEBIN);
				}
				break;
			case 87:
				EnterOuterAlt(_localctx, 87);
				{
				State = 6773; Match(RESUMABLE);
				}
				break;
			case 88:
				EnterOuterAlt(_localctx, 88);
				{
				State = 6774; Match(SELECT);
				State = 6775; Match(ANY);
				State = 6776;
				_la = TokenStream.LA(1);
				if ( !(_la==DICTIONARY || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 89:
				EnterOuterAlt(_localctx, 89);
				{
				State = 6777; Match(SYSBACKUP);
				}
				break;
			case 90:
				EnterOuterAlt(_localctx, 90);
				{
				State = 6778; Match(SYSDBA);
				}
				break;
			case 91:
				EnterOuterAlt(_localctx, 91);
				{
				State = 6779; Match(SYSDG);
				}
				break;
			case 92:
				EnterOuterAlt(_localctx, 92);
				{
				State = 6780; Match(SYSKM);
				}
				break;
			case 93:
				EnterOuterAlt(_localctx, 93);
				{
				State = 6781; Match(SYSOPER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode TIMESTAMP() { return GetToken(oracleParser.TIMESTAMP, 0); }
		public Quoted_stringContext[] quoted_string() {
			return GetRuleContexts<Quoted_stringContext>();
		}
		public Quoted_stringContext quoted_string(int i) {
			return GetRuleContext<Quoted_stringContext>(i);
		}
		public Bind_variableContext[] bind_variable() {
			return GetRuleContexts<Bind_variableContext>();
		}
		public Bind_variableContext bind_variable(int i) {
			return GetRuleContext<Bind_variableContext>(i);
		}
		public ITerminalNode AT() { return GetToken(oracleParser.AT, 0); }
		public ITerminalNode TIME() { return GetToken(oracleParser.TIME, 0); }
		public ITerminalNode ZONE() { return GetToken(oracleParser.ZONE, 0); }
		public ITerminalNode INTERVAL() { return GetToken(oracleParser.INTERVAL, 0); }
		public ITerminalNode YEAR() { return GetToken(oracleParser.YEAR, 0); }
		public ITerminalNode MONTH() { return GetToken(oracleParser.MONTH, 0); }
		public ITerminalNode[] DAY() { return GetTokens(oracleParser.DAY); }
		public ITerminalNode DAY(int i) {
			return GetToken(oracleParser.DAY, i);
		}
		public ITerminalNode[] HOUR() { return GetTokens(oracleParser.HOUR); }
		public ITerminalNode HOUR(int i) {
			return GetToken(oracleParser.HOUR, i);
		}
		public ITerminalNode[] MINUTE() { return GetTokens(oracleParser.MINUTE); }
		public ITerminalNode MINUTE(int i) {
			return GetToken(oracleParser.MINUTE, i);
		}
		public ITerminalNode[] SECOND() { return GetTokens(oracleParser.SECOND); }
		public ITerminalNode SECOND(int i) {
			return GetToken(oracleParser.SECOND, i);
		}
		public General_element_partContext general_element_part() {
			return GetRuleContext<General_element_partContext>(0);
		}
		public ITerminalNode TO() { return GetToken(oracleParser.TO, 0); }
		public ITerminalNode[] UNSIGNED_INTEGER() { return GetTokens(oracleParser.UNSIGNED_INTEGER); }
		public ITerminalNode UNSIGNED_INTEGER(int i) {
			return GetToken(oracleParser.UNSIGNED_INTEGER, i);
		}
		public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		public ITerminalNode DATE() { return GetToken(oracleParser.DATE, 0); }
		public ITerminalNode NULL() { return GetToken(oracleParser.NULL, 0); }
		public ITerminalNode TRUE() { return GetToken(oracleParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(oracleParser.FALSE, 0); }
		public ITerminalNode DBTIMEZONE() { return GetToken(oracleParser.DBTIMEZONE, 0); }
		public ITerminalNode SESSIONTIMEZONE() { return GetToken(oracleParser.SESSIONTIMEZONE, 0); }
		public ITerminalNode MINVALUE() { return GetToken(oracleParser.MINVALUE, 0); }
		public ITerminalNode MAXVALUE() { return GetToken(oracleParser.MAXVALUE, 0); }
		public ITerminalNode DEFAULT() { return GetToken(oracleParser.DEFAULT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 866, RULE_constant);
		int _la;
		try {
			State = 6846;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TIMESTAMP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6784; Match(TIMESTAMP);
				State = 6787;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					State = 6785; quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					State = 6786; bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6793;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,946,Context) ) {
				case 1:
					{
					State = 6789; Match(AT);
					State = 6790; Match(TIME);
					State = 6791; Match(ZONE);
					State = 6792; quoted_string();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6795; Match(INTERVAL);
				State = 6799;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					State = 6796; quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					State = 6797; bind_variable();
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					State = 6798; general_element_part();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6801;
				_la = TokenStream.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==MONTH || _la==SECOND || _la==YEAR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6815;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,951,Context) ) {
				case 1:
					{
					State = 6802; Match(LEFT_PAREN);
					State = 6805;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						State = 6803; Match(UNSIGNED_INTEGER);
						}
						break;
					case BINDVAR:
					case COLON:
						{
						State = 6804; bind_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6812;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 6807; Match(COMMA);
						State = 6810;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							State = 6808; Match(UNSIGNED_INTEGER);
							}
							break;
						case BINDVAR:
						case COLON:
							{
							State = 6809; bind_variable();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					State = 6814; Match(RIGHT_PAREN);
					}
					break;
				}
				State = 6832;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,955,Context) ) {
				case 1:
					{
					State = 6817; Match(TO);
					State = 6830;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DAY:
						{
						State = 6818; Match(DAY);
						}
						break;
					case HOUR:
						{
						State = 6819; Match(HOUR);
						}
						break;
					case MINUTE:
						{
						State = 6820; Match(MINUTE);
						}
						break;
					case SECOND:
						{
						State = 6821; Match(SECOND);
						State = 6828;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,953,Context) ) {
						case 1:
							{
							State = 6822; Match(LEFT_PAREN);
							State = 6825;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								State = 6823; Match(UNSIGNED_INTEGER);
								}
								break;
							case BINDVAR:
							case COLON:
								{
								State = 6824; bind_variable();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 6827; Match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6834; numeric();
				}
				break;
			case DATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6835; Match(DATE);
				State = 6836; quoted_string();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6837; quoted_string();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6838; Match(NULL);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6839; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6840; Match(FALSE);
				}
				break;
			case DBTIMEZONE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6841; Match(DBTIMEZONE);
				}
				break;
			case SESSIONTIMEZONE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6842; Match(SESSIONTIMEZONE);
				}
				break;
			case MINVALUE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6843; Match(MINVALUE);
				}
				break;
			case MAXVALUE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6844; Match(MAXVALUE);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6845; Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericContext : ParserRuleContext {
		public ITerminalNode UNSIGNED_INTEGER() { return GetToken(oracleParser.UNSIGNED_INTEGER, 0); }
		public ITerminalNode APPROXIMATE_NUM_LIT() { return GetToken(oracleParser.APPROXIMATE_NUM_LIT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericContext numeric() {
		NumericContext _localctx = new NumericContext(Context, State);
		EnterRule(_localctx, 868, RULE_numeric);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6848;
			_la = TokenStream.LA(1);
			if ( !(_la==UNSIGNED_INTEGER || _la==APPROXIMATE_NUM_LIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_negativeContext : ParserRuleContext {
		public ITerminalNode MINUS_SIGN() { return GetToken(oracleParser.MINUS_SIGN, 0); }
		public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		public Numeric_negativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_negative; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_negative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_negativeContext numeric_negative() {
		Numeric_negativeContext _localctx = new Numeric_negativeContext(Context, State);
		EnterRule(_localctx, 870, RULE_numeric_negative);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6850; Match(MINUS_SIGN);
			State = 6851; numeric();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Quoted_stringContext : ParserRuleContext {
		public ITerminalNode CHAR_STRING() { return GetToken(oracleParser.CHAR_STRING, 0); }
		public ITerminalNode NATIONAL_CHAR_STRING_LIT() { return GetToken(oracleParser.NATIONAL_CHAR_STRING_LIT, 0); }
		public Quoted_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quoted_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuoted_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Quoted_stringContext quoted_string() {
		Quoted_stringContext _localctx = new Quoted_stringContext(Context, State);
		EnterRule(_localctx, 872, RULE_quoted_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6853;
			_la = TokenStream.LA(1);
			if ( !(_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public ITerminalNode INTRODUCER() { return GetToken(oracleParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return GetRuleContext<Char_set_nameContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 874, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6857;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTRODUCER) {
				{
				State = 6855; Match(INTRODUCER);
				State = 6856; char_set_name();
				}
			}

			State = 6859; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_expressionContext : ParserRuleContext {
		public Regular_idContext regular_id() {
			return GetRuleContext<Regular_idContext>(0);
		}
		public ITerminalNode DELIMITED_ID() { return GetToken(oracleParser.DELIMITED_ID, 0); }
		public Id_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Id_expressionContext id_expression() {
		Id_expressionContext _localctx = new Id_expressionContext(Context, State);
		EnterRule(_localctx, 876, RULE_id_expression);
		try {
			State = 6863;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6861; regular_id();
				}
				break;
			case DELIMITED_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6862; Match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Outer_join_signContext : ParserRuleContext {
		public Outer_join_signContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outer_join_sign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOuter_join_sign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Outer_join_signContext outer_join_sign() {
		Outer_join_signContext _localctx = new Outer_join_signContext(Context, State);
		EnterRule(_localctx, 878, RULE_outer_join_sign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6865; Match(LEFT_PAREN);
			State = 6866; Match(PLUS_SIGN);
			State = 6867; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Regular_idContext : ParserRuleContext {
		public ITerminalNode REGULAR_ID() { return GetToken(oracleParser.REGULAR_ID, 0); }
		public ITerminalNode A_LETTER() { return GetToken(oracleParser.A_LETTER, 0); }
		public ITerminalNode ADD() { return GetToken(oracleParser.ADD, 0); }
		public ITerminalNode AFTER() { return GetToken(oracleParser.AFTER, 0); }
		public ITerminalNode AGENT() { return GetToken(oracleParser.AGENT, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(oracleParser.AGGREGATE, 0); }
		public ITerminalNode ANALYZE() { return GetToken(oracleParser.ANALYZE, 0); }
		public ITerminalNode ARRAY() { return GetToken(oracleParser.ARRAY, 0); }
		public ITerminalNode ASSOCIATE() { return GetToken(oracleParser.ASSOCIATE, 0); }
		public ITerminalNode AT() { return GetToken(oracleParser.AT, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(oracleParser.ATTRIBUTE, 0); }
		public ITerminalNode AUDIT() { return GetToken(oracleParser.AUDIT, 0); }
		public ITerminalNode AUTHID() { return GetToken(oracleParser.AUTHID, 0); }
		public ITerminalNode AUTO() { return GetToken(oracleParser.AUTO, 0); }
		public ITerminalNode AUTOMATIC() { return GetToken(oracleParser.AUTOMATIC, 0); }
		public ITerminalNode AUTONOMOUS_TRANSACTION() { return GetToken(oracleParser.AUTONOMOUS_TRANSACTION, 0); }
		public ITerminalNode BATCH() { return GetToken(oracleParser.BATCH, 0); }
		public ITerminalNode BEFORE() { return GetToken(oracleParser.BEFORE, 0); }
		public ITerminalNode BFILE() { return GetToken(oracleParser.BFILE, 0); }
		public ITerminalNode BINARY_DOUBLE() { return GetToken(oracleParser.BINARY_DOUBLE, 0); }
		public ITerminalNode BINARY_FLOAT() { return GetToken(oracleParser.BINARY_FLOAT, 0); }
		public ITerminalNode BINARY_INTEGER() { return GetToken(oracleParser.BINARY_INTEGER, 0); }
		public ITerminalNode BLOB() { return GetToken(oracleParser.BLOB, 0); }
		public ITerminalNode BLOCK() { return GetToken(oracleParser.BLOCK, 0); }
		public ITerminalNode BODY() { return GetToken(oracleParser.BODY, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(oracleParser.BOOLEAN, 0); }
		public ITerminalNode BOTH() { return GetToken(oracleParser.BOTH, 0); }
		public ITerminalNode BULK() { return GetToken(oracleParser.BULK, 0); }
		public ITerminalNode BYTE() { return GetToken(oracleParser.BYTE, 0); }
		public ITerminalNode C_LETTER() { return GetToken(oracleParser.C_LETTER, 0); }
		public ITerminalNode CALL() { return GetToken(oracleParser.CALL, 0); }
		public ITerminalNode CANONICAL() { return GetToken(oracleParser.CANONICAL, 0); }
		public ITerminalNode CASCADE() { return GetToken(oracleParser.CASCADE, 0); }
		public ITerminalNode CAST() { return GetToken(oracleParser.CAST, 0); }
		public ITerminalNode CHAR() { return GetToken(oracleParser.CHAR, 0); }
		public ITerminalNode CHAR_CS() { return GetToken(oracleParser.CHAR_CS, 0); }
		public ITerminalNode CHARACTER() { return GetToken(oracleParser.CHARACTER, 0); }
		public ITerminalNode CHR() { return GetToken(oracleParser.CHR, 0); }
		public ITerminalNode CLOB() { return GetToken(oracleParser.CLOB, 0); }
		public ITerminalNode CLOSE() { return GetToken(oracleParser.CLOSE, 0); }
		public ITerminalNode CLUSTER() { return GetToken(oracleParser.CLUSTER, 0); }
		public ITerminalNode COLLECT() { return GetToken(oracleParser.COLLECT, 0); }
		public ITerminalNode COLUMNS() { return GetToken(oracleParser.COLUMNS, 0); }
		public ITerminalNode COMMENT() { return GetToken(oracleParser.COMMENT, 0); }
		public ITerminalNode COMMIT() { return GetToken(oracleParser.COMMIT, 0); }
		public ITerminalNode COMMITTED() { return GetToken(oracleParser.COMMITTED, 0); }
		public ITerminalNode COMPATIBILITY() { return GetToken(oracleParser.COMPATIBILITY, 0); }
		public ITerminalNode COMPILE() { return GetToken(oracleParser.COMPILE, 0); }
		public ITerminalNode COMPOUND() { return GetToken(oracleParser.COMPOUND, 0); }
		public ITerminalNode CONSTANT() { return GetToken(oracleParser.CONSTANT, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(oracleParser.CONSTRAINT, 0); }
		public ITerminalNode CONSTRAINTS() { return GetToken(oracleParser.CONSTRAINTS, 0); }
		public ITerminalNode CONSTRUCTOR() { return GetToken(oracleParser.CONSTRUCTOR, 0); }
		public ITerminalNode CONTENT() { return GetToken(oracleParser.CONTENT, 0); }
		public ITerminalNode CONTEXT() { return GetToken(oracleParser.CONTEXT, 0); }
		public ITerminalNode CONTINUE() { return GetToken(oracleParser.CONTINUE, 0); }
		public ITerminalNode CONVERT() { return GetToken(oracleParser.CONVERT, 0); }
		public ITerminalNode CORRUPT_XID() { return GetToken(oracleParser.CORRUPT_XID, 0); }
		public ITerminalNode CORRUPT_XID_ALL() { return GetToken(oracleParser.CORRUPT_XID_ALL, 0); }
		public ITerminalNode COST() { return GetToken(oracleParser.COST, 0); }
		public ITerminalNode COUNT() { return GetToken(oracleParser.COUNT, 0); }
		public ITerminalNode CROSS() { return GetToken(oracleParser.CROSS, 0); }
		public ITerminalNode CUBE() { return GetToken(oracleParser.CUBE, 0); }
		public ITerminalNode CURRENT_USER() { return GetToken(oracleParser.CURRENT_USER, 0); }
		public ITerminalNode CURSOR() { return GetToken(oracleParser.CURSOR, 0); }
		public ITerminalNode CUSTOMDATUM() { return GetToken(oracleParser.CUSTOMDATUM, 0); }
		public ITerminalNode CYCLE() { return GetToken(oracleParser.CYCLE, 0); }
		public ITerminalNode DATA() { return GetToken(oracleParser.DATA, 0); }
		public ITerminalNode DATABASE() { return GetToken(oracleParser.DATABASE, 0); }
		public ITerminalNode DAY() { return GetToken(oracleParser.DAY, 0); }
		public ITerminalNode DB_ROLE_CHANGE() { return GetToken(oracleParser.DB_ROLE_CHANGE, 0); }
		public ITerminalNode DBTIMEZONE() { return GetToken(oracleParser.DBTIMEZONE, 0); }
		public ITerminalNode DDL() { return GetToken(oracleParser.DDL, 0); }
		public ITerminalNode DEBUG() { return GetToken(oracleParser.DEBUG, 0); }
		public ITerminalNode DEC() { return GetToken(oracleParser.DEC, 0); }
		public ITerminalNode DECIMAL() { return GetToken(oracleParser.DECIMAL, 0); }
		public ITerminalNode DECOMPOSE() { return GetToken(oracleParser.DECOMPOSE, 0); }
		public ITerminalNode DECREMENT() { return GetToken(oracleParser.DECREMENT, 0); }
		public ITerminalNode DEFAULTS() { return GetToken(oracleParser.DEFAULTS, 0); }
		public ITerminalNode DEFERRED() { return GetToken(oracleParser.DEFERRED, 0); }
		public ITerminalNode DEFINER() { return GetToken(oracleParser.DEFINER, 0); }
		public ITerminalNode DELETE() { return GetToken(oracleParser.DELETE, 0); }
		public ITerminalNode DETERMINISTIC() { return GetToken(oracleParser.DETERMINISTIC, 0); }
		public ITerminalNode DIMENSION() { return GetToken(oracleParser.DIMENSION, 0); }
		public ITerminalNode DISABLE() { return GetToken(oracleParser.DISABLE, 0); }
		public ITerminalNode DISASSOCIATE() { return GetToken(oracleParser.DISASSOCIATE, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(oracleParser.DOCUMENT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(oracleParser.DOUBLE, 0); }
		public ITerminalNode DSINTERVAL_UNCONSTRAINED() { return GetToken(oracleParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public ITerminalNode EACH() { return GetToken(oracleParser.EACH, 0); }
		public ITerminalNode ELEMENT() { return GetToken(oracleParser.ELEMENT, 0); }
		public ITerminalNode EMPTY() { return GetToken(oracleParser.EMPTY, 0); }
		public ITerminalNode ENABLE() { return GetToken(oracleParser.ENABLE, 0); }
		public ITerminalNode ENCODING() { return GetToken(oracleParser.ENCODING, 0); }
		public ITerminalNode ENTITYESCAPING() { return GetToken(oracleParser.ENTITYESCAPING, 0); }
		public ITerminalNode ERR() { return GetToken(oracleParser.ERR, 0); }
		public ITerminalNode ERRORS() { return GetToken(oracleParser.ERRORS, 0); }
		public ITerminalNode ESCAPE() { return GetToken(oracleParser.ESCAPE, 0); }
		public ITerminalNode EVALNAME() { return GetToken(oracleParser.EVALNAME, 0); }
		public ITerminalNode EXCEPTION() { return GetToken(oracleParser.EXCEPTION, 0); }
		public ITerminalNode EXCEPTION_INIT() { return GetToken(oracleParser.EXCEPTION_INIT, 0); }
		public ITerminalNode EXCEPTIONS() { return GetToken(oracleParser.EXCEPTIONS, 0); }
		public ITerminalNode EXCLUDE() { return GetToken(oracleParser.EXCLUDE, 0); }
		public ITerminalNode EXECUTE() { return GetToken(oracleParser.EXECUTE, 0); }
		public ITerminalNode EXIT() { return GetToken(oracleParser.EXIT, 0); }
		public ITerminalNode EXPLAIN() { return GetToken(oracleParser.EXPLAIN, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(oracleParser.EXTERNAL, 0); }
		public ITerminalNode EXTRACT() { return GetToken(oracleParser.EXTRACT, 0); }
		public ITerminalNode FAILURE() { return GetToken(oracleParser.FAILURE, 0); }
		public ITerminalNode FINAL() { return GetToken(oracleParser.FINAL, 0); }
		public ITerminalNode FIRST() { return GetToken(oracleParser.FIRST, 0); }
		public ITerminalNode FIRST_VALUE() { return GetToken(oracleParser.FIRST_VALUE, 0); }
		public ITerminalNode FLOAT() { return GetToken(oracleParser.FLOAT, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(oracleParser.FOLLOWING, 0); }
		public ITerminalNode FOLLOWS() { return GetToken(oracleParser.FOLLOWS, 0); }
		public ITerminalNode FORALL() { return GetToken(oracleParser.FORALL, 0); }
		public ITerminalNode FORCE() { return GetToken(oracleParser.FORCE, 0); }
		public ITerminalNode FULL() { return GetToken(oracleParser.FULL, 0); }
		public ITerminalNode FUNCTION() { return GetToken(oracleParser.FUNCTION, 0); }
		public ITerminalNode GROUPING() { return GetToken(oracleParser.GROUPING, 0); }
		public ITerminalNode HASH() { return GetToken(oracleParser.HASH, 0); }
		public ITerminalNode HIDE() { return GetToken(oracleParser.HIDE, 0); }
		public ITerminalNode HOUR() { return GetToken(oracleParser.HOUR, 0); }
		public ITerminalNode ID() { return GetToken(oracleParser.ID, 0); }
		public ITerminalNode IGNORE() { return GetToken(oracleParser.IGNORE, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(oracleParser.IMMEDIATE, 0); }
		public ITerminalNode INCLUDE() { return GetToken(oracleParser.INCLUDE, 0); }
		public ITerminalNode INCLUDING() { return GetToken(oracleParser.INCLUDING, 0); }
		public ITerminalNode INCREMENT() { return GetToken(oracleParser.INCREMENT, 0); }
		public ITerminalNode INDENT() { return GetToken(oracleParser.INDENT, 0); }
		public ITerminalNode INDEXED() { return GetToken(oracleParser.INDEXED, 0); }
		public ITerminalNode INDICATOR() { return GetToken(oracleParser.INDICATOR, 0); }
		public ITerminalNode INDICES() { return GetToken(oracleParser.INDICES, 0); }
		public ITerminalNode INFINITE() { return GetToken(oracleParser.INFINITE, 0); }
		public ITerminalNode INLINE() { return GetToken(oracleParser.INLINE, 0); }
		public ITerminalNode INNER() { return GetToken(oracleParser.INNER, 0); }
		public ITerminalNode INOUT() { return GetToken(oracleParser.INOUT, 0); }
		public ITerminalNode INSTANTIABLE() { return GetToken(oracleParser.INSTANTIABLE, 0); }
		public ITerminalNode INSTEAD() { return GetToken(oracleParser.INSTEAD, 0); }
		public ITerminalNode INT() { return GetToken(oracleParser.INT, 0); }
		public ITerminalNode INTEGER() { return GetToken(oracleParser.INTEGER, 0); }
		public ITerminalNode INTERVAL() { return GetToken(oracleParser.INTERVAL, 0); }
		public ITerminalNode INVALIDATE() { return GetToken(oracleParser.INVALIDATE, 0); }
		public ITerminalNode ISOLATION() { return GetToken(oracleParser.ISOLATION, 0); }
		public ITerminalNode ITERATE() { return GetToken(oracleParser.ITERATE, 0); }
		public ITerminalNode JAVA() { return GetToken(oracleParser.JAVA, 0); }
		public ITerminalNode JOIN() { return GetToken(oracleParser.JOIN, 0); }
		public ITerminalNode KEEP() { return GetToken(oracleParser.KEEP, 0); }
		public ITerminalNode KEY() { return GetToken(oracleParser.KEY, 0); }
		public ITerminalNode LANGUAGE() { return GetToken(oracleParser.LANGUAGE, 0); }
		public ITerminalNode LAST() { return GetToken(oracleParser.LAST, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(oracleParser.LAST_VALUE, 0); }
		public ITerminalNode LEADING() { return GetToken(oracleParser.LEADING, 0); }
		public ITerminalNode LEFT() { return GetToken(oracleParser.LEFT, 0); }
		public ITerminalNode LEVEL() { return GetToken(oracleParser.LEVEL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(oracleParser.LIBRARY, 0); }
		public ITerminalNode LIKE2() { return GetToken(oracleParser.LIKE2, 0); }
		public ITerminalNode LIKE4() { return GetToken(oracleParser.LIKE4, 0); }
		public ITerminalNode LIKEC() { return GetToken(oracleParser.LIKEC, 0); }
		public ITerminalNode LIMIT() { return GetToken(oracleParser.LIMIT, 0); }
		public ITerminalNode LINK() { return GetToken(oracleParser.LINK, 0); }
		public ITerminalNode LOCAL() { return GetToken(oracleParser.LOCAL, 0); }
		public ITerminalNode LOCKED() { return GetToken(oracleParser.LOCKED, 0); }
		public ITerminalNode LOG() { return GetToken(oracleParser.LOG, 0); }
		public ITerminalNode LOGOFF() { return GetToken(oracleParser.LOGOFF, 0); }
		public ITerminalNode LOGON() { return GetToken(oracleParser.LOGON, 0); }
		public ITerminalNode LONG() { return GetToken(oracleParser.LONG, 0); }
		public ITerminalNode LOOP() { return GetToken(oracleParser.LOOP, 0); }
		public ITerminalNode MAIN() { return GetToken(oracleParser.MAIN, 0); }
		public ITerminalNode MAP() { return GetToken(oracleParser.MAP, 0); }
		public ITerminalNode MATCHED() { return GetToken(oracleParser.MATCHED, 0); }
		public ITerminalNode MAXVALUE() { return GetToken(oracleParser.MAXVALUE, 0); }
		public ITerminalNode MEASURES() { return GetToken(oracleParser.MEASURES, 0); }
		public ITerminalNode MEMBER() { return GetToken(oracleParser.MEMBER, 0); }
		public ITerminalNode MERGE() { return GetToken(oracleParser.MERGE, 0); }
		public ITerminalNode MINIMUM() { return GetToken(oracleParser.MINIMUM, 0); }
		public ITerminalNode MINUTE() { return GetToken(oracleParser.MINUTE, 0); }
		public ITerminalNode MINVALUE() { return GetToken(oracleParser.MINVALUE, 0); }
		public ITerminalNode MLSLABEL() { return GetToken(oracleParser.MLSLABEL, 0); }
		public ITerminalNode MODEL() { return GetToken(oracleParser.MODEL, 0); }
		public ITerminalNode MODIFY() { return GetToken(oracleParser.MODIFY, 0); }
		public ITerminalNode MONTH() { return GetToken(oracleParser.MONTH, 0); }
		public ITerminalNode MULTISET() { return GetToken(oracleParser.MULTISET, 0); }
		public ITerminalNode NAME() { return GetToken(oracleParser.NAME, 0); }
		public ITerminalNode NAN() { return GetToken(oracleParser.NAN, 0); }
		public ITerminalNode NATURAL() { return GetToken(oracleParser.NATURAL, 0); }
		public ITerminalNode NATURALN() { return GetToken(oracleParser.NATURALN, 0); }
		public ITerminalNode NAV() { return GetToken(oracleParser.NAV, 0); }
		public ITerminalNode NCHAR() { return GetToken(oracleParser.NCHAR, 0); }
		public ITerminalNode NCHAR_CS() { return GetToken(oracleParser.NCHAR_CS, 0); }
		public ITerminalNode NCLOB() { return GetToken(oracleParser.NCLOB, 0); }
		public ITerminalNode NESTED() { return GetToken(oracleParser.NESTED, 0); }
		public ITerminalNode NEW() { return GetToken(oracleParser.NEW, 0); }
		public ITerminalNode NO() { return GetToken(oracleParser.NO, 0); }
		public ITerminalNode NOAUDIT() { return GetToken(oracleParser.NOAUDIT, 0); }
		public ITerminalNode NOCOPY() { return GetToken(oracleParser.NOCOPY, 0); }
		public ITerminalNode NOCYCLE() { return GetToken(oracleParser.NOCYCLE, 0); }
		public ITerminalNode NOENTITYESCAPING() { return GetToken(oracleParser.NOENTITYESCAPING, 0); }
		public ITerminalNode NONE() { return GetToken(oracleParser.NONE, 0); }
		public ITerminalNode NOSCHEMACHECK() { return GetToken(oracleParser.NOSCHEMACHECK, 0); }
		public ITerminalNode NULLS() { return GetToken(oracleParser.NULLS, 0); }
		public ITerminalNode NUMBER() { return GetToken(oracleParser.NUMBER, 0); }
		public ITerminalNode NUMERIC() { return GetToken(oracleParser.NUMERIC, 0); }
		public ITerminalNode NVARCHAR2() { return GetToken(oracleParser.NVARCHAR2, 0); }
		public ITerminalNode OBJECT() { return GetToken(oracleParser.OBJECT, 0); }
		public ITerminalNode OFF() { return GetToken(oracleParser.OFF, 0); }
		public ITerminalNode OID() { return GetToken(oracleParser.OID, 0); }
		public ITerminalNode OLD() { return GetToken(oracleParser.OLD, 0); }
		public ITerminalNode ONLY() { return GetToken(oracleParser.ONLY, 0); }
		public ITerminalNode OPEN() { return GetToken(oracleParser.OPEN, 0); }
		public ITerminalNode OPERATOR() { return GetToken(oracleParser.OPERATOR, 0); }
		public ITerminalNode ORADATA() { return GetToken(oracleParser.ORADATA, 0); }
		public ITerminalNode ORDINALITY() { return GetToken(oracleParser.ORDINALITY, 0); }
		public ITerminalNode OSERROR() { return GetToken(oracleParser.OSERROR, 0); }
		public ITerminalNode OUT() { return GetToken(oracleParser.OUT, 0); }
		public ITerminalNode OUTER() { return GetToken(oracleParser.OUTER, 0); }
		public ITerminalNode OVER() { return GetToken(oracleParser.OVER, 0); }
		public ITerminalNode OVERRIDING() { return GetToken(oracleParser.OVERRIDING, 0); }
		public ITerminalNode PACKAGE() { return GetToken(oracleParser.PACKAGE, 0); }
		public ITerminalNode PARALLEL_ENABLE() { return GetToken(oracleParser.PARALLEL_ENABLE, 0); }
		public ITerminalNode PARAMETERS() { return GetToken(oracleParser.PARAMETERS, 0); }
		public ITerminalNode PARENT() { return GetToken(oracleParser.PARENT, 0); }
		public ITerminalNode PARTITION() { return GetToken(oracleParser.PARTITION, 0); }
		public ITerminalNode PASSING() { return GetToken(oracleParser.PASSING, 0); }
		public ITerminalNode PATH() { return GetToken(oracleParser.PATH, 0); }
		public ITerminalNode PIPELINED() { return GetToken(oracleParser.PIPELINED, 0); }
		public ITerminalNode PLAN() { return GetToken(oracleParser.PLAN, 0); }
		public ITerminalNode PLS_INTEGER() { return GetToken(oracleParser.PLS_INTEGER, 0); }
		public ITerminalNode POSITIVE() { return GetToken(oracleParser.POSITIVE, 0); }
		public ITerminalNode POSITIVEN() { return GetToken(oracleParser.POSITIVEN, 0); }
		public ITerminalNode PRAGMA() { return GetToken(oracleParser.PRAGMA, 0); }
		public ITerminalNode PRECEDING() { return GetToken(oracleParser.PRECEDING, 0); }
		public ITerminalNode PRECISION() { return GetToken(oracleParser.PRECISION, 0); }
		public ITerminalNode PRESENT() { return GetToken(oracleParser.PRESENT, 0); }
		public ITerminalNode PROGRAM() { return GetToken(oracleParser.PROGRAM, 0); }
		public ITerminalNode RAISE() { return GetToken(oracleParser.RAISE, 0); }
		public ITerminalNode RANGE() { return GetToken(oracleParser.RANGE, 0); }
		public ITerminalNode RAW() { return GetToken(oracleParser.RAW, 0); }
		public ITerminalNode READ() { return GetToken(oracleParser.READ, 0); }
		public ITerminalNode REAL() { return GetToken(oracleParser.REAL, 0); }
		public ITerminalNode RECORD() { return GetToken(oracleParser.RECORD, 0); }
		public ITerminalNode REF() { return GetToken(oracleParser.REF, 0); }
		public ITerminalNode REFERENCE() { return GetToken(oracleParser.REFERENCE, 0); }
		public ITerminalNode REFERENCING() { return GetToken(oracleParser.REFERENCING, 0); }
		public ITerminalNode REJECT() { return GetToken(oracleParser.REJECT, 0); }
		public ITerminalNode RELIES_ON() { return GetToken(oracleParser.RELIES_ON, 0); }
		public ITerminalNode RENAME() { return GetToken(oracleParser.RENAME, 0); }
		public ITerminalNode REPLACE() { return GetToken(oracleParser.REPLACE, 0); }
		public ITerminalNode RESPECT() { return GetToken(oracleParser.RESPECT, 0); }
		public ITerminalNode RESTRICT_REFERENCES() { return GetToken(oracleParser.RESTRICT_REFERENCES, 0); }
		public ITerminalNode RESULT() { return GetToken(oracleParser.RESULT, 0); }
		public ITerminalNode RESULT_CACHE() { return GetToken(oracleParser.RESULT_CACHE, 0); }
		public ITerminalNode RETURN() { return GetToken(oracleParser.RETURN, 0); }
		public ITerminalNode RETURNING() { return GetToken(oracleParser.RETURNING, 0); }
		public ITerminalNode REUSE() { return GetToken(oracleParser.REUSE, 0); }
		public ITerminalNode REVERSE() { return GetToken(oracleParser.REVERSE, 0); }
		public ITerminalNode RIGHT() { return GetToken(oracleParser.RIGHT, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(oracleParser.ROLLBACK, 0); }
		public ITerminalNode ROLLUP() { return GetToken(oracleParser.ROLLUP, 0); }
		public ITerminalNode ROW() { return GetToken(oracleParser.ROW, 0); }
		public ITerminalNode ROWID() { return GetToken(oracleParser.ROWID, 0); }
		public ITerminalNode ROWS() { return GetToken(oracleParser.ROWS, 0); }
		public ITerminalNode RULES() { return GetToken(oracleParser.RULES, 0); }
		public ITerminalNode SAMPLE() { return GetToken(oracleParser.SAMPLE, 0); }
		public ITerminalNode SAVE() { return GetToken(oracleParser.SAVE, 0); }
		public ITerminalNode SAVEPOINT() { return GetToken(oracleParser.SAVEPOINT, 0); }
		public ITerminalNode SCHEMA() { return GetToken(oracleParser.SCHEMA, 0); }
		public ITerminalNode SCHEMACHECK() { return GetToken(oracleParser.SCHEMACHECK, 0); }
		public ITerminalNode SCN() { return GetToken(oracleParser.SCN, 0); }
		public ITerminalNode SECOND() { return GetToken(oracleParser.SECOND, 0); }
		public ITerminalNode SEED() { return GetToken(oracleParser.SEED, 0); }
		public ITerminalNode SEGMENT() { return GetToken(oracleParser.SEGMENT, 0); }
		public ITerminalNode SELF() { return GetToken(oracleParser.SELF, 0); }
		public ITerminalNode SEQUENTIAL() { return GetToken(oracleParser.SEQUENTIAL, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(oracleParser.SERIALIZABLE, 0); }
		public ITerminalNode SERIALLY_REUSABLE() { return GetToken(oracleParser.SERIALLY_REUSABLE, 0); }
		public ITerminalNode SERVERERROR() { return GetToken(oracleParser.SERVERERROR, 0); }
		public ITerminalNode SESSIONTIMEZONE() { return GetToken(oracleParser.SESSIONTIMEZONE, 0); }
		public ITerminalNode SET() { return GetToken(oracleParser.SET, 0); }
		public ITerminalNode SETS() { return GetToken(oracleParser.SETS, 0); }
		public ITerminalNode SETTINGS() { return GetToken(oracleParser.SETTINGS, 0); }
		public ITerminalNode SHOW() { return GetToken(oracleParser.SHOW, 0); }
		public ITerminalNode SHUTDOWN() { return GetToken(oracleParser.SHUTDOWN, 0); }
		public ITerminalNode SIBLINGS() { return GetToken(oracleParser.SIBLINGS, 0); }
		public ITerminalNode SIGNTYPE() { return GetToken(oracleParser.SIGNTYPE, 0); }
		public ITerminalNode SIMPLE_INTEGER() { return GetToken(oracleParser.SIMPLE_INTEGER, 0); }
		public ITerminalNode SINGLE() { return GetToken(oracleParser.SINGLE, 0); }
		public ITerminalNode SKIP_() { return GetToken(oracleParser.SKIP_, 0); }
		public ITerminalNode SMALLINT() { return GetToken(oracleParser.SMALLINT, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(oracleParser.SNAPSHOT, 0); }
		public ITerminalNode SOME() { return GetToken(oracleParser.SOME, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(oracleParser.SPECIFICATION, 0); }
		public ITerminalNode SQLDATA() { return GetToken(oracleParser.SQLDATA, 0); }
		public ITerminalNode SQLERROR() { return GetToken(oracleParser.SQLERROR, 0); }
		public ITerminalNode STANDALONE() { return GetToken(oracleParser.STANDALONE, 0); }
		public ITerminalNode STARTUP() { return GetToken(oracleParser.STARTUP, 0); }
		public ITerminalNode STATEMENT() { return GetToken(oracleParser.STATEMENT, 0); }
		public ITerminalNode STATEMENT_ID() { return GetToken(oracleParser.STATEMENT_ID, 0); }
		public ITerminalNode STATIC() { return GetToken(oracleParser.STATIC, 0); }
		public ITerminalNode STATISTICS() { return GetToken(oracleParser.STATISTICS, 0); }
		public ITerminalNode STRING() { return GetToken(oracleParser.STRING, 0); }
		public ITerminalNode STORE() { return GetToken(oracleParser.STORE, 0); }
		public ITerminalNode SUBSTR() { return GetToken(oracleParser.SUBSTR, 0); }
		public ITerminalNode SUBMULTISET() { return GetToken(oracleParser.SUBMULTISET, 0); }
		public ITerminalNode SUBPARTITION() { return GetToken(oracleParser.SUBPARTITION, 0); }
		public ITerminalNode SUBSTITUTABLE() { return GetToken(oracleParser.SUBSTITUTABLE, 0); }
		public ITerminalNode SUBTYPE() { return GetToken(oracleParser.SUBTYPE, 0); }
		public ITerminalNode SUCCESS() { return GetToken(oracleParser.SUCCESS, 0); }
		public ITerminalNode SUSPEND() { return GetToken(oracleParser.SUSPEND, 0); }
		public ITerminalNode SYSDATE() { return GetToken(oracleParser.SYSDATE, 0); }
		public ITerminalNode TEMPORARY() { return GetToken(oracleParser.TEMPORARY, 0); }
		public ITerminalNode TIME() { return GetToken(oracleParser.TIME, 0); }
		public ITerminalNode TIMESTAMP() { return GetToken(oracleParser.TIMESTAMP, 0); }
		public ITerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return GetToken(oracleParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public ITerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return GetToken(oracleParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public ITerminalNode TIMESTAMP_UNCONSTRAINED() { return GetToken(oracleParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public ITerminalNode TIMEZONE_ABBR() { return GetToken(oracleParser.TIMEZONE_ABBR, 0); }
		public ITerminalNode TIMEZONE_HOUR() { return GetToken(oracleParser.TIMEZONE_HOUR, 0); }
		public ITerminalNode TIMEZONE_MINUTE() { return GetToken(oracleParser.TIMEZONE_MINUTE, 0); }
		public ITerminalNode TIMEZONE_REGION() { return GetToken(oracleParser.TIMEZONE_REGION, 0); }
		public ITerminalNode TRAILING() { return GetToken(oracleParser.TRAILING, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(oracleParser.TRANSACTION, 0); }
		public ITerminalNode TRANSLATE() { return GetToken(oracleParser.TRANSLATE, 0); }
		public ITerminalNode TREAT() { return GetToken(oracleParser.TREAT, 0); }
		public ITerminalNode TRIGGER() { return GetToken(oracleParser.TRIGGER, 0); }
		public ITerminalNode TRIM() { return GetToken(oracleParser.TRIM, 0); }
		public ITerminalNode TRUNCATE() { return GetToken(oracleParser.TRUNCATE, 0); }
		public ITerminalNode TYPE() { return GetToken(oracleParser.TYPE, 0); }
		public ITerminalNode UNBOUNDED() { return GetToken(oracleParser.UNBOUNDED, 0); }
		public ITerminalNode UNDER() { return GetToken(oracleParser.UNDER, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(oracleParser.UNLIMITED, 0); }
		public ITerminalNode UNTIL() { return GetToken(oracleParser.UNTIL, 0); }
		public ITerminalNode UPDATED() { return GetToken(oracleParser.UPDATED, 0); }
		public ITerminalNode UPSERT() { return GetToken(oracleParser.UPSERT, 0); }
		public ITerminalNode UROWID() { return GetToken(oracleParser.UROWID, 0); }
		public ITerminalNode USE() { return GetToken(oracleParser.USE, 0); }
		public ITerminalNode USER() { return GetToken(oracleParser.USER, 0); }
		public ITerminalNode USERS() { return GetToken(oracleParser.USERS, 0); }
		public ITerminalNode VALIDATE() { return GetToken(oracleParser.VALIDATE, 0); }
		public ITerminalNode VALUE() { return GetToken(oracleParser.VALUE, 0); }
		public ITerminalNode VARCHAR() { return GetToken(oracleParser.VARCHAR, 0); }
		public ITerminalNode VARCHAR2() { return GetToken(oracleParser.VARCHAR2, 0); }
		public ITerminalNode VARIABLE() { return GetToken(oracleParser.VARIABLE, 0); }
		public ITerminalNode VARRAY() { return GetToken(oracleParser.VARRAY, 0); }
		public ITerminalNode VARYING() { return GetToken(oracleParser.VARYING, 0); }
		public ITerminalNode VERSION() { return GetToken(oracleParser.VERSION, 0); }
		public ITerminalNode VERSIONS() { return GetToken(oracleParser.VERSIONS, 0); }
		public ITerminalNode WAIT() { return GetToken(oracleParser.WAIT, 0); }
		public ITerminalNode WARNING() { return GetToken(oracleParser.WARNING, 0); }
		public ITerminalNode WELLFORMED() { return GetToken(oracleParser.WELLFORMED, 0); }
		public ITerminalNode WHENEVER() { return GetToken(oracleParser.WHENEVER, 0); }
		public ITerminalNode WHILE() { return GetToken(oracleParser.WHILE, 0); }
		public ITerminalNode WITHIN() { return GetToken(oracleParser.WITHIN, 0); }
		public ITerminalNode WORK() { return GetToken(oracleParser.WORK, 0); }
		public ITerminalNode WRITE() { return GetToken(oracleParser.WRITE, 0); }
		public ITerminalNode XML() { return GetToken(oracleParser.XML, 0); }
		public ITerminalNode XMLAGG() { return GetToken(oracleParser.XMLAGG, 0); }
		public ITerminalNode XMLATTRIBUTES() { return GetToken(oracleParser.XMLATTRIBUTES, 0); }
		public ITerminalNode XMLCAST() { return GetToken(oracleParser.XMLCAST, 0); }
		public ITerminalNode XMLCOLATTVAL() { return GetToken(oracleParser.XMLCOLATTVAL, 0); }
		public ITerminalNode XMLELEMENT() { return GetToken(oracleParser.XMLELEMENT, 0); }
		public ITerminalNode XMLEXISTS() { return GetToken(oracleParser.XMLEXISTS, 0); }
		public ITerminalNode XMLFOREST() { return GetToken(oracleParser.XMLFOREST, 0); }
		public ITerminalNode XMLNAMESPACES() { return GetToken(oracleParser.XMLNAMESPACES, 0); }
		public ITerminalNode XMLPARSE() { return GetToken(oracleParser.XMLPARSE, 0); }
		public ITerminalNode XMLPI() { return GetToken(oracleParser.XMLPI, 0); }
		public ITerminalNode XMLQUERY() { return GetToken(oracleParser.XMLQUERY, 0); }
		public ITerminalNode XMLROOT() { return GetToken(oracleParser.XMLROOT, 0); }
		public ITerminalNode XMLSERIALIZE() { return GetToken(oracleParser.XMLSERIALIZE, 0); }
		public ITerminalNode XMLTABLE() { return GetToken(oracleParser.XMLTABLE, 0); }
		public ITerminalNode YEAR() { return GetToken(oracleParser.YEAR, 0); }
		public ITerminalNode YES() { return GetToken(oracleParser.YES, 0); }
		public ITerminalNode YMINTERVAL_UNCONSTRAINED() { return GetToken(oracleParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public ITerminalNode ZONE() { return GetToken(oracleParser.ZONE, 0); }
		public ITerminalNode PREDICTION() { return GetToken(oracleParser.PREDICTION, 0); }
		public ITerminalNode PREDICTION_BOUNDS() { return GetToken(oracleParser.PREDICTION_BOUNDS, 0); }
		public ITerminalNode PREDICTION_COST() { return GetToken(oracleParser.PREDICTION_COST, 0); }
		public ITerminalNode PREDICTION_DETAILS() { return GetToken(oracleParser.PREDICTION_DETAILS, 0); }
		public ITerminalNode PREDICTION_PROBABILITY() { return GetToken(oracleParser.PREDICTION_PROBABILITY, 0); }
		public ITerminalNode PREDICTION_SET() { return GetToken(oracleParser.PREDICTION_SET, 0); }
		public ITerminalNode CUME_DIST() { return GetToken(oracleParser.CUME_DIST, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(oracleParser.DENSE_RANK, 0); }
		public ITerminalNode LISTAGG() { return GetToken(oracleParser.LISTAGG, 0); }
		public ITerminalNode PERCENT_RANK() { return GetToken(oracleParser.PERCENT_RANK, 0); }
		public ITerminalNode PERCENTILE_CONT() { return GetToken(oracleParser.PERCENTILE_CONT, 0); }
		public ITerminalNode PERCENTILE_DISC() { return GetToken(oracleParser.PERCENTILE_DISC, 0); }
		public ITerminalNode RANK() { return GetToken(oracleParser.RANK, 0); }
		public ITerminalNode AVG() { return GetToken(oracleParser.AVG, 0); }
		public ITerminalNode CORR() { return GetToken(oracleParser.CORR, 0); }
		public ITerminalNode LAG() { return GetToken(oracleParser.LAG, 0); }
		public ITerminalNode LEAD() { return GetToken(oracleParser.LEAD, 0); }
		public ITerminalNode MAX() { return GetToken(oracleParser.MAX, 0); }
		public ITerminalNode MEDIAN() { return GetToken(oracleParser.MEDIAN, 0); }
		public ITerminalNode MIN() { return GetToken(oracleParser.MIN, 0); }
		public ITerminalNode NTILE() { return GetToken(oracleParser.NTILE, 0); }
		public ITerminalNode RATIO_TO_REPORT() { return GetToken(oracleParser.RATIO_TO_REPORT, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(oracleParser.ROW_NUMBER, 0); }
		public ITerminalNode SUM() { return GetToken(oracleParser.SUM, 0); }
		public ITerminalNode VARIANCE() { return GetToken(oracleParser.VARIANCE, 0); }
		public ITerminalNode REGR_() { return GetToken(oracleParser.REGR_, 0); }
		public ITerminalNode STDDEV() { return GetToken(oracleParser.STDDEV, 0); }
		public ITerminalNode VAR_() { return GetToken(oracleParser.VAR_, 0); }
		public ITerminalNode COVAR_() { return GetToken(oracleParser.COVAR_, 0); }
		public Regular_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regular_id; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegular_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Regular_idContext regular_id() {
		Regular_idContext _localctx = new Regular_idContext(Context, State);
		EnterRule(_localctx, 880, RULE_regular_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6869;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (FOLLOWING - 193)) | (1L << (FOLLOWS - 193)) | (1L << (FORALL - 193)) | (1L << (FORCE - 193)) | (1L << (FULL - 193)) | (1L << (FUNCTION - 193)) | (1L << (GROUPING - 193)) | (1L << (HASH - 193)) | (1L << (HIDE - 193)) | (1L << (HOUR - 193)) | (1L << (ID - 193)) | (1L << (IGNORE - 193)) | (1L << (IMMEDIATE - 193)) | (1L << (INCLUDE - 193)) | (1L << (INCLUDING - 193)) | (1L << (INCREMENT - 193)) | (1L << (INDENT - 193)) | (1L << (INDEXED - 193)) | (1L << (INDICATOR - 193)) | (1L << (INDICES - 193)) | (1L << (INFINITE - 193)) | (1L << (INLINE - 193)) | (1L << (INNER - 193)) | (1L << (INOUT - 193)) | (1L << (INSTANTIABLE - 193)) | (1L << (INSTEAD - 193)) | (1L << (INTEGER - 193)) | (1L << (INTERVAL - 193)) | (1L << (INT - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KEEP - 257)) | (1L << (KEY - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LAST - 257)) | (1L << (LAST_VALUE - 257)) | (1L << (LEADING - 257)) | (1L << (LEFT - 257)) | (1L << (LEVEL - 257)) | (1L << (LIBRARY - 257)) | (1L << (LIKE2 - 257)) | (1L << (LIKE4 - 257)) | (1L << (LIKEC - 257)) | (1L << (LIMIT - 257)) | (1L << (LINK - 257)) | (1L << (LOCAL - 257)) | (1L << (LOCKED - 257)) | (1L << (LOG - 257)) | (1L << (LOGOFF - 257)) | (1L << (LOGON - 257)) | (1L << (LONG - 257)) | (1L << (LOOP - 257)) | (1L << (MAIN - 257)) | (1L << (MAP - 257)) | (1L << (MATCHED - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MEASURES - 257)) | (1L << (MEMBER - 257)) | (1L << (MERGE - 257)) | (1L << (MINIMUM - 257)) | (1L << (MINUTE - 257)) | (1L << (MINVALUE - 257)) | (1L << (MLSLABEL - 257)) | (1L << (MODEL - 257)) | (1L << (MODIFY - 257)) | (1L << (MONTH - 257)) | (1L << (MULTISET - 257)) | (1L << (NAME - 257)) | (1L << (NAN - 257)) | (1L << (NATURAL - 257)) | (1L << (NATURALN - 257)) | (1L << (NAV - 257)) | (1L << (NCHAR_CS - 257)) | (1L << (NCHAR - 257)) | (1L << (NCLOB - 257)) | (1L << (NESTED - 257)) | (1L << (NEW - 257)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)) | (1L << (OUT - 322)) | (1L << (OVER - 322)) | (1L << (OVERRIDING - 322)) | (1L << (PACKAGE - 322)) | (1L << (PARALLEL_ENABLE - 322)) | (1L << (PARAMETERS - 322)) | (1L << (PARENT - 322)) | (1L << (PARTITION - 322)) | (1L << (PASSING - 322)) | (1L << (PATH - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PIPELINED - 387)) | (1L << (PLAN - 387)) | (1L << (PLS_INTEGER - 387)) | (1L << (POSITIVEN - 387)) | (1L << (POSITIVE - 387)) | (1L << (PRAGMA - 387)) | (1L << (PRECEDING - 387)) | (1L << (PRECISION - 387)) | (1L << (PRESENT - 387)) | (1L << (PROGRAM - 387)) | (1L << (RAISE - 387)) | (1L << (RANGE - 387)) | (1L << (RAW - 387)) | (1L << (READ - 387)) | (1L << (REAL - 387)) | (1L << (RECORD - 387)) | (1L << (REFERENCE - 387)) | (1L << (REFERENCING - 387)) | (1L << (REF - 387)) | (1L << (REJECT - 387)) | (1L << (RELIES_ON - 387)) | (1L << (RENAME - 387)) | (1L << (REPLACE - 387)) | (1L << (RESPECT - 387)) | (1L << (RESTRICT_REFERENCES - 387)) | (1L << (RESULT_CACHE - 387)) | (1L << (RESULT - 387)) | (1L << (RETURNING - 387)) | (1L << (RETURN - 387)) | (1L << (REUSE - 387)) | (1L << (REVERSE - 387)) | (1L << (RIGHT - 387)) | (1L << (ROLLBACK - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (ROLLUP - 451)) | (1L << (ROWID - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (RULES - 451)) | (1L << (SAMPLE - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SAVE - 451)) | (1L << (SCHEMACHECK - 451)) | (1L << (SCHEMA - 451)) | (1L << (SCN - 451)) | (1L << (SECOND - 451)) | (1L << (SEED - 451)) | (1L << (SEGMENT - 451)) | (1L << (SELF - 451)) | (1L << (SEQUENTIAL - 451)) | (1L << (SERIALIZABLE - 451)) | (1L << (SERIALLY_REUSABLE - 451)) | (1L << (SERVERERROR - 451)) | (1L << (SESSIONTIMEZONE - 451)) | (1L << (SET - 451)) | (1L << (SETS - 451)) | (1L << (SETTINGS - 451)) | (1L << (SHOW - 451)) | (1L << (SHUTDOWN - 451)) | (1L << (SIBLINGS - 451)) | (1L << (SIGNTYPE - 451)) | (1L << (SIMPLE_INTEGER - 451)) | (1L << (SINGLE - 451)) | (1L << (SKIP_ - 451)) | (1L << (SMALLINT - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOME - 451)) | (1L << (SPECIFICATION - 451)) | (1L << (SQLDATA - 451)) | (1L << (SQLERROR - 451)) | (1L << (STANDALONE - 451)) | (1L << (STARTUP - 451)) | (1L << (STATEMENT_ID - 451)) | (1L << (STATEMENT - 451)) | (1L << (STATIC - 451)) | (1L << (STATISTICS - 451)) | (1L << (STORE - 451)) | (1L << (STRING - 451)) | (1L << (SUBMULTISET - 451)) | (1L << (SUBPARTITION - 451)) | (1L << (SUBSTITUTABLE - 451)) | (1L << (SUBTYPE - 451)) | (1L << (SUCCESS - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)) | (1L << (UNLIMITED - 515)) | (1L << (UNTIL - 515)) | (1L << (UPDATED - 515)) | (1L << (UPSERT - 515)) | (1L << (UROWID - 515)) | (1L << (USERS - 515)) | (1L << (USER - 515)) | (1L << (USE - 515)) | (1L << (VALIDATE - 515)) | (1L << (VALUE - 515)) | (1L << (VARCHAR2 - 515)) | (1L << (VARCHAR - 515)) | (1L << (VARIABLE - 515)) | (1L << (VARRAY - 515)) | (1L << (VARYING - 515)) | (1L << (VERSIONS - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (VERSION - 579)) | (1L << (WAIT - 579)) | (1L << (WARNING - 579)) | (1L << (WELLFORMED - 579)) | (1L << (WHENEVER - 579)) | (1L << (WHILE - 579)) | (1L << (WITHIN - 579)) | (1L << (WORK - 579)) | (1L << (WRITE - 579)) | (1L << (XMLAGG - 579)) | (1L << (XMLATTRIBUTES - 579)) | (1L << (XMLCAST - 579)) | (1L << (XMLCOLATTVAL - 579)) | (1L << (XMLELEMENT - 579)) | (1L << (XMLEXISTS - 579)) | (1L << (XMLFOREST - 579)) | (1L << (XMLNAMESPACES - 579)) | (1L << (XMLPARSE - 579)) | (1L << (XMLPI - 579)) | (1L << (XMLQUERY - 579)) | (1L << (XMLROOT - 579)) | (1L << (XMLSERIALIZE - 579)) | (1L << (XMLTABLE - 579)) | (1L << (XML - 579)) | (1L << (YEAR - 579)) | (1L << (YES - 579)) | (1L << (YMINTERVAL_UNCONSTRAINED - 579)) | (1L << (ZONE - 579)) | (1L << (PREDICTION - 579)) | (1L << (PREDICTION_BOUNDS - 579)) | (1L << (PREDICTION_COST - 579)) | (1L << (PREDICTION_DETAILS - 579)) | (1L << (PREDICTION_PROBABILITY - 579)) | (1L << (PREDICTION_SET - 579)) | (1L << (CUME_DIST - 579)) | (1L << (DENSE_RANK - 579)) | (1L << (LISTAGG - 579)) | (1L << (PERCENT_RANK - 579)) | (1L << (PERCENTILE_CONT - 579)) | (1L << (PERCENTILE_DISC - 579)) | (1L << (RANK - 579)) | (1L << (AVG - 579)) | (1L << (CORR - 579)) | (1L << (COVAR_ - 579)) | (1L << (LAG - 579)) | (1L << (LEAD - 579)) | (1L << (MAX - 579)) | (1L << (MEDIAN - 579)) | (1L << (MIN - 579)) | (1L << (NTILE - 579)) | (1L << (RATIO_TO_REPORT - 579)) | (1L << (REGR_ - 579)) | (1L << (ROW_NUMBER - 579)) | (1L << (SUBSTR - 579)) | (1L << (TRIM - 579)) | (1L << (SUM - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (STDDEV - 643)) | (1L << (VAR_ - 643)) | (1L << (VARIANCE - 643)) | (1L << (REGULAR_ID - 643)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_function_nameContext : ParserRuleContext {
		public ITerminalNode CHR() { return GetToken(oracleParser.CHR, 0); }
		public ITerminalNode DECODE() { return GetToken(oracleParser.DECODE, 0); }
		public ITerminalNode SUBSTR() { return GetToken(oracleParser.SUBSTR, 0); }
		public ITerminalNode TO_CHAR() { return GetToken(oracleParser.TO_CHAR, 0); }
		public ITerminalNode TRIM() { return GetToken(oracleParser.TRIM, 0); }
		public String_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_function_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_function_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_function_nameContext string_function_name() {
		String_function_nameContext _localctx = new String_function_nameContext(Context, State);
		EnterRule(_localctx, 882, RULE_string_function_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6871;
			_la = TokenStream.LA(1);
			if ( !(_la==CHR || ((((_la - 627)) & ~0x3f) == 0 && ((1L << (_la - 627)) & ((1L << (DECODE - 627)) | (1L << (SUBSTR - 627)) | (1L << (TO_CHAR - 627)) | (1L << (TRIM - 627)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_function_nameContext : ParserRuleContext {
		public ITerminalNode AVG() { return GetToken(oracleParser.AVG, 0); }
		public ITerminalNode COUNT() { return GetToken(oracleParser.COUNT, 0); }
		public ITerminalNode NVL() { return GetToken(oracleParser.NVL, 0); }
		public ITerminalNode ROUND() { return GetToken(oracleParser.ROUND, 0); }
		public ITerminalNode SUM() { return GetToken(oracleParser.SUM, 0); }
		public Numeric_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_function_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IoracleVisitor<TResult> typedVisitor = visitor as IoracleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_function_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_function_nameContext numeric_function_name() {
		Numeric_function_nameContext _localctx = new Numeric_function_nameContext(Context, State);
		EnterRule(_localctx, 884, RULE_numeric_function_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6873;
			_la = TokenStream.LA(1);
			if ( !(_la==COUNT || ((((_la - 624)) & ~0x3f) == 0 && ((1L << (_la - 624)) & ((1L << (AVG - 624)) | (1L << (NVL - 624)) | (1L << (ROUND - 624)) | (1L << (SUM - 624)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 317: return logical_expression_sempred((Logical_expressionContext)_localctx, predIndex);
		case 319: return relational_expression_sempred((Relational_expressionContext)_localctx, predIndex);
		case 324: return concatenation_sempred((ConcatenationContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logical_expression_sempred(Logical_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relational_expression_sempred(Relational_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool concatenation_sempred(ConcatenationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x2B4', '\x1ADE', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x4', '\xCD', '\t', '\xCD', 
		'\x4', '\xCE', '\t', '\xCE', '\x4', '\xCF', '\t', '\xCF', '\x4', '\xD0', 
		'\t', '\xD0', '\x4', '\xD1', '\t', '\xD1', '\x4', '\xD2', '\t', '\xD2', 
		'\x4', '\xD3', '\t', '\xD3', '\x4', '\xD4', '\t', '\xD4', '\x4', '\xD5', 
		'\t', '\xD5', '\x4', '\xD6', '\t', '\xD6', '\x4', '\xD7', '\t', '\xD7', 
		'\x4', '\xD8', '\t', '\xD8', '\x4', '\xD9', '\t', '\xD9', '\x4', '\xDA', 
		'\t', '\xDA', '\x4', '\xDB', '\t', '\xDB', '\x4', '\xDC', '\t', '\xDC', 
		'\x4', '\xDD', '\t', '\xDD', '\x4', '\xDE', '\t', '\xDE', '\x4', '\xDF', 
		'\t', '\xDF', '\x4', '\xE0', '\t', '\xE0', '\x4', '\xE1', '\t', '\xE1', 
		'\x4', '\xE2', '\t', '\xE2', '\x4', '\xE3', '\t', '\xE3', '\x4', '\xE4', 
		'\t', '\xE4', '\x4', '\xE5', '\t', '\xE5', '\x4', '\xE6', '\t', '\xE6', 
		'\x4', '\xE7', '\t', '\xE7', '\x4', '\xE8', '\t', '\xE8', '\x4', '\xE9', 
		'\t', '\xE9', '\x4', '\xEA', '\t', '\xEA', '\x4', '\xEB', '\t', '\xEB', 
		'\x4', '\xEC', '\t', '\xEC', '\x4', '\xED', '\t', '\xED', '\x4', '\xEE', 
		'\t', '\xEE', '\x4', '\xEF', '\t', '\xEF', '\x4', '\xF0', '\t', '\xF0', 
		'\x4', '\xF1', '\t', '\xF1', '\x4', '\xF2', '\t', '\xF2', '\x4', '\xF3', 
		'\t', '\xF3', '\x4', '\xF4', '\t', '\xF4', '\x4', '\xF5', '\t', '\xF5', 
		'\x4', '\xF6', '\t', '\xF6', '\x4', '\xF7', '\t', '\xF7', '\x4', '\xF8', 
		'\t', '\xF8', '\x4', '\xF9', '\t', '\xF9', '\x4', '\xFA', '\t', '\xFA', 
		'\x4', '\xFB', '\t', '\xFB', '\x4', '\xFC', '\t', '\xFC', '\x4', '\xFD', 
		'\t', '\xFD', '\x4', '\xFE', '\t', '\xFE', '\x4', '\xFF', '\t', '\xFF', 
		'\x4', '\x100', '\t', '\x100', '\x4', '\x101', '\t', '\x101', '\x4', '\x102', 
		'\t', '\x102', '\x4', '\x103', '\t', '\x103', '\x4', '\x104', '\t', '\x104', 
		'\x4', '\x105', '\t', '\x105', '\x4', '\x106', '\t', '\x106', '\x4', '\x107', 
		'\t', '\x107', '\x4', '\x108', '\t', '\x108', '\x4', '\x109', '\t', '\x109', 
		'\x4', '\x10A', '\t', '\x10A', '\x4', '\x10B', '\t', '\x10B', '\x4', '\x10C', 
		'\t', '\x10C', '\x4', '\x10D', '\t', '\x10D', '\x4', '\x10E', '\t', '\x10E', 
		'\x4', '\x10F', '\t', '\x10F', '\x4', '\x110', '\t', '\x110', '\x4', '\x111', 
		'\t', '\x111', '\x4', '\x112', '\t', '\x112', '\x4', '\x113', '\t', '\x113', 
		'\x4', '\x114', '\t', '\x114', '\x4', '\x115', '\t', '\x115', '\x4', '\x116', 
		'\t', '\x116', '\x4', '\x117', '\t', '\x117', '\x4', '\x118', '\t', '\x118', 
		'\x4', '\x119', '\t', '\x119', '\x4', '\x11A', '\t', '\x11A', '\x4', '\x11B', 
		'\t', '\x11B', '\x4', '\x11C', '\t', '\x11C', '\x4', '\x11D', '\t', '\x11D', 
		'\x4', '\x11E', '\t', '\x11E', '\x4', '\x11F', '\t', '\x11F', '\x4', '\x120', 
		'\t', '\x120', '\x4', '\x121', '\t', '\x121', '\x4', '\x122', '\t', '\x122', 
		'\x4', '\x123', '\t', '\x123', '\x4', '\x124', '\t', '\x124', '\x4', '\x125', 
		'\t', '\x125', '\x4', '\x126', '\t', '\x126', '\x4', '\x127', '\t', '\x127', 
		'\x4', '\x128', '\t', '\x128', '\x4', '\x129', '\t', '\x129', '\x4', '\x12A', 
		'\t', '\x12A', '\x4', '\x12B', '\t', '\x12B', '\x4', '\x12C', '\t', '\x12C', 
		'\x4', '\x12D', '\t', '\x12D', '\x4', '\x12E', '\t', '\x12E', '\x4', '\x12F', 
		'\t', '\x12F', '\x4', '\x130', '\t', '\x130', '\x4', '\x131', '\t', '\x131', 
		'\x4', '\x132', '\t', '\x132', '\x4', '\x133', '\t', '\x133', '\x4', '\x134', 
		'\t', '\x134', '\x4', '\x135', '\t', '\x135', '\x4', '\x136', '\t', '\x136', 
		'\x4', '\x137', '\t', '\x137', '\x4', '\x138', '\t', '\x138', '\x4', '\x139', 
		'\t', '\x139', '\x4', '\x13A', '\t', '\x13A', '\x4', '\x13B', '\t', '\x13B', 
		'\x4', '\x13C', '\t', '\x13C', '\x4', '\x13D', '\t', '\x13D', '\x4', '\x13E', 
		'\t', '\x13E', '\x4', '\x13F', '\t', '\x13F', '\x4', '\x140', '\t', '\x140', 
		'\x4', '\x141', '\t', '\x141', '\x4', '\x142', '\t', '\x142', '\x4', '\x143', 
		'\t', '\x143', '\x4', '\x144', '\t', '\x144', '\x4', '\x145', '\t', '\x145', 
		'\x4', '\x146', '\t', '\x146', '\x4', '\x147', '\t', '\x147', '\x4', '\x148', 
		'\t', '\x148', '\x4', '\x149', '\t', '\x149', '\x4', '\x14A', '\t', '\x14A', 
		'\x4', '\x14B', '\t', '\x14B', '\x4', '\x14C', '\t', '\x14C', '\x4', '\x14D', 
		'\t', '\x14D', '\x4', '\x14E', '\t', '\x14E', '\x4', '\x14F', '\t', '\x14F', 
		'\x4', '\x150', '\t', '\x150', '\x4', '\x151', '\t', '\x151', '\x4', '\x152', 
		'\t', '\x152', '\x4', '\x153', '\t', '\x153', '\x4', '\x154', '\t', '\x154', 
		'\x4', '\x155', '\t', '\x155', '\x4', '\x156', '\t', '\x156', '\x4', '\x157', 
		'\t', '\x157', '\x4', '\x158', '\t', '\x158', '\x4', '\x159', '\t', '\x159', 
		'\x4', '\x15A', '\t', '\x15A', '\x4', '\x15B', '\t', '\x15B', '\x4', '\x15C', 
		'\t', '\x15C', '\x4', '\x15D', '\t', '\x15D', '\x4', '\x15E', '\t', '\x15E', 
		'\x4', '\x15F', '\t', '\x15F', '\x4', '\x160', '\t', '\x160', '\x4', '\x161', 
		'\t', '\x161', '\x4', '\x162', '\t', '\x162', '\x4', '\x163', '\t', '\x163', 
		'\x4', '\x164', '\t', '\x164', '\x4', '\x165', '\t', '\x165', '\x4', '\x166', 
		'\t', '\x166', '\x4', '\x167', '\t', '\x167', '\x4', '\x168', '\t', '\x168', 
		'\x4', '\x169', '\t', '\x169', '\x4', '\x16A', '\t', '\x16A', '\x4', '\x16B', 
		'\t', '\x16B', '\x4', '\x16C', '\t', '\x16C', '\x4', '\x16D', '\t', '\x16D', 
		'\x4', '\x16E', '\t', '\x16E', '\x4', '\x16F', '\t', '\x16F', '\x4', '\x170', 
		'\t', '\x170', '\x4', '\x171', '\t', '\x171', '\x4', '\x172', '\t', '\x172', 
		'\x4', '\x173', '\t', '\x173', '\x4', '\x174', '\t', '\x174', '\x4', '\x175', 
		'\t', '\x175', '\x4', '\x176', '\t', '\x176', '\x4', '\x177', '\t', '\x177', 
		'\x4', '\x178', '\t', '\x178', '\x4', '\x179', '\t', '\x179', '\x4', '\x17A', 
		'\t', '\x17A', '\x4', '\x17B', '\t', '\x17B', '\x4', '\x17C', '\t', '\x17C', 
		'\x4', '\x17D', '\t', '\x17D', '\x4', '\x17E', '\t', '\x17E', '\x4', '\x17F', 
		'\t', '\x17F', '\x4', '\x180', '\t', '\x180', '\x4', '\x181', '\t', '\x181', 
		'\x4', '\x182', '\t', '\x182', '\x4', '\x183', '\t', '\x183', '\x4', '\x184', 
		'\t', '\x184', '\x4', '\x185', '\t', '\x185', '\x4', '\x186', '\t', '\x186', 
		'\x4', '\x187', '\t', '\x187', '\x4', '\x188', '\t', '\x188', '\x4', '\x189', 
		'\t', '\x189', '\x4', '\x18A', '\t', '\x18A', '\x4', '\x18B', '\t', '\x18B', 
		'\x4', '\x18C', '\t', '\x18C', '\x4', '\x18D', '\t', '\x18D', '\x4', '\x18E', 
		'\t', '\x18E', '\x4', '\x18F', '\t', '\x18F', '\x4', '\x190', '\t', '\x190', 
		'\x4', '\x191', '\t', '\x191', '\x4', '\x192', '\t', '\x192', '\x4', '\x193', 
		'\t', '\x193', '\x4', '\x194', '\t', '\x194', '\x4', '\x195', '\t', '\x195', 
		'\x4', '\x196', '\t', '\x196', '\x4', '\x197', '\t', '\x197', '\x4', '\x198', 
		'\t', '\x198', '\x4', '\x199', '\t', '\x199', '\x4', '\x19A', '\t', '\x19A', 
		'\x4', '\x19B', '\t', '\x19B', '\x4', '\x19C', '\t', '\x19C', '\x4', '\x19D', 
		'\t', '\x19D', '\x4', '\x19E', '\t', '\x19E', '\x4', '\x19F', '\t', '\x19F', 
		'\x4', '\x1A0', '\t', '\x1A0', '\x4', '\x1A1', '\t', '\x1A1', '\x4', '\x1A2', 
		'\t', '\x1A2', '\x4', '\x1A3', '\t', '\x1A3', '\x4', '\x1A4', '\t', '\x1A4', 
		'\x4', '\x1A5', '\t', '\x1A5', '\x4', '\x1A6', '\t', '\x1A6', '\x4', '\x1A7', 
		'\t', '\x1A7', '\x4', '\x1A8', '\t', '\x1A8', '\x4', '\x1A9', '\t', '\x1A9', 
		'\x4', '\x1AA', '\t', '\x1AA', '\x4', '\x1AB', '\t', '\x1AB', '\x4', '\x1AC', 
		'\t', '\x1AC', '\x4', '\x1AD', '\t', '\x1AD', '\x4', '\x1AE', '\t', '\x1AE', 
		'\x4', '\x1AF', '\t', '\x1AF', '\x4', '\x1B0', '\t', '\x1B0', '\x4', '\x1B1', 
		'\t', '\x1B1', '\x4', '\x1B2', '\t', '\x1B2', '\x4', '\x1B3', '\t', '\x1B3', 
		'\x4', '\x1B4', '\t', '\x1B4', '\x4', '\x1B5', '\t', '\x1B5', '\x4', '\x1B6', 
		'\t', '\x1B6', '\x4', '\x1B7', '\t', '\x1B7', '\x4', '\x1B8', '\t', '\x1B8', 
		'\x4', '\x1B9', '\t', '\x1B9', '\x4', '\x1BA', '\t', '\x1BA', '\x4', '\x1BB', 
		'\t', '\x1BB', '\x4', '\x1BC', '\t', '\x1BC', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', '\x37B', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\x37E', 
		'\n', '\x2', '\a', '\x2', '\x380', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\x383', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x3AB', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x3B7', '\n', '\x5', '\x3', 
		'\x5', '\a', '\x5', '\x3BA', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x3BD', 
		'\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x3C1', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '\x3C8', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x3CE', '\n', '\x6', '\x3', 
		'\x6', '\x6', '\x6', '\x3D1', '\n', '\x6', '\r', '\x6', '\xE', '\x6', 
		'\x3D2', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x3D7', '\n', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\a', '\x6', '\x3DF', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 
		'\x3E2', '\v', '\x6', '\x3', '\x6', '\x5', '\x6', '\x3E5', '\n', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x3E9', '\n', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '\x3EC', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '\x3F0', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '\x3F5', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\x3FB', '\n', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\x404', '\n', '\b', '\x3', '\b', '\x5', '\b', '\x407', 
		'\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\x40D', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\a', '\n', '\x414', '\n', '\n', '\f', '\n', '\xE', 
		'\n', '\x417', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', '\x423', '\n', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', '\x428', '\n', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\x432', '\n', '\r', '\x3', '\r', '\x5', '\r', '\x435', 
		'\n', '\r', '\x3', '\r', '\a', '\r', '\x438', '\n', '\r', '\f', '\r', 
		'\xE', '\r', '\x43B', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\x43F', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\x446', '\n', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x44C', '\n', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x450', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\a', '\xE', '\x454', '\n', '\xE', '\f', '\xE', '\xE', 
		'\xE', '\x457', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\x45B', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x462', '\n', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\x469', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', 
		'\xF', '\x46E', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x471', '\v', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x475', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x479', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\x485', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x48D', '\n', 
		'\x11', '\f', '\x11', '\xE', '\x11', '\x490', '\v', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x494', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\a', '\x12', '\x49E', '\n', '\x12', '\f', '\x12', 
		'\xE', '\x12', '\x4A1', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', 
		'\x12', '\x4A5', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\x4AA', '\n', '\x12', '\x3', '\x12', '\x5', '\x12', '\x4AD', 
		'\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x4BA', '\n', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\x4C6', '\n', '\x15', '\x3', '\x15', '\a', '\x15', '\x4C9', '\n', 
		'\x15', '\f', '\x15', '\xE', '\x15', '\x4CC', '\v', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x5', '\x15', '\x4D0', '\n', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\a', '\x16', '\x4DA', '\n', '\x16', '\f', '\x16', 
		'\xE', '\x16', '\x4DD', '\v', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', 
		'\x16', '\x4E1', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x4E9', '\n', 
		'\x16', '\f', '\x16', '\xE', '\x16', '\x4EC', '\v', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x4EF', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', 
		'\x16', '\x4F3', '\n', '\x16', '\x3', '\x16', '\x5', '\x16', '\x4F6', 
		'\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x4FA', '\n', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x4FF', 
		'\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', 
		'\x509', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x50C', '\v', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x510', '\n', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x514', '\n', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x517', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x51C', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x523', '\n', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\a', '\x18', '\x52B', '\n', '\x18', '\f', '\x18', 
		'\xE', '\x18', '\x52E', '\v', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x532', '\n', '\x18', '\x3', '\x18', '\x5', '\x18', '\x535', 
		'\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x539', '\n', 
		'\x18', '\x3', '\x18', '\x5', '\x18', '\x53C', '\n', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x541', '\n', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x553', '\n', '\x1A', '\x3', '\x1A', '\a', '\x1A', 
		'\x556', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x559', '\v', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x55D', '\n', '\x1A', '\x5', 
		'\x1A', '\x55F', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x566', '\n', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\x56D', '\n', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x570', 
		'\n', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x573', '\n', '\x1B', '\x3', 
		'\x1B', '\x5', '\x1B', '\x576', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\a', '\x1C', '\x57F', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x582', 
		'\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x5', '\x1E', '\x58D', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', 
		'\x1E', '\x591', '\n', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x594', 
		'\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x59D', '\n', ' ', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\a', '!', '\x5A3', '\n', '!', 
		'\f', '!', '\xE', '!', '\x5A6', '\v', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x5', '!', '\x5AD', '\n', '!', '\x3', '!', 
		'\x5', '!', '\x5B0', '\n', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x5', '\"', '\x5B7', '\n', '\"', '\x3', '#', 
		'\x3', '#', '\x5', '#', '\x5BB', '\n', '#', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x5', '$', '\x5C0', '\n', '$', '\x3', '$', '\x6', '$', '\x5C3', 
		'\n', '$', '\r', '$', '\xE', '$', '\x5C4', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x5', '%', '\x5EE', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', 
		'\x60A', '\n', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\a', '\'', 
		'\x60F', '\n', '\'', '\f', '\'', '\xE', '\'', '\x612', '\v', '\'', '\x3', 
		'\'', '\x3', '\'', '\x5', '\'', '\x616', '\n', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x61D', '\n', '(', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', '*', 
		'\x3', '*', '\x6', '*', '\x626', '\n', '*', '\r', '*', '\xE', '*', '\x627', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x5', ',', '\x630', '\n', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x634', 
		'\n', ',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', 
		'\x640', '\n', '-', '\x3', '-', '\x5', '-', '\x643', '\n', '-', '\x3', 
		'-', '\x3', '-', '\x3', '.', '\x3', '.', '\x5', '.', '\x649', '\n', '.', 
		'\x3', '.', '\x5', '.', '\x64C', '\n', '.', '\x3', '.', '\a', '.', '\x64F', 
		'\n', '.', '\f', '.', '\xE', '.', '\x652', '\v', '.', '\x3', '.', '\x3', 
		'.', '\x5', '.', '\x656', '\n', '.', '\x3', '/', '\x3', '/', '\x5', '/', 
		'\x65A', '\n', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\a', '/', '\x662', '\n', '/', '\f', '/', '\xE', '/', 
		'\x665', '\v', '/', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\a', '\x30', '\x66C', '\n', '\x30', '\f', '\x30', '\xE', 
		'\x30', '\x66F', '\v', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x5', '\x31', '\x674', '\n', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\a', 
		'\x32', '\x67D', '\n', '\x32', '\f', '\x32', '\xE', '\x32', '\x680', '\v', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x684', '\n', '\x32', 
		'\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x688', '\n', '\x33', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x5', '\x34', '\x690', '\n', '\x34', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', 
		'\x698', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', 
		'\x35', '\x69D', '\n', '\x35', '\x3', '\x35', '\x5', '\x35', '\x6A0', 
		'\n', '\x35', '\x5', '\x35', '\x6A2', '\n', '\x35', '\x3', '\x36', '\x5', 
		'\x36', '\x6A5', '\n', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', 
		'\x6AE', '\n', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', 
		'\x37', '\x6B3', '\n', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x6BA', '\n', '\x38', '\x3', 
		'\x38', '\x5', '\x38', '\x6BD', '\n', '\x38', '\x3', '\x39', '\x5', '\x39', 
		'\x6C0', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x6C4', 
		'\n', '\x39', '\x3', '\x39', '\x5', '\x39', '\x6C7', '\n', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\a', '\x39', '\x6CD', 
		'\n', '\x39', '\f', '\x39', '\xE', '\x39', '\x6D0', '\v', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x5', '\x39', '\x6D4', '\n', '\x39', '\x3', '\x39', 
		'\a', '\x39', '\x6D7', '\n', '\x39', '\f', '\x39', '\xE', '\x39', '\x6DA', 
		'\v', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', 
		'\x6E0', '\n', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', 
		'<', '\x3', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x6EA', '\n', '<', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x6', '>', '\x6F8', '\n', '>', '\r', '>', '\xE', '>', '\x6F9', '\x3', 
		'>', '\x3', '>', '\x3', '?', '\x3', '?', '\x5', '?', '\x700', '\n', '?', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x5', '\x41', '\x70A', '\n', '\x41', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\a', '\x42', '\x712', '\n', '\x42', '\f', '\x42', '\xE', 
		'\x42', '\x715', '\v', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x5', '\x42', '\x71B', '\n', '\x42', '\x3', '\x42', '\x5', 
		'\x42', '\x71E', '\n', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x5', '\x42', '\x723', '\n', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\a', '\x43', '\x72B', 
		'\n', '\x43', '\f', '\x43', '\xE', '\x43', '\x72E', '\v', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x5', '\x43', '\x732', '\n', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', 
		'\x739', '\n', '\x43', '\x3', '\x43', '\x5', '\x43', '\x73C', '\n', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x741', '\n', 
		'\x43', '\x3', '\x44', '\x5', '\x44', '\x744', '\n', '\x44', '\x3', '\x44', 
		'\x5', '\x44', '\x747', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\a', '\x44', '\x756', '\n', '\x44', '\f', '\x44', '\xE', '\x44', 
		'\x759', '\v', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x75D', 
		'\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x766', '\n', 
		'\x44', '\x3', '\x44', '\x5', '\x44', '\x769', '\n', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x76E', '\n', '\x44', '\x3', 
		'\x45', '\x5', '\x45', '\x771', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x778', '\n', 
		'\x46', '\x3', '\x46', '\x5', '\x46', '\x77B', '\n', '\x46', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', '\x5', 'H', '\x782', '\n', 
		'H', '\x3', 'H', '\x6', 'H', '\x785', '\n', 'H', '\r', 'H', '\xE', 'H', 
		'\x786', '\x3', 'H', '\x3', 'H', '\x5', 'H', '\x78B', '\n', 'H', '\x3', 
		'I', '\x3', 'I', '\x3', 'I', '\x5', 'I', '\x790', '\n', 'I', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x5', 'J', '\x795', '\n', 'J', '\x3', 'K', '\x3', 
		'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\a', 'K', '\x79D', 
		'\n', 'K', '\f', 'K', '\xE', 'K', '\x7A0', '\v', 'K', '\x3', 'K', '\x3', 
		'K', '\x3', 'K', '\x5', 'K', '\x7A5', '\n', 'K', '\x3', 'L', '\x3', 'L', 
		'\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\a', 'L', '\x7AD', '\n', 
		'L', '\f', 'L', '\xE', 'L', '\x7B0', '\v', 'L', '\x3', 'L', '\x3', 'L', 
		'\x5', 'L', '\x7B4', '\n', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x5', 'L', '\x7BB', '\n', 'L', '\x3', 'L', '\x3', 'L', 
		'\x3', 'L', '\x3', 'L', '\x5', 'L', '\x7C1', '\n', 'L', '\x3', 'L', '\x3', 
		'L', '\x5', 'L', '\x7C5', '\n', 'L', '\x3', 'M', '\x5', 'M', '\x7C8', 
		'\n', 'M', '\x3', 'M', '\x5', 'M', '\x7CB', '\n', 'M', '\x3', 'M', '\x3', 
		'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 
		'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\a', 
		'M', '\x7DA', '\n', 'M', '\f', 'M', '\xE', 'M', '\x7DD', '\v', 'M', '\x3', 
		'M', '\x3', 'M', '\x5', 'M', '\x7E1', '\n', 'M', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\x7E9', '\n', 
		'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'O', '\x3', 
		'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\a', 'O', '\x7F5', 
		'\n', 'O', '\f', 'O', '\xE', 'O', '\x7F8', '\v', 'O', '\x3', 'O', '\x3', 
		'O', '\x3', 'P', '\x3', 'P', '\x5', 'P', '\x7FE', '\n', 'P', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x6', 'S', 
		'\x80C', '\n', 'S', '\r', 'S', '\xE', 'S', '\x80D', '\x3', 'S', '\x3', 
		'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\a', 
		'T', '\x817', '\n', 'T', '\f', 'T', '\xE', 'T', '\x81A', '\v', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x5', 
		'U', '\x82E', '\n', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'W', '\x3', 'W', '\x5', 'W', '\x836', '\n', 'W', '\x3', 'W', '\x3', 
		'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x5', 
		'W', '\x83F', '\n', 'W', '\x3', 'W', '\x3', 'W', '\x5', 'W', '\x843', 
		'\n', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'X', '\x3', 'X', '\x3', 'X', 
		'\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x6', 'Y', 
		'\x85B', '\n', 'Y', '\r', 'Y', '\xE', 'Y', '\x85C', '\x3', 'Y', '\x3', 
		'Y', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x6', 'Z', '\x86F', '\n', 'Z', '\r', 'Z', 
		'\xE', 'Z', '\x870', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x876', 
		'\n', 'Z', '\x3', 'Z', '\x6', 'Z', '\x879', '\n', 'Z', '\r', 'Z', '\xE', 
		'Z', '\x87A', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x880', 
		'\n', 'Z', '\x3', '[', '\x3', '[', '\x3', '[', '\x5', '[', '\x885', '\n', 
		'[', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', ']', '\x3', 
		']', '\x3', ']', '\x3', ']', '\x5', ']', '\x88F', '\n', ']', '\x3', '^', 
		'\x3', '^', '\x3', '^', '\x3', '^', '\x3', '_', '\x3', '_', '\x3', '_', 
		'\x5', '_', '\x898', '\n', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '\x61', '\x5', '\x61', '\x8A1', '\n', 
		'\x61', '\x3', '\x61', '\x6', '\x61', '\x8A4', '\n', '\x61', '\r', '\x61', 
		'\xE', '\x61', '\x8A5', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x5', 
		'\x61', '\x8AB', '\n', '\x61', '\x3', '\x61', '\x6', '\x61', '\x8AE', 
		'\n', '\x61', '\r', '\x61', '\xE', '\x61', '\x8AF', '\a', '\x61', '\x8B2', 
		'\n', '\x61', '\f', '\x61', '\xE', '\x61', '\x8B5', '\v', '\x61', '\x5', 
		'\x61', '\x8B7', '\n', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', 
		'\x3', '\x62', '\x5', '\x62', '\x8BD', '\n', '\x62', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', 
		'\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x66', '\x3', '\x66', '\x3', 
		'\x66', '\x5', '\x66', '\x8CB', '\n', '\x66', '\x3', '\x66', '\x6', '\x66', 
		'\x8CE', '\n', '\x66', '\r', '\x66', '\xE', '\x66', '\x8CF', '\x5', '\x66', 
		'\x8D2', '\n', '\x66', '\x3', '\x66', '\x5', '\x66', '\x8D5', '\n', '\x66', 
		'\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', 
		'\x5', 'g', '\x8DD', '\n', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 
		'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 
		'g', '\x3', 'g', '\x5', 'g', '\x8EA', '\n', 'g', '\x5', 'g', '\x8EC', 
		'\n', 'g', '\x3', 'g', '\x3', 'g', '\x5', 'g', '\x8F0', '\n', 'g', '\x3', 
		'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x5', 
		'g', '\x8F8', '\n', 'g', '\x5', 'g', '\x8FA', '\n', 'g', '\x5', 'g', '\x8FC', 
		'\n', 'g', '\x5', 'g', '\x8FE', '\n', 'g', '\x3', 'h', '\x3', 'h', '\x5', 
		'h', '\x902', '\n', 'h', '\x3', 'h', '\x6', 'h', '\x905', '\n', 'h', '\r', 
		'h', '\xE', 'h', '\x906', '\x3', 'h', '\x3', 'h', '\x3', 'i', '\x3', 'i', 
		'\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x5', 'i', '\x911', '\n', 
		'i', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 
		'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x5', 'k', '\x91C', '\n', 'k', 
		'\x5', 'k', '\x91E', '\n', 'k', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'm', '\x3', 'm', '\x5', 'm', '\x927', '\n', 'm', 
		'\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x5', 'm', '\x92D', '\n', 
		'm', '\x5', 'm', '\x92F', '\n', 'm', '\x6', 'm', '\x931', '\n', 'm', '\r', 
		'm', '\xE', 'm', '\x932', '\x3', 'm', '\x3', 'm', '\x5', 'm', '\x937', 
		'\n', 'm', '\x3', 'm', '\x3', 'm', '\x5', 'm', '\x93B', '\n', 'm', '\x3', 
		'm', '\x3', 'm', '\x6', 'm', '\x93F', '\n', 'm', '\r', 'm', '\xE', 'm', 
		'\x940', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x5', 'm', '\x946', '\n', 
		'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x5', 'm', '\x94B', '\n', 'm', 
		'\x3', 'm', '\x3', 'm', '\x3', 'm', '\x5', 'm', '\x950', '\n', 'm', '\x3', 
		'm', '\x5', 'm', '\x953', '\n', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'n', 
		'\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'o', '\x3', 'o', '\x3', 'o', 
		'\x5', 'o', '\x95E', '\n', 'o', '\x3', 'o', '\x5', 'o', '\x961', '\n', 
		'o', '\x3', 'o', '\x5', 'o', '\x964', '\n', 'o', '\x3', 'o', '\x5', 'o', 
		'\x967', '\n', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x5', 'o', '\x96C', 
		'\n', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x5', 'o', '\x971', '\n', 
		'o', '\x3', 'p', '\x3', 'p', '\x5', 'p', '\x975', '\n', 'p', '\x3', 'q', 
		'\x3', 'q', '\x5', 'q', '\x979', '\n', 'q', '\x3', 'q', '\x3', 'q', '\a', 
		'q', '\x97D', '\n', 'q', '\f', 'q', '\xE', 'q', '\x980', '\v', 'q', '\x3', 
		'q', '\x5', 'q', '\x983', '\n', 'q', '\x6', 'q', '\x985', '\n', 'q', '\r', 
		'q', '\xE', 'q', '\x986', '\x3', 'q', '\x3', 'q', '\x3', 'r', '\x3', 'r', 
		'\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', 
		'\x5', 'r', '\x993', '\n', 'r', '\x3', 'r', '\x6', 'r', '\x996', '\n', 
		'r', '\r', 'r', '\xE', 'r', '\x997', '\x3', 'r', '\x5', 'r', '\x99B', 
		'\n', 'r', '\x3', 'r', '\x3', 'r', '\x5', 'r', '\x99F', '\n', 'r', '\x3', 
		'r', '\x3', 'r', '\x5', 'r', '\x9A3', '\n', 'r', '\x3', 'r', '\x3', 'r', 
		'\x3', 'r', '\x5', 'r', '\x9A8', '\n', 'r', '\x6', 'r', '\x9AA', '\n', 
		'r', '\r', 'r', '\xE', 'r', '\x9AB', '\x3', 'r', '\x3', 'r', '\a', 'r', 
		'\x9B0', '\n', 'r', '\f', 'r', '\xE', 'r', '\x9B3', '\v', 'r', '\x3', 
		's', '\x3', 's', '\x5', 's', '\x9B7', '\n', 's', '\x3', 's', '\x5', 's', 
		'\x9BA', '\n', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 
		's', '\x3', 's', '\x5', 's', '\x9C2', '\n', 's', '\x3', 's', '\x5', 's', 
		'\x9C5', '\n', 's', '\x3', 't', '\x3', 't', '\x5', 't', '\x9C9', '\n', 
		't', '\x3', 't', '\x3', 't', '\x3', 't', '\x3', 't', '\x5', 't', '\x9CF', 
		'\n', 't', '\x6', 't', '\x9D1', '\n', 't', '\r', 't', '\xE', 't', '\x9D2', 
		'\x3', 't', '\x5', 't', '\x9D6', '\n', 't', '\x3', 'u', '\x5', 'u', '\x9D9', 
		'\n', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', 
		'\x3', 'u', '\x6', 'u', '\x9E1', '\n', 'u', '\r', 'u', '\xE', 'u', '\x9E2', 
		'\x3', 'v', '\x3', 'v', '\x5', 'v', '\x9E7', '\n', 'v', '\x3', 'v', '\x3', 
		'v', '\x3', 'v', '\x5', 'v', '\x9EC', '\n', 'v', '\x3', 'v', '\x3', 'v', 
		'\x3', 'w', '\x3', 'w', '\x3', 'w', '\x5', 'w', '\x9F3', '\n', 'w', '\x3', 
		'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 
		'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 
		'w', '\x3', 'w', '\x3', 'w', '\a', 'w', '\xA04', '\n', 'w', '\f', 'w', 
		'\xE', 'w', '\xA07', '\v', 'w', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 
		'y', '\x3', 'y', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 
		'z', '\x3', 'z', '\x3', 'z', '\x5', 'z', '\xA15', '\n', 'z', '\x5', 'z', 
		'\xA17', '\n', 'z', '\x3', '{', '\x3', '{', '\x3', '{', '\x3', '{', '\x3', 
		'{', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '}', '\x3', '}', '\x3', 
		'}', '\x3', '}', '\x5', '}', '\xA25', '\n', '}', '\x3', '}', '\x5', '}', 
		'\xA28', '\n', '}', '\x3', '}', '\x5', '}', '\xA2B', '\n', '}', '\x3', 
		'~', '\x3', '~', '\x3', '~', '\x3', '~', '\x3', '\x7F', '\x3', '\x7F', 
		'\x3', '\x7F', '\x3', '\x7F', '\x5', '\x7F', '\xA35', '\n', '\x7F', '\x3', 
		'\x7F', '\x5', '\x7F', '\xA38', '\n', '\x7F', '\x3', '\x7F', '\x5', '\x7F', 
		'\xA3B', '\n', '\x7F', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x3', 
		'\x81', '\x3', '\x81', '\x5', '\x81', '\xA42', '\n', '\x81', '\x3', '\x81', 
		'\x3', '\x81', '\x3', '\x82', '\x3', '\x82', '\x5', '\x82', '\xA48', '\n', 
		'\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x83', '\x5', '\x83', '\xA4D', 
		'\n', '\x83', '\x3', '\x83', '\x3', '\x83', '\x5', '\x83', '\xA51', '\n', 
		'\x83', '\x3', '\x83', '\x5', '\x83', '\xA54', '\n', '\x83', '\x3', '\x83', 
		'\x5', '\x83', '\xA57', '\n', '\x83', '\x3', '\x84', '\x3', '\x84', '\x3', 
		'\x84', '\x3', '\x84', '\x5', '\x84', '\xA5D', '\n', '\x84', '\x3', '\x84', 
		'\x6', '\x84', '\xA60', '\n', '\x84', '\r', '\x84', '\xE', '\x84', '\xA61', 
		'\x3', '\x84', '\x5', '\x84', '\xA65', '\n', '\x84', '\x3', '\x84', '\x3', 
		'\x84', '\x5', '\x84', '\xA69', '\n', '\x84', '\x3', '\x84', '\x3', '\x84', 
		'\x5', '\x84', '\xA6D', '\n', '\x84', '\x3', '\x84', '\x5', '\x84', '\xA70', 
		'\n', '\x84', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', 
		'\x3', '\x85', '\x5', '\x85', '\xA77', '\n', '\x85', '\x3', '\x85', '\x5', 
		'\x85', '\xA7A', '\n', '\x85', '\x5', '\x85', '\xA7C', '\n', '\x85', '\x3', 
		'\x86', '\x3', '\x86', '\x3', '\x86', '\x5', '\x86', '\xA81', '\n', '\x86', 
		'\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x5', '\x87', '\xA86', '\n', 
		'\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x5', 
		'\x87', '\xA8C', '\n', '\x87', '\x3', '\x87', '\x6', '\x87', '\xA8F', 
		'\n', '\x87', '\r', '\x87', '\xE', '\x87', '\xA90', '\x3', '\x87', '\x3', 
		'\x87', '\x3', '\x87', '\x5', '\x87', '\xA96', '\n', '\x87', '\x3', '\x87', 
		'\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x5', '\x87', '\xA9C', '\n', 
		'\x87', '\a', '\x87', '\xA9E', '\n', '\x87', '\f', '\x87', '\xE', '\x87', 
		'\xAA1', '\v', '\x87', '\x3', '\x87', '\x3', '\x87', '\x5', '\x87', '\xAA5', 
		'\n', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', 
		'\x5', '\x87', '\xAAB', '\n', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', 
		'\x87', '\x5', '\x87', '\xAB0', '\n', '\x87', '\x3', '\x87', '\x3', '\x87', 
		'\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\a', '\x87', 
		'\xAB8', '\n', '\x87', '\f', '\x87', '\xE', '\x87', '\xABB', '\v', '\x87', 
		'\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', 
		'\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', 
		'\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', 
		'\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x5', '\x87', '\xACF', '\n', 
		'\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', 
		'\x87', '\x6', '\x87', '\xAD6', '\n', '\x87', '\r', '\x87', '\xE', '\x87', 
		'\xAD7', '\x3', '\x87', '\x5', '\x87', '\xADB', '\n', '\x87', '\x3', '\x87', 
		'\x3', '\x87', '\x5', '\x87', '\xADF', '\n', '\x87', '\x3', '\x87', '\x5', 
		'\x87', '\xAE2', '\n', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', 
		'\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x5', '\x87', '\xAEA', '\n', 
		'\x87', '\x5', '\x87', '\xAEC', '\n', '\x87', '\x5', '\x87', '\xAEE', 
		'\n', '\x87', '\x3', '\x87', '\x5', '\x87', '\xAF1', '\n', '\x87', '\x3', 
		'\x87', '\x5', '\x87', '\xAF4', '\n', '\x87', '\x3', '\x87', '\x5', '\x87', 
		'\xAF7', '\n', '\x87', '\x3', '\x87', '\x3', '\x87', '\x5', '\x87', '\xAFB', 
		'\n', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', 
		'\x3', '\x87', '\x3', '\x87', '\x5', '\x87', '\xB03', '\n', '\x87', '\x3', 
		'\x87', '\x3', '\x87', '\x5', '\x87', '\xB07', '\n', '\x87', '\x3', '\x87', 
		'\x3', '\x87', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', 
		'\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', 
		'\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x5', '\x88', '\xB17', '\n', 
		'\x88', '\x3', '\x88', '\x6', '\x88', '\xB1A', '\n', '\x88', '\r', '\x88', 
		'\xE', '\x88', '\xB1B', '\x3', '\x88', '\x5', '\x88', '\xB1F', '\n', '\x88', 
		'\x5', '\x88', '\xB21', '\n', '\x88', '\x3', '\x88', '\x3', '\x88', '\x5', 
		'\x88', '\xB25', '\n', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', 
		'\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x5', '\x88', 
		'\xB2E', '\n', '\x88', '\x3', '\x88', '\x3', '\x88', '\x5', '\x88', '\xB32', 
		'\n', '\x88', '\x3', '\x88', '\x3', '\x88', '\x5', '\x88', '\xB36', '\n', 
		'\x88', '\x3', '\x88', '\x3', '\x88', '\x5', '\x88', '\xB3A', '\n', '\x88', 
		'\x3', '\x88', '\x6', '\x88', '\xB3D', '\n', '\x88', '\r', '\x88', '\xE', 
		'\x88', '\xB3E', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x5', '\x88', 
		'\xB44', '\n', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', 
		'\x88', '\x5', '\x88', '\xB4A', '\n', '\x88', '\x3', '\x88', '\x3', '\x88', 
		'\x3', '\x88', '\x5', '\x88', '\xB4F', '\n', '\x88', '\x3', '\x88', '\x3', 
		'\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\a', 
		'\x88', '\xB57', '\n', '\x88', '\f', '\x88', '\xE', '\x88', '\xB5A', '\v', 
		'\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', 
		'\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', 
		'\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', 
		'\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x5', '\x88', '\xB6E', 
		'\n', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', 
		'\x3', '\x88', '\x6', '\x88', '\xB75', '\n', '\x88', '\r', '\x88', '\xE', 
		'\x88', '\xB76', '\x3', '\x88', '\x5', '\x88', '\xB7A', '\n', '\x88', 
		'\x6', '\x88', '\xB7C', '\n', '\x88', '\r', '\x88', '\xE', '\x88', '\xB7D', 
		'\x3', '\x88', '\x3', '\x88', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', 
		'\x5', '\x89', '\xB85', '\n', '\x89', '\x3', '\x89', '\x3', '\x89', '\x5', 
		'\x89', '\xB89', '\n', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', 
		'\x5', '\x89', '\xB8E', '\n', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', 
		'\x89', '\x5', '\x89', '\xB93', '\n', '\x89', '\x3', '\x89', '\x5', '\x89', 
		'\xB96', '\n', '\x89', '\x3', '\x89', '\x5', '\x89', '\xB99', '\n', '\x89', 
		'\x3', '\x89', '\x5', '\x89', '\xB9C', '\n', '\x89', '\x5', '\x89', '\xB9E', 
		'\n', '\x89', '\x3', '\x89', '\x3', '\x89', '\x5', '\x89', '\xBA2', '\n', 
		'\x89', '\x3', '\x89', '\x5', '\x89', '\xBA5', '\n', '\x89', '\x3', '\x8A', 
		'\x3', '\x8A', '\x5', '\x8A', '\xBA9', '\n', '\x8A', '\x3', '\x8B', '\x3', 
		'\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8C', '\x3', 
		'\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', 
		'\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8D', '\x3', '\x8D', '\x3', 
		'\x8D', '\x5', '\x8D', '\xBBC', '\n', '\x8D', '\x3', '\x8D', '\x3', '\x8D', 
		'\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', 
		'\x5', '\x8D', '\xBC5', '\n', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', 
		'\x8D', '\x5', '\x8D', '\xBCA', '\n', '\x8D', '\x3', '\x8D', '\x3', '\x8D', 
		'\x3', '\x8D', '\x5', '\x8D', '\xBCF', '\n', '\x8D', '\x3', '\x8D', '\x3', 
		'\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x5', '\x8D', '\xBD5', '\n', '\x8D', 
		'\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', 
		'\x5', '\x8D', '\xBDC', '\n', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', 
		'\x8D', '\x5', '\x8D', '\xBE1', '\n', '\x8D', '\x5', '\x8D', '\xBE3', 
		'\n', '\x8D', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', 
		'\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8F', '\x3', '\x8F', 
		'\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', 
		'\x5', '\x8F', '\xBF3', '\n', '\x8F', '\x3', '\x90', '\x3', '\x90', '\x3', 
		'\x90', '\x5', '\x90', '\xBF8', '\n', '\x90', '\x3', '\x90', '\x3', '\x90', 
		'\x3', '\x90', '\x3', '\x90', '\x5', '\x90', '\xBFE', '\n', '\x90', '\x3', 
		'\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x5', 
		'\x91', '\xC05', '\n', '\x91', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', 
		'\x3', '\x92', '\x3', '\x93', '\x3', '\x93', '\x3', '\x93', '\x3', '\x93', 
		'\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x95', 
		'\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x5', '\x95', 
		'\xC18', '\n', '\x95', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', 
		'\x96', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', 
		'\x97', '\x5', '\x97', '\xC23', '\n', '\x97', '\x3', '\x98', '\x3', '\x98', 
		'\x3', '\x98', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', 
		'\x3', '\x9A', '\x3', '\x9A', '\x5', '\x9A', '\xC2E', '\n', '\x9A', '\x3', 
		'\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x6', '\x9A', '\xC34', 
		'\n', '\x9A', '\r', '\x9A', '\xE', '\x9A', '\xC35', '\x5', '\x9A', '\xC38', 
		'\n', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9B', 
		'\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', 
		'\x3', '\x9C', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x5', '\x9D', 
		'\xC47', '\n', '\x9D', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', 
		'\x9E', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x5', '\x9F', '\xC50', 
		'\n', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x5', '\x9F', 
		'\xC55', '\n', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x5', '\x9F', '\xC59', 
		'\n', '\x9F', '\x3', '\x9F', '\x5', '\x9F', '\xC5C', '\n', '\x9F', '\x3', 
		'\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', 
		'\xA0', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', 
		'\xA1', '\x3', '\xA1', '\x5', '\xA1', '\xC6A', '\n', '\xA1', '\x3', '\xA1', 
		'\x3', '\xA1', '\x3', '\xA2', '\x3', '\xA2', '\a', '\xA2', '\xC70', '\n', 
		'\xA2', '\f', '\xA2', '\xE', '\xA2', '\xC73', '\v', '\xA2', '\x3', '\xA2', 
		'\x5', '\xA2', '\xC76', '\n', '\xA2', '\x3', '\xA2', '\x5', '\xA2', '\xC79', 
		'\n', '\xA2', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA4', 
		'\x6', '\xA4', '\xC7F', '\n', '\xA4', '\r', '\xA4', '\xE', '\xA4', '\xC80', 
		'\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', 
		'\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', 
		'\x5', '\xA5', '\xC8D', '\n', '\xA5', '\x3', '\xA6', '\x3', '\xA6', '\x5', 
		'\xA6', '\xC91', '\n', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', 
		'\x5', '\xA6', '\xC96', '\n', '\xA6', '\x3', '\xA6', '\x5', '\xA6', '\xC99', 
		'\n', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA7', '\x3', '\xA7', 
		'\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', 
		'\x3', '\xA7', '\x3', '\xA7', '\x5', '\xA7', '\xCA6', '\n', '\xA7', '\x3', 
		'\xA7', '\x3', '\xA7', '\x5', '\xA7', '\xCAA', '\n', '\xA7', '\x3', '\xA7', 
		'\x3', '\xA7', '\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA8', 
		'\x5', '\xA8', '\xCB2', '\n', '\xA8', '\x3', '\xA8', '\x6', '\xA8', '\xCB5', 
		'\n', '\xA8', '\r', '\xA8', '\xE', '\xA8', '\xCB6', '\x3', '\xA8', '\x3', 
		'\xA8', '\x5', '\xA8', '\xCBB', '\n', '\xA8', '\x3', '\xA8', '\x3', '\xA8', 
		'\x5', '\xA8', '\xCBF', '\n', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x5', 
		'\xA8', '\xCC3', '\n', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA9', 
		'\x3', '\xA9', '\x5', '\xA9', '\xCC9', '\n', '\xA9', '\x3', '\xA9', '\x5', 
		'\xA9', '\xCCC', '\n', '\xA9', '\x3', '\xA9', '\x5', '\xA9', '\xCCF', 
		'\n', '\xA9', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', 
		'\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', 
		'\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', 
		'\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', 
		'\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', 
		'\x3', '\xAB', '\x5', '\xAB', '\xCEA', '\n', '\xAB', '\x3', '\xAB', '\x3', 
		'\xAB', '\x6', '\xAB', '\xCEE', '\n', '\xAB', '\r', '\xAB', '\xE', '\xAB', 
		'\xCEF', '\x3', '\xAB', '\x3', '\xAB', '\x5', '\xAB', '\xCF4', '\n', '\xAB', 
		'\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', 
		'\x5', '\xAC', '\xCFB', '\n', '\xAC', '\x3', '\xAC', '\x6', '\xAC', '\xCFE', 
		'\n', '\xAC', '\r', '\xAC', '\xE', '\xAC', '\xCFF', '\x3', '\xAC', '\x3', 
		'\xAC', '\x3', '\xAD', '\x3', '\xAD', '\x5', '\xAD', '\xD06', '\n', '\xAD', 
		'\x3', '\xAD', '\x3', '\xAD', '\x5', '\xAD', '\xD0A', '\n', '\xAD', '\x3', 
		'\xAD', '\x5', '\xAD', '\xD0D', '\n', '\xAD', '\x3', '\xAE', '\x3', '\xAE', 
		'\x3', '\xAE', '\x3', '\xAE', '\x5', '\xAE', '\xD13', '\n', '\xAE', '\x3', 
		'\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x3', 
		'\xAF', '\x3', '\xAF', '\x5', '\xAF', '\xD1C', '\n', '\xAF', '\x3', '\xAF', 
		'\x3', '\xAF', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', 
		'\x5', '\xB0', '\xD24', '\n', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x5', 
		'\xB0', '\xD28', '\n', '\xB0', '\x3', '\xB1', '\x3', '\xB1', '\x5', '\xB1', 
		'\xD2C', '\n', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', 
		'\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x5', '\xB2', '\xD34', '\n', '\xB2', 
		'\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', 
		'\x3', '\xB2', '\x3', '\xB2', '\x5', '\xB2', '\xD3D', '\n', '\xB2', '\x3', 
		'\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x6', '\xB3', '\xD43', 
		'\n', '\xB3', '\r', '\xB3', '\xE', '\xB3', '\xD44', '\x3', '\xB4', '\x3', 
		'\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', 
		'\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', 
		'\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', 
		'\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', 
		'\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x5', 
		'\xB5', '\xD61', '\n', '\xB5', '\x3', '\xB6', '\x6', '\xB6', '\xD64', 
		'\n', '\xB6', '\r', '\xB6', '\xE', '\xB6', '\xD65', '\x3', '\xB7', '\x3', 
		'\xB7', '\x5', '\xB7', '\xD6A', '\n', '\xB7', '\x3', '\xB7', '\x3', '\xB7', 
		'\x3', '\xB7', '\x3', '\xB8', '\x3', '\xB8', '\x5', '\xB8', '\xD71', '\n', 
		'\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x5', '\xB8', '\xD75', '\n', '\xB8', 
		'\x3', '\xB9', '\x3', '\xB9', '\x5', '\xB9', '\xD79', '\n', '\xB9', '\x3', 
		'\xB9', '\x3', '\xB9', '\x5', '\xB9', '\xD7D', '\n', '\xB9', '\x3', '\xBA', 
		'\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', 
		'\x3', '\xBB', '\x3', '\xBB', '\a', '\xBB', '\xD87', '\n', '\xBB', '\f', 
		'\xBB', '\xE', '\xBB', '\xD8A', '\v', '\xBB', '\x3', '\xBB', '\x5', '\xBB', 
		'\xD8D', '\n', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', 
		'\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBE', '\x5', '\xBE', '\xD9B', 
		'\n', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', 
		'\x5', '\xBE', '\xDA1', '\n', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', 
		'\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x5', '\xBE', '\xDA8', '\n', '\xBE', 
		'\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x5', '\xBF', '\xDAD', '\n', 
		'\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x5', 
		'\xBF', '\xDB8', '\n', '\xBF', '\x3', '\xBF', '\x5', '\xBF', '\xDBB', 
		'\n', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x5', '\xBF', '\xDC1', '\n', '\xBF', '\x5', '\xBF', '\xDC3', '\n', '\xBF', 
		'\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', 
		'\x3', '\xC0', '\x3', '\xC0', '\x5', '\xC0', '\xDCC', '\n', '\xC0', '\x3', 
		'\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', 
		'\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x5', '\xC1', '\xDD6', '\n', '\xC1', 
		'\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x5', '\xC1', '\xDDB', '\n', 
		'\xC1', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', 
		'\xC2', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC4', '\x3', '\xC4', '\x3', 
		'\xC5', '\x3', '\xC5', '\x3', '\xC6', '\x3', '\xC6', '\x5', '\xC6', '\xDEA', 
		'\n', '\xC6', '\x3', '\xC7', '\x3', '\xC7', '\x5', '\xC7', '\xDEE', '\n', 
		'\xC7', '\x3', '\xC8', '\x5', '\xC8', '\xDF1', '\n', '\xC8', '\x3', '\xC8', 
		'\x3', '\xC8', '\x5', '\xC8', '\xDF5', '\n', '\xC8', '\x3', '\xC9', '\x3', 
		'\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', 
		'\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x6', '\xCA', '\xE01', 
		'\n', '\xCA', '\r', '\xCA', '\xE', '\xCA', '\xE02', '\x5', '\xCA', '\xE05', 
		'\n', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\xE09', '\n', 
		'\xCA', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\a', 
		'\xCB', '\xE0F', '\n', '\xCB', '\f', '\xCB', '\xE', '\xCB', '\xE12', '\v', 
		'\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCC', '\x5', 
		'\xCC', '\xE18', '\n', '\xCC', '\x3', '\xCC', '\x6', '\xCC', '\xE1B', 
		'\n', '\xCC', '\r', '\xCC', '\xE', '\xCC', '\xE1C', '\x5', '\xCC', '\xE1F', 
		'\n', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCD', '\x5', '\xCD', 
		'\xE24', '\n', '\xCD', '\x3', '\xCD', '\x6', '\xCD', '\xE27', '\n', '\xCD', 
		'\r', '\xCD', '\xE', '\xCD', '\xE28', '\x3', '\xCD', '\x3', '\xCD', '\x3', 
		'\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x5', '\xCE', '\xE31', 
		'\n', '\xCE', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', 
		'\x3', '\xCF', '\x5', '\xCF', '\xE38', '\n', '\xCF', '\x3', '\xCF', '\x3', 
		'\xCF', '\x5', '\xCF', '\xE3C', '\n', '\xCF', '\x3', '\xCF', '\x5', '\xCF', 
		'\xE3F', '\n', '\xCF', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', 
		'\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', 
		'\xD1', '\x3', '\xD1', '\x5', '\xD1', '\xE4B', '\n', '\xD1', '\x3', '\xD2', 
		'\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x5', '\xD2', '\xE51', '\n', 
		'\xD2', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD4', '\x3', 
		'\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x5', '\xD4', '\xE5A', '\n', '\xD4', 
		'\x3', '\xD4', '\x5', '\xD4', '\xE5D', '\n', '\xD4', '\x3', '\xD5', '\x3', 
		'\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x5', '\xD5', '\xE63', '\n', '\xD5', 
		'\x3', '\xD5', '\x6', '\xD5', '\xE66', '\n', '\xD5', '\r', '\xD5', '\xE', 
		'\xD5', '\xE67', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD5', 
		'\x5', '\xD5', '\xE6E', '\n', '\xD5', '\x3', '\xD5', '\x6', '\xD5', '\xE71', 
		'\n', '\xD5', '\r', '\xD5', '\xE', '\xD5', '\xE72', '\x5', '\xD5', '\xE75', 
		'\n', '\xD5', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', 
		'\x3', '\xD6', '\x5', '\xD6', '\xE7C', '\n', '\xD6', '\x3', '\xD6', '\x5', 
		'\xD6', '\xE7F', '\n', '\xD6', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', 
		'\x3', '\xD7', '\x3', '\xD7', '\x5', '\xD7', '\xE86', '\n', '\xD7', '\x3', 
		'\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', 
		'\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x5', '\xD8', '\xE91', 
		'\n', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', 
		'\x5', '\xD8', '\xE97', '\n', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x5', 
		'\xD8', '\xE9B', '\n', '\xD8', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', 
		'\x3', '\xD9', '\x5', '\xD9', '\xEA1', '\n', '\xD9', '\x3', '\xD9', '\x6', 
		'\xD9', '\xEA4', '\n', '\xD9', '\r', '\xD9', '\xE', '\xD9', '\xEA5', '\x5', 
		'\xD9', '\xEA8', '\n', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xDA', 
		'\x3', '\xDA', '\x5', '\xDA', '\xEAE', '\n', '\xDA', '\x3', '\xDA', '\x3', 
		'\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x3', 
		'\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x5', '\xDA', '\xEB9', '\n', '\xDA', 
		'\x5', '\xDA', '\xEBB', '\n', '\xDA', '\x5', '\xDA', '\xEBD', '\n', '\xDA', 
		'\x3', '\xDA', '\x5', '\xDA', '\xEC0', '\n', '\xDA', '\x3', '\xDB', '\x3', 
		'\xDB', '\x5', '\xDB', '\xEC4', '\n', '\xDB', '\x3', '\xDB', '\x5', '\xDB', 
		'\xEC7', '\n', '\xDB', '\x3', '\xDC', '\x3', '\xDC', '\x5', '\xDC', '\xECB', 
		'\n', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x5', '\xDC', '\xECF', '\n', 
		'\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x5', '\xDC', '\xED4', 
		'\n', '\xDC', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDE', 
		'\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', 
		'\x5', '\xDE', '\xEDF', '\n', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x5', 
		'\xDE', '\xEE3', '\n', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', 
		'\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x5', '\xDE', '\xEEB', '\n', 
		'\xDE', '\x3', '\xDF', '\x5', '\xDF', '\xEEE', '\n', '\xDF', '\x3', '\xDF', 
		'\x3', '\xDF', '\x3', '\xDF', '\a', '\xDF', '\xEF3', '\n', '\xDF', '\f', 
		'\xDF', '\xE', '\xDF', '\xEF6', '\v', '\xDF', '\x3', '\xE0', '\x3', '\xE0', 
		'\x5', '\xE0', '\xEFA', '\n', '\xE0', '\x3', '\xE0', '\x6', '\xE0', '\xEFD', 
		'\n', '\xE0', '\r', '\xE0', '\xE', '\xE0', '\xEFE', '\x3', '\xE1', '\x3', 
		'\xE1', '\x5', '\xE1', '\xF03', '\n', '\xE1', '\x3', '\xE1', '\x3', '\xE1', 
		'\x3', '\xE1', '\x3', '\xE1', '\x5', '\xE1', '\xF09', '\n', '\xE1', '\x3', 
		'\xE1', '\x3', '\xE1', '\x5', '\xE1', '\xF0D', '\n', '\xE1', '\x3', '\xE1', 
		'\x5', '\xE1', '\xF10', '\n', '\xE1', '\x3', '\xE2', '\x3', '\xE2', '\x3', 
		'\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x5', '\xE2', '\xF18', 
		'\n', '\xE2', '\x3', '\xE2', '\x5', '\xE2', '\xF1B', '\n', '\xE2', '\x3', 
		'\xE2', '\x3', '\xE2', '\x5', '\xE2', '\xF1F', '\n', '\xE2', '\x3', '\xE2', 
		'\x3', '\xE2', '\x5', '\xE2', '\xF23', '\n', '\xE2', '\x3', '\xE2', '\x3', 
		'\xE2', '\x3', '\xE2', '\x5', '\xE2', '\xF28', '\n', '\xE2', '\x3', '\xE2', 
		'\x5', '\xE2', '\xF2B', '\n', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x5', 
		'\xE2', '\xF2F', '\n', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x5', '\xE2', 
		'\xF33', '\n', '\xE2', '\a', '\xE2', '\xF35', '\n', '\xE2', '\f', '\xE2', 
		'\xE', '\xE2', '\xF38', '\v', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', 
		'\xE2', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE4', '\x3', '\xE4', '\a', '\xE4', '\xF48', '\n', '\xE4', '\f', '\xE4', 
		'\xE', '\xE4', '\xF4B', '\v', '\xE4', '\x3', '\xE5', '\x3', '\xE5', '\x3', 
		'\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x5', '\xE5', '\xF52', '\n', '\xE5', 
		'\x3', '\xE6', '\x3', '\xE6', '\x5', '\xE6', '\xF56', '\n', '\xE6', '\x3', 
		'\xE6', '\x3', '\xE6', '\x5', '\xE6', '\xF5A', '\n', '\xE6', '\x3', '\xE6', 
		'\x3', '\xE6', '\x3', '\xE7', '\x3', '\xE7', '\x5', '\xE7', '\xF60', '\n', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x5', '\xE7', '\xF64', '\n', '\xE7', 
		'\x3', '\xE7', '\x6', '\xE7', '\xF67', '\n', '\xE7', '\r', '\xE7', '\xE', 
		'\xE7', '\xF68', '\x5', '\xE7', '\xF6B', '\n', '\xE7', '\x3', '\xE7', 
		'\x5', '\xE7', '\xF6E', '\n', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x5', 
		'\xE7', '\xF72', '\n', '\xE7', '\x3', '\xE7', '\x5', '\xE7', '\xF75', 
		'\n', '\xE7', '\x3', '\xE7', '\x5', '\xE7', '\xF78', '\n', '\xE7', '\x3', 
		'\xE7', '\x5', '\xE7', '\xF7B', '\n', '\xE7', '\x3', '\xE8', '\x3', '\xE8', 
		'\x5', '\xE8', '\xF7F', '\n', '\xE8', '\x3', '\xE9', '\x3', '\xE9', '\x3', 
		'\xE9', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', 
		'\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x5', '\xEA', '\xF8B', '\n', '\xEA', 
		'\x3', '\xEA', '\x5', '\xEA', '\xF8E', '\n', '\xEA', '\x3', '\xEB', '\x5', 
		'\xEB', '\xF91', '\n', '\xEB', '\x3', '\xEB', '\x6', '\xEB', '\xF94', 
		'\n', '\xEB', '\r', '\xEB', '\xE', '\xEB', '\xF95', '\x3', '\xEC', '\x3', 
		'\xEC', '\a', '\xEC', '\xF9A', '\n', '\xEC', '\f', '\xEC', '\xE', '\xEC', 
		'\xF9D', '\v', '\xEC', '\x3', '\xEC', '\x3', '\xEC', '\x5', '\xEC', '\xFA1', 
		'\n', '\xEC', '\x3', '\xED', '\x3', '\xED', '\a', '\xED', '\xFA5', '\n', 
		'\xED', '\f', '\xED', '\xE', '\xED', '\xFA8', '\v', '\xED', '\x3', '\xED', 
		'\x5', '\xED', '\xFAB', '\n', '\xED', '\x3', '\xEE', '\x3', '\xEE', '\x3', 
		'\xEE', '\x5', '\xEE', '\xFB0', '\n', '\xEE', '\x3', '\xEE', '\x3', '\xEE', 
		'\x3', '\xEE', '\a', '\xEE', '\xFB5', '\n', '\xEE', '\f', '\xEE', '\xE', 
		'\xEE', '\xFB8', '\v', '\xEE', '\x3', '\xEE', '\x3', '\xEE', '\x3', '\xEE', 
		'\x5', '\xEE', '\xFBD', '\n', '\xEE', '\x3', '\xEE', '\x3', '\xEE', '\x3', 
		'\xEE', '\x3', '\xEE', '\x3', '\xEE', '\x5', '\xEE', '\xFC4', '\n', '\xEE', 
		'\x3', '\xEF', '\x5', '\xEF', '\xFC7', '\n', '\xEF', '\x3', '\xEF', '\x5', 
		'\xEF', '\xFCA', '\n', '\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x5', '\xEF', 
		'\xFCE', '\n', '\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x5', 
		'\xEF', '\xFD3', '\n', '\xEF', '\x3', '\xEF', '\x3', '\xEF', '\a', '\xEF', 
		'\xFD7', '\n', '\xEF', '\f', '\xEF', '\xE', '\xEF', '\xFDA', '\v', '\xEF', 
		'\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF1', '\x3', '\xF1', 
		'\x3', '\xF1', '\x3', '\xF2', '\x3', '\xF2', '\x5', '\xF2', '\xFE4', '\n', 
		'\xF2', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', 
		'\xF3', '\x5', '\xF3', '\xFEB', '\n', '\xF3', '\x3', '\xF3', '\x3', '\xF3', 
		'\x5', '\xF3', '\xFEF', '\n', '\xF3', '\x3', '\xF4', '\x3', '\xF4', '\x3', 
		'\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', 
		'\xF4', '\x5', '\xF4', '\xFF9', '\n', '\xF4', '\x3', '\xF5', '\x3', '\xF5', 
		'\x5', '\xF5', '\xFFD', '\n', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x5', 
		'\xF5', '\x1001', '\n', '\xF5', '\x3', '\xF5', '\x6', '\xF5', '\x1004', 
		'\n', '\xF5', '\r', '\xF5', '\xE', '\xF5', '\x1005', '\x3', '\xF5', '\x3', 
		'\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF6', '\x3', '\xF6', '\x3', 
		'\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x5', '\xF6', '\x1011', '\n', '\xF6', 
		'\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x5', '\xF7', '\x1016', 
		'\n', '\xF7', '\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', 
		'\x5', '\xF8', '\x101C', '\n', '\xF8', '\x3', '\xF8', '\x6', '\xF8', '\x101F', 
		'\n', '\xF8', '\r', '\xF8', '\xE', '\xF8', '\x1020', '\x3', '\xF8', '\x5', 
		'\xF8', '\x1024', '\n', '\xF8', '\x3', '\xF8', '\x6', '\xF8', '\x1027', 
		'\n', '\xF8', '\r', '\xF8', '\xE', '\xF8', '\x1028', '\x5', '\xF8', '\x102B', 
		'\n', '\xF8', '\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF9', '\x3', '\xF9', 
		'\x5', '\xF9', '\x1031', '\n', '\xF9', '\x3', '\xFA', '\x3', '\xFA', '\x3', 
		'\xFA', '\x5', '\xFA', '\x1036', '\n', '\xFA', '\x3', '\xFA', '\x5', '\xFA', 
		'\x1039', '\n', '\xFA', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x5', 
		'\xFB', '\x103E', '\n', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', 
		'\x5', '\xFB', '\x1043', '\n', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', 
		'\xFB', '\x3', '\xFB', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x5', 
		'\xFC', '\x104C', '\n', '\xFC', '\x3', '\xFC', '\x6', '\xFC', '\x104F', 
		'\n', '\xFC', '\r', '\xFC', '\xE', '\xFC', '\x1050', '\x3', '\xFC', '\x3', 
		'\xFC', '\x3', '\xFD', '\x3', '\xFD', '\x5', '\xFD', '\x1057', '\n', '\xFD', 
		'\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x5', '\xFD', 
		'\x105D', '\n', '\xFD', '\x3', '\xFD', '\x6', '\xFD', '\x1060', '\n', 
		'\xFD', '\r', '\xFD', '\xE', '\xFD', '\x1061', '\x3', '\xFD', '\x3', '\xFD', 
		'\x5', '\xFD', '\x1066', '\n', '\xFD', '\x5', '\xFD', '\x1068', '\n', 
		'\xFD', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x5', '\xFE', '\x106D', 
		'\n', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x5', '\xFE', '\x1071', '\n', 
		'\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x5', 
		'\xFE', '\x1077', '\n', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x5', '\xFE', 
		'\x107B', '\n', '\xFE', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', 
		'\xFF', '\x3', '\x100', '\x3', '\x100', '\x3', '\x100', '\x5', '\x100', 
		'\x1084', '\n', '\x100', '\x3', '\x100', '\x6', '\x100', '\x1087', '\n', 
		'\x100', '\r', '\x100', '\xE', '\x100', '\x1088', '\x3', '\x100', '\x5', 
		'\x100', '\x108C', '\n', '\x100', '\x3', '\x100', '\x3', '\x100', '\x3', 
		'\x100', '\x3', '\x100', '\x5', '\x100', '\x1092', '\n', '\x100', '\x3', 
		'\x100', '\x6', '\x100', '\x1095', '\n', '\x100', '\r', '\x100', '\xE', 
		'\x100', '\x1096', '\x5', '\x100', '\x1099', '\n', '\x100', '\x5', '\x100', 
		'\x109B', '\n', '\x100', '\x3', '\x101', '\x3', '\x101', '\x3', '\x101', 
		'\x5', '\x101', '\x10A0', '\n', '\x101', '\x3', '\x102', '\x3', '\x102', 
		'\x3', '\x102', '\x5', '\x102', '\x10A5', '\n', '\x102', '\x3', '\x102', 
		'\x6', '\x102', '\x10A8', '\n', '\x102', '\r', '\x102', '\xE', '\x102', 
		'\x10A9', '\x3', '\x102', '\x3', '\x102', '\x3', '\x103', '\x3', '\x103', 
		'\x3', '\x103', '\x3', '\x103', '\x5', '\x103', '\x10B2', '\n', '\x103', 
		'\x3', '\x103', '\x6', '\x103', '\x10B5', '\n', '\x103', '\r', '\x103', 
		'\xE', '\x103', '\x10B6', '\x3', '\x103', '\x3', '\x103', '\x3', '\x104', 
		'\x3', '\x104', '\x3', '\x104', '\x5', '\x104', '\x10BE', '\n', '\x104', 
		'\x3', '\x104', '\x3', '\x104', '\x5', '\x104', '\x10C2', '\n', '\x104', 
		'\x3', '\x105', '\x3', '\x105', '\x3', '\x105', '\x3', '\x106', '\x3', 
		'\x106', '\a', '\x106', '\x10C9', '\n', '\x106', '\f', '\x106', '\xE', 
		'\x106', '\x10CC', '\v', '\x106', '\x3', '\x106', '\x5', '\x106', '\x10CF', 
		'\n', '\x106', '\x3', '\x106', '\a', '\x106', '\x10D2', '\n', '\x106', 
		'\f', '\x106', '\xE', '\x106', '\x10D5', '\v', '\x106', '\x3', '\x106', 
		'\x3', '\x106', '\x3', '\x107', '\x3', '\x107', '\x3', '\x107', '\x3', 
		'\x107', '\x3', '\x107', '\x3', '\x107', '\x5', '\x107', '\x10DF', '\n', 
		'\x107', '\x5', '\x107', '\x10E1', '\n', '\x107', '\x3', '\x108', '\x3', 
		'\x108', '\x3', '\x108', '\x3', '\x108', '\x3', '\x109', '\x3', '\x109', 
		'\x3', '\x109', '\x3', '\x109', '\x3', '\x109', '\x3', '\x109', '\x3', 
		'\x109', '\x3', '\x109', '\a', '\x109', '\x10EF', '\n', '\x109', '\f', 
		'\x109', '\xE', '\x109', '\x10F2', '\v', '\x109', '\x3', '\x10A', '\x3', 
		'\x10A', '\x5', '\x10A', '\x10F6', '\n', '\x10A', '\x3', '\x10A', '\x3', 
		'\x10A', '\a', '\x10A', '\x10FA', '\n', '\x10A', '\f', '\x10A', '\xE', 
		'\x10A', '\x10FD', '\v', '\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', 
		'\x10B', '\x5', '\x10B', '\x1102', '\n', '\x10B', '\x3', '\x10B', '\x3', 
		'\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10B', 
		'\x3', '\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x3', 
		'\x10D', '\x3', '\x10D', '\x5', '\x10D', '\x1110', '\n', '\x10D', '\x3', 
		'\x10D', '\x6', '\x10D', '\x1113', '\n', '\x10D', '\r', '\x10D', '\xE', 
		'\x10D', '\x1114', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10E', '\x3', 
		'\x10E', '\x5', '\x10E', '\x111B', '\n', '\x10E', '\x3', '\x10E', '\x5', 
		'\x10E', '\x111E', '\n', '\x10E', '\x3', '\x10F', '\x5', '\x10F', '\x1121', 
		'\n', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x5', '\x10F', '\x1125', 
		'\n', '\x10F', '\x3', '\x10F', '\a', '\x10F', '\x1128', '\n', '\x10F', 
		'\f', '\x10F', '\xE', '\x10F', '\x112B', '\v', '\x10F', '\x3', '\x10F', 
		'\x3', '\x10F', '\x3', '\x110', '\x3', '\x110', '\x3', '\x110', '\x3', 
		'\x110', '\x5', '\x110', '\x1133', '\n', '\x110', '\x5', '\x110', '\x1135', 
		'\n', '\x110', '\x3', '\x110', '\x3', '\x110', '\x5', '\x110', '\x1139', 
		'\n', '\x110', '\x3', '\x110', '\x5', '\x110', '\x113C', '\n', '\x110', 
		'\x3', '\x111', '\x3', '\x111', '\x3', '\x111', '\x5', '\x111', '\x1141', 
		'\n', '\x111', '\x5', '\x111', '\x1143', '\n', '\x111', '\x3', '\x111', 
		'\x3', '\x111', '\x5', '\x111', '\x1147', '\n', '\x111', '\x3', '\x111', 
		'\x3', '\x111', '\x3', '\x111', '\x3', '\x112', '\x3', '\x112', '\x3', 
		'\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', 
		'\x5', '\x113', '\x1153', '\n', '\x113', '\x3', '\x114', '\x3', '\x114', 
		'\x3', '\x114', '\x3', '\x114', '\x3', '\x114', '\x3', '\x115', '\x3', 
		'\x115', '\x5', '\x115', '\x115C', '\n', '\x115', '\x3', '\x115', '\x3', 
		'\x115', '\x5', '\x115', '\x1160', '\n', '\x115', '\x3', '\x115', '\x6', 
		'\x115', '\x1163', '\n', '\x115', '\r', '\x115', '\xE', '\x115', '\x1164', 
		'\x3', '\x116', '\x3', '\x116', '\x5', '\x116', '\x1169', '\n', '\x116', 
		'\x3', '\x116', '\x3', '\x116', '\x5', '\x116', '\x116D', '\n', '\x116', 
		'\x3', '\x117', '\x3', '\x117', '\x3', '\x117', '\x5', '\x117', '\x1172', 
		'\n', '\x117', '\x3', '\x117', '\x5', '\x117', '\x1175', '\n', '\x117', 
		'\x3', '\x118', '\x3', '\x118', '\x3', '\x118', '\x3', '\x119', '\x3', 
		'\x119', '\x3', '\x119', '\x3', '\x119', '\x3', '\x119', '\x5', '\x119', 
		'\x117F', '\n', '\x119', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', 
		'\x3', '\x11A', '\x5', '\x11A', '\x1185', '\n', '\x11A', '\x3', '\x11A', 
		'\x5', '\x11A', '\x1188', '\n', '\x11A', '\x3', '\x11A', '\x5', '\x11A', 
		'\x118B', '\n', '\x11A', '\x3', '\x11B', '\x3', '\x11B', '\x5', '\x11B', 
		'\x118F', '\n', '\x11B', '\x3', '\x11B', '\x6', '\x11B', '\x1192', '\n', 
		'\x11B', '\r', '\x11B', '\xE', '\x11B', '\x1193', '\x3', '\x11B', '\x3', 
		'\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', 
		'\x3', '\x11B', '\x5', '\x11B', '\x119D', '\n', '\x11B', '\x3', '\x11C', 
		'\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', 
		'\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x5', '\x11C', '\x11A7', '\n', 
		'\x11C', '\x3', '\x11D', '\x3', '\x11D', '\x5', '\x11D', '\x11AB', '\n', 
		'\x11D', '\x3', '\x11D', '\x3', '\x11D', '\x5', '\x11D', '\x11AF', '\n', 
		'\x11D', '\x3', '\x11D', '\x5', '\x11D', '\x11B2', '\n', '\x11D', '\x3', 
		'\x11D', '\x5', '\x11D', '\x11B5', '\n', '\x11D', '\x3', '\x11E', '\x3', 
		'\x11E', '\x3', '\x11E', '\x5', '\x11E', '\x11BA', '\n', '\x11E', '\x3', 
		'\x11F', '\x3', '\x11F', '\x3', '\x11F', '\x5', '\x11F', '\x11BF', '\n', 
		'\x11F', '\x3', '\x11F', '\x5', '\x11F', '\x11C2', '\n', '\x11F', '\x3', 
		'\x11F', '\x5', '\x11F', '\x11C5', '\n', '\x11F', '\x3', '\x120', '\x3', 
		'\x120', '\x6', '\x120', '\x11C9', '\n', '\x120', '\r', '\x120', '\xE', 
		'\x120', '\x11CA', '\x3', '\x120', '\x5', '\x120', '\x11CE', '\n', '\x120', 
		'\x3', '\x120', '\x3', '\x120', '\x3', '\x121', '\x3', '\x121', '\x5', 
		'\x121', '\x11D4', '\n', '\x121', '\x3', '\x121', '\x5', '\x121', '\x11D7', 
		'\n', '\x121', '\x3', '\x122', '\x5', '\x122', '\x11DA', '\n', '\x122', 
		'\x3', '\x122', '\x6', '\x122', '\x11DD', '\n', '\x122', '\r', '\x122', 
		'\xE', '\x122', '\x11DE', '\x3', '\x122', '\x5', '\x122', '\x11E2', '\n', 
		'\x122', '\x3', '\x123', '\x3', '\x123', '\x3', '\x123', '\x3', '\x123', 
		'\x6', '\x123', '\x11E8', '\n', '\x123', '\r', '\x123', '\xE', '\x123', 
		'\x11E9', '\x3', '\x124', '\x3', '\x124', '\x6', '\x124', '\x11EE', '\n', 
		'\x124', '\r', '\x124', '\xE', '\x124', '\x11EF', '\x3', '\x125', '\x3', 
		'\x125', '\x3', '\x125', '\x5', '\x125', '\x11F5', '\n', '\x125', '\x3', 
		'\x126', '\x3', '\x126', '\x3', '\x126', '\x5', '\x126', '\x11FA', '\n', 
		'\x126', '\x3', '\x126', '\x3', '\x126', '\x3', '\x127', '\x3', '\x127', 
		'\x3', '\x127', '\x3', '\x127', '\x5', '\x127', '\x1202', '\n', '\x127', 
		'\x3', '\x127', '\x3', '\x127', '\x3', '\x127', '\x3', '\x127', '\x3', 
		'\x127', '\x3', '\x127', '\x3', '\x127', '\x3', '\x127', '\x5', '\x127', 
		'\x120C', '\n', '\x127', '\x3', '\x127', '\x3', '\x127', '\x5', '\x127', 
		'\x1210', '\n', '\x127', '\x5', '\x127', '\x1212', '\n', '\x127', '\x3', 
		'\x127', '\x5', '\x127', '\x1215', '\n', '\x127', '\x3', '\x128', '\x3', 
		'\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', 
		'\x3', '\x128', '\x3', '\x128', '\a', '\x128', '\x121F', '\n', '\x128', 
		'\f', '\x128', '\xE', '\x128', '\x1222', '\v', '\x128', '\x3', '\x128', 
		'\x5', '\x128', '\x1225', '\n', '\x128', '\x3', '\x128', '\x5', '\x128', 
		'\x1228', '\n', '\x128', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', 
		'\x3', '\x129', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', 
		'\x12B', '\x3', '\x12B', '\x3', '\x12B', '\x3', '\x12B', '\x3', '\x12B', 
		'\x3', '\x12B', '\x5', '\x12B', '\x1237', '\n', '\x12B', '\x3', '\x12B', 
		'\x3', '\x12B', '\x3', '\x12B', '\x5', '\x12B', '\x123C', '\n', '\x12B', 
		'\x3', '\x12B', '\x3', '\x12B', '\x5', '\x12B', '\x1240', '\n', '\x12B', 
		'\x3', '\x12C', '\x3', '\x12C', '\x3', '\x12C', '\x3', '\x12C', '\x3', 
		'\x12C', '\x5', '\x12C', '\x1247', '\n', '\x12C', '\x3', '\x12C', '\x5', 
		'\x12C', '\x124A', '\n', '\x12C', '\x3', '\x12D', '\x3', '\x12D', '\x3', 
		'\x12D', '\x3', '\x12D', '\x3', '\x12D', '\a', '\x12D', '\x1251', '\n', 
		'\x12D', '\f', '\x12D', '\xE', '\x12D', '\x1254', '\v', '\x12D', '\x3', 
		'\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x5', '\x12D', 
		'\x125A', '\n', '\x12D', '\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12E', 
		'\x5', '\x12E', '\x125F', '\n', '\x12E', '\x3', '\x12F', '\x3', '\x12F', 
		'\x5', '\x12F', '\x1263', '\n', '\x12F', '\x3', '\x130', '\x3', '\x130', 
		'\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x5', 
		'\x130', '\x126B', '\n', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3', 
		'\x130', '\x3', '\x130', '\x5', '\x130', '\x1271', '\n', '\x130', '\x3', 
		'\x131', '\x3', '\x131', '\x3', '\x131', '\x3', '\x131', '\x3', '\x131', 
		'\x3', '\x131', '\x5', '\x131', '\x1279', '\n', '\x131', '\x3', '\x131', 
		'\x5', '\x131', '\x127C', '\n', '\x131', '\x3', '\x132', '\x3', '\x132', 
		'\x3', '\x132', '\x3', '\x132', '\x3', '\x133', '\x3', '\x133', '\x3', 
		'\x133', '\x5', '\x133', '\x1285', '\n', '\x133', '\x3', '\x133', '\x5', 
		'\x133', '\x1288', '\n', '\x133', '\x3', '\x133', '\x5', '\x133', '\x128B', 
		'\n', '\x133', '\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x3', 
		'\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x5', '\x135', 
		'\x1294', '\n', '\x135', '\x3', '\x136', '\x3', '\x136', '\x3', '\x136', 
		'\x3', '\x136', '\x5', '\x136', '\x129A', '\n', '\x136', '\x3', '\x136', 
		'\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x5', '\x136', '\x12A0', 
		'\n', '\x136', '\x5', '\x136', '\x12A2', '\n', '\x136', '\x3', '\x137', 
		'\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x3', 
		'\x137', '\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x3', '\x137', 
		'\x3', '\x137', '\x5', '\x137', '\x12AF', '\n', '\x137', '\x5', '\x137', 
		'\x12B1', '\n', '\x137', '\x3', '\x138', '\x3', '\x138', '\x3', '\x138', 
		'\x3', '\x138', '\x3', '\x138', '\x3', '\x138', '\x3', '\x138', '\x5', 
		'\x138', '\x12BA', '\n', '\x138', '\x5', '\x138', '\x12BC', '\n', '\x138', 
		'\x3', '\x139', '\x3', '\x139', '\x5', '\x139', '\x12C0', '\n', '\x139', 
		'\x3', '\x139', '\x3', '\x139', '\x3', '\x139', '\x3', '\x139', '\x5', 
		'\x139', '\x12C6', '\n', '\x139', '\x3', '\x139', '\x3', '\x139', '\x5', 
		'\x139', '\x12CA', '\n', '\x139', '\x3', '\x13A', '\x3', '\x13A', '\x3', 
		'\x13A', '\x3', '\x13A', '\x3', '\x13A', '\x3', '\x13B', '\x3', '\x13B', 
		'\x3', '\x13C', '\x3', '\x13C', '\x3', '\x13C', '\a', '\x13C', '\x12D6', 
		'\n', '\x13C', '\f', '\x13C', '\xE', '\x13C', '\x12D9', '\v', '\x13C', 
		'\x3', '\x13D', '\x3', '\x13D', '\x5', '\x13D', '\x12DD', '\n', '\x13D', 
		'\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', 
		'\x13E', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', 
		'\x5', '\x13F', '\x12E8', '\n', '\x13F', '\x3', '\x13F', '\x3', '\x13F', 
		'\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', 
		'\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x5', '\x13F', '\x12F3', '\n', 
		'\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x5', '\x13F', '\x12F7', '\n', 
		'\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\a', '\x13F', 
		'\x12FC', '\n', '\x13F', '\f', '\x13F', '\xE', '\x13F', '\x12FF', '\v', 
		'\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x5', '\x13F', '\x1303', '\n', 
		'\x13F', '\a', '\x13F', '\x1305', '\n', '\x13F', '\f', '\x13F', '\xE', 
		'\x13F', '\x1308', '\v', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x5', 
		'\x13F', '\x130C', '\n', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', 
		'\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\a', '\x13F', 
		'\x1314', '\n', '\x13F', '\f', '\x13F', '\xE', '\x13F', '\x1317', '\v', 
		'\x13F', '\x3', '\x140', '\x3', '\x140', '\x3', '\x140', '\x5', '\x140', 
		'\x131C', '\n', '\x140', '\x3', '\x140', '\x5', '\x140', '\x131F', '\n', 
		'\x140', '\x3', '\x141', '\x3', '\x141', '\x3', '\x141', '\x3', '\x141', 
		'\x3', '\x141', '\x3', '\x141', '\x3', '\x141', '\a', '\x141', '\x1328', 
		'\n', '\x141', '\f', '\x141', '\xE', '\x141', '\x132B', '\v', '\x141', 
		'\x3', '\x142', '\x3', '\x142', '\x5', '\x142', '\x132F', '\n', '\x142', 
		'\x3', '\x142', '\x3', '\x142', '\x3', '\x142', '\x3', '\x142', '\x3', 
		'\x142', '\x3', '\x142', '\x3', '\x142', '\x3', '\x142', '\x5', '\x142', 
		'\x1339', '\n', '\x142', '\x5', '\x142', '\x133B', '\n', '\x142', '\x5', 
		'\x142', '\x133D', '\n', '\x142', '\x3', '\x143', '\x3', '\x143', '\x3', 
		'\x143', '\x3', '\x143', '\x3', '\x143', '\x3', '\x143', '\x3', '\x143', 
		'\x3', '\x143', '\x5', '\x143', '\x1347', '\n', '\x143', '\x3', '\x143', 
		'\x3', '\x143', '\x5', '\x143', '\x134B', '\n', '\x143', '\x5', '\x143', 
		'\x134D', '\n', '\x143', '\x3', '\x144', '\x3', '\x144', '\x3', '\x144', 
		'\x3', '\x144', '\x3', '\x144', '\x3', '\x144', '\x3', '\x144', '\x3', 
		'\x144', '\a', '\x144', '\x1357', '\n', '\x144', '\f', '\x144', '\xE', 
		'\x144', '\x135A', '\v', '\x144', '\x3', '\x144', '\x3', '\x144', '\x3', 
		'\x144', '\x3', '\x144', '\x3', '\x144', '\x5', '\x144', '\x1361', '\n', 
		'\x144', '\x3', '\x145', '\x3', '\x145', '\x3', '\x145', '\x3', '\x145', 
		'\x3', '\x146', '\x3', '\x146', '\x3', '\x146', '\x3', '\x146', '\x3', 
		'\x146', '\x3', '\x146', '\x3', '\x146', '\x5', '\x146', '\x136E', '\n', 
		'\x146', '\x3', '\x146', '\x5', '\x146', '\x1371', '\n', '\x146', '\x3', 
		'\x146', '\x3', '\x146', '\x3', '\x146', '\x3', '\x146', '\x3', '\x146', 
		'\x3', '\x146', '\x3', '\x146', '\x3', '\x146', '\x3', '\x146', '\x3', 
		'\x146', '\a', '\x146', '\x137D', '\n', '\x146', '\f', '\x146', '\xE', 
		'\x146', '\x1380', '\v', '\x146', '\x3', '\x147', '\x3', '\x147', '\x3', 
		'\x147', '\x3', '\x147', '\x3', '\x147', '\x5', '\x147', '\x1387', '\n', 
		'\x147', '\x3', '\x147', '\x3', '\x147', '\x3', '\x147', '\x3', '\x147', 
		'\x3', '\x147', '\x3', '\x147', '\x5', '\x147', '\x138F', '\n', '\x147', 
		'\x3', '\x147', '\x3', '\x147', '\x3', '\x147', '\x3', '\x147', '\x3', 
		'\x147', '\x5', '\x147', '\x1396', '\n', '\x147', '\x3', '\x147', '\x3', 
		'\x147', '\x5', '\x147', '\x139A', '\n', '\x147', '\x3', '\x148', '\x3', 
		'\x148', '\x3', '\x148', '\x3', '\x148', '\x3', '\x148', '\x5', '\x148', 
		'\x13A1', '\n', '\x148', '\x3', '\x149', '\x3', '\x149', '\x5', '\x149', 
		'\x13A5', '\n', '\x149', '\x3', '\x149', '\x3', '\x149', '\x3', '\x149', 
		'\x5', '\x149', '\x13AA', '\n', '\x149', '\a', '\x149', '\x13AC', '\n', 
		'\x149', '\f', '\x149', '\xE', '\x149', '\x13AF', '\v', '\x149', '\x3', 
		'\x149', '\x3', '\x149', '\x3', '\x149', '\a', '\x149', '\x13B4', '\n', 
		'\x149', '\f', '\x149', '\xE', '\x149', '\x13B7', '\v', '\x149', '\x3', 
		'\x149', '\x5', '\x149', '\x13BA', '\n', '\x149', '\x3', '\x14A', '\x3', 
		'\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x5', '\x14A', 
		'\x13C1', '\n', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', 
		'\x5', '\x14A', '\x13C6', '\n', '\x14A', '\x3', '\x14A', '\x3', '\x14A', 
		'\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14A', '\x3', 
		'\x14A', '\x5', '\x14A', '\x13CF', '\n', '\x14A', '\x3', '\x14B', '\x3', 
		'\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x3', '\x14B', 
		'\x3', '\x14B', '\x5', '\x14B', '\x13D8', '\n', '\x14B', '\x3', '\x14B', 
		'\x5', '\x14B', '\x13DB', '\n', '\x14B', '\x3', '\x14B', '\x3', '\x14B', 
		'\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', 
		'\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', 
		'\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', 
		'\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x5', '\x14C', '\x13EF', '\n', 
		'\x14C', '\x3', '\x14D', '\x3', '\x14D', '\x5', '\x14D', '\x13F3', '\n', 
		'\x14D', '\x3', '\x14E', '\x5', '\x14E', '\x13F6', '\n', '\x14E', '\x3', 
		'\x14E', '\x3', '\x14E', '\x3', '\x14E', '\x6', '\x14E', '\x13FB', '\n', 
		'\x14E', '\r', '\x14E', '\xE', '\x14E', '\x13FC', '\x3', '\x14E', '\x5', 
		'\x14E', '\x1400', '\n', '\x14E', '\x3', '\x14E', '\x3', '\x14E', '\x5', 
		'\x14E', '\x1404', '\n', '\x14E', '\x3', '\x14E', '\x5', '\x14E', '\x1407', 
		'\n', '\x14E', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x3', 
		'\x14F', '\x3', '\x14F', '\x5', '\x14F', '\x140E', '\n', '\x14F', '\x3', 
		'\x150', '\x5', '\x150', '\x1411', '\n', '\x150', '\x3', '\x150', '\x3', 
		'\x150', '\x6', '\x150', '\x1415', '\n', '\x150', '\r', '\x150', '\xE', 
		'\x150', '\x1416', '\x3', '\x150', '\x5', '\x150', '\x141A', '\n', '\x150', 
		'\x3', '\x150', '\x3', '\x150', '\x5', '\x150', '\x141E', '\n', '\x150', 
		'\x3', '\x150', '\x5', '\x150', '\x1421', '\n', '\x150', '\x3', '\x151', 
		'\x3', '\x151', '\x3', '\x151', '\x3', '\x151', '\x3', '\x151', '\x5', 
		'\x151', '\x1428', '\n', '\x151', '\x3', '\x152', '\x3', '\x152', '\x3', 
		'\x152', '\x5', '\x152', '\x142D', '\n', '\x152', '\x3', '\x153', '\x3', 
		'\x153', '\x3', '\x153', '\x3', '\x153', '\x3', '\x153', '\x3', '\x153', 
		'\x3', '\x153', '\x3', '\x153', '\x3', '\x153', '\x3', '\x153', '\a', 
		'\x153', '\x1439', '\n', '\x153', '\f', '\x153', '\xE', '\x153', '\x143C', 
		'\v', '\x153', '\x3', '\x153', '\x3', '\x153', '\x3', '\x153', '\x3', 
		'\x153', '\x5', '\x153', '\x1442', '\n', '\x153', '\x3', '\x154', '\x3', 
		'\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', 
		'\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x5', '\x154', '\x144D', 
		'\n', '\x154', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', 
		'\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x5', '\x155', 
		'\x1456', '\n', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', 
		'\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x5', 
		'\x155', '\x145F', '\n', '\x155', '\x3', '\x155', '\x3', '\x155', '\x5', 
		'\x155', '\x1463', '\n', '\x155', '\x3', '\x155', '\x3', '\x155', '\x5', 
		'\x155', '\x1467', '\n', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', 
		'\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', 
		'\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', 
		'\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', 
		'\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', 
		'\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x5', '\x155', 
		'\x1481', '\n', '\x155', '\x3', '\x155', '\x5', '\x155', '\x1484', '\n', 
		'\x155', '\x3', '\x155', '\x5', '\x155', '\x1487', '\n', '\x155', '\x3', 
		'\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', 
		'\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x5', '\x155', '\x1491', 
		'\n', '\x155', '\x3', '\x155', '\x3', '\x155', '\x5', '\x155', '\x1495', 
		'\n', '\x155', '\x3', '\x156', '\x3', '\x156', '\x3', '\x156', '\x5', 
		'\x156', '\x149A', '\n', '\x156', '\x3', '\x157', '\x3', '\x157', '\x3', 
		'\x157', '\x5', '\x157', '\x149F', '\n', '\x157', '\x3', '\x158', '\x3', 
		'\x158', '\x3', '\x158', '\x5', '\x158', '\x14A4', '\n', '\x158', '\x3', 
		'\x158', '\x3', '\x158', '\x3', '\x158', '\x3', '\x158', '\x3', '\x158', 
		'\x3', '\x158', '\x3', '\x158', '\x5', '\x158', '\x14AD', '\n', '\x158', 
		'\x3', '\x158', '\x5', '\x158', '\x14B0', '\n', '\x158', '\x5', '\x158', 
		'\x14B2', '\n', '\x158', '\x3', '\x158', '\x3', '\x158', '\x5', '\x158', 
		'\x14B6', '\n', '\x158', '\x3', '\x158', '\x3', '\x158', '\x3', '\x158', 
		'\x3', '\x158', '\x3', '\x158', '\x5', '\x158', '\x14BD', '\n', '\x158', 
		'\x3', '\x158', '\x3', '\x158', '\x3', '\x158', '\x3', '\x158', '\x3', 
		'\x158', '\x5', '\x158', '\x14C4', '\n', '\x158', '\x3', '\x158', '\x3', 
		'\x158', '\x3', '\x158', '\x3', '\x158', '\x3', '\x158', '\x3', '\x158', 
		'\x5', '\x158', '\x14CC', '\n', '\x158', '\x3', '\x158', '\x3', '\x158', 
		'\x3', '\x158', '\x3', '\x158', '\x3', '\x158', '\x3', '\x158', '\x3', 
		'\x158', '\x3', '\x158', '\x3', '\x158', '\x3', '\x158', '\x3', '\x158', 
		'\x3', '\x158', '\x3', '\x158', '\x5', '\x158', '\x14DB', '\n', '\x158', 
		'\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x5', '\x159', '\x14E0', 
		'\n', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x5', 
		'\x159', '\x14E5', '\n', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', 
		'\x159', '\x3', '\x159', '\x5', '\x159', '\x14EB', '\n', '\x159', '\x3', 
		'\x159', '\x5', '\x159', '\x14EE', '\n', '\x159', '\x3', '\x159', '\x3', 
		'\x159', '\x5', '\x159', '\x14F2', '\n', '\x159', '\x3', '\x159', '\x3', 
		'\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x5', '\x159', '\x14FC', '\n', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', 
		'\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x5', '\x159', '\x1508', '\n', '\x159', '\x5', '\x159', 
		'\x150A', '\n', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x5', '\x159', '\x1511', '\n', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x5', '\x159', '\x1515', '\n', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', 
		'\x159', '\x6', '\x159', '\x151C', '\n', '\x159', '\r', '\x159', '\xE', 
		'\x159', '\x151D', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', 
		'\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x5', '\x159', 
		'\x1527', '\n', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', 
		'\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x5', '\x159', '\x1535', '\n', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x5', 
		'\x159', '\x153D', '\n', '\x159', '\x3', '\x159', '\x5', '\x159', '\x1540', 
		'\n', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', 
		'\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x5', '\x159', 
		'\x1549', '\n', '\x159', '\x3', '\x159', '\x3', '\x159', '\a', '\x159', 
		'\x154D', '\n', '\x159', '\f', '\x159', '\xE', '\x159', '\x1550', '\v', 
		'\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x5', '\x159', '\x1559', 
		'\n', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', 
		'\x159', '\x3', '\x159', '\x3', '\x159', '\x5', '\x159', '\x1561', '\n', 
		'\x159', '\x3', '\x159', '\x5', '\x159', '\x1564', '\n', '\x159', '\x3', 
		'\x159', '\x5', '\x159', '\x1567', '\n', '\x159', '\x3', '\x159', '\x3', 
		'\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x5', '\x159', '\x1570', '\n', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x5', '\x159', '\x1575', '\n', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x5', '\x159', '\x157A', 
		'\n', '\x159', '\x3', '\x159', '\x6', '\x159', '\x157D', '\n', '\x159', 
		'\r', '\x159', '\xE', '\x159', '\x157E', '\x3', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x5', '\x159', '\x1584', '\n', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x5', '\x159', '\x1589', '\n', '\x159', 
		'\x3', '\x159', '\x5', '\x159', '\x158C', '\n', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x5', '\x159', '\x1591', '\n', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x5', '\x159', '\x1596', 
		'\n', '\x159', '\a', '\x159', '\x1598', '\n', '\x159', '\f', '\x159', 
		'\xE', '\x159', '\x159B', '\v', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x5', '\x159', '\x15A0', '\n', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x5', '\x159', '\x15A6', 
		'\n', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', 
		'\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x5', '\x159', 
		'\x15AF', '\n', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x5', '\x159', '\x15B4', '\n', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x5', 
		'\x159', '\x15BC', '\n', '\x159', '\x3', '\x159', '\x3', '\x159', '\x5', 
		'\x159', '\x15C0', '\n', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', 
		'\x159', '\x5', '\x159', '\x15C5', '\n', '\x159', '\x3', '\x159', '\x3', 
		'\x159', '\x3', '\x159', '\x3', '\x159', '\x5', '\x159', '\x15CB', '\n', 
		'\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x5', '\x159', '\x15D2', '\n', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x5', '\x159', '\x15D7', '\n', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', 
		'\x159', '\x5', '\x159', '\x15DE', '\n', '\x159', '\x3', '\x159', '\x3', 
		'\x159', '\x5', '\x159', '\x15E2', '\n', '\x159', '\x3', '\x159', '\x3', 
		'\x159', '\x3', '\x159', '\x5', '\x159', '\x15E7', '\n', '\x159', '\x3', 
		'\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x5', '\x159', '\x15EF', '\n', '\x159', '\x3', '\x159', 
		'\x5', '\x159', '\x15F2', '\n', '\x159', '\x3', '\x159', '\x5', '\x159', 
		'\x15F5', '\n', '\x159', '\x3', '\x159', '\x5', '\x159', '\x15F8', '\n', 
		'\x159', '\x3', '\x159', '\x3', '\x159', '\x5', '\x159', '\x15FC', '\n', 
		'\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x5', '\x159', 
		'\x1601', '\n', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x5', '\x159', '\x1606', '\n', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x5', '\x159', '\x160A', '\n', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x5', '\x159', '\x1611', 
		'\n', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x5', 
		'\x159', '\x1616', '\n', '\x159', '\x5', '\x159', '\x1618', '\n', '\x159', 
		'\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15B', '\x3', '\x15B', '\x3', 
		'\x15C', '\x3', '\x15C', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x5', '\x15D', '\x1623', '\n', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x5', '\x15D', '\x1627', '\n', '\x15D', '\x5', '\x15D', '\x1629', '\n', 
		'\x15D', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15E', '\x3', '\x15E', 
		'\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', 
		'\x15E', '\x5', '\x15E', '\x1634', '\n', '\x15E', '\x3', '\x15F', '\x3', 
		'\x15F', '\x3', '\x160', '\x3', '\x160', '\x3', '\x160', '\x3', '\x160', 
		'\x3', '\x160', '\x3', '\x160', '\x3', '\x160', '\x5', '\x160', '\x163F', 
		'\n', '\x160', '\x3', '\x161', '\x3', '\x161', '\x3', '\x161', '\x5', 
		'\x161', '\x1644', '\n', '\x161', '\x3', '\x161', '\x6', '\x161', '\x1647', 
		'\n', '\x161', '\r', '\x161', '\xE', '\x161', '\x1648', '\x5', '\x161', 
		'\x164B', '\n', '\x161', '\x3', '\x162', '\x3', '\x162', '\x5', '\x162', 
		'\x164F', '\n', '\x162', '\x3', '\x162', '\x5', '\x162', '\x1652', '\n', 
		'\x162', '\x3', '\x162', '\x3', '\x162', '\x5', '\x162', '\x1656', '\n', 
		'\x162', '\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x3', '\x163', 
		'\x3', '\x164', '\x3', '\x164', '\x3', '\x164', '\x3', '\x164', '\x3', 
		'\x164', '\x3', '\x164', '\x3', '\x164', '\x5', '\x164', '\x1663', '\n', 
		'\x164', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x5', '\x165', 
		'\x1668', '\n', '\x165', '\x3', '\x165', '\x3', '\x165', '\x5', '\x165', 
		'\x166C', '\n', '\x165', '\x3', '\x165', '\x6', '\x165', '\x166F', '\n', 
		'\x165', '\r', '\x165', '\xE', '\x165', '\x1670', '\x3', '\x165', '\x3', 
		'\x165', '\x3', '\x165', '\x3', '\x165', '\x5', '\x165', '\x1677', '\n', 
		'\x165', '\x3', '\x165', '\x3', '\x165', '\x5', '\x165', '\x167B', '\n', 
		'\x165', '\x3', '\x166', '\x3', '\x166', '\x3', '\x166', '\x5', '\x166', 
		'\x1680', '\n', '\x166', '\x3', '\x166', '\x3', '\x166', '\x5', '\x166', 
		'\x1684', '\n', '\x166', '\x3', '\x166', '\x3', '\x166', '\x3', '\x166', 
		'\x5', '\x166', '\x1689', '\n', '\x166', '\x3', '\x167', '\x3', '\x167', 
		'\x3', '\x167', '\x5', '\x167', '\x168E', '\n', '\x167', '\x3', '\x167', 
		'\x5', '\x167', '\x1691', '\n', '\x167', '\x3', '\x167', '\x5', '\x167', 
		'\x1694', '\n', '\x167', '\x3', '\x167', '\x6', '\x167', '\x1697', '\n', 
		'\x167', '\r', '\x167', '\xE', '\x167', '\x1698', '\x3', '\x167', '\x3', 
		'\x167', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x5', '\x168', '\x16A2', '\n', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\a', '\x168', '\x16A8', 
		'\n', '\x168', '\f', '\x168', '\xE', '\x168', '\x16AB', '\v', '\x168', 
		'\x3', '\x168', '\x5', '\x168', '\x16AE', '\n', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x169', '\x3', '\x169', '\x3', '\x169', '\x3', 
		'\x169', '\x3', '\x169', '\x3', '\x169', '\x5', '\x169', '\x16B8', '\n', 
		'\x169', '\x3', '\x169', '\x5', '\x169', '\x16BB', '\n', '\x169', '\x5', 
		'\x169', '\x16BD', '\n', '\x169', '\x3', '\x16A', '\x3', '\x16A', '\x3', 
		'\x16A', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x5', '\x16B', '\x16C7', '\n', '\x16B', '\x5', '\x16B', 
		'\x16C9', '\n', '\x16B', '\x3', '\x16C', '\x3', '\x16C', '\x3', '\x16C', 
		'\x3', '\x16C', '\x5', '\x16C', '\x16CF', '\n', '\x16C', '\x3', '\x16D', 
		'\x3', '\x16D', '\x3', '\x16D', '\x3', '\x16D', '\x5', '\x16D', '\x16D5', 
		'\n', '\x16D', '\x5', '\x16D', '\x16D7', '\n', '\x16D', '\x3', '\x16E', 
		'\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16F', '\x3', '\x16F', '\x3', 
		'\x16F', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x3', '\x170', '\x5', '\x170', '\x16E5', '\n', '\x170', 
		'\x5', '\x170', '\x16E7', '\n', '\x170', '\x3', '\x171', '\x3', '\x171', 
		'\x3', '\x171', '\x3', '\x171', '\x3', '\x171', '\x3', '\x171', '\x3', 
		'\x171', '\x3', '\x171', '\x5', '\x171', '\x16F1', '\n', '\x171', '\x3', 
		'\x172', '\x3', '\x172', '\x3', '\x172', '\x3', '\x172', '\x3', '\x172', 
		'\x3', '\x172', '\x3', '\x172', '\x5', '\x172', '\x16FA', '\n', '\x172', 
		'\x3', '\x173', '\x3', '\x173', '\x3', '\x173', '\x3', '\x173', '\x3', 
		'\x173', '\x3', '\x173', '\x3', '\x173', '\x5', '\x173', '\x1703', '\n', 
		'\x173', '\x3', '\x174', '\x3', '\x174', '\x5', '\x174', '\x1707', '\n', 
		'\x174', '\x3', '\x174', '\x3', '\x174', '\x5', '\x174', '\x170B', '\n', 
		'\x174', '\x3', '\x174', '\x3', '\x174', '\x3', '\x175', '\x5', '\x175', 
		'\x1710', '\n', '\x175', '\x3', '\x175', '\x3', '\x175', '\x5', '\x175', 
		'\x1714', '\n', '\x175', '\x3', '\x175', '\x5', '\x175', '\x1717', '\n', 
		'\x175', '\x3', '\x176', '\x3', '\x176', '\x5', '\x176', '\x171B', '\n', 
		'\x176', '\x3', '\x177', '\x3', '\x177', '\x3', '\x177', '\x3', '\x177', 
		'\x3', '\x177', '\x5', '\x177', '\x1722', '\n', '\x177', '\x3', '\x178', 
		'\x3', '\x178', '\x5', '\x178', '\x1726', '\n', '\x178', '\x3', '\x178', 
		'\x3', '\x178', '\x5', '\x178', '\x172A', '\n', '\x178', '\x3', '\x178', 
		'\x6', '\x178', '\x172D', '\n', '\x178', '\r', '\x178', '\xE', '\x178', 
		'\x172E', '\x3', '\x179', '\x3', '\x179', '\x5', '\x179', '\x1733', '\n', 
		'\x179', '\x3', '\x17A', '\x3', '\x17A', '\x3', '\x17B', '\x3', '\x17B', 
		'\x3', '\x17C', '\x3', '\x17C', '\x3', '\x17D', '\x3', '\x17D', '\x3', 
		'\x17E', '\x3', '\x17E', '\x3', '\x17F', '\x3', '\x17F', '\x3', '\x180', 
		'\x3', '\x180', '\x3', '\x180', '\a', '\x180', '\x1744', '\n', '\x180', 
		'\f', '\x180', '\xE', '\x180', '\x1747', '\v', '\x180', '\x3', '\x180', 
		'\x3', '\x180', '\x5', '\x180', '\x174B', '\n', '\x180', '\x3', '\x181', 
		'\x3', '\x181', '\x3', '\x182', '\x3', '\x182', '\x3', '\x182', '\x5', 
		'\x182', '\x1752', '\n', '\x182', '\x3', '\x183', '\x3', '\x183', '\x3', 
		'\x184', '\x3', '\x184', '\x3', '\x185', '\x3', '\x185', '\x3', '\x186', 
		'\x3', '\x186', '\x3', '\x186', '\x5', '\x186', '\x175D', '\n', '\x186', 
		'\x3', '\x187', '\x3', '\x187', '\x3', '\x187', '\a', '\x187', '\x1762', 
		'\n', '\x187', '\f', '\x187', '\xE', '\x187', '\x1765', '\v', '\x187', 
		'\x3', '\x188', '\x3', '\x188', '\x3', '\x189', '\x3', '\x189', '\x5', 
		'\x189', '\x176B', '\n', '\x189', '\x3', '\x18A', '\x3', '\x18A', '\x5', 
		'\x18A', '\x176F', '\n', '\x18A', '\x3', '\x18B', '\x3', '\x18B', '\x3', 
		'\x18B', '\a', '\x18B', '\x1774', '\n', '\x18B', '\f', '\x18B', '\xE', 
		'\x18B', '\x1777', '\v', '\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x5', 
		'\x18B', '\x177B', '\n', '\x18B', '\x3', '\x18C', '\x3', '\x18C', '\x3', 
		'\x18D', '\x3', '\x18D', '\x3', '\x18D', '\a', '\x18D', '\x1782', '\n', 
		'\x18D', '\f', '\x18D', '\xE', '\x18D', '\x1785', '\v', '\x18D', '\x3', 
		'\x18E', '\x3', '\x18E', '\x3', '\x18E', '\a', '\x18E', '\x178A', '\n', 
		'\x18E', '\f', '\x18E', '\xE', '\x18E', '\x178D', '\v', '\x18E', '\x3', 
		'\x18F', '\x3', '\x18F', '\x3', '\x18F', '\a', '\x18F', '\x1792', '\n', 
		'\x18F', '\f', '\x18F', '\xE', '\x18F', '\x1795', '\v', '\x18F', '\x3', 
		'\x190', '\x3', '\x190', '\x3', '\x190', '\x5', '\x190', '\x179A', '\n', 
		'\x190', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x5', '\x191', 
		'\x179F', '\n', '\x191', '\x3', '\x192', '\x3', '\x192', '\x3', '\x192', 
		'\x5', '\x192', '\x17A4', '\n', '\x192', '\x3', '\x193', '\x3', '\x193', 
		'\x5', '\x193', '\x17A8', '\n', '\x193', '\x3', '\x193', '\x3', '\x193', 
		'\x3', '\x193', '\x5', '\x193', '\x17AD', '\n', '\x193', '\x3', '\x193', 
		'\x5', '\x193', '\x17B0', '\n', '\x193', '\x3', '\x194', '\x3', '\x194', 
		'\x3', '\x194', '\x5', '\x194', '\x17B5', '\n', '\x194', '\x3', '\x195', 
		'\x3', '\x195', '\x5', '\x195', '\x17B9', '\n', '\x195', '\x3', '\x196', 
		'\x3', '\x196', '\x5', '\x196', '\x17BD', '\n', '\x196', '\x3', '\x197', 
		'\x3', '\x197', '\x3', '\x197', '\x5', '\x197', '\x17C2', '\n', '\x197', 
		'\x3', '\x198', '\x3', '\x198', '\x3', '\x199', '\x3', '\x199', '\x3', 
		'\x199', '\a', '\x199', '\x17C9', '\n', '\x199', '\f', '\x199', '\xE', 
		'\x199', '\x17CC', '\v', '\x199', '\x3', '\x19A', '\x3', '\x19A', '\x3', 
		'\x19A', '\x5', '\x19A', '\x17D1', '\n', '\x19A', '\x3', '\x19A', '\x3', 
		'\x19A', '\x3', '\x19A', '\x5', '\x19A', '\x17D6', '\n', '\x19A', '\x3', 
		'\x19B', '\x3', '\x19B', '\x3', '\x19B', '\a', '\x19B', '\x17DB', '\n', 
		'\x19B', '\f', '\x19B', '\xE', '\x19B', '\x17DE', '\v', '\x19B', '\x3', 
		'\x19C', '\x3', '\x19C', '\x3', '\x19D', '\x3', '\x19D', '\x3', '\x19E', 
		'\x3', '\x19E', '\x3', '\x19F', '\x3', '\x19F', '\x3', '\x1A0', '\x3', 
		'\x1A0', '\x3', '\x1A0', '\x5', '\x1A0', '\x17EB', '\n', '\x1A0', '\x3', 
		'\x1A0', '\x6', '\x1A0', '\x17EE', '\n', '\x1A0', '\r', '\x1A0', '\xE', 
		'\x1A0', '\x17EF', '\x3', '\x1A0', '\x3', '\x1A0', '\x3', '\x1A0', '\x3', 
		'\x1A0', '\x3', '\x1A0', '\x3', '\x1A0', '\x3', '\x1A0', '\x3', '\x1A0', 
		'\x3', '\x1A0', '\x3', '\x1A0', '\x3', '\x1A0', '\x3', '\x1A0', '\x3', 
		'\x1A0', '\x3', '\x1A0', '\x5', '\x1A0', '\x1800', '\n', '\x1A0', '\x3', 
		'\x1A1', '\x5', '\x1A1', '\x1803', '\n', '\x1A1', '\x3', '\x1A1', '\x6', 
		'\x1A1', '\x1806', '\n', '\x1A1', '\r', '\x1A1', '\xE', '\x1A1', '\x1807', 
		'\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', '\x1A2', '\x3', 
		'\x1A3', '\x3', '\x1A3', '\x3', '\x1A3', '\x3', '\x1A3', '\x3', '\x1A3', 
		'\x3', '\x1A3', '\x3', '\x1A3', '\x5', '\x1A3', '\x1815', '\n', '\x1A3', 
		'\x3', '\x1A4', '\x3', '\x1A4', '\x5', '\x1A4', '\x1819', '\n', '\x1A4', 
		'\x3', '\x1A4', '\a', '\x1A4', '\x181C', '\n', '\x1A4', '\f', '\x1A4', 
		'\xE', '\x1A4', '\x181F', '\v', '\x1A4', '\x3', '\x1A4', '\x3', '\x1A4', 
		'\x5', '\x1A4', '\x1823', '\n', '\x1A4', '\x3', '\x1A5', '\x3', '\x1A5', 
		'\x5', '\x1A5', '\x1827', '\n', '\x1A5', '\x3', '\x1A5', '\x3', '\x1A5', 
		'\x5', '\x1A5', '\x182B', '\n', '\x1A5', '\a', '\x1A5', '\x182D', '\n', 
		'\x1A5', '\f', '\x1A5', '\xE', '\x1A5', '\x1830', '\v', '\x1A5', '\x3', 
		'\x1A5', '\x3', '\x1A5', '\x5', '\x1A5', '\x1834', '\n', '\x1A5', '\x3', 
		'\x1A6', '\x3', '\x1A6', '\x3', '\x1A6', '\x3', '\x1A6', '\x3', '\x1A6', 
		'\x5', '\x1A6', '\x183B', '\n', '\x1A6', '\x3', '\x1A6', '\x3', '\x1A6', 
		'\x3', '\x1A6', '\x5', '\x1A6', '\x1840', '\n', '\x1A6', '\x5', '\x1A6', 
		'\x1842', '\n', '\x1A6', '\x5', '\x1A6', '\x1844', '\n', '\x1A6', '\x3', 
		'\x1A6', '\x3', '\x1A6', '\x3', '\x1A6', '\x3', '\x1A6', '\x3', '\x1A6', 
		'\x3', '\x1A6', '\x3', '\x1A6', '\x5', '\x1A6', '\x184D', '\n', '\x1A6', 
		'\x3', '\x1A6', '\x3', '\x1A6', '\x5', '\x1A6', '\x1851', '\n', '\x1A6', 
		'\x6', '\x1A6', '\x1853', '\n', '\x1A6', '\r', '\x1A6', '\xE', '\x1A6', 
		'\x1854', '\x5', '\x1A6', '\x1857', '\n', '\x1A6', '\x3', '\x1A6', '\x3', 
		'\x1A6', '\x5', '\x1A6', '\x185B', '\n', '\x1A6', '\x3', '\x1A7', '\x3', 
		'\x1A7', '\x3', '\x1A7', '\x3', '\x1A8', '\x3', '\x1A8', '\x3', '\x1A8', 
		'\x3', '\x1A8', '\x5', '\x1A8', '\x1864', '\n', '\x1A8', '\x3', '\x1A8', 
		'\x3', '\x1A8', '\x3', '\x1A9', '\x3', '\x1A9', '\x5', '\x1A9', '\x186A', 
		'\n', '\x1A9', '\x3', '\x1A9', '\x3', '\x1A9', '\x5', '\x1A9', '\x186E', 
		'\n', '\x1A9', '\x5', '\x1A9', '\x1870', '\n', '\x1A9', '\x3', '\x1AA', 
		'\x3', '\x1AA', '\x5', '\x1AA', '\x1874', '\n', '\x1AA', '\x3', '\x1AA', 
		'\x3', '\x1AA', '\x5', '\x1AA', '\x1878', '\n', '\x1AA', '\x3', '\x1AA', 
		'\x3', '\x1AA', '\x3', '\x1AA', '\x3', '\x1AA', '\x3', '\x1AA', '\x5', 
		'\x1AA', '\x187F', '\n', '\x1AA', '\x3', '\x1AA', '\x3', '\x1AA', '\x3', 
		'\x1AA', '\x3', '\x1AA', '\x3', '\x1AA', '\x3', '\x1AA', '\x5', '\x1AA', 
		'\x1887', '\n', '\x1AA', '\x3', '\x1AA', '\x3', '\x1AA', '\x3', '\x1AA', 
		'\x3', '\x1AA', '\x3', '\x1AA', '\x3', '\x1AA', '\x5', '\x1AA', '\x188F', 
		'\n', '\x1AA', '\x5', '\x1AA', '\x1891', '\n', '\x1AA', '\x3', '\x1AB', 
		'\x3', '\x1AB', '\x3', '\x1AB', '\x3', '\x1AB', '\x5', '\x1AB', '\x1897', 
		'\n', '\x1AB', '\x3', '\x1AB', '\x5', '\x1AB', '\x189A', '\n', '\x1AB', 
		'\x3', '\x1AB', '\x3', '\x1AB', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', 
		'\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', 
		'\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', 
		'\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', 
		'\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x5', 
		'\x1AC', '\x18B2', '\n', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', 
		'\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x5', '\x1AC', '\x18B9', '\n', 
		'\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', 
		'\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', 
		'\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', 
		'\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', 
		'\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', 
		'\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', 
		'\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', 
		'\x5', '\x1AC', '\x18DA', '\n', '\x1AC', '\x3', '\x1AD', '\x3', '\x1AD', 
		'\x3', '\x1AD', '\x5', '\x1AD', '\x18DF', '\n', '\x1AD', '\x3', '\x1AD', 
		'\x5', '\x1AD', '\x18E2', '\n', '\x1AD', '\x3', '\x1AD', '\x3', '\x1AD', 
		'\x3', '\x1AD', '\x5', '\x1AD', '\x18E7', '\n', '\x1AD', '\x5', '\x1AD', 
		'\x18E9', '\n', '\x1AD', '\x3', '\x1AD', '\x3', '\x1AD', '\a', '\x1AD', 
		'\x18ED', '\n', '\x1AD', '\f', '\x1AD', '\xE', '\x1AD', '\x18F0', '\v', 
		'\x1AD', '\x3', '\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', '\a', '\x1AE', 
		'\x18F5', '\n', '\x1AE', '\f', '\x1AE', '\xE', '\x1AE', '\x18F8', '\v', 
		'\x1AE', '\x3', '\x1AF', '\x3', '\x1AF', '\x5', '\x1AF', '\x18FC', '\n', 
		'\x1AF', '\x3', '\x1AF', '\x3', '\x1AF', '\x3', '\x1AF', '\a', '\x1AF', 
		'\x1901', '\n', '\x1AF', '\f', '\x1AF', '\xE', '\x1AF', '\x1904', '\v', 
		'\x1AF', '\x3', '\x1AF', '\x3', '\x1AF', '\x5', '\x1AF', '\x1908', '\n', 
		'\x1AF', '\x3', '\x1AF', '\x5', '\x1AF', '\x190B', '\n', '\x1AF', '\x3', 
		'\x1B0', '\x3', '\x1B0', '\x5', '\x1B0', '\x190F', '\n', '\x1B0', '\x3', 
		'\x1B0', '\x3', '\x1B0', '\x3', '\x1B0', '\a', '\x1B0', '\x1914', '\n', 
		'\x1B0', '\f', '\x1B0', '\xE', '\x1B0', '\x1917', '\v', '\x1B0', '\x3', 
		'\x1B1', '\x3', '\x1B1', '\x5', '\x1B1', '\x191B', '\n', '\x1B1', '\x3', 
		'\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', 
		'\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', 
		'\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', 
		'\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', 
		'\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', 
		'\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', 
		'\x1B1', '\x5', '\x1B1', '\x1939', '\n', '\x1B1', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x5', '\x1B2', 
		'\x1940', '\n', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x5', '\x1B2', '\x194F', '\n', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x5', 
		'\x1B2', '\x195F', '\n', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x5', '\x1B2', '\x1972', '\n', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x5', '\x1B2', '\x1983', '\n', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x5', '\x1B2', 
		'\x198A', '\n', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x5', '\x1B2', '\x1992', 
		'\n', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x5', '\x1B2', '\x199F', 
		'\n', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x5', '\x1B2', 
		'\x19A8', '\n', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x5', 
		'\x1B2', '\x19B1', '\n', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x5', '\x1B2', '\x19BA', '\n', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x5', '\x1B2', '\x19C4', '\n', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x5', '\x1B2', '\x19CC', '\n', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x5', '\x1B2', '\x19D6', '\n', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x5', 
		'\x1B2', '\x19E0', '\n', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x5', '\x1B2', '\x19EC', 
		'\n', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x5', '\x1B2', '\x19FC', '\n', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x5', '\x1B2', '\x1A0E', '\n', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x5', '\x1B2', '\x1A1B', '\n', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x5', 
		'\x1B2', '\x1A2A', '\n', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x5', '\x1B2', '\x1A35', '\n', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x5', '\x1B2', 
		'\x1A3F', '\n', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x5', '\x1B2', '\x1A4A', '\n', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x5', '\x1B2', '\x1A54', 
		'\n', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x5', '\x1B2', '\x1A65', '\n', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x5', '\x1B2', '\x1A6B', '\n', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x5', '\x1B2', '\x1A81', '\n', '\x1B2', '\x3', '\x1B3', '\x3', '\x1B3', 
		'\x3', '\x1B3', '\x5', '\x1B3', '\x1A86', '\n', '\x1B3', '\x3', '\x1B3', 
		'\x3', '\x1B3', '\x3', '\x1B3', '\x3', '\x1B3', '\x5', '\x1B3', '\x1A8C', 
		'\n', '\x1B3', '\x3', '\x1B3', '\x3', '\x1B3', '\x3', '\x1B3', '\x3', 
		'\x1B3', '\x5', '\x1B3', '\x1A92', '\n', '\x1B3', '\x3', '\x1B3', '\x3', 
		'\x1B3', '\x3', '\x1B3', '\x3', '\x1B3', '\x5', '\x1B3', '\x1A98', '\n', 
		'\x1B3', '\x3', '\x1B3', '\x3', '\x1B3', '\x3', '\x1B3', '\x5', '\x1B3', 
		'\x1A9D', '\n', '\x1B3', '\x5', '\x1B3', '\x1A9F', '\n', '\x1B3', '\x3', 
		'\x1B3', '\x5', '\x1B3', '\x1AA2', '\n', '\x1B3', '\x3', '\x1B3', '\x3', 
		'\x1B3', '\x3', '\x1B3', '\x3', '\x1B3', '\x3', '\x1B3', '\x3', '\x1B3', 
		'\x3', '\x1B3', '\x3', '\x1B3', '\x5', '\x1B3', '\x1AAC', '\n', '\x1B3', 
		'\x3', '\x1B3', '\x5', '\x1B3', '\x1AAF', '\n', '\x1B3', '\x5', '\x1B3', 
		'\x1AB1', '\n', '\x1B3', '\x5', '\x1B3', '\x1AB3', '\n', '\x1B3', '\x3', 
		'\x1B3', '\x3', '\x1B3', '\x3', '\x1B3', '\x3', '\x1B3', '\x3', '\x1B3', 
		'\x3', '\x1B3', '\x3', '\x1B3', '\x3', '\x1B3', '\x3', '\x1B3', '\x3', 
		'\x1B3', '\x3', '\x1B3', '\x3', '\x1B3', '\x5', '\x1B3', '\x1AC1', '\n', 
		'\x1B3', '\x3', '\x1B4', '\x3', '\x1B4', '\x3', '\x1B5', '\x3', '\x1B5', 
		'\x3', '\x1B5', '\x3', '\x1B6', '\x3', '\x1B6', '\x3', '\x1B7', '\x3', 
		'\x1B7', '\x5', '\x1B7', '\x1ACC', '\n', '\x1B7', '\x3', '\x1B7', '\x3', 
		'\x1B7', '\x3', '\x1B8', '\x3', '\x1B8', '\x5', '\x1B8', '\x1AD2', '\n', 
		'\x1B8', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', 
		'\x3', '\x1BA', '\x3', '\x1BA', '\x3', '\x1BB', '\x3', '\x1BB', '\x3', 
		'\x1BC', '\x3', '\x1BC', '\x3', '\x1BC', '\x2', '\x5', '\x27C', '\x280', 
		'\x28A', '\x1BD', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 
		'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 
		'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', 
		'\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', 
		'\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', '\xAA', 
		'\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', '\xBC', 
		'\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', '\xCC', '\xCE', 
		'\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', '\xDC', '\xDE', '\xE0', 
		'\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', '\xEE', '\xF0', '\xF2', 
		'\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE', '\x100', '\x102', '\x104', 
		'\x106', '\x108', '\x10A', '\x10C', '\x10E', '\x110', '\x112', '\x114', 
		'\x116', '\x118', '\x11A', '\x11C', '\x11E', '\x120', '\x122', '\x124', 
		'\x126', '\x128', '\x12A', '\x12C', '\x12E', '\x130', '\x132', '\x134', 
		'\x136', '\x138', '\x13A', '\x13C', '\x13E', '\x140', '\x142', '\x144', 
		'\x146', '\x148', '\x14A', '\x14C', '\x14E', '\x150', '\x152', '\x154', 
		'\x156', '\x158', '\x15A', '\x15C', '\x15E', '\x160', '\x162', '\x164', 
		'\x166', '\x168', '\x16A', '\x16C', '\x16E', '\x170', '\x172', '\x174', 
		'\x176', '\x178', '\x17A', '\x17C', '\x17E', '\x180', '\x182', '\x184', 
		'\x186', '\x188', '\x18A', '\x18C', '\x18E', '\x190', '\x192', '\x194', 
		'\x196', '\x198', '\x19A', '\x19C', '\x19E', '\x1A0', '\x1A2', '\x1A4', 
		'\x1A6', '\x1A8', '\x1AA', '\x1AC', '\x1AE', '\x1B0', '\x1B2', '\x1B4', 
		'\x1B6', '\x1B8', '\x1BA', '\x1BC', '\x1BE', '\x1C0', '\x1C2', '\x1C4', 
		'\x1C6', '\x1C8', '\x1CA', '\x1CC', '\x1CE', '\x1D0', '\x1D2', '\x1D4', 
		'\x1D6', '\x1D8', '\x1DA', '\x1DC', '\x1DE', '\x1E0', '\x1E2', '\x1E4', 
		'\x1E6', '\x1E8', '\x1EA', '\x1EC', '\x1EE', '\x1F0', '\x1F2', '\x1F4', 
		'\x1F6', '\x1F8', '\x1FA', '\x1FC', '\x1FE', '\x200', '\x202', '\x204', 
		'\x206', '\x208', '\x20A', '\x20C', '\x20E', '\x210', '\x212', '\x214', 
		'\x216', '\x218', '\x21A', '\x21C', '\x21E', '\x220', '\x222', '\x224', 
		'\x226', '\x228', '\x22A', '\x22C', '\x22E', '\x230', '\x232', '\x234', 
		'\x236', '\x238', '\x23A', '\x23C', '\x23E', '\x240', '\x242', '\x244', 
		'\x246', '\x248', '\x24A', '\x24C', '\x24E', '\x250', '\x252', '\x254', 
		'\x256', '\x258', '\x25A', '\x25C', '\x25E', '\x260', '\x262', '\x264', 
		'\x266', '\x268', '\x26A', '\x26C', '\x26E', '\x270', '\x272', '\x274', 
		'\x276', '\x278', '\x27A', '\x27C', '\x27E', '\x280', '\x282', '\x284', 
		'\x286', '\x288', '\x28A', '\x28C', '\x28E', '\x290', '\x292', '\x294', 
		'\x296', '\x298', '\x29A', '\x29C', '\x29E', '\x2A0', '\x2A2', '\x2A4', 
		'\x2A6', '\x2A8', '\x2AA', '\x2AC', '\x2AE', '\x2B0', '\x2B2', '\x2B4', 
		'\x2B6', '\x2B8', '\x2BA', '\x2BC', '\x2BE', '\x2C0', '\x2C2', '\x2C4', 
		'\x2C6', '\x2C8', '\x2CA', '\x2CC', '\x2CE', '\x2D0', '\x2D2', '\x2D4', 
		'\x2D6', '\x2D8', '\x2DA', '\x2DC', '\x2DE', '\x2E0', '\x2E2', '\x2E4', 
		'\x2E6', '\x2E8', '\x2EA', '\x2EC', '\x2EE', '\x2F0', '\x2F2', '\x2F4', 
		'\x2F6', '\x2F8', '\x2FA', '\x2FC', '\x2FE', '\x300', '\x302', '\x304', 
		'\x306', '\x308', '\x30A', '\x30C', '\x30E', '\x310', '\x312', '\x314', 
		'\x316', '\x318', '\x31A', '\x31C', '\x31E', '\x320', '\x322', '\x324', 
		'\x326', '\x328', '\x32A', '\x32C', '\x32E', '\x330', '\x332', '\x334', 
		'\x336', '\x338', '\x33A', '\x33C', '\x33E', '\x340', '\x342', '\x344', 
		'\x346', '\x348', '\x34A', '\x34C', '\x34E', '\x350', '\x352', '\x354', 
		'\x356', '\x358', '\x35A', '\x35C', '\x35E', '\x360', '\x362', '\x364', 
		'\x366', '\x368', '\x36A', '\x36C', '\x36E', '\x370', '\x372', '\x374', 
		'\x376', '\x2', '\x85', '\x4', '\x2', '\x14', '\x14', '\xFD', '\xFD', 
		'\x4', '\x2', '\v', '\v', '\x185', '\x185', '\x5', '\x2', '\xD6', '\xD6', 
		'\x113', '\x113', '\x1A0', '\x1A0', '\x4', '\x2', 'K', 'K', '\x16B', '\x16B', 
		'\x5', '\x2', '\x31', '\x31', '\x174', '\x174', '\x1F2', '\x1F2', '\x4', 
		'\x2', '\x8D', '\x8D', '\x9D', '\x9D', '\x4', '\x2', '\t', '\t', '&', 
		'&', '\x5', '\x2', '\x86', '\x86', '\xF4', '\xF4', '\x235', '\x235', '\x5', 
		'\x2', '\x142', '\x142', '\x161', '\x161', '\x177', '\x177', '\x4', '\x2', 
		'\xC6', '\xC6', '\x23C', '\x23C', '\x4', '\x2', '\x31', '\x31', '\x1F2', 
		'\x1F2', '\x4', '\x2', '\x5', '\x5', '\x93', '\x93', '\x5', '\x2', '\x5', 
		'\x5', '\x93', '\x93', '\x135', '\x135', '\x5', '\x2', 'o', 'o', '\x16A', 
		'\x16A', '\x1F3', '\x1F3', '\x4', '\x2', '\x123', '\x123', '\x16B', '\x16B', 
		'\x4', '\x2', '\x12A', '\x12A', '\x1FB', '\x1FB', '\x5', '\x2', '\xBC', 
		'\xBC', '\xF5', '\xF5', '\x173', '\x173', '\x4', '\x2', '\xB6', '\xB6', 
		'\xCF', '\xCF', '\x4', '\x2', '\x80', '\x80', '\x211', '\x211', '\x4', 
		'\x2', '\x116', '\x116', '\x231', '\x231', '\x4', '\x2', '\x5', '\x5', 
		'\x1AF', '\x1AF', '\x4', '\x2', '\x6', '\x6', '\x85', '\x85', '\x4', '\x2', 
		'\r', '\r', 'l', 'l', '\x4', '\x2', '\xDD', '\xDE', '\x160', '\x160', 
		'\x4', '\x2', '\x83', '\x83', '\xE1', '\xE1', '\x4', '\x2', '\x151', '\x151', 
		'\x1AE', '\x1AE', '\x4', '\x2', '\x155', '\x155', '\x23C', '\x23C', '\x4', 
		'\x2', '*', '*', '\x1EB', '\x1EB', '\x4', '\x2', '\x15D', '\x15D', '\x163', 
		'\x163', '\x5', '\x2', '\xBB', '\xBB', '\x117', '\x117', '\x14B', '\x14B', 
		'\x4', '\x2', '\x1E', '\x1E', '\x122', '\x122', '\x4', '\x2', '\x15E', 
		'\x15E', '\x165', '\x165', '\x4', '\x2', '\x292', '\x292', '\x2B3', '\x2B3', 
		'\x4', '\x2', '\xD5', '\xD5', '\x14A', '\x14A', '\x4', '\x2', '\x86', 
		'\x86', '\x192', '\x192', '\x4', '\x2', '\x230', '\x230', '\x290', '\x290', 
		'\x5', '\x2', '\x80', '\x80', '\x103', '\x103', '\x1A5', '\x1A5', '\x5', 
		'\x2', '\x80', '\x80', '\x103', '\x103', '\x14E', '\x14E', '\x4', '\x2', 
		'\x12', '\x12', '\x19D', '\x19D', '\x4', '\x2', '\xDA', '\xDA', '\x11E', 
		'\x11E', '\x4', '\x2', 'm', 'm', '\x84', '\x84', '\x6', '\x2', '\xED', 
		'\xED', '\xF3', '\xF3', '\x147', '\x147', '\x171', '\x171', '\x4', '\x2', 
		'\x80', '\x80', '\x29F', '\x29F', '\x3', '\x3', '\x2A8', '\x2A8', '\x3', 
		'\x2', '\x2A8', '\x2A8', '\x3', '\x2', '\x1BB', '\x1BC', '\x4', '\x2', 
		'\x164', '\x164', '\x251', '\x251', '\x3', '\x2', '[', '\\', '\x4', '\x2', 
		'\x156', '\x156', '\x247', '\x247', '\x4', '\x2', '$', '$', '\xE1', '\xE1', 
		'\x4', '\x2', '\x34', '\x34', '\x87', '\x87', '\x5', '\x2', '\r', '\r', 
		'\x8F', '\x8F', '\x22F', '\x22F', '\x4', '\x2', 'j', 'j', '\x13B', '\x13B', 
		'\x5', '\x2', '\xCC', '\xCC', '\x109', '\x109', '\x1C1', '\x1C1', '\x4', 
		'\x2', '\x1D1', '\x1D1', '\x217', '\x217', '\x5', '\x2', '\x1D1', '\x1D1', 
		'\x1ED', '\x1ED', '\x217', '\x217', '\x4', '\x2', '\xAC', '\xAC', '\xE2', 
		'\xE2', '\x4', '\x2', 'k', 'k', '\x1C5', '\x1C5', '\x4', '\x2', '\xE0', 
		'\xE0', '\x103', '\x103', '\x4', '\x2', '\r', '\r', '\x234', '\x234', 
		'\x4', '\x2', ' ', ' ', '\x1D9', '\x1D9', '\x4', '\x2', '\x15', '\x15', 
		'\x88', '\x88', '\x4', '\x2', '\xBD', '\xBD', '\x106', '\x106', '\x4', 
		'\x2', '\r', '\r', '\xBD', '\xBD', '\x4', '\x2', '\x20F', '\x20F', '\x214', 
		'\x214', '\x4', '\x2', '\x12A', '\x12A', '\x200', '\x200', '\x3', '\x2', 
		'\x10D', '\x110', '\x3', '\x2', '\x2A5', '\x2A6', '\x4', '\x2', '\x299', 
		'\x299', '\x29D', '\x29D', '\x3', '\x2', '\x29A', '\x29B', '\x4', '\x2', 
		'\x7F', '\x7F', '\xE4', '\xE4', '\x6', '\x2', '\r', '\r', '\x11', '\x11', 
		'\xB0', '\xB0', '\x1EE', '\x1EE', '\x5', '\x2', '\x33', '\x33', '\x108', 
		'\x108', '\x220', '\x220', '\x4', '\x2', '\r', '\r', '\x8F', '\x8F', '\x4', 
		'\x2', '?', '?', '\x254', '\x254', '\x4', '\x2', '\x8F', '\x8F', '\x22F', 
		'\x22F', '\x3', '\x2', '\x17F', '\x182', '\x4', '\x2', '<', '<', 'S', 
		'S', '\x4', '\x2', '\xBE', '\xBE', '\x107', '\x107', '\x4', '\x2', '\x44', 
		'\x44', '\x13E', '\x13E', '\x4', '\x2', '\x255', '\x255', '\x258', '\x258', 
		'\x4', '\x2', '\xA3', '\xA3', '\x149', '\x149', '\x4', '\x2', '\xA7', 
		'\xA7', '\x139', '\x139', '\x4', '\x2', '`', '`', '\x91', '\x91', '\x4', 
		'\x2', '\xD8', '\xD8', '\x1E3', '\x1E3', '\a', '\x2', '\x272', '\x274', 
		'\x276', '\x27B', '\x27D', '\x27E', '\x280', '\x280', '\x284', '\x287', 
		'\x3', '\x2', '\x26B', '\x271', '\x3', '\x2', '\x265', '\x26A', '\x4', 
		'\x2', '\x1A0', '\x1A0', '\x1C8', '\x1C8', '\x4', '\x2', '\xC3', '\xC3', 
		'\x18F', '\x18F', '\x4', '\x2', '\x152', '\x152', '\x1CF', '\x1CF', '\x3', 
		'\x2', '\xA4', '\xA5', '\x4', '\x2', '\x16E', '\x16E', '\x1F4', '\x1F4', 
		'\x5', '\x2', '\xB8', '\xB8', '\x204', '\x204', '\x248', '\x248', '\x4', 
		'\x2', 'Q', 'Q', '\x1C4', '\x1C4', '\x5', '\x2', 'Q', 'Q', '\x14E', '\x14E', 
		'\x1C4', '\x1C4', '\x4', '\x2', '\x178', '\x178', '\x201', '\x201', '\x4', 
		'\x2', '\x1B3', '\x1B3', '\x1F0', '\x1F0', '\x4', '\x2', '\xE0', '\xE0', 
		'\x1B4', '\x1B4', '\x3', '\x2', '\x183', '\x184', '\x4', '\x2', 'u', 'u', 
		'\x261', '\x261', '\x4', '\x2', '\x136', '\x136', '\x1D3', '\x1D3', '\x4', 
		'\x2', '\x39', '\x39', '\x43', '\x43', '\x5', '\x2', '\xE', '\xE', 'h', 
		'h', '\x93', '\x93', '\x4', '\x2', '\xE', '\xE', '\x93', '\x93', '\x4', 
		'\x2', 'h', 'h', '\x93', '\x93', '\x4', '\x2', '\xE', '\xE', 'h', 'h', 
		'\x5', '\x2', '\xE', '\xE', '\x93', '\x93', '\xAE', '\xAE', '\x4', '\x2', 
		'\x11', '\x11', '\xB5', '\xB5', '\x4', '\x2', 'G', 'G', '\x19A', '\x19A', 
		'\x6', '\x2', '\xE', '\xE', 'P', 'P', '\x93', '\x93', '\x1D6', '\x1D6', 
		'\x6', '\x2', '\xE', '\xE', '\x93', '\x93', '\x1D6', '\x1D6', '\x235', 
		'\x235', '\x5', '\x2', '\x86', '\x86', '\x93', '\x93', '\xF4', '\xF4', 
		'\b', '\x2', '\xE', '\xE', '\x86', '\x86', '\x93', '\x93', '\xF4', '\xF4', 
		'\x1D6', '\x1D6', '\x235', '\x235', '\x4', '\x2', '\x93', '\x93', '\x235', 
		'\x235', '\x5', '\x2', '\xE', '\xE', '\x93', '\x93', '\xD1', '\xD1', '\x5', 
		'\x2', '\xE', '\xE', '\x93', '\x93', '\x1D6', '\x1D6', '\x5', '\x2', '\xE', 
		'\xE', 'h', 'h', '\x1B5', '\x1B5', '\x5', '\x2', '\xE', '\xE', '\x93', 
		'\x93', '\x23A', '\x23A', '\f', '\x2', '\xE', '\xE', '\"', '\"', 'P', 
		'P', '\x86', '\x86', '\x93', '\x93', '\xF4', '\xF4', '\x116', '\x116', 
		'\x1A2', '\x1A2', '\x1D6', '\x1D6', '\x235', '\x235', '\a', '\x2', '\xE', 
		'\xE', 'h', 'h', '\x93', '\x93', '\x120', '\x120', '\x230', '\x230', '\x6', 
		'\x2', '\xE', '\xE', '\x93', '\x93', '\xAE', '\xAE', '\x22B', '\x22B', 
		'\x5', '\x2', '\x93', '\x93', '\x12B', '\x12B', '\x22B', '\x22B', '\x4', 
		'\x2', '\xF', '\xF', '\x19', '\x19', '\x4', '\x2', '\x8A', '\x8A', '\x221', 
		'\x221', '\b', '\x2', 'u', 'u', '\xDB', '\xDB', '\x130', '\x130', '\x136', 
		'\x136', '\x1D3', '\x1D3', '\x261', '\x261', '\x3', '\x2', '\x290', '\x291', 
		'\x4', '\x2', '\x28B', '\x28B', '\x292', '\x292', '\x8B', '\x2', '\x5', 
		'\x5', '\t', '\f', '\xF', '\xF', '\x13', '\x13', '\x16', '\x19', '\x1C', 
		'\x1C', '\x1E', '\x1E', ' ', '!', '$', '$', '&', '&', ')', ')', '+', '/', 
		'\x31', '\x33', '\x37', '\x37', '\x39', '\x39', ';', '=', '?', '?', '\x42', 
		'\x44', '\x46', '\x46', 'H', 'K', 'M', 'M', 'O', 'U', 'Z', ']', '`', 'g', 
		'j', 'k', 'm', 'r', 'u', 'u', 'w', '|', '~', '\x7F', '\x81', '\x81', '\x83', 
		'\x84', '\x86', '\x86', '\x89', '\x89', '\x8B', '\x8B', '\x8D', '\x8E', 
		'\x91', '\x92', '\x94', '\x95', '\x99', '\x99', '\x9C', '\x9E', '\xA3', 
		'\xA7', '\xA9', '\xAC', '\xAE', '\xAE', '\xB1', '\xB1', '\xB3', '\xB3', 
		'\xB5', '\xB5', '\xB7', '\xB8', '\xBC', '\xBE', '\xC1', '\xC1', '\xC3', 
		'\xC6', '\xCC', '\xCD', '\xD3', '\xD3', '\xD6', '\xD6', '\xD8', '\xD8', 
		'\xDB', '\xDB', '\xDE', '\xDE', '\xE0', '\xE6', '\xE9', '\xEB', '\xF1', 
		'\xF3', '\xF5', '\xF7', '\xF9', '\xFA', '\xFC', '\xFC', '\xFE', '\x100', 
		'\x102', '\x109', '\x10B', '\x10F', '\x111', '\x112', '\x114', '\x115', 
		'\x118', '\x118', '\x11A', '\x11D', '\x11F', '\x11F', '\x123', '\x124', 
		'\x127', '\x127', '\x129', '\x12B', '\x12D', '\x12D', '\x130', '\x133', 
		'\x135', '\x136', '\x138', '\x142', '\x144', '\x144', '\x147', '\x149', 
		'\x14E', '\x14F', '\x152', '\x152', '\x158', '\x15C', '\x15E', '\x15E', 
		'\x160', '\x161', '\x164', '\x164', '\x166', '\x167', '\x16A', '\x16A', 
		'\x16C', '\x16C', '\x16E', '\x16F', '\x171', '\x179', '\x17B', '\x17B', 
		'\x185', '\x185', '\x188', '\x189', '\x18C', '\x191', '\x19A', '\x19A', 
		'\x19F', '\x1A4', '\x1A7', '\x1A7', '\x1A9', '\x1AA', '\x1AC', '\x1AD', 
		'\x1B0', '\x1B1', '\x1B4', '\x1B4', '\x1B6', '\x1B8', '\x1BB', '\x1BE', 
		'\x1C1', '\x1C1', '\x1C4', '\x1C9', '\x1CB', '\x1CD', '\x1CF', '\x1D1', 
		'\x1D3', '\x1D5', '\x1D7', '\x1D7', '\x1D9', '\x1DC', '\x1DE', '\x1E1', 
		'\x1E3', '\x1E8', '\x1EA', '\x1EA', '\x1EC', '\x1EE', '\x1F2', '\x1F4', 
		'\x1F6', '\x1F6', '\x1F8', '\x1FC', '\x1FE', '\x205', '\x208', '\x208', 
		'\x211', '\x211', '\x216', '\x21E', '\x220', '\x222', '\x224', '\x225', 
		'\x227', '\x227', '\x229', '\x22B', '\x230', '\x230', '\x233', '\x234', 
		'\x236', '\x23A', '\x23C', '\x23C', '\x23E', '\x245', '\x247', '\x24A', 
		'\x24D', '\x24E', '\x250', '\x274', '\x276', '\x27B', '\x27D', '\x27E', 
		'\x280', '\x281', '\x283', '\x287', '\x2B3', '\x2B3', '\x5', '\x2', '\x46', 
		'\x46', '\x275', '\x275', '\x281', '\x283', '\a', '\x2', 'g', 'g', '\x272', 
		'\x272', '\x27C', '\x27C', '\x27F', '\x27F', '\x284', '\x284', '\x2', 
		'\x1ECE', '\x2', '\x381', '\x3', '\x2', '\x2', '\x2', '\x4', '\x3AA', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x3AC', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x3B1', '\x3', '\x2', '\x2', '\x2', '\n', '\x3C4', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x3F8', '\x3', '\x2', '\x2', '\x2', '\xE', '\x3FC', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x40A', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x40E', '\x3', '\x2', '\x2', '\x2', '\x14', '\x41A', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x41F', '\x3', '\x2', '\x2', '\x2', '\x18', '\x42C', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x442', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x45E', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x484', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x486', '\x3', '\x2', '\x2', '\x2', '\"', '\x497', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x4B9', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x4BB', '\x3', '\x2', '\x2', '\x2', '(', '\x4C0', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x4D3', '\x3', '\x2', '\x2', '\x2', ',', '\x502', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x51F', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x544', '\x3', '\x2', '\x2', '\x2', '\x32', '\x549', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x562', '\x3', '\x2', '\x2', '\x2', '\x36', '\x57A', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x583', '\x3', '\x2', '\x2', '\x2', 
		':', '\x58C', '\x3', '\x2', '\x2', '\x2', '<', '\x595', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x599', '\x3', '\x2', '\x2', '\x2', '@', '\x59E', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x5B6', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x5B8', '\x3', '\x2', '\x2', '\x2', '\x46', '\x5BC', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x5ED', '\x3', '\x2', '\x2', '\x2', 'J', '\x609', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x60B', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x619', '\x3', '\x2', '\x2', '\x2', 'P', '\x61E', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x623', '\x3', '\x2', '\x2', '\x2', 'T', '\x629', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x62C', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x637', '\x3', '\x2', '\x2', '\x2', 'Z', '\x646', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x657', '\x3', '\x2', '\x2', '\x2', '^', '\x668', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x670', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x675', '\x3', '\x2', '\x2', '\x2', '\x64', '\x685', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x689', '\x3', '\x2', '\x2', '\x2', 'h', '\x6A1', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x6A4', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x6AA', '\x3', '\x2', '\x2', '\x2', 'n', '\x6B6', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x6BF', '\x3', '\x2', '\x2', '\x2', 'r', '\x6DB', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x6E1', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x6E4', '\x3', '\x2', '\x2', '\x2', 'x', '\x6EB', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x6F3', '\x3', '\x2', '\x2', '\x2', '|', '\x6FF', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x701', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x705', '\x3', '\x2', '\x2', '\x2', '\x82', '\x70B', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x724', '\x3', '\x2', '\x2', '\x2', '\x86', '\x743', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x770', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x77A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x77C', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x781', '\x3', '\x2', '\x2', '\x2', '\x90', '\x78F', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x791', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x796', '\x3', '\x2', '\x2', '\x2', '\x96', '\x7A6', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x7C7', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x7EA', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x7EE', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x7FD', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x7FF', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\x802', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x807', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\x811', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\x82D', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x82F', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\x833', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x846', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\x84E', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\x87F', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x881', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\x886', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x88A', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\x890', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\x894', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x89C', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\x8B6', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x8B8', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\x8BE', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\x8C1', '\x3', '\x2', '\x2', '\x2', '\xC8', '\x8C4', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\x8C7', '\x3', '\x2', '\x2', '\x2', '\xCC', '\x8FD', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\x8FF', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\x90A', '\x3', '\x2', '\x2', '\x2', '\xD2', '\x912', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\x91D', '\x3', '\x2', '\x2', '\x2', '\xD6', '\x91F', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\x924', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\x956', '\x3', '\x2', '\x2', '\x2', '\xDC', '\x95A', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\x974', '\x3', '\x2', '\x2', '\x2', '\xE0', '\x976', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '\x98A', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\x9B6', '\x3', '\x2', '\x2', '\x2', '\xE6', '\x9D0', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\x9E0', '\x3', '\x2', '\x2', '\x2', '\xEA', '\x9E4', 
		'\x3', '\x2', '\x2', '\x2', '\xEC', '\x9EF', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\xA08', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xA0B', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xA0D', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xA18', 
		'\x3', '\x2', '\x2', '\x2', '\xF6', '\xA1D', '\x3', '\x2', '\x2', '\x2', 
		'\xF8', '\xA20', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xA2C', '\x3', '\x2', 
		'\x2', '\x2', '\xFC', '\xA30', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xA3C', 
		'\x3', '\x2', '\x2', '\x2', '\x100', '\xA3F', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\xA45', '\x3', '\x2', '\x2', '\x2', '\x104', '\xA4C', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\xA58', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\xA71', '\x3', '\x2', '\x2', '\x2', '\x10A', '\xA7D', '\x3', '\x2', '\x2', 
		'\x2', '\x10C', '\xA82', '\x3', '\x2', '\x2', '\x2', '\x10E', '\xB0A', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\xB81', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\xBA6', '\x3', '\x2', '\x2', '\x2', '\x114', '\xBAA', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\xBAF', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\xBE2', '\x3', '\x2', '\x2', '\x2', '\x11A', '\xBE4', '\x3', '\x2', '\x2', 
		'\x2', '\x11C', '\xBEB', '\x3', '\x2', '\x2', '\x2', '\x11E', '\xBF4', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\xBFF', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\xC06', '\x3', '\x2', '\x2', '\x2', '\x124', '\xC0A', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\xC0E', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\xC12', '\x3', '\x2', '\x2', '\x2', '\x12A', '\xC19', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '\xC1D', '\x3', '\x2', '\x2', '\x2', '\x12E', '\xC24', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\xC27', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\xC2D', '\x3', '\x2', '\x2', '\x2', '\x134', '\xC3C', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\xC3F', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\xC43', '\x3', '\x2', '\x2', '\x2', '\x13A', '\xC48', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '\xC4C', '\x3', '\x2', '\x2', '\x2', '\x13E', '\xC5D', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\xC63', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '\xC6D', '\x3', '\x2', '\x2', '\x2', '\x144', '\xC7A', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\xC7E', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\xC8C', '\x3', '\x2', '\x2', '\x2', '\x14A', '\xC8E', '\x3', '\x2', '\x2', 
		'\x2', '\x14C', '\xC9C', '\x3', '\x2', '\x2', '\x2', '\x14E', '\xCAD', 
		'\x3', '\x2', '\x2', '\x2', '\x150', '\xCC6', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '\xCD0', '\x3', '\x2', '\x2', '\x2', '\x154', '\xCD4', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\xCF7', '\x3', '\x2', '\x2', '\x2', '\x158', 
		'\xD03', '\x3', '\x2', '\x2', '\x2', '\x15A', '\xD0E', '\x3', '\x2', '\x2', 
		'\x2', '\x15C', '\xD14', '\x3', '\x2', '\x2', '\x2', '\x15E', '\xD1F', 
		'\x3', '\x2', '\x2', '\x2', '\x160', '\xD2B', '\x3', '\x2', '\x2', '\x2', 
		'\x162', '\xD33', '\x3', '\x2', '\x2', '\x2', '\x164', '\xD42', '\x3', 
		'\x2', '\x2', '\x2', '\x166', '\xD46', '\x3', '\x2', '\x2', '\x2', '\x168', 
		'\xD60', '\x3', '\x2', '\x2', '\x2', '\x16A', '\xD63', '\x3', '\x2', '\x2', 
		'\x2', '\x16C', '\xD69', '\x3', '\x2', '\x2', '\x2', '\x16E', '\xD6E', 
		'\x3', '\x2', '\x2', '\x2', '\x170', '\xD76', '\x3', '\x2', '\x2', '\x2', 
		'\x172', '\xD7E', '\x3', '\x2', '\x2', '\x2', '\x174', '\xD81', '\x3', 
		'\x2', '\x2', '\x2', '\x176', '\xD91', '\x3', '\x2', '\x2', '\x2', '\x178', 
		'\xD96', '\x3', '\x2', '\x2', '\x2', '\x17A', '\xD9A', '\x3', '\x2', '\x2', 
		'\x2', '\x17C', '\xDC2', '\x3', '\x2', '\x2', '\x2', '\x17E', '\xDC4', 
		'\x3', '\x2', '\x2', '\x2', '\x180', '\xDDA', '\x3', '\x2', '\x2', '\x2', 
		'\x182', '\xDDC', '\x3', '\x2', '\x2', '\x2', '\x184', '\xDE1', '\x3', 
		'\x2', '\x2', '\x2', '\x186', '\xDE3', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\xDE5', '\x3', '\x2', '\x2', '\x2', '\x18A', '\xDE7', '\x3', '\x2', '\x2', 
		'\x2', '\x18C', '\xDEB', '\x3', '\x2', '\x2', '\x2', '\x18E', '\xDF0', 
		'\x3', '\x2', '\x2', '\x2', '\x190', '\xDF6', '\x3', '\x2', '\x2', '\x2', 
		'\x192', '\xDFC', '\x3', '\x2', '\x2', '\x2', '\x194', '\xE0A', '\x3', 
		'\x2', '\x2', '\x2', '\x196', '\xE1E', '\x3', '\x2', '\x2', '\x2', '\x198', 
		'\xE23', '\x3', '\x2', '\x2', '\x2', '\x19A', '\xE30', '\x3', '\x2', '\x2', 
		'\x2', '\x19C', '\xE32', '\x3', '\x2', '\x2', '\x2', '\x19E', '\xE40', 
		'\x3', '\x2', '\x2', '\x2', '\x1A0', '\xE4A', '\x3', '\x2', '\x2', '\x2', 
		'\x1A2', '\xE50', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\xE52', '\x3', 
		'\x2', '\x2', '\x2', '\x1A6', '\xE55', '\x3', '\x2', '\x2', '\x2', '\x1A8', 
		'\xE5E', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\xE76', '\x3', '\x2', '\x2', 
		'\x2', '\x1AC', '\xE85', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\xE87', 
		'\x3', '\x2', '\x2', '\x2', '\x1B0', '\xE9C', '\x3', '\x2', '\x2', '\x2', 
		'\x1B2', '\xEAB', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\xEC1', '\x3', 
		'\x2', '\x2', '\x2', '\x1B6', '\xEC8', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\xED5', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\xED8', '\x3', '\x2', '\x2', 
		'\x2', '\x1BC', '\xEED', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\xEF7', 
		'\x3', '\x2', '\x2', '\x2', '\x1C0', '\xF00', '\x3', '\x2', '\x2', '\x2', 
		'\x1C2', '\xF11', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\xF3C', '\x3', 
		'\x2', '\x2', '\x2', '\x1C6', '\xF45', '\x3', '\x2', '\x2', '\x2', '\x1C8', 
		'\xF51', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\xF59', '\x3', '\x2', '\x2', 
		'\x2', '\x1CC', '\xF5D', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\xF7C', 
		'\x3', '\x2', '\x2', '\x2', '\x1D0', '\xF80', '\x3', '\x2', '\x2', '\x2', 
		'\x1D2', '\xF8D', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\xF93', '\x3', 
		'\x2', '\x2', '\x2', '\x1D6', '\xF97', '\x3', '\x2', '\x2', '\x2', '\x1D8', 
		'\xFA2', '\x3', '\x2', '\x2', '\x2', '\x1DA', '\xFC3', '\x3', '\x2', '\x2', 
		'\x2', '\x1DC', '\xFC6', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\xFDB', 
		'\x3', '\x2', '\x2', '\x2', '\x1E0', '\xFDE', '\x3', '\x2', '\x2', '\x2', 
		'\x1E2', '\xFE1', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\xFE5', '\x3', 
		'\x2', '\x2', '\x2', '\x1E6', '\xFF8', '\x3', '\x2', '\x2', '\x2', '\x1E8', 
		'\xFFA', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x100B', '\x3', '\x2', 
		'\x2', '\x2', '\x1EC', '\x1012', '\x3', '\x2', '\x2', '\x2', '\x1EE', 
		'\x1017', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x102E', '\x3', '\x2', 
		'\x2', '\x2', '\x1F2', '\x1038', '\x3', '\x2', '\x2', '\x2', '\x1F4', 
		'\x103A', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1048', '\x3', '\x2', 
		'\x2', '\x2', '\x1F8', '\x1056', '\x3', '\x2', '\x2', '\x2', '\x1FA', 
		'\x107A', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x107C', '\x3', '\x2', 
		'\x2', '\x2', '\x1FE', '\x109A', '\x3', '\x2', '\x2', '\x2', '\x200', 
		'\x109F', '\x3', '\x2', '\x2', '\x2', '\x202', '\x10A1', '\x3', '\x2', 
		'\x2', '\x2', '\x204', '\x10AD', '\x3', '\x2', '\x2', '\x2', '\x206', 
		'\x10C1', '\x3', '\x2', '\x2', '\x2', '\x208', '\x10C3', '\x3', '\x2', 
		'\x2', '\x2', '\x20A', '\x10C6', '\x3', '\x2', '\x2', '\x2', '\x20C', 
		'\x10E0', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x10E2', '\x3', '\x2', 
		'\x2', '\x2', '\x210', '\x10E6', '\x3', '\x2', '\x2', '\x2', '\x212', 
		'\x10F5', '\x3', '\x2', '\x2', '\x2', '\x214', '\x1101', '\x3', '\x2', 
		'\x2', '\x2', '\x216', '\x1109', '\x3', '\x2', '\x2', '\x2', '\x218', 
		'\x110D', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x111A', '\x3', '\x2', 
		'\x2', '\x2', '\x21C', '\x1120', '\x3', '\x2', '\x2', '\x2', '\x21E', 
		'\x112E', '\x3', '\x2', '\x2', '\x2', '\x220', '\x1142', '\x3', '\x2', 
		'\x2', '\x2', '\x222', '\x114B', '\x3', '\x2', '\x2', '\x2', '\x224', 
		'\x114D', '\x3', '\x2', '\x2', '\x2', '\x226', '\x1154', '\x3', '\x2', 
		'\x2', '\x2', '\x228', '\x1159', '\x3', '\x2', '\x2', '\x2', '\x22A', 
		'\x1166', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x116E', '\x3', '\x2', 
		'\x2', '\x2', '\x22E', '\x1176', '\x3', '\x2', '\x2', '\x2', '\x230', 
		'\x117E', '\x3', '\x2', '\x2', '\x2', '\x232', '\x1180', '\x3', '\x2', 
		'\x2', '\x2', '\x234', '\x118C', '\x3', '\x2', '\x2', '\x2', '\x236', 
		'\x11A6', '\x3', '\x2', '\x2', '\x2', '\x238', '\x11A8', '\x3', '\x2', 
		'\x2', '\x2', '\x23A', '\x11B6', '\x3', '\x2', '\x2', '\x2', '\x23C', 
		'\x11BB', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x11CD', '\x3', '\x2', 
		'\x2', '\x2', '\x240', '\x11D1', '\x3', '\x2', '\x2', '\x2', '\x242', 
		'\x11D9', '\x3', '\x2', '\x2', '\x2', '\x244', '\x11E3', '\x3', '\x2', 
		'\x2', '\x2', '\x246', '\x11EB', '\x3', '\x2', '\x2', '\x2', '\x248', 
		'\x11F1', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x11F6', '\x3', '\x2', 
		'\x2', '\x2', '\x24C', '\x11FD', '\x3', '\x2', '\x2', '\x2', '\x24E', 
		'\x1216', '\x3', '\x2', '\x2', '\x2', '\x250', '\x1229', '\x3', '\x2', 
		'\x2', '\x2', '\x252', '\x122D', '\x3', '\x2', '\x2', '\x2', '\x254', 
		'\x1230', '\x3', '\x2', '\x2', '\x2', '\x256', '\x1246', '\x3', '\x2', 
		'\x2', '\x2', '\x258', '\x124B', '\x3', '\x2', '\x2', '\x2', '\x25A', 
		'\x125E', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x1260', '\x3', '\x2', 
		'\x2', '\x2', '\x25E', '\x1270', '\x3', '\x2', '\x2', '\x2', '\x260', 
		'\x1278', '\x3', '\x2', '\x2', '\x2', '\x262', '\x127D', '\x3', '\x2', 
		'\x2', '\x2', '\x264', '\x1281', '\x3', '\x2', '\x2', '\x2', '\x266', 
		'\x128C', '\x3', '\x2', '\x2', '\x2', '\x268', '\x128F', '\x3', '\x2', 
		'\x2', '\x2', '\x26A', '\x12A1', '\x3', '\x2', '\x2', '\x2', '\x26C', 
		'\x12A3', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x12B2', '\x3', '\x2', 
		'\x2', '\x2', '\x270', '\x12BD', '\x3', '\x2', '\x2', '\x2', '\x272', 
		'\x12CB', '\x3', '\x2', '\x2', '\x2', '\x274', '\x12D0', '\x3', '\x2', 
		'\x2', '\x2', '\x276', '\x12D2', '\x3', '\x2', '\x2', '\x2', '\x278', 
		'\x12DC', '\x3', '\x2', '\x2', '\x2', '\x27A', '\x12DE', '\x3', '\x2', 
		'\x2', '\x2', '\x27C', '\x130B', '\x3', '\x2', '\x2', '\x2', '\x27E', 
		'\x1318', '\x3', '\x2', '\x2', '\x2', '\x280', '\x1320', '\x3', '\x2', 
		'\x2', '\x2', '\x282', '\x132C', '\x3', '\x2', '\x2', '\x2', '\x284', 
		'\x134C', '\x3', '\x2', '\x2', '\x2', '\x286', '\x1360', '\x3', '\x2', 
		'\x2', '\x2', '\x288', '\x1362', '\x3', '\x2', '\x2', '\x2', '\x28A', 
		'\x1366', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x1399', '\x3', '\x2', 
		'\x2', '\x2', '\x28E', '\x139B', '\x3', '\x2', '\x2', '\x2', '\x290', 
		'\x13B9', '\x3', '\x2', '\x2', '\x2', '\x292', '\x13BB', '\x3', '\x2', 
		'\x2', '\x2', '\x294', '\x13D0', '\x3', '\x2', '\x2', '\x2', '\x296', 
		'\x13EE', '\x3', '\x2', '\x2', '\x2', '\x298', '\x13F2', '\x3', '\x2', 
		'\x2', '\x2', '\x29A', '\x13F5', '\x3', '\x2', '\x2', '\x2', '\x29C', 
		'\x1408', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x1410', '\x3', '\x2', 
		'\x2', '\x2', '\x2A0', '\x1422', '\x3', '\x2', '\x2', '\x2', '\x2A2', 
		'\x1429', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x1441', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6', '\x1443', '\x3', '\x2', '\x2', '\x2', '\x2A8', 
		'\x1494', '\x3', '\x2', '\x2', '\x2', '\x2AA', '\x1499', '\x3', '\x2', 
		'\x2', '\x2', '\x2AC', '\x149B', '\x3', '\x2', '\x2', '\x2', '\x2AE', 
		'\x14DA', '\x3', '\x2', '\x2', '\x2', '\x2B0', '\x1617', '\x3', '\x2', 
		'\x2', '\x2', '\x2B2', '\x1619', '\x3', '\x2', '\x2', '\x2', '\x2B4', 
		'\x161B', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x161D', '\x3', '\x2', 
		'\x2', '\x2', '\x2B8', '\x161F', '\x3', '\x2', '\x2', '\x2', '\x2BA', 
		'\x162C', '\x3', '\x2', '\x2', '\x2', '\x2BC', '\x1635', '\x3', '\x2', 
		'\x2', '\x2', '\x2BE', '\x163E', '\x3', '\x2', '\x2', '\x2', '\x2C0', 
		'\x1640', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x1651', '\x3', '\x2', 
		'\x2', '\x2', '\x2C4', '\x1657', '\x3', '\x2', '\x2', '\x2', '\x2C6', 
		'\x1662', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x1664', '\x3', '\x2', 
		'\x2', '\x2', '\x2CA', '\x167C', '\x3', '\x2', '\x2', '\x2', '\x2CC', 
		'\x168A', '\x3', '\x2', '\x2', '\x2', '\x2CE', '\x169C', '\x3', '\x2', 
		'\x2', '\x2', '\x2D0', '\x16B1', '\x3', '\x2', '\x2', '\x2', '\x2D2', 
		'\x16BE', '\x3', '\x2', '\x2', '\x2', '\x2D4', '\x16C1', '\x3', '\x2', 
		'\x2', '\x2', '\x2D6', '\x16CA', '\x3', '\x2', '\x2', '\x2', '\x2D8', 
		'\x16D0', '\x3', '\x2', '\x2', '\x2', '\x2DA', '\x16D8', '\x3', '\x2', 
		'\x2', '\x2', '\x2DC', '\x16DB', '\x3', '\x2', '\x2', '\x2', '\x2DE', 
		'\x16E6', '\x3', '\x2', '\x2', '\x2', '\x2E0', '\x16F0', '\x3', '\x2', 
		'\x2', '\x2', '\x2E2', '\x16F2', '\x3', '\x2', '\x2', '\x2', '\x2E4', 
		'\x16FB', '\x3', '\x2', '\x2', '\x2', '\x2E6', '\x1704', '\x3', '\x2', 
		'\x2', '\x2', '\x2E8', '\x1716', '\x3', '\x2', '\x2', '\x2', '\x2EA', 
		'\x171A', '\x3', '\x2', '\x2', '\x2', '\x2EC', '\x171C', '\x3', '\x2', 
		'\x2', '\x2', '\x2EE', '\x1725', '\x3', '\x2', '\x2', '\x2', '\x2F0', 
		'\x1732', '\x3', '\x2', '\x2', '\x2', '\x2F2', '\x1734', '\x3', '\x2', 
		'\x2', '\x2', '\x2F4', '\x1736', '\x3', '\x2', '\x2', '\x2', '\x2F6', 
		'\x1738', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x173A', '\x3', '\x2', 
		'\x2', '\x2', '\x2FA', '\x173C', '\x3', '\x2', '\x2', '\x2', '\x2FC', 
		'\x173E', '\x3', '\x2', '\x2', '\x2', '\x2FE', '\x1740', '\x3', '\x2', 
		'\x2', '\x2', '\x300', '\x174C', '\x3', '\x2', '\x2', '\x2', '\x302', 
		'\x174E', '\x3', '\x2', '\x2', '\x2', '\x304', '\x1753', '\x3', '\x2', 
		'\x2', '\x2', '\x306', '\x1755', '\x3', '\x2', '\x2', '\x2', '\x308', 
		'\x1757', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x1759', '\x3', '\x2', 
		'\x2', '\x2', '\x30C', '\x175E', '\x3', '\x2', '\x2', '\x2', '\x30E', 
		'\x1766', '\x3', '\x2', '\x2', '\x2', '\x310', '\x1768', '\x3', '\x2', 
		'\x2', '\x2', '\x312', '\x176E', '\x3', '\x2', '\x2', '\x2', '\x314', 
		'\x1770', '\x3', '\x2', '\x2', '\x2', '\x316', '\x177C', '\x3', '\x2', 
		'\x2', '\x2', '\x318', '\x177E', '\x3', '\x2', '\x2', '\x2', '\x31A', 
		'\x1786', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x178E', '\x3', '\x2', 
		'\x2', '\x2', '\x31E', '\x1796', '\x3', '\x2', '\x2', '\x2', '\x320', 
		'\x179B', '\x3', '\x2', '\x2', '\x2', '\x322', '\x17A0', '\x3', '\x2', 
		'\x2', '\x2', '\x324', '\x17AF', '\x3', '\x2', '\x2', '\x2', '\x326', 
		'\x17B1', '\x3', '\x2', '\x2', '\x2', '\x328', '\x17B8', '\x3', '\x2', 
		'\x2', '\x2', '\x32A', '\x17BC', '\x3', '\x2', '\x2', '\x2', '\x32C', 
		'\x17BE', '\x3', '\x2', '\x2', '\x2', '\x32E', '\x17C3', '\x3', '\x2', 
		'\x2', '\x2', '\x330', '\x17C5', '\x3', '\x2', '\x2', '\x2', '\x332', 
		'\x17CD', '\x3', '\x2', '\x2', '\x2', '\x334', '\x17D7', '\x3', '\x2', 
		'\x2', '\x2', '\x336', '\x17DF', '\x3', '\x2', '\x2', '\x2', '\x338', 
		'\x17E1', '\x3', '\x2', '\x2', '\x2', '\x33A', '\x17E3', '\x3', '\x2', 
		'\x2', '\x2', '\x33C', '\x17E5', '\x3', '\x2', '\x2', '\x2', '\x33E', 
		'\x17FF', '\x3', '\x2', '\x2', '\x2', '\x340', '\x1805', '\x3', '\x2', 
		'\x2', '\x2', '\x342', '\x1809', '\x3', '\x2', '\x2', '\x2', '\x344', 
		'\x180D', '\x3', '\x2', '\x2', '\x2', '\x346', '\x1816', '\x3', '\x2', 
		'\x2', '\x2', '\x348', '\x1824', '\x3', '\x2', '\x2', '\x2', '\x34A', 
		'\x1835', '\x3', '\x2', '\x2', '\x2', '\x34C', '\x185C', '\x3', '\x2', 
		'\x2', '\x2', '\x34E', '\x1863', '\x3', '\x2', '\x2', '\x2', '\x350', 
		'\x186F', '\x3', '\x2', '\x2', '\x2', '\x352', '\x1890', '\x3', '\x2', 
		'\x2', '\x2', '\x354', '\x1892', '\x3', '\x2', '\x2', '\x2', '\x356', 
		'\x18D9', '\x3', '\x2', '\x2', '\x2', '\x358', '\x18DE', '\x3', '\x2', 
		'\x2', '\x2', '\x35A', '\x18F1', '\x3', '\x2', '\x2', '\x2', '\x35C', 
		'\x18FB', '\x3', '\x2', '\x2', '\x2', '\x35E', '\x190E', '\x3', '\x2', 
		'\x2', '\x2', '\x360', '\x1938', '\x3', '\x2', '\x2', '\x2', '\x362', 
		'\x1A80', '\x3', '\x2', '\x2', '\x2', '\x364', '\x1AC0', '\x3', '\x2', 
		'\x2', '\x2', '\x366', '\x1AC2', '\x3', '\x2', '\x2', '\x2', '\x368', 
		'\x1AC4', '\x3', '\x2', '\x2', '\x2', '\x36A', '\x1AC7', '\x3', '\x2', 
		'\x2', '\x2', '\x36C', '\x1ACB', '\x3', '\x2', '\x2', '\x2', '\x36E', 
		'\x1AD1', '\x3', '\x2', '\x2', '\x2', '\x370', '\x1AD3', '\x3', '\x2', 
		'\x2', '\x2', '\x372', '\x1AD7', '\x3', '\x2', '\x2', '\x2', '\x374', 
		'\x1AD9', '\x3', '\x2', '\x2', '\x2', '\x376', '\x1ADB', '\x3', '\x2', 
		'\x2', '\x2', '\x378', '\x37B', '\x5', '\x4', '\x3', '\x2', '\x379', '\x37B', 
		'\x5', '\x2E0', '\x171', '\x2', '\x37A', '\x378', '\x3', '\x2', '\x2', 
		'\x2', '\x37A', '\x379', '\x3', '\x2', '\x2', '\x2', '\x37B', '\x37D', 
		'\x3', '\x2', '\x2', '\x2', '\x37C', '\x37E', '\a', '\x2A8', '\x2', '\x2', 
		'\x37D', '\x37C', '\x3', '\x2', '\x2', '\x2', '\x37D', '\x37E', '\x3', 
		'\x2', '\x2', '\x2', '\x37E', '\x380', '\x3', '\x2', '\x2', '\x2', '\x37F', 
		'\x37A', '\x3', '\x2', '\x2', '\x2', '\x380', '\x383', '\x3', '\x2', '\x2', 
		'\x2', '\x381', '\x37F', '\x3', '\x2', '\x2', '\x2', '\x381', '\x382', 
		'\x3', '\x2', '\x2', '\x2', '\x382', '\x384', '\x3', '\x2', '\x2', '\x2', 
		'\x383', '\x381', '\x3', '\x2', '\x2', '\x2', '\x384', '\x385', '\a', 
		'\x2', '\x2', '\x3', '\x385', '\x3', '\x3', '\x2', '\x2', '\x2', '\x386', 
		'\x3AB', '\x5', '\x1AC', '\xD7', '\x2', '\x387', '\x3AB', '\x5', '\b', 
		'\x5', '\x2', '\x388', '\x3AB', '\x5', '\x18', '\r', '\x2', '\x389', '\x3AB', 
		'\x5', '(', '\x15', '\x2', '\x38A', '\x3AB', '\x5', '\xA4', 'S', '\x2', 
		'\x38B', '\x3AB', '\x5', '\x32', '\x1A', '\x2', '\x38C', '\x3AB', '\x5', 
		'X', '-', '\x2', '\x38D', '\x3AB', '\x5', '\x11C', '\x8F', '\x2', '\x38E', 
		'\x3AB', '\x5', '\xAE', 'X', '\x2', '\x38F', '\x3AB', '\x5', '\xB2', 'Z', 
		'\x2', '\x390', '\x3AB', '\x5', '\n', '\x6', '\x2', '\x391', '\x3AB', 
		'\x5', '.', '\x18', '\x2', '\x392', '\x3AB', '\x5', '\x1A', '\xE', '\x2', 
		'\x393', '\x3AB', '\x5', '\x1C', '\xF', '\x2', '\x394', '\x3AB', '\x5', 
		'\xAC', 'W', '\x2', '\x395', '\x3AB', '\x5', '\x10C', '\x87', '\x2', '\x396', 
		'\x3AB', '\x5', '\xEA', 'v', '\x2', '\x397', '\x3AB', '\x5', '\xDC', 'o', 
		'\x2', '\x398', '\x3AB', '\x5', '\xB0', 'Y', '\x2', '\x399', '\x3AB', 
		'\x5', '\xA6', 'T', '\x2', '\x39A', '\x3AB', '\x5', '\x34', '\x1B', '\x2', 
		'\x39B', '\x3AB', '\x5', 'l', '\x37', '\x2', '\x39C', '\x3AB', '\x5', 
		'\x118', '\x8D', '\x2', '\x39D', '\x3AB', '\x5', '\x6', '\x4', '\x2', 
		'\x39E', '\x3AB', '\x5', '\x16', '\f', '\x2', '\x39F', '\x3AB', '\x5', 
		'&', '\x14', '\x2', '\x3A0', '\x3AB', '\x5', '\xA2', 'R', '\x2', '\x3A1', 
		'\x3AB', '\x5', '\x30', '\x19', '\x2', '\x3A2', '\x3AB', '\x5', 'V', ',', 
		'\x2', '\x3A3', '\x3AB', '\x5', '\x1A0', '\xD1', '\x2', '\x3A4', '\x3AB', 
		'\x5', '\x114', '\x8B', '\x2', '\x3A5', '\x3AB', '\x5', '\xD6', 'l', '\x2', 
		'\x3A6', '\x3AB', '\x5', '\x116', '\x8C', '\x2', '\x3A7', '\x3AB', '\x5', 
		'\x11A', '\x8E', '\x2', '\x3A8', '\x3AB', '\x5', '\x132', '\x9A', '\x2', 
		'\x3A9', '\x3AB', '\x5', '\xD8', 'm', '\x2', '\x3AA', '\x386', '\x3', 
		'\x2', '\x2', '\x2', '\x3AA', '\x387', '\x3', '\x2', '\x2', '\x2', '\x3AA', 
		'\x388', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x389', '\x3', '\x2', '\x2', 
		'\x2', '\x3AA', '\x38A', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x38B', 
		'\x3', '\x2', '\x2', '\x2', '\x3AA', '\x38C', '\x3', '\x2', '\x2', '\x2', 
		'\x3AA', '\x38D', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x38E', '\x3', 
		'\x2', '\x2', '\x2', '\x3AA', '\x38F', '\x3', '\x2', '\x2', '\x2', '\x3AA', 
		'\x390', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x391', '\x3', '\x2', '\x2', 
		'\x2', '\x3AA', '\x392', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x393', 
		'\x3', '\x2', '\x2', '\x2', '\x3AA', '\x394', '\x3', '\x2', '\x2', '\x2', 
		'\x3AA', '\x395', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x396', '\x3', 
		'\x2', '\x2', '\x2', '\x3AA', '\x397', '\x3', '\x2', '\x2', '\x2', '\x3AA', 
		'\x398', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x399', '\x3', '\x2', '\x2', 
		'\x2', '\x3AA', '\x39A', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x39B', 
		'\x3', '\x2', '\x2', '\x2', '\x3AA', '\x39C', '\x3', '\x2', '\x2', '\x2', 
		'\x3AA', '\x39D', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x39E', '\x3', 
		'\x2', '\x2', '\x2', '\x3AA', '\x39F', '\x3', '\x2', '\x2', '\x2', '\x3AA', 
		'\x3A0', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x3A1', '\x3', '\x2', '\x2', 
		'\x2', '\x3AA', '\x3A2', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x3A3', 
		'\x3', '\x2', '\x2', '\x2', '\x3AA', '\x3A4', '\x3', '\x2', '\x2', '\x2', 
		'\x3AA', '\x3A5', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x3A6', '\x3', 
		'\x2', '\x2', '\x2', '\x3AA', '\x3A7', '\x3', '\x2', '\x2', '\x2', '\x3AA', 
		'\x3A8', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x3A9', '\x3', '\x2', '\x2', 
		'\x2', '\x3AB', '\x5', '\x3', '\x2', '\x2', '\x2', '\x3AC', '\x3AD', '\a', 
		'\x93', '\x2', '\x2', '\x3AD', '\x3AE', '\a', '\xCD', '\x2', '\x2', '\x3AE', 
		'\x3AF', '\x5', '\x31E', '\x190', '\x2', '\x3AF', '\x3B0', '\a', '\x2A8', 
		'\x2', '\x2', '\x3B0', '\a', '\x3', '\x2', '\x2', '\x2', '\x3B1', '\x3B2', 
		'\a', '\xE', '\x2', '\x2', '\x3B2', '\x3B3', '\a', '\xCD', '\x2', '\x2', 
		'\x3B3', '\x3B4', '\x5', '\x31E', '\x190', '\x2', '\x3B4', '\x3B6', '\a', 
		'T', '\x2', '\x2', '\x3B5', '\x3B7', '\a', 'z', '\x2', '\x2', '\x3B6', 
		'\x3B5', '\x3', '\x2', '\x2', '\x2', '\x3B6', '\x3B7', '\x3', '\x2', '\x2', 
		'\x2', '\x3B7', '\x3BB', '\x3', '\x2', '\x2', '\x2', '\x3B8', '\x3BA', 
		'\x5', '\x136', '\x9C', '\x2', '\x3B9', '\x3B8', '\x3', '\x2', '\x2', 
		'\x2', '\x3BA', '\x3BD', '\x3', '\x2', '\x2', '\x2', '\x3BB', '\x3B9', 
		'\x3', '\x2', '\x2', '\x2', '\x3BB', '\x3BC', '\x3', '\x2', '\x2', '\x2', 
		'\x3BC', '\x3C0', '\x3', '\x2', '\x2', '\x2', '\x3BD', '\x3BB', '\x3', 
		'\x2', '\x2', '\x2', '\x3BE', '\x3BF', '\a', '\x1BD', '\x2', '\x2', '\x3BF', 
		'\x3C1', '\a', '\x1E1', '\x2', '\x2', '\x3C0', '\x3BE', '\x3', '\x2', 
		'\x2', '\x2', '\x3C0', '\x3C1', '\x3', '\x2', '\x2', '\x2', '\x3C1', '\x3C2', 
		'\x3', '\x2', '\x2', '\x2', '\x3C2', '\x3C3', '\a', '\x2A8', '\x2', '\x2', 
		'\x3C3', '\t', '\x3', '\x2', '\x2', '\x2', '\x3C4', '\x3C7', '\a', 'h', 
		'\x2', '\x2', '\x3C5', '\x3C6', '\a', '\x16D', '\x2', '\x2', '\x3C6', 
		'\x3C8', '\a', '\x1B1', '\x2', '\x2', '\x3C7', '\x3C5', '\x3', '\x2', 
		'\x2', '\x2', '\x3C7', '\x3C8', '\x3', '\x2', '\x2', '\x2', '\x3C8', '\x3C9', 
		'\x3', '\x2', '\x2', '\x2', '\x3C9', '\x3CA', '\a', '\xCD', '\x2', '\x2', 
		'\x3CA', '\x3D6', '\x5', '\x31E', '\x190', '\x2', '\x3CB', '\x3D0', '\a', 
		'\x296', '\x2', '\x2', '\x3CC', '\x3CE', '\a', '\x29C', '\x2', '\x2', 
		'\x3CD', '\x3CC', '\x3', '\x2', '\x2', '\x2', '\x3CD', '\x3CE', '\x3', 
		'\x2', '\x2', '\x2', '\x3CE', '\x3CF', '\x3', '\x2', '\x2', '\x2', '\x3CF', 
		'\x3D1', '\x5', '\x142', '\xA2', '\x2', '\x3D0', '\x3CD', '\x3', '\x2', 
		'\x2', '\x2', '\x3D1', '\x3D2', '\x3', '\x2', '\x2', '\x2', '\x3D2', '\x3D0', 
		'\x3', '\x2', '\x2', '\x2', '\x3D2', '\x3D3', '\x3', '\x2', '\x2', '\x2', 
		'\x3D3', '\x3D4', '\x3', '\x2', '\x2', '\x2', '\x3D4', '\x3D5', '\a', 
		'\x297', '\x2', '\x2', '\x3D5', '\x3D7', '\x3', '\x2', '\x2', '\x2', '\x3D6', 
		'\x3CB', '\x3', '\x2', '\x2', '\x2', '\x3D6', '\x3D7', '\x3', '\x2', '\x2', 
		'\x2', '\x3D7', '\x3D8', '\x3', '\x2', '\x2', '\x2', '\x3D8', '\x3D9', 
		'\a', '\x1BC', '\x2', '\x2', '\x3D9', '\x3E0', '\x5', '\x350', '\x1A9', 
		'\x2', '\x3DA', '\x3DF', '\x5', '\x134', '\x9B', '\x2', '\x3DB', '\x3DF', 
		'\x5', '\f', '\a', '\x2', '\x3DC', '\x3DF', '\x5', '\x10', '\t', '\x2', 
		'\x3DD', '\x3DF', '\a', '\x89', '\x2', '\x2', '\x3DE', '\x3DA', '\x3', 
		'\x2', '\x2', '\x2', '\x3DE', '\x3DB', '\x3', '\x2', '\x2', '\x2', '\x3DE', 
		'\x3DC', '\x3', '\x2', '\x2', '\x2', '\x3DE', '\x3DD', '\x3', '\x2', '\x2', 
		'\x2', '\x3DF', '\x3E2', '\x3', '\x2', '\x2', '\x2', '\x3E0', '\x3DE', 
		'\x3', '\x2', '\x2', '\x2', '\x3E0', '\x3E1', '\x3', '\x2', '\x2', '\x2', 
		'\x3E1', '\x3F4', '\x3', '\x2', '\x2', '\x2', '\x3E2', '\x3E0', '\x3', 
		'\x2', '\x2', '\x2', '\x3E3', '\x3E5', '\a', '\x185', '\x2', '\x2', '\x3E4', 
		'\x3E3', '\x3', '\x2', '\x2', '\x2', '\x3E4', '\x3E5', '\x3', '\x2', '\x2', 
		'\x2', '\x3E5', '\x3E6', '\x3', '\x2', '\x2', '\x2', '\x3E6', '\x3EF', 
		'\t', '\x2', '\x2', '\x2', '\x3E7', '\x3E9', '\a', '}', '\x2', '\x2', 
		'\x3E8', '\x3E7', '\x3', '\x2', '\x2', '\x2', '\x3E8', '\x3E9', '\x3', 
		'\x2', '\x2', '\x2', '\x3E9', '\x3EB', '\x3', '\x2', '\x2', '\x2', '\x3EA', 
		'\x3EC', '\x5', '\x146', '\xA4', '\x2', '\x3EB', '\x3EA', '\x3', '\x2', 
		'\x2', '\x2', '\x3EB', '\x3EC', '\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3ED', 
		'\x3', '\x2', '\x2', '\x2', '\x3ED', '\x3F0', '\x5', '\x192', '\xCA', 
		'\x2', '\x3EE', '\x3F0', '\x5', '\x138', '\x9D', '\x2', '\x3EF', '\x3E8', 
		'\x3', '\x2', '\x2', '\x2', '\x3EF', '\x3EE', '\x3', '\x2', '\x2', '\x2', 
		'\x3F0', '\x3F5', '\x3', '\x2', '\x2', '\x2', '\x3F1', '\x3F2', '\t', 
		'\x3', '\x2', '\x2', '\x3F2', '\x3F3', '\a', '\x23B', '\x2', '\x2', '\x3F3', 
		'\x3F5', '\x5', '\x302', '\x182', '\x2', '\x3F4', '\x3E4', '\x3', '\x2', 
		'\x2', '\x2', '\x3F4', '\x3F1', '\x3', '\x2', '\x2', '\x2', '\x3F5', '\x3F6', 
		'\x3', '\x2', '\x2', '\x2', '\x3F6', '\x3F7', '\a', '\x2A8', '\x2', '\x2', 
		'\x3F7', '\v', '\x3', '\x2', '\x2', '\x2', '\x3F8', '\x3FA', '\a', '\x175', 
		'\x2', '\x2', '\x3F9', '\x3FB', '\x5', '\xE', '\b', '\x2', '\x3FA', '\x3F9', 
		'\x3', '\x2', '\x2', '\x2', '\x3FA', '\x3FB', '\x3', '\x2', '\x2', '\x2', 
		'\x3FB', '\r', '\x3', '\x2', '\x2', '\x2', '\x3FC', '\x3FD', '\a', '\x296', 
		'\x2', '\x2', '\x3FD', '\x3FE', '\a', '\x178', '\x2', '\x2', '\x3FE', 
		'\x3FF', '\x5', '\x278', '\x13D', '\x2', '\x3FF', '\x403', '\a', '\x38', 
		'\x2', '\x2', '\x400', '\x404', '\a', '\x11', '\x2', '\x2', '\x401', '\x402', 
		'\t', '\x4', '\x2', '\x2', '\x402', '\x404', '\x5', '\x342', '\x1A2', 
		'\x2', '\x403', '\x400', '\x3', '\x2', '\x2', '\x2', '\x403', '\x401', 
		'\x3', '\x2', '\x2', '\x2', '\x404', '\x406', '\x3', '\x2', '\x2', '\x2', 
		'\x405', '\x407', '\x5', '\x14', '\v', '\x2', '\x406', '\x405', '\x3', 
		'\x2', '\x2', '\x2', '\x406', '\x407', '\x3', '\x2', '\x2', '\x2', '\x407', 
		'\x408', '\x3', '\x2', '\x2', '\x2', '\x408', '\x409', '\a', '\x297', 
		'\x2', '\x2', '\x409', '\xF', '\x3', '\x2', '\x2', '\x2', '\x40A', '\x40C', 
		'\a', '\x1B7', '\x2', '\x2', '\x40B', '\x40D', '\x5', '\x12', '\n', '\x2', 
		'\x40C', '\x40B', '\x3', '\x2', '\x2', '\x2', '\x40C', '\x40D', '\x3', 
		'\x2', '\x2', '\x2', '\x40D', '\x11', '\x3', '\x2', '\x2', '\x2', '\x40E', 
		'\x40F', '\a', '\x1AD', '\x2', '\x2', '\x40F', '\x410', '\a', '\x296', 
		'\x2', '\x2', '\x410', '\x415', '\x5', '\x332', '\x19A', '\x2', '\x411', 
		'\x412', '\a', '\x29C', '\x2', '\x2', '\x412', '\x414', '\x5', '\x332', 
		'\x19A', '\x2', '\x413', '\x411', '\x3', '\x2', '\x2', '\x2', '\x414', 
		'\x417', '\x3', '\x2', '\x2', '\x2', '\x415', '\x413', '\x3', '\x2', '\x2', 
		'\x2', '\x415', '\x416', '\x3', '\x2', '\x2', '\x2', '\x416', '\x418', 
		'\x3', '\x2', '\x2', '\x2', '\x417', '\x415', '\x3', '\x2', '\x2', '\x2', 
		'\x418', '\x419', '\a', '\x297', '\x2', '\x2', '\x419', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x41A', '\x41B', '\t', '\x5', '\x2', '\x2', '\x41B', 
		'\x41C', '\x5', '\x278', '\x13D', '\x2', '\x41C', '\x41D', '\a', '\x38', 
		'\x2', '\x2', '\x41D', '\x41E', '\x5', '\x342', '\x1A2', '\x2', '\x41E', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x41F', '\x420', '\a', '\x93', '\x2', 
		'\x2', '\x420', '\x422', '\a', '\x174', '\x2', '\x2', '\x421', '\x423', 
		'\a', '\x31', '\x2', '\x2', '\x422', '\x421', '\x3', '\x2', '\x2', '\x2', 
		'\x422', '\x423', '\x3', '\x2', '\x2', '\x2', '\x423', '\x427', '\x3', 
		'\x2', '\x2', '\x2', '\x424', '\x425', '\x5', '\x338', '\x19D', '\x2', 
		'\x425', '\x426', '\a', '\x28F', '\x2', '\x2', '\x426', '\x428', '\x3', 
		'\x2', '\x2', '\x2', '\x427', '\x424', '\x3', '\x2', '\x2', '\x2', '\x427', 
		'\x428', '\x3', '\x2', '\x2', '\x2', '\x428', '\x429', '\x3', '\x2', '\x2', 
		'\x2', '\x429', '\x42A', '\x5', '\x300', '\x181', '\x2', '\x42A', '\x42B', 
		'\a', '\x2A8', '\x2', '\x2', '\x42B', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x42C', '\x42D', '\a', '\xE', '\x2', '\x2', '\x42D', '\x42E', '\a', '\x174', 
		'\x2', '\x2', '\x42E', '\x42F', '\x5', '\x300', '\x181', '\x2', '\x42F', 
		'\x431', '\a', 'T', '\x2', '\x2', '\x430', '\x432', '\a', 'z', '\x2', 
		'\x2', '\x431', '\x430', '\x3', '\x2', '\x2', '\x2', '\x431', '\x432', 
		'\x3', '\x2', '\x2', '\x2', '\x432', '\x434', '\x3', '\x2', '\x2', '\x2', 
		'\x433', '\x435', '\t', '\x6', '\x2', '\x2', '\x434', '\x433', '\x3', 
		'\x2', '\x2', '\x2', '\x434', '\x435', '\x3', '\x2', '\x2', '\x2', '\x435', 
		'\x439', '\x3', '\x2', '\x2', '\x2', '\x436', '\x438', '\x5', '\x136', 
		'\x9C', '\x2', '\x437', '\x436', '\x3', '\x2', '\x2', '\x2', '\x438', 
		'\x43B', '\x3', '\x2', '\x2', '\x2', '\x439', '\x437', '\x3', '\x2', '\x2', 
		'\x2', '\x439', '\x43A', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x43E', 
		'\x3', '\x2', '\x2', '\x2', '\x43B', '\x439', '\x3', '\x2', '\x2', '\x2', 
		'\x43C', '\x43D', '\a', '\x1BD', '\x2', '\x2', '\x43D', '\x43F', '\a', 
		'\x1E1', '\x2', '\x2', '\x43E', '\x43C', '\x3', '\x2', '\x2', '\x2', '\x43E', 
		'\x43F', '\x3', '\x2', '\x2', '\x2', '\x43F', '\x440', '\x3', '\x2', '\x2', 
		'\x2', '\x440', '\x441', '\a', '\x2A8', '\x2', '\x2', '\x441', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x442', '\x445', '\a', 'h', '\x2', '\x2', 
		'\x443', '\x444', '\a', '\x16D', '\x2', '\x2', '\x444', '\x446', '\a', 
		'\x1B1', '\x2', '\x2', '\x445', '\x443', '\x3', '\x2', '\x2', '\x2', '\x445', 
		'\x446', '\x3', '\x2', '\x2', '\x2', '\x446', '\x447', '\x3', '\x2', '\x2', 
		'\x2', '\x447', '\x44B', '\a', '\x174', '\x2', '\x2', '\x448', '\x449', 
		'\x5', '\x338', '\x19D', '\x2', '\x449', '\x44A', '\a', '\x28F', '\x2', 
		'\x2', '\x44A', '\x44C', '\x3', '\x2', '\x2', '\x2', '\x44B', '\x448', 
		'\x3', '\x2', '\x2', '\x2', '\x44B', '\x44C', '\x3', '\x2', '\x2', '\x2', 
		'\x44C', '\x44D', '\x3', '\x2', '\x2', '\x2', '\x44D', '\x44F', '\x5', 
		'\x300', '\x181', '\x2', '\x44E', '\x450', '\x5', '\x134', '\x9B', '\x2', 
		'\x44F', '\x44E', '\x3', '\x2', '\x2', '\x2', '\x44F', '\x450', '\x3', 
		'\x2', '\x2', '\x2', '\x450', '\x451', '\x3', '\x2', '\x2', '\x2', '\x451', 
		'\x455', '\t', '\x2', '\x2', '\x2', '\x452', '\x454', '\x5', '\x1E', '\x10', 
		'\x2', '\x453', '\x452', '\x3', '\x2', '\x2', '\x2', '\x454', '\x457', 
		'\x3', '\x2', '\x2', '\x2', '\x455', '\x453', '\x3', '\x2', '\x2', '\x2', 
		'\x455', '\x456', '\x3', '\x2', '\x2', '\x2', '\x456', '\x458', '\x3', 
		'\x2', '\x2', '\x2', '\x457', '\x455', '\x3', '\x2', '\x2', '\x2', '\x458', 
		'\x45A', '\a', '\xA1', '\x2', '\x2', '\x459', '\x45B', '\x5', '\x300', 
		'\x181', '\x2', '\x45A', '\x459', '\x3', '\x2', '\x2', '\x2', '\x45A', 
		'\x45B', '\x3', '\x2', '\x2', '\x2', '\x45B', '\x45C', '\x3', '\x2', '\x2', 
		'\x2', '\x45C', '\x45D', '\a', '\x2A8', '\x2', '\x2', '\x45D', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x45E', '\x461', '\a', 'h', '\x2', '\x2', 
		'\x45F', '\x460', '\a', '\x16D', '\x2', '\x2', '\x460', '\x462', '\a', 
		'\x1B1', '\x2', '\x2', '\x461', '\x45F', '\x3', '\x2', '\x2', '\x2', '\x461', 
		'\x462', '\x3', '\x2', '\x2', '\x2', '\x462', '\x463', '\x3', '\x2', '\x2', 
		'\x2', '\x463', '\x464', '\a', '\x174', '\x2', '\x2', '\x464', '\x468', 
		'\a', '\x31', '\x2', '\x2', '\x465', '\x466', '\x5', '\x338', '\x19D', 
		'\x2', '\x466', '\x467', '\a', '\x28F', '\x2', '\x2', '\x467', '\x469', 
		'\x3', '\x2', '\x2', '\x2', '\x468', '\x465', '\x3', '\x2', '\x2', '\x2', 
		'\x468', '\x469', '\x3', '\x2', '\x2', '\x2', '\x469', '\x46A', '\x3', 
		'\x2', '\x2', '\x2', '\x46A', '\x46B', '\x5', '\x300', '\x181', '\x2', 
		'\x46B', '\x46F', '\t', '\x2', '\x2', '\x2', '\x46C', '\x46E', '\x5', 
		'$', '\x13', '\x2', '\x46D', '\x46C', '\x3', '\x2', '\x2', '\x2', '\x46E', 
		'\x471', '\x3', '\x2', '\x2', '\x2', '\x46F', '\x46D', '\x3', '\x2', '\x2', 
		'\x2', '\x46F', '\x470', '\x3', '\x2', '\x2', '\x2', '\x470', '\x474', 
		'\x3', '\x2', '\x2', '\x2', '\x471', '\x46F', '\x3', '\x2', '\x2', '\x2', 
		'\x472', '\x473', '\a', '\'', '\x2', '\x2', '\x473', '\x475', '\x5', '\x164', 
		'\xB3', '\x2', '\x474', '\x472', '\x3', '\x2', '\x2', '\x2', '\x474', 
		'\x475', '\x3', '\x2', '\x2', '\x2', '\x475', '\x476', '\x3', '\x2', '\x2', 
		'\x2', '\x476', '\x478', '\a', '\xA1', '\x2', '\x2', '\x477', '\x479', 
		'\x5', '\x300', '\x181', '\x2', '\x478', '\x477', '\x3', '\x2', '\x2', 
		'\x2', '\x478', '\x479', '\x3', '\x2', '\x2', '\x2', '\x479', '\x47A', 
		'\x3', '\x2', '\x2', '\x2', '\x47A', '\x47B', '\a', '\x2A8', '\x2', '\x2', 
		'\x47B', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x47C', '\x485', '\x5', 
		'\x14A', '\xA6', '\x2', '\x47D', '\x485', '\x5', '\x14C', '\xA7', '\x2', 
		'\x47E', '\x485', '\x5', '\x14E', '\xA8', '\x2', '\x47F', '\x485', '\x5', 
		'\x152', '\xAA', '\x2', '\x480', '\x485', '\x5', '\x154', '\xAB', '\x2', 
		'\x481', '\x485', '\x5', '\x15C', '\xAF', '\x2', '\x482', '\x485', '\x5', 
		' ', '\x11', '\x2', '\x483', '\x485', '\x5', '\"', '\x12', '\x2', '\x484', 
		'\x47C', '\x3', '\x2', '\x2', '\x2', '\x484', '\x47D', '\x3', '\x2', '\x2', 
		'\x2', '\x484', '\x47E', '\x3', '\x2', '\x2', '\x2', '\x484', '\x47F', 
		'\x3', '\x2', '\x2', '\x2', '\x484', '\x480', '\x3', '\x2', '\x2', '\x2', 
		'\x484', '\x481', '\x3', '\x2', '\x2', '\x2', '\x484', '\x482', '\x3', 
		'\x2', '\x2', '\x2', '\x484', '\x483', '\x3', '\x2', '\x2', '\x2', '\x485', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x486', '\x487', '\a', '\x197', '\x2', 
		'\x2', '\x487', '\x493', '\x5', '\x36C', '\x1B7', '\x2', '\x488', '\x489', 
		'\a', '\x296', '\x2', '\x2', '\x489', '\x48E', '\x5', '\x142', '\xA2', 
		'\x2', '\x48A', '\x48B', '\a', '\x29C', '\x2', '\x2', '\x48B', '\x48D', 
		'\x5', '\x142', '\xA2', '\x2', '\x48C', '\x48A', '\x3', '\x2', '\x2', 
		'\x2', '\x48D', '\x490', '\x3', '\x2', '\x2', '\x2', '\x48E', '\x48C', 
		'\x3', '\x2', '\x2', '\x2', '\x48E', '\x48F', '\x3', '\x2', '\x2', '\x2', 
		'\x48F', '\x491', '\x3', '\x2', '\x2', '\x2', '\x490', '\x48E', '\x3', 
		'\x2', '\x2', '\x2', '\x491', '\x492', '\a', '\x297', '\x2', '\x2', '\x492', 
		'\x494', '\x3', '\x2', '\x2', '\x2', '\x493', '\x488', '\x3', '\x2', '\x2', 
		'\x2', '\x493', '\x494', '\x3', '\x2', '\x2', '\x2', '\x494', '\x495', 
		'\x3', '\x2', '\x2', '\x2', '\x495', '\x496', '\a', '\x2A8', '\x2', '\x2', 
		'\x496', '!', '\x3', '\x2', '\x2', '\x2', '\x497', '\x498', '\a', '\xCD', 
		'\x2', '\x2', '\x498', '\x4A4', '\x5', '\x36C', '\x1B7', '\x2', '\x499', 
		'\x49A', '\a', '\x296', '\x2', '\x2', '\x49A', '\x49F', '\x5', '\x142', 
		'\xA2', '\x2', '\x49B', '\x49C', '\a', '\x29C', '\x2', '\x2', '\x49C', 
		'\x49E', '\x5', '\x142', '\xA2', '\x2', '\x49D', '\x49B', '\x3', '\x2', 
		'\x2', '\x2', '\x49E', '\x4A1', '\x3', '\x2', '\x2', '\x2', '\x49F', '\x49D', 
		'\x3', '\x2', '\x2', '\x2', '\x49F', '\x4A0', '\x3', '\x2', '\x2', '\x2', 
		'\x4A0', '\x4A2', '\x3', '\x2', '\x2', '\x2', '\x4A1', '\x49F', '\x3', 
		'\x2', '\x2', '\x2', '\x4A2', '\x4A3', '\a', '\x297', '\x2', '\x2', '\x4A3', 
		'\x4A5', '\x3', '\x2', '\x2', '\x2', '\x4A4', '\x499', '\x3', '\x2', '\x2', 
		'\x2', '\x4A4', '\x4A5', '\x3', '\x2', '\x2', '\x2', '\x4A5', '\x4A6', 
		'\x3', '\x2', '\x2', '\x2', '\x4A6', '\x4A7', '\a', '\x1BC', '\x2', '\x2', 
		'\x4A7', '\x4A9', '\x5', '\x350', '\x1A9', '\x2', '\x4A8', '\x4AA', '\a', 
		'\x89', '\x2', '\x2', '\x4A9', '\x4A8', '\x3', '\x2', '\x2', '\x2', '\x4A9', 
		'\x4AA', '\x3', '\x2', '\x2', '\x2', '\x4AA', '\x4AC', '\x3', '\x2', '\x2', 
		'\x2', '\x4AB', '\x4AD', '\a', '\x1B7', '\x2', '\x2', '\x4AC', '\x4AB', 
		'\x3', '\x2', '\x2', '\x2', '\x4AC', '\x4AD', '\x3', '\x2', '\x2', '\x2', 
		'\x4AD', '\x4AE', '\x3', '\x2', '\x2', '\x2', '\x4AE', '\x4AF', '\a', 
		'\x2A8', '\x2', '\x2', '\x4AF', '#', '\x3', '\x2', '\x2', '\x2', '\x4B0', 
		'\x4BA', '\x5', '\x14A', '\xA6', '\x2', '\x4B1', '\x4BA', '\x5', '\x14C', 
		'\xA7', '\x2', '\x4B2', '\x4BA', '\x5', '\x14E', '\xA8', '\x2', '\x4B3', 
		'\x4BA', '\x5', '\x152', '\xAA', '\x2', '\x4B4', '\x4BA', '\x5', '\x15C', 
		'\xAF', '\x2', '\x4B5', '\x4BA', '\x5', ',', '\x17', '\x2', '\x4B6', '\x4BA', 
		'\x5', '*', '\x16', '\x2', '\x4B7', '\x4BA', '\x5', ' ', '\x11', '\x2', 
		'\x4B8', '\x4BA', '\x5', '\"', '\x12', '\x2', '\x4B9', '\x4B0', '\x3', 
		'\x2', '\x2', '\x2', '\x4B9', '\x4B1', '\x3', '\x2', '\x2', '\x2', '\x4B9', 
		'\x4B2', '\x3', '\x2', '\x2', '\x2', '\x4B9', '\x4B3', '\x3', '\x2', '\x2', 
		'\x2', '\x4B9', '\x4B4', '\x3', '\x2', '\x2', '\x2', '\x4B9', '\x4B5', 
		'\x3', '\x2', '\x2', '\x2', '\x4B9', '\x4B6', '\x3', '\x2', '\x2', '\x2', 
		'\x4B9', '\x4B7', '\x3', '\x2', '\x2', '\x2', '\x4B9', '\x4B8', '\x3', 
		'\x2', '\x2', '\x2', '\x4BA', '%', '\x3', '\x2', '\x2', '\x2', '\x4BB', 
		'\x4BC', '\a', '\x93', '\x2', '\x2', '\x4BC', '\x4BD', '\a', '\x197', 
		'\x2', '\x2', '\x4BD', '\x4BE', '\x5', '\x320', '\x191', '\x2', '\x4BE', 
		'\x4BF', '\a', '\x2A8', '\x2', '\x2', '\x4BF', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x4C0', '\x4C1', '\a', '\xE', '\x2', '\x2', '\x4C1', '\x4C2', 
		'\a', '\x197', '\x2', '\x2', '\x4C2', '\x4C3', '\x5', '\x320', '\x191', 
		'\x2', '\x4C3', '\x4C5', '\a', 'T', '\x2', '\x2', '\x4C4', '\x4C6', '\a', 
		'z', '\x2', '\x2', '\x4C5', '\x4C4', '\x3', '\x2', '\x2', '\x2', '\x4C5', 
		'\x4C6', '\x3', '\x2', '\x2', '\x2', '\x4C6', '\x4CA', '\x3', '\x2', '\x2', 
		'\x2', '\x4C7', '\x4C9', '\x5', '\x136', '\x9C', '\x2', '\x4C8', '\x4C7', 
		'\x3', '\x2', '\x2', '\x2', '\x4C9', '\x4CC', '\x3', '\x2', '\x2', '\x2', 
		'\x4CA', '\x4C8', '\x3', '\x2', '\x2', '\x2', '\x4CA', '\x4CB', '\x3', 
		'\x2', '\x2', '\x2', '\x4CB', '\x4CF', '\x3', '\x2', '\x2', '\x2', '\x4CC', 
		'\x4CA', '\x3', '\x2', '\x2', '\x2', '\x4CD', '\x4CE', '\a', '\x1BD', 
		'\x2', '\x2', '\x4CE', '\x4D0', '\a', '\x1E1', '\x2', '\x2', '\x4CF', 
		'\x4CD', '\x3', '\x2', '\x2', '\x2', '\x4CF', '\x4D0', '\x3', '\x2', '\x2', 
		'\x2', '\x4D0', '\x4D1', '\x3', '\x2', '\x2', '\x2', '\x4D1', '\x4D2', 
		'\a', '\x2A8', '\x2', '\x2', '\x4D2', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x4D3', '\x4D4', '\a', '\xCD', '\x2', '\x2', '\x4D4', '\x4E0', '\x5', 
		'\x36C', '\x1B7', '\x2', '\x4D5', '\x4D6', '\a', '\x296', '\x2', '\x2', 
		'\x4D6', '\x4DB', '\x5', '\x142', '\xA2', '\x2', '\x4D7', '\x4D8', '\a', 
		'\x29C', '\x2', '\x2', '\x4D8', '\x4DA', '\x5', '\x142', '\xA2', '\x2', 
		'\x4D9', '\x4D7', '\x3', '\x2', '\x2', '\x2', '\x4DA', '\x4DD', '\x3', 
		'\x2', '\x2', '\x2', '\x4DB', '\x4D9', '\x3', '\x2', '\x2', '\x2', '\x4DB', 
		'\x4DC', '\x3', '\x2', '\x2', '\x2', '\x4DC', '\x4DE', '\x3', '\x2', '\x2', 
		'\x2', '\x4DD', '\x4DB', '\x3', '\x2', '\x2', '\x2', '\x4DE', '\x4DF', 
		'\a', '\x297', '\x2', '\x2', '\x4DF', '\x4E1', '\x3', '\x2', '\x2', '\x2', 
		'\x4E0', '\x4D5', '\x3', '\x2', '\x2', '\x2', '\x4E0', '\x4E1', '\x3', 
		'\x2', '\x2', '\x2', '\x4E1', '\x4E2', '\x3', '\x2', '\x2', '\x2', '\x4E2', 
		'\x4E3', '\a', '\x1BC', '\x2', '\x2', '\x4E3', '\x4EA', '\x5', '\x350', 
		'\x1A9', '\x2', '\x4E4', '\x4E9', '\x5', '\x134', '\x9B', '\x2', '\x4E5', 
		'\x4E9', '\x5', '\f', '\a', '\x2', '\x4E6', '\x4E9', '\x5', '\x10', '\t', 
		'\x2', '\x4E7', '\x4E9', '\a', '\x89', '\x2', '\x2', '\x4E8', '\x4E4', 
		'\x3', '\x2', '\x2', '\x2', '\x4E8', '\x4E5', '\x3', '\x2', '\x2', '\x2', 
		'\x4E8', '\x4E6', '\x3', '\x2', '\x2', '\x2', '\x4E8', '\x4E7', '\x3', 
		'\x2', '\x2', '\x2', '\x4E9', '\x4EC', '\x3', '\x2', '\x2', '\x2', '\x4EA', 
		'\x4E8', '\x3', '\x2', '\x2', '\x2', '\x4EA', '\x4EB', '\x3', '\x2', '\x2', 
		'\x2', '\x4EB', '\x4FE', '\x3', '\x2', '\x2', '\x2', '\x4EC', '\x4EA', 
		'\x3', '\x2', '\x2', '\x2', '\x4ED', '\x4EF', '\a', '\x185', '\x2', '\x2', 
		'\x4EE', '\x4ED', '\x3', '\x2', '\x2', '\x2', '\x4EE', '\x4EF', '\x3', 
		'\x2', '\x2', '\x2', '\x4EF', '\x4F0', '\x3', '\x2', '\x2', '\x2', '\x4F0', 
		'\x4F9', '\t', '\x2', '\x2', '\x2', '\x4F1', '\x4F3', '\a', '}', '\x2', 
		'\x2', '\x4F2', '\x4F1', '\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4F3', 
		'\x3', '\x2', '\x2', '\x2', '\x4F3', '\x4F5', '\x3', '\x2', '\x2', '\x2', 
		'\x4F4', '\x4F6', '\x5', '\x146', '\xA4', '\x2', '\x4F5', '\x4F4', '\x3', 
		'\x2', '\x2', '\x2', '\x4F5', '\x4F6', '\x3', '\x2', '\x2', '\x2', '\x4F6', 
		'\x4F7', '\x3', '\x2', '\x2', '\x2', '\x4F7', '\x4FA', '\x5', '\x192', 
		'\xCA', '\x2', '\x4F8', '\x4FA', '\x5', '\x138', '\x9D', '\x2', '\x4F9', 
		'\x4F2', '\x3', '\x2', '\x2', '\x2', '\x4F9', '\x4F8', '\x3', '\x2', '\x2', 
		'\x2', '\x4FA', '\x4FF', '\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4FC', 
		'\t', '\x3', '\x2', '\x2', '\x4FC', '\x4FD', '\a', '\x23B', '\x2', '\x2', 
		'\x4FD', '\x4FF', '\x5', '\x302', '\x182', '\x2', '\x4FE', '\x4EE', '\x3', 
		'\x2', '\x2', '\x2', '\x4FE', '\x4FB', '\x3', '\x2', '\x2', '\x2', '\x4FF', 
		'\x500', '\x3', '\x2', '\x2', '\x2', '\x500', '\x501', '\a', '\x2A8', 
		'\x2', '\x2', '\x501', '+', '\x3', '\x2', '\x2', '\x2', '\x502', '\x503', 
		'\a', '\x197', '\x2', '\x2', '\x503', '\x50F', '\x5', '\x36C', '\x1B7', 
		'\x2', '\x504', '\x505', '\a', '\x296', '\x2', '\x2', '\x505', '\x50A', 
		'\x5', '\x142', '\xA2', '\x2', '\x506', '\x507', '\a', '\x29C', '\x2', 
		'\x2', '\x507', '\x509', '\x5', '\x142', '\xA2', '\x2', '\x508', '\x506', 
		'\x3', '\x2', '\x2', '\x2', '\x509', '\x50C', '\x3', '\x2', '\x2', '\x2', 
		'\x50A', '\x508', '\x3', '\x2', '\x2', '\x2', '\x50A', '\x50B', '\x3', 
		'\x2', '\x2', '\x2', '\x50B', '\x50D', '\x3', '\x2', '\x2', '\x2', '\x50C', 
		'\x50A', '\x3', '\x2', '\x2', '\x2', '\x50D', '\x50E', '\a', '\x297', 
		'\x2', '\x2', '\x50E', '\x510', '\x3', '\x2', '\x2', '\x2', '\x50F', '\x504', 
		'\x3', '\x2', '\x2', '\x2', '\x50F', '\x510', '\x3', '\x2', '\x2', '\x2', 
		'\x510', '\x511', '\x3', '\x2', '\x2', '\x2', '\x511', '\x51B', '\t', 
		'\x2', '\x2', '\x2', '\x512', '\x514', '\a', '}', '\x2', '\x2', '\x513', 
		'\x512', '\x3', '\x2', '\x2', '\x2', '\x513', '\x514', '\x3', '\x2', '\x2', 
		'\x2', '\x514', '\x516', '\x3', '\x2', '\x2', '\x2', '\x515', '\x517', 
		'\x5', '\x146', '\xA4', '\x2', '\x516', '\x515', '\x3', '\x2', '\x2', 
		'\x2', '\x516', '\x517', '\x3', '\x2', '\x2', '\x2', '\x517', '\x518', 
		'\x3', '\x2', '\x2', '\x2', '\x518', '\x51C', '\x5', '\x192', '\xCA', 
		'\x2', '\x519', '\x51C', '\x5', '\x138', '\x9D', '\x2', '\x51A', '\x51C', 
		'\a', '\xB5', '\x2', '\x2', '\x51B', '\x513', '\x3', '\x2', '\x2', '\x2', 
		'\x51B', '\x519', '\x3', '\x2', '\x2', '\x2', '\x51B', '\x51A', '\x3', 
		'\x2', '\x2', '\x2', '\x51C', '\x51D', '\x3', '\x2', '\x2', '\x2', '\x51D', 
		'\x51E', '\a', '\x2A8', '\x2', '\x2', '\x51E', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x51F', '\x522', '\a', 'h', '\x2', '\x2', '\x520', '\x521', '\a', 
		'\x16D', '\x2', '\x2', '\x521', '\x523', '\a', '\x1B1', '\x2', '\x2', 
		'\x522', '\x520', '\x3', '\x2', '\x2', '\x2', '\x522', '\x523', '\x3', 
		'\x2', '\x2', '\x2', '\x523', '\x524', '\x3', '\x2', '\x2', '\x2', '\x524', 
		'\x525', '\a', '\x197', '\x2', '\x2', '\x525', '\x531', '\x5', '\x320', 
		'\x191', '\x2', '\x526', '\x527', '\a', '\x296', '\x2', '\x2', '\x527', 
		'\x52C', '\x5', '\x142', '\xA2', '\x2', '\x528', '\x529', '\a', '\x29C', 
		'\x2', '\x2', '\x529', '\x52B', '\x5', '\x142', '\xA2', '\x2', '\x52A', 
		'\x528', '\x3', '\x2', '\x2', '\x2', '\x52B', '\x52E', '\x3', '\x2', '\x2', 
		'\x2', '\x52C', '\x52A', '\x3', '\x2', '\x2', '\x2', '\x52C', '\x52D', 
		'\x3', '\x2', '\x2', '\x2', '\x52D', '\x52F', '\x3', '\x2', '\x2', '\x2', 
		'\x52E', '\x52C', '\x3', '\x2', '\x2', '\x2', '\x52F', '\x530', '\a', 
		'\x297', '\x2', '\x2', '\x530', '\x532', '\x3', '\x2', '\x2', '\x2', '\x531', 
		'\x526', '\x3', '\x2', '\x2', '\x2', '\x531', '\x532', '\x3', '\x2', '\x2', 
		'\x2', '\x532', '\x534', '\x3', '\x2', '\x2', '\x2', '\x533', '\x535', 
		'\x5', '\x134', '\x9B', '\x2', '\x534', '\x533', '\x3', '\x2', '\x2', 
		'\x2', '\x534', '\x535', '\x3', '\x2', '\x2', '\x2', '\x535', '\x536', 
		'\x3', '\x2', '\x2', '\x2', '\x536', '\x540', '\t', '\x2', '\x2', '\x2', 
		'\x537', '\x539', '\a', '}', '\x2', '\x2', '\x538', '\x537', '\x3', '\x2', 
		'\x2', '\x2', '\x538', '\x539', '\x3', '\x2', '\x2', '\x2', '\x539', '\x53B', 
		'\x3', '\x2', '\x2', '\x2', '\x53A', '\x53C', '\x5', '\x146', '\xA4', 
		'\x2', '\x53B', '\x53A', '\x3', '\x2', '\x2', '\x2', '\x53B', '\x53C', 
		'\x3', '\x2', '\x2', '\x2', '\x53C', '\x53D', '\x3', '\x2', '\x2', '\x2', 
		'\x53D', '\x541', '\x5', '\x192', '\xCA', '\x2', '\x53E', '\x541', '\x5', 
		'\x138', '\x9D', '\x2', '\x53F', '\x541', '\a', '\xB5', '\x2', '\x2', 
		'\x540', '\x538', '\x3', '\x2', '\x2', '\x2', '\x540', '\x53E', '\x3', 
		'\x2', '\x2', '\x2', '\x540', '\x53F', '\x3', '\x2', '\x2', '\x2', '\x541', 
		'\x542', '\x3', '\x2', '\x2', '\x2', '\x542', '\x543', '\a', '\x2A8', 
		'\x2', '\x2', '\x543', '/', '\x3', '\x2', '\x2', '\x2', '\x544', '\x545', 
		'\a', '\x93', '\x2', '\x2', '\x545', '\x546', '\a', '\x225', '\x2', '\x2', 
		'\x546', '\x547', '\x5', '\x322', '\x192', '\x2', '\x547', '\x548', '\a', 
		'\x2A8', '\x2', '\x2', '\x548', '\x31', '\x3', '\x2', '\x2', '\x2', '\x549', 
		'\x54A', '\a', '\xE', '\x2', '\x2', '\x54A', '\x54B', '\a', '\x225', '\x2', 
		'\x2', '\x54B', '\x55E', '\x5', '\x322', '\x192', '\x2', '\x54C', '\x55F', 
		'\t', '\a', '\x2', '\x2', '\x54D', '\x54E', '\a', '\x1B0', '\x2', '\x2', 
		'\x54E', '\x54F', '\a', '\x21F', '\x2', '\x2', '\x54F', '\x55F', '\x5', 
		'\x322', '\x192', '\x2', '\x550', '\x552', '\a', 'T', '\x2', '\x2', '\x551', 
		'\x553', '\a', 'z', '\x2', '\x2', '\x552', '\x551', '\x3', '\x2', '\x2', 
		'\x2', '\x552', '\x553', '\x3', '\x2', '\x2', '\x2', '\x553', '\x557', 
		'\x3', '\x2', '\x2', '\x2', '\x554', '\x556', '\x5', '\x136', '\x9C', 
		'\x2', '\x555', '\x554', '\x3', '\x2', '\x2', '\x2', '\x556', '\x559', 
		'\x3', '\x2', '\x2', '\x2', '\x557', '\x555', '\x3', '\x2', '\x2', '\x2', 
		'\x557', '\x558', '\x3', '\x2', '\x2', '\x2', '\x558', '\x55C', '\x3', 
		'\x2', '\x2', '\x2', '\x559', '\x557', '\x3', '\x2', '\x2', '\x2', '\x55A', 
		'\x55B', '\a', '\x1BD', '\x2', '\x2', '\x55B', '\x55D', '\a', '\x1E1', 
		'\x2', '\x2', '\x55C', '\x55A', '\x3', '\x2', '\x2', '\x2', '\x55C', '\x55D', 
		'\x3', '\x2', '\x2', '\x2', '\x55D', '\x55F', '\x3', '\x2', '\x2', '\x2', 
		'\x55E', '\x54C', '\x3', '\x2', '\x2', '\x2', '\x55E', '\x54D', '\x3', 
		'\x2', '\x2', '\x2', '\x55E', '\x550', '\x3', '\x2', '\x2', '\x2', '\x55F', 
		'\x560', '\x3', '\x2', '\x2', '\x2', '\x560', '\x561', '\a', '\x2A8', 
		'\x2', '\x2', '\x561', '\x33', '\x3', '\x2', '\x2', '\x2', '\x562', '\x565', 
		'\a', 'h', '\x2', '\x2', '\x563', '\x564', '\a', '\x16D', '\x2', '\x2', 
		'\x564', '\x566', '\a', '\x1B1', '\x2', '\x2', '\x565', '\x563', '\x3', 
		'\x2', '\x2', '\x2', '\x565', '\x566', '\x3', '\x2', '\x2', '\x2', '\x566', 
		'\x567', '\x3', '\x2', '\x2', '\x2', '\x567', '\x568', '\a', '\x225', 
		'\x2', '\x2', '\x568', '\x56C', '\x5', '\x322', '\x192', '\x2', '\x569', 
		'\x56D', '\x5', ':', '\x1E', '\x2', '\x56A', '\x56D', '\x5', '>', ' ', 
		'\x2', '\x56B', '\x56D', '\x5', '@', '!', '\x2', '\x56C', '\x569', '\x3', 
		'\x2', '\x2', '\x2', '\x56C', '\x56A', '\x3', '\x2', '\x2', '\x2', '\x56C', 
		'\x56B', '\x3', '\x2', '\x2', '\x2', '\x56D', '\x56F', '\x3', '\x2', '\x2', 
		'\x2', '\x56E', '\x570', '\x5', '\x36', '\x1C', '\x2', '\x56F', '\x56E', 
		'\x3', '\x2', '\x2', '\x2', '\x56F', '\x570', '\x3', '\x2', '\x2', '\x2', 
		'\x570', '\x572', '\x3', '\x2', '\x2', '\x2', '\x571', '\x573', '\t', 
		'\a', '\x2', '\x2', '\x572', '\x571', '\x3', '\x2', '\x2', '\x2', '\x572', 
		'\x573', '\x3', '\x2', '\x2', '\x2', '\x573', '\x575', '\x3', '\x2', '\x2', 
		'\x2', '\x574', '\x576', '\x5', '\x38', '\x1D', '\x2', '\x575', '\x574', 
		'\x3', '\x2', '\x2', '\x2', '\x575', '\x576', '\x3', '\x2', '\x2', '\x2', 
		'\x576', '\x577', '\x3', '\x2', '\x2', '\x2', '\x577', '\x578', '\x5', 
		'\x42', '\"', '\x2', '\x578', '\x579', '\a', '\x2A8', '\x2', '\x2', '\x579', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x57A', '\x57B', '\a', '\xC4', '\x2', 
		'\x2', '\x57B', '\x580', '\x5', '\x322', '\x192', '\x2', '\x57C', '\x57D', 
		'\a', '\x29C', '\x2', '\x2', '\x57D', '\x57F', '\x5', '\x322', '\x192', 
		'\x2', '\x57E', '\x57C', '\x3', '\x2', '\x2', '\x2', '\x57F', '\x582', 
		'\x3', '\x2', '\x2', '\x2', '\x580', '\x57E', '\x3', '\x2', '\x2', '\x2', 
		'\x580', '\x581', '\x3', '\x2', '\x2', '\x2', '\x581', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x582', '\x580', '\x3', '\x2', '\x2', '\x2', '\x583', 
		'\x584', '\a', '\x24B', '\x2', '\x2', '\x584', '\x585', '\a', '\x296', 
		'\x2', '\x2', '\x585', '\x586', '\x5', '\x274', '\x13B', '\x2', '\x586', 
		'\x587', '\a', '\x297', '\x2', '\x2', '\x587', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x588', '\x58D', '\a', '&', '\x2', '\x2', '\x589', '\x58D', '\a', 
		'\t', '\x2', '\x2', '\x58A', '\x58B', '\a', '\xF6', '\x2', '\x2', '\x58B', 
		'\x58D', '\a', '\x15F', '\x2', '\x2', '\x58C', '\x588', '\x3', '\x2', 
		'\x2', '\x2', '\x58C', '\x589', '\x3', '\x2', '\x2', '\x2', '\x58C', '\x58A', 
		'\x3', '\x2', '\x2', '\x2', '\x58D', '\x58E', '\x3', '\x2', '\x2', '\x2', 
		'\x58E', '\x590', '\x5', 'L', '\'', '\x2', '\x58F', '\x591', '\x5', 'R', 
		'*', '\x2', '\x590', '\x58F', '\x3', '\x2', '\x2', '\x2', '\x590', '\x591', 
		'\x3', '\x2', '\x2', '\x2', '\x591', '\x593', '\x3', '\x2', '\x2', '\x2', 
		'\x592', '\x594', '\x5', '<', '\x1F', '\x2', '\x593', '\x592', '\x3', 
		'\x2', '\x2', '\x2', '\x593', '\x594', '\x3', '\x2', '\x2', '\x2', '\x594', 
		';', '\x3', '\x2', '\x2', '\x2', '\x595', '\x596', '\a', '\xC8', '\x2', 
		'\x2', '\x596', '\x597', '\a', '\x95', '\x2', '\x2', '\x597', '\x598', 
		'\a', '\x1C7', '\x2', '\x2', '\x598', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x599', '\x59A', '\a', '\xC8', '\x2', '\x2', '\x59A', '\x59C', '\x5', 
		'L', '\'', '\x2', '\x59B', '\x59D', '\x5', 'R', '*', '\x2', '\x59C', '\x59B', 
		'\x3', '\x2', '\x2', '\x2', '\x59C', '\x59D', '\x3', '\x2', '\x2', '\x2', 
		'\x59D', '?', '\x3', '\x2', '\x2', '\x2', '\x59E', '\x59F', '\t', '\b', 
		'\x2', '\x2', '\x59F', '\x5A4', '\x5', 'J', '&', '\x2', '\x5A0', '\x5A1', 
		'\a', '\x16D', '\x2', '\x2', '\x5A1', '\x5A3', '\x5', 'J', '&', '\x2', 
		'\x5A2', '\x5A0', '\x3', '\x2', '\x2', '\x2', '\x5A3', '\x5A6', '\x3', 
		'\x2', '\x2', '\x2', '\x5A4', '\x5A2', '\x3', '\x2', '\x2', '\x2', '\x5A4', 
		'\x5A5', '\x3', '\x2', '\x2', '\x2', '\x5A5', '\x5A7', '\x3', '\x2', '\x2', 
		'\x2', '\x5A6', '\x5A4', '\x3', '\x2', '\x2', '\x2', '\x5A7', '\x5AF', 
		'\a', '\x165', '\x2', '\x2', '\x5A8', '\x5B0', '\a', 'q', '\x2', '\x2', 
		'\x5A9', '\x5AA', '\x5', '\x2FC', '\x17F', '\x2', '\x5AA', '\x5AB', '\a', 
		'\x28F', '\x2', '\x2', '\x5AB', '\x5AD', '\x3', '\x2', '\x2', '\x2', '\x5AC', 
		'\x5A9', '\x3', '\x2', '\x2', '\x2', '\x5AC', '\x5AD', '\x3', '\x2', '\x2', 
		'\x2', '\x5AD', '\x5AE', '\x3', '\x2', '\x2', '\x2', '\x5AE', '\x5B0', 
		'\a', '\x1D0', '\x2', '\x2', '\x5AF', '\x5A8', '\x3', '\x2', '\x2', '\x2', 
		'\x5AF', '\x5AC', '\x3', '\x2', '\x2', '\x2', '\x5B0', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x5B1', '\x5B2', '\a', 'U', '\x2', '\x2', '\x5B2', 
		'\x5B7', '\a', '\x225', '\x2', '\x2', '\x5B3', '\x5B4', '\a', ';', '\x2', 
		'\x2', '\x5B4', '\x5B7', '\x5', '\x36C', '\x1B7', '\x2', '\x5B5', '\x5B7', 
		'\x5', '\x196', '\xCC', '\x2', '\x5B6', '\x5B1', '\x3', '\x2', '\x2', 
		'\x2', '\x5B6', '\x5B3', '\x3', '\x2', '\x2', '\x2', '\x5B6', '\x5B5', 
		'\x3', '\x2', '\x2', '\x2', '\x5B7', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x5B8', '\x5BA', '\x5', '\x2FE', '\x180', '\x2', '\x5B9', '\x5BB', '\x5', 
		'\x346', '\x1A4', '\x2', '\x5BA', '\x5B9', '\x3', '\x2', '\x2', '\x2', 
		'\x5BA', '\x5BB', '\x3', '\x2', '\x2', '\x2', '\x5BB', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x5BC', '\x5BD', '\a', 'U', '\x2', '\x2', '\x5BD', 
		'\x5BF', '\a', '\x225', '\x2', '\x2', '\x5BE', '\x5C0', '\x5', '\x146', 
		'\xA4', '\x2', '\x5BF', '\x5BE', '\x3', '\x2', '\x2', '\x2', '\x5BF', 
		'\x5C0', '\x3', '\x2', '\x2', '\x2', '\x5C0', '\x5C2', '\x3', '\x2', '\x2', 
		'\x2', '\x5C1', '\x5C3', '\x5', 'H', '%', '\x2', '\x5C2', '\x5C1', '\x3', 
		'\x2', '\x2', '\x2', '\x5C3', '\x5C4', '\x3', '\x2', '\x2', '\x2', '\x5C4', 
		'\x5C2', '\x3', '\x2', '\x2', '\x2', '\x5C4', '\x5C5', '\x3', '\x2', '\x2', 
		'\x2', '\x5C5', '\x5C6', '\x3', '\x2', '\x2', '\x2', '\x5C6', '\x5C7', 
		'\a', '\xA1', '\x2', '\x2', '\x5C7', '\x5C8', '\x5', '\x322', '\x192', 
		'\x2', '\x5C8', 'G', '\x3', '\x2', '\x2', '\x2', '\x5C9', '\x5CA', '\a', 
		'&', '\x2', '\x2', '\x5CA', '\x5CB', '\a', '\x1FA', '\x2', '\x2', '\x5CB', 
		'\x5CC', '\a', '\xFD', '\x2', '\x2', '\x5CC', '\x5CD', '\x5', '\x196', 
		'\xCC', '\x2', '\x5CD', '\x5CE', '\a', '&', '\x2', '\x2', '\x5CE', '\x5CF', 
		'\a', '\x1FA', '\x2', '\x2', '\x5CF', '\x5D0', '\a', '\x2A8', '\x2', '\x2', 
		'\x5D0', '\x5EE', '\x3', '\x2', '\x2', '\x2', '\x5D1', '\x5D2', '\a', 
		'&', '\x2', '\x2', '\x5D2', '\x5D3', '\a', '\x95', '\x2', '\x2', '\x5D3', 
		'\x5D4', '\a', '\x1C7', '\x2', '\x2', '\x5D4', '\x5D5', '\a', '\xFD', 
		'\x2', '\x2', '\x5D5', '\x5D6', '\x5', '\x196', '\xCC', '\x2', '\x5D6', 
		'\x5D7', '\a', '&', '\x2', '\x2', '\x5D7', '\x5D8', '\a', '\x95', '\x2', 
		'\x2', '\x5D8', '\x5D9', '\a', '\x1C7', '\x2', '\x2', '\x5D9', '\x5DA', 
		'\a', '\x2A8', '\x2', '\x2', '\x5DA', '\x5EE', '\x3', '\x2', '\x2', '\x2', 
		'\x5DB', '\x5DC', '\a', '\t', '\x2', '\x2', '\x5DC', '\x5DD', '\a', '\x1FA', 
		'\x2', '\x2', '\x5DD', '\x5DE', '\a', '\xFD', '\x2', '\x2', '\x5DE', '\x5DF', 
		'\x5', '\x196', '\xCC', '\x2', '\x5DF', '\x5E0', '\a', '\t', '\x2', '\x2', 
		'\x5E0', '\x5E1', '\a', '\x1FA', '\x2', '\x2', '\x5E1', '\x5E2', '\a', 
		'\x2A8', '\x2', '\x2', '\x5E2', '\x5EE', '\x3', '\x2', '\x2', '\x2', '\x5E3', 
		'\x5E4', '\a', '\t', '\x2', '\x2', '\x5E4', '\x5E5', '\a', '\x95', '\x2', 
		'\x2', '\x5E5', '\x5E6', '\a', '\x1C7', '\x2', '\x2', '\x5E6', '\x5E7', 
		'\a', '\xFD', '\x2', '\x2', '\x5E7', '\x5E8', '\x5', '\x196', '\xCC', 
		'\x2', '\x5E8', '\x5E9', '\a', '\t', '\x2', '\x2', '\x5E9', '\x5EA', '\a', 
		'\x95', '\x2', '\x2', '\x5EA', '\x5EB', '\a', '\x1C7', '\x2', '\x2', '\x5EB', 
		'\x5EC', '\a', '\x2A8', '\x2', '\x2', '\x5EC', '\x5EE', '\x3', '\x2', 
		'\x2', '\x2', '\x5ED', '\x5C9', '\x3', '\x2', '\x2', '\x2', '\x5ED', '\x5D1', 
		'\x3', '\x2', '\x2', '\x2', '\x5ED', '\x5DB', '\x3', '\x2', '\x2', '\x2', 
		'\x5ED', '\x5E3', '\x3', '\x2', '\x2', '\x2', '\x5EE', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\x5EF', '\x60A', '\a', '\xE', '\x2', '\x2', '\x5F0', '\x60A', 
		'\a', '\xF', '\x2', '\x2', '\x5F1', '\x5F2', '\a', '\x16', '\x2', '\x2', 
		'\x5F2', '\x60A', '\a', '\x1FC', '\x2', '\x2', '\x5F3', '\x60A', '\a', 
		'\x19', '\x2', '\x2', '\x5F4', '\x60A', '\a', 'P', '\x2', '\x2', '\x5F5', 
		'\x60A', '\a', 'h', '\x2', '\x2', '\x5F6', '\x5F7', '\a', '\x8E', '\x2', 
		'\x2', '\x5F7', '\x60A', '\a', '\x1FC', '\x2', '\x2', '\x5F8', '\x60A', 
		'\a', '\x93', '\x2', '\x2', '\x5F9', '\x60A', '\a', '\xD1', '\x2', '\x2', 
		'\x5FA', '\x60A', '\a', '\x144', '\x2', '\x2', '\x5FB', '\x60A', '\a', 
		'\x1B0', '\x2', '\x2', '\x5FC', '\x60A', '\a', '\x1BF', '\x2', '\x2', 
		'\x5FD', '\x60A', '\a', '\x227', '\x2', '\x2', '\x5FE', '\x60A', '\a', 
		'y', '\x2', '\x2', '\x5FF', '\x60A', '\a', '\x1F8', '\x2', '\x2', '\x600', 
		'\x60A', '\a', '\x1E4', '\x2', '\x2', '\x601', '\x60A', '\a', 'w', '\x2', 
		'\x2', '\x602', '\x60A', '\a', '\x11B', '\x2', '\x2', '\x603', '\x60A', 
		'\a', '\x11A', '\x2', '\x2', '\x604', '\x60A', '\a', '\x1DC', '\x2', '\x2', 
		'\x605', '\x60A', '\a', '\x205', '\x2', '\x2', '\x606', '\x60A', '\a', 
		'q', '\x2', '\x2', '\x607', '\x60A', '\a', '\x1D0', '\x2', '\x2', '\x608', 
		'\x60A', '\a', '\xC4', '\x2', '\x2', '\x609', '\x5EF', '\x3', '\x2', '\x2', 
		'\x2', '\x609', '\x5F0', '\x3', '\x2', '\x2', '\x2', '\x609', '\x5F1', 
		'\x3', '\x2', '\x2', '\x2', '\x609', '\x5F3', '\x3', '\x2', '\x2', '\x2', 
		'\x609', '\x5F4', '\x3', '\x2', '\x2', '\x2', '\x609', '\x5F5', '\x3', 
		'\x2', '\x2', '\x2', '\x609', '\x5F6', '\x3', '\x2', '\x2', '\x2', '\x609', 
		'\x5F8', '\x3', '\x2', '\x2', '\x2', '\x609', '\x5F9', '\x3', '\x2', '\x2', 
		'\x2', '\x609', '\x5FA', '\x3', '\x2', '\x2', '\x2', '\x609', '\x5FB', 
		'\x3', '\x2', '\x2', '\x2', '\x609', '\x5FC', '\x3', '\x2', '\x2', '\x2', 
		'\x609', '\x5FD', '\x3', '\x2', '\x2', '\x2', '\x609', '\x5FE', '\x3', 
		'\x2', '\x2', '\x2', '\x609', '\x5FF', '\x3', '\x2', '\x2', '\x2', '\x609', 
		'\x600', '\x3', '\x2', '\x2', '\x2', '\x609', '\x601', '\x3', '\x2', '\x2', 
		'\x2', '\x609', '\x602', '\x3', '\x2', '\x2', '\x2', '\x609', '\x603', 
		'\x3', '\x2', '\x2', '\x2', '\x609', '\x604', '\x3', '\x2', '\x2', '\x2', 
		'\x609', '\x605', '\x3', '\x2', '\x2', '\x2', '\x609', '\x606', '\x3', 
		'\x2', '\x2', '\x2', '\x609', '\x607', '\x3', '\x2', '\x2', '\x2', '\x609', 
		'\x608', '\x3', '\x2', '\x2', '\x2', '\x60A', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x60B', '\x610', '\x5', 'N', '(', '\x2', '\x60C', '\x60D', '\a', 
		'\x16D', '\x2', '\x2', '\x60D', '\x60F', '\x5', 'N', '(', '\x2', '\x60E', 
		'\x60C', '\x3', '\x2', '\x2', '\x2', '\x60F', '\x612', '\x3', '\x2', '\x2', 
		'\x2', '\x610', '\x60E', '\x3', '\x2', '\x2', '\x2', '\x610', '\x611', 
		'\x3', '\x2', '\x2', '\x2', '\x611', '\x613', '\x3', '\x2', '\x2', '\x2', 
		'\x612', '\x610', '\x3', '\x2', '\x2', '\x2', '\x613', '\x615', '\a', 
		'\x165', '\x2', '\x2', '\x614', '\x616', '\x5', 'P', ')', '\x2', '\x615', 
		'\x614', '\x3', '\x2', '\x2', '\x2', '\x615', '\x616', '\x3', '\x2', '\x2', 
		'\x2', '\x616', '\x617', '\x3', '\x2', '\x2', '\x2', '\x617', '\x618', 
		'\x5', '\x332', '\x19A', '\x2', '\x618', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x619', '\x61C', '\t', '\t', '\x2', '\x2', '\x61A', '\x61B', '\a', '\x15F', 
		'\x2', '\x2', '\x61B', '\x61D', '\x5', '\x340', '\x1A1', '\x2', '\x61C', 
		'\x61A', '\x3', '\x2', '\x2', '\x2', '\x61C', '\x61D', '\x3', '\x2', '\x2', 
		'\x2', '\x61D', 'O', '\x3', '\x2', '\x2', '\x2', '\x61E', '\x61F', '\a', 
		'\x141', '\x2', '\x2', '\x61F', '\x620', '\a', '\x20F', '\x2', '\x2', 
		'\x620', '\x621', '\x5', '\x332', '\x19A', '\x2', '\x621', '\x622', '\a', 
		'\x15F', '\x2', '\x2', '\x622', 'Q', '\x3', '\x2', '\x2', '\x2', '\x623', 
		'\x625', '\a', '\x1A9', '\x2', '\x2', '\x624', '\x626', '\x5', 'T', '+', 
		'\x2', '\x625', '\x624', '\x3', '\x2', '\x2', '\x2', '\x626', '\x627', 
		'\x3', '\x2', '\x2', '\x2', '\x627', '\x625', '\x3', '\x2', '\x2', '\x2', 
		'\x627', '\x628', '\x3', '\x2', '\x2', '\x2', '\x628', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\x629', '\x62A', '\t', '\n', '\x2', '\x2', '\x62A', '\x62B', 
		'\x5', '\x2E8', '\x175', '\x2', '\x62B', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x62C', '\x62D', '\a', '\x93', '\x2', '\x2', '\x62D', '\x62F', '\a', 
		'\x229', '\x2', '\x2', '\x62E', '\x630', '\a', '\x31', '\x2', '\x2', '\x62F', 
		'\x62E', '\x3', '\x2', '\x2', '\x2', '\x62F', '\x630', '\x3', '\x2', '\x2', 
		'\x2', '\x630', '\x631', '\x3', '\x2', '\x2', '\x2', '\x631', '\x633', 
		'\x5', '\x318', '\x18D', '\x2', '\x632', '\x634', '\t', '\v', '\x2', '\x2', 
		'\x633', '\x632', '\x3', '\x2', '\x2', '\x2', '\x633', '\x634', '\x3', 
		'\x2', '\x2', '\x2', '\x634', '\x635', '\x3', '\x2', '\x2', '\x2', '\x635', 
		'\x636', '\a', '\x2A8', '\x2', '\x2', '\x636', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\x637', '\x638', '\a', '\xE', '\x2', '\x2', '\x638', '\x639', 
		'\a', '\x229', '\x2', '\x2', '\x639', '\x63F', '\x5', '\x318', '\x18D', 
		'\x2', '\x63A', '\x640', '\x5', 'Z', '.', '\x2', '\x63B', '\x640', '\x5', 
		'\\', '/', '\x2', '\x63C', '\x640', '\x5', '^', '\x30', '\x2', '\x63D', 
		'\x640', '\x5', '\x66', '\x34', '\x2', '\x63E', '\x640', '\x5', '\x88', 
		'\x45', '\x2', '\x63F', '\x63A', '\x3', '\x2', '\x2', '\x2', '\x63F', 
		'\x63B', '\x3', '\x2', '\x2', '\x2', '\x63F', '\x63C', '\x3', '\x2', '\x2', 
		'\x2', '\x63F', '\x63D', '\x3', '\x2', '\x2', '\x2', '\x63F', '\x63E', 
		'\x3', '\x2', '\x2', '\x2', '\x640', '\x642', '\x3', '\x2', '\x2', '\x2', 
		'\x641', '\x643', '\x5', 'h', '\x35', '\x2', '\x642', '\x641', '\x3', 
		'\x2', '\x2', '\x2', '\x642', '\x643', '\x3', '\x2', '\x2', '\x2', '\x643', 
		'\x644', '\x3', '\x2', '\x2', '\x2', '\x644', '\x645', '\a', '\x2A8', 
		'\x2', '\x2', '\x645', 'Y', '\x3', '\x2', '\x2', '\x2', '\x646', '\x648', 
		'\a', 'T', '\x2', '\x2', '\x647', '\x649', '\a', 'z', '\x2', '\x2', '\x648', 
		'\x647', '\x3', '\x2', '\x2', '\x2', '\x648', '\x649', '\x3', '\x2', '\x2', 
		'\x2', '\x649', '\x64B', '\x3', '\x2', '\x2', '\x2', '\x64A', '\x64C', 
		'\t', '\f', '\x2', '\x2', '\x64B', '\x64A', '\x3', '\x2', '\x2', '\x2', 
		'\x64B', '\x64C', '\x3', '\x2', '\x2', '\x2', '\x64C', '\x650', '\x3', 
		'\x2', '\x2', '\x2', '\x64D', '\x64F', '\x5', '\x136', '\x9C', '\x2', 
		'\x64E', '\x64D', '\x3', '\x2', '\x2', '\x2', '\x64F', '\x652', '\x3', 
		'\x2', '\x2', '\x2', '\x650', '\x64E', '\x3', '\x2', '\x2', '\x2', '\x650', 
		'\x651', '\x3', '\x2', '\x2', '\x2', '\x651', '\x655', '\x3', '\x2', '\x2', 
		'\x2', '\x652', '\x650', '\x3', '\x2', '\x2', '\x2', '\x653', '\x654', 
		'\a', '\x1BD', '\x2', '\x2', '\x654', '\x656', '\a', '\x1E1', '\x2', '\x2', 
		'\x655', '\x653', '\x3', '\x2', '\x2', '\x2', '\x655', '\x656', '\x3', 
		'\x2', '\x2', '\x2', '\x656', '[', '\x3', '\x2', '\x2', '\x2', '\x657', 
		'\x659', '\a', '\x1B1', '\x2', '\x2', '\x658', '\x65A', '\x5', '\x134', 
		'\x9B', '\x2', '\x659', '\x658', '\x3', '\x2', '\x2', '\x2', '\x659', 
		'\x65A', '\x3', '\x2', '\x2', '\x2', '\x65A', '\x65B', '\x3', '\x2', '\x2', 
		'\x2', '\x65B', '\x65C', '\a', '\x14', '\x2', '\x2', '\x65C', '\x65D', 
		'\a', '\x15C', '\x2', '\x2', '\x65D', '\x65E', '\a', '\x296', '\x2', '\x2', 
		'\x65E', '\x663', '\x5', '\x8A', '\x46', '\x2', '\x65F', '\x660', '\a', 
		'\x29C', '\x2', '\x2', '\x660', '\x662', '\x5', '\x8A', '\x46', '\x2', 
		'\x661', '\x65F', '\x3', '\x2', '\x2', '\x2', '\x662', '\x665', '\x3', 
		'\x2', '\x2', '\x2', '\x663', '\x661', '\x3', '\x2', '\x2', '\x2', '\x663', 
		'\x664', '\x3', '\x2', '\x2', '\x2', '\x664', '\x666', '\x3', '\x2', '\x2', 
		'\x2', '\x665', '\x663', '\x3', '\x2', '\x2', '\x2', '\x666', '\x667', 
		'\a', '\x297', '\x2', '\x2', '\x667', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x668', '\x66D', '\x5', '`', '\x31', '\x2', '\x669', '\x66A', '\a', '\x29C', 
		'\x2', '\x2', '\x66A', '\x66C', '\x5', '`', '\x31', '\x2', '\x66B', '\x669', 
		'\x3', '\x2', '\x2', '\x2', '\x66C', '\x66F', '\x3', '\x2', '\x2', '\x2', 
		'\x66D', '\x66B', '\x3', '\x2', '\x2', '\x2', '\x66D', '\x66E', '\x3', 
		'\x2', '\x2', '\x2', '\x66E', '_', '\x3', '\x2', '\x2', '\x2', '\x66F', 
		'\x66D', '\x3', '\x2', '\x2', '\x2', '\x670', '\x673', '\t', '\r', '\x2', 
		'\x2', '\x671', '\x674', '\x5', '\x9A', 'N', '\x2', '\x672', '\x674', 
		'\x5', '\x92', 'J', '\x2', '\x673', '\x671', '\x3', '\x2', '\x2', '\x2', 
		'\x673', '\x672', '\x3', '\x2', '\x2', '\x2', '\x674', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x675', '\x676', '\t', '\xE', '\x2', '\x2', '\x676', 
		'\x683', '\a', '\x18', '\x2', '\x2', '\x677', '\x684', '\x5', '\x64', 
		'\x33', '\x2', '\x678', '\x679', '\a', '\x296', '\x2', '\x2', '\x679', 
		'\x67E', '\x5', '\x64', '\x33', '\x2', '\x67A', '\x67B', '\a', '\x29C', 
		'\x2', '\x2', '\x67B', '\x67D', '\x5', '\x64', '\x33', '\x2', '\x67C', 
		'\x67A', '\x3', '\x2', '\x2', '\x2', '\x67D', '\x680', '\x3', '\x2', '\x2', 
		'\x2', '\x67E', '\x67C', '\x3', '\x2', '\x2', '\x2', '\x67E', '\x67F', 
		'\x3', '\x2', '\x2', '\x2', '\x67F', '\x681', '\x3', '\x2', '\x2', '\x2', 
		'\x680', '\x67E', '\x3', '\x2', '\x2', '\x2', '\x681', '\x682', '\a', 
		'\x297', '\x2', '\x2', '\x682', '\x684', '\x3', '\x2', '\x2', '\x2', '\x683', 
		'\x677', '\x3', '\x2', '\x2', '\x2', '\x683', '\x678', '\x3', '\x2', '\x2', 
		'\x2', '\x684', '\x63', '\x3', '\x2', '\x2', '\x2', '\x685', '\x687', 
		'\x5', '\x2F4', '\x17B', '\x2', '\x686', '\x688', '\x5', '\x350', '\x1A9', 
		'\x2', '\x687', '\x686', '\x3', '\x2', '\x2', '\x2', '\x687', '\x688', 
		'\x3', '\x2', '\x2', '\x2', '\x688', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x689', '\x68F', '\a', '\x135', '\x2', '\x2', '\x68A', '\x68B', '\a', 
		'\x111', '\x2', '\x2', '\x68B', '\x690', '\x5', '\x278', '\x13D', '\x2', 
		'\x68C', '\x68D', '\a', '\x99', '\x2', '\x2', '\x68D', '\x68E', '\a', 
		'\x229', '\x2', '\x2', '\x68E', '\x690', '\x5', '\x350', '\x1A9', '\x2', 
		'\x68F', '\x68A', '\x3', '\x2', '\x2', '\x2', '\x68F', '\x68C', '\x3', 
		'\x2', '\x2', '\x2', '\x690', 'g', '\x3', '\x2', '\x2', '\x2', '\x691', 
		'\x6A2', '\a', '\xFC', '\x2', '\x2', '\x692', '\x69C', '\a', '=', '\x2', 
		'\x2', '\x693', '\x694', '\a', '\x63', '\x2', '\x2', '\x694', '\x695', 
		'\a', '\x21F', '\x2', '\x2', '\x695', '\x69D', '\a', '\x202', '\x2', '\x2', 
		'\x696', '\x698', '\a', '\x154', '\x2', '\x2', '\x697', '\x696', '\x3', 
		'\x2', '\x2', '\x2', '\x697', '\x698', '\x3', '\x2', '\x2', '\x2', '\x698', 
		'\x699', '\x3', '\x2', '\x2', '\x2', '\x699', '\x69A', '\a', '\xE3', '\x2', 
		'\x2', '\x69A', '\x69B', '\a', '\x20F', '\x2', '\x2', '\x69B', '\x69D', 
		'\a', 'r', '\x2', '\x2', '\x69C', '\x693', '\x3', '\x2', '\x2', '\x2', 
		'\x69C', '\x697', '\x3', '\x2', '\x2', '\x2', '\x69C', '\x69D', '\x3', 
		'\x2', '\x2', '\x2', '\x69D', '\x69F', '\x3', '\x2', '\x2', '\x2', '\x69E', 
		'\x6A0', '\x5', 'j', '\x36', '\x2', '\x69F', '\x69E', '\x3', '\x2', '\x2', 
		'\x2', '\x69F', '\x6A0', '\x3', '\x2', '\x2', '\x2', '\x6A0', '\x6A2', 
		'\x3', '\x2', '\x2', '\x2', '\x6A1', '\x691', '\x3', '\x2', '\x2', '\x2', 
		'\x6A1', '\x692', '\x3', '\x2', '\x2', '\x2', '\x6A2', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x6A3', '\x6A5', '\a', '\xC6', '\x2', '\x2', '\x6A4', '\x6A3', 
		'\x3', '\x2', '\x2', '\x2', '\x6A4', '\x6A5', '\x3', '\x2', '\x2', '\x2', 
		'\x6A5', '\x6A6', '\x3', '\x2', '\x2', '\x2', '\x6A6', '\x6A7', '\a', 
		'\xAB', '\x2', '\x2', '\x6A7', '\x6A8', '\a', '\xFB', '\x2', '\x2', '\x6A8', 
		'\x6A9', '\x5', '\x332', '\x19A', '\x2', '\x6A9', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\x6AA', '\x6AD', '\a', 'h', '\x2', '\x2', '\x6AB', '\x6AC', '\a', 
		'\x16D', '\x2', '\x2', '\x6AC', '\x6AE', '\a', '\x1B1', '\x2', '\x2', 
		'\x6AD', '\x6AB', '\x3', '\x2', '\x2', '\x2', '\x6AD', '\x6AE', '\x3', 
		'\x2', '\x2', '\x2', '\x6AE', '\x6AF', '\x3', '\x2', '\x2', '\x2', '\x6AF', 
		'\x6B2', '\a', '\x229', '\x2', '\x2', '\x6B0', '\x6B3', '\x5', 'n', '\x38', 
		'\x2', '\x6B1', '\x6B3', '\x5', 'z', '>', '\x2', '\x6B2', '\x6B0', '\x3', 
		'\x2', '\x2', '\x2', '\x6B2', '\x6B1', '\x3', '\x2', '\x2', '\x2', '\x6B3', 
		'\x6B4', '\x3', '\x2', '\x2', '\x2', '\x6B4', '\x6B5', '\a', '\x2A8', 
		'\x2', '\x2', '\x6B5', 'm', '\x3', '\x2', '\x2', '\x2', '\x6B6', '\x6B9', 
		'\x5', '\x318', '\x18D', '\x2', '\x6B7', '\x6B8', '\a', '\x160', '\x2', 
		'\x2', '\x6B8', '\x6BA', '\a', '\x292', '\x2', '\x2', '\x6B9', '\x6B7', 
		'\x3', '\x2', '\x2', '\x2', '\x6B9', '\x6BA', '\x3', '\x2', '\x2', '\x2', 
		'\x6BA', '\x6BC', '\x3', '\x2', '\x2', '\x2', '\x6BB', '\x6BD', '\x5', 
		'p', '\x39', '\x2', '\x6BC', '\x6BB', '\x3', '\x2', '\x2', '\x2', '\x6BC', 
		'\x6BD', '\x3', '\x2', '\x2', '\x2', '\x6BD', 'o', '\x3', '\x2', '\x2', 
		'\x2', '\x6BE', '\x6C0', '\x5', '\x134', '\x9B', '\x2', '\x6BF', '\x6BE', 
		'\x3', '\x2', '\x2', '\x2', '\x6BF', '\x6C0', '\x3', '\x2', '\x2', '\x2', 
		'\x6C0', '\x6C3', '\x3', '\x2', '\x2', '\x2', '\x6C1', '\x6C4', '\x5', 
		'r', ':', '\x2', '\x6C2', '\x6C4', '\x5', 't', ';', '\x2', '\x6C3', '\x6C1', 
		'\x3', '\x2', '\x2', '\x2', '\x6C3', '\x6C2', '\x3', '\x2', '\x2', '\x2', 
		'\x6C4', '\x6C6', '\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6C7', '\x5', 
		'x', '=', '\x2', '\x6C6', '\x6C5', '\x3', '\x2', '\x2', '\x2', '\x6C6', 
		'\x6C7', '\x3', '\x2', '\x2', '\x2', '\x6C7', '\x6D3', '\x3', '\x2', '\x2', 
		'\x2', '\x6C8', '\x6C9', '\a', '\x296', '\x2', '\x2', '\x6C9', '\x6CE', 
		'\x5', '\x8A', '\x46', '\x2', '\x6CA', '\x6CB', '\a', '\x29C', '\x2', 
		'\x2', '\x6CB', '\x6CD', '\x5', '\x8A', '\x46', '\x2', '\x6CC', '\x6CA', 
		'\x3', '\x2', '\x2', '\x2', '\x6CD', '\x6D0', '\x3', '\x2', '\x2', '\x2', 
		'\x6CE', '\x6CC', '\x3', '\x2', '\x2', '\x2', '\x6CE', '\x6CF', '\x3', 
		'\x2', '\x2', '\x2', '\x6CF', '\x6D1', '\x3', '\x2', '\x2', '\x2', '\x6D0', 
		'\x6CE', '\x3', '\x2', '\x2', '\x2', '\x6D1', '\x6D2', '\a', '\x297', 
		'\x2', '\x2', '\x6D2', '\x6D4', '\x3', '\x2', '\x2', '\x2', '\x6D3', '\x6C8', 
		'\x3', '\x2', '\x2', '\x2', '\x6D3', '\x6D4', '\x3', '\x2', '\x2', '\x2', 
		'\x6D4', '\x6D8', '\x3', '\x2', '\x2', '\x2', '\x6D5', '\x6D7', '\x5', 
		'\x88', '\x45', '\x2', '\x6D6', '\x6D5', '\x3', '\x2', '\x2', '\x2', '\x6D7', 
		'\x6DA', '\x3', '\x2', '\x2', '\x2', '\x6D8', '\x6D6', '\x3', '\x2', '\x2', 
		'\x2', '\x6D8', '\x6D9', '\x3', '\x2', '\x2', '\x2', '\x6D9', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\x6DA', '\x6D8', '\x3', '\x2', '\x2', '\x2', '\x6DB', 
		'\x6DF', '\t', '\x2', '\x2', '\x2', '\x6DC', '\x6E0', '\a', '\x15C', '\x2', 
		'\x2', '\x6DD', '\x6E0', '\x5', '\x162', '\xB2', '\x2', '\x6DE', '\x6E0', 
		'\x5', 'v', '<', '\x2', '\x6DF', '\x6DC', '\x3', '\x2', '\x2', '\x2', 
		'\x6DF', '\x6DD', '\x3', '\x2', '\x2', '\x2', '\x6DF', '\x6DE', '\x3', 
		'\x2', '\x2', '\x2', '\x6E0', 's', '\x3', '\x2', '\x2', '\x2', '\x6E1', 
		'\x6E2', '\a', '\x22B', '\x2', '\x2', '\x6E2', '\x6E3', '\x5', '\x350', 
		'\x1A9', '\x2', '\x6E3', 'u', '\x3', '\x2', '\x2', '\x2', '\x6E4', '\x6E5', 
		'\a', '\x20F', '\x2', '\x2', '\x6E5', '\x6E6', '\a', '\x15F', '\x2', '\x2', 
		'\x6E6', '\x6E9', '\x5', '\x350', '\x1A9', '\x2', '\x6E7', '\x6E8', '\a', 
		'\x154', '\x2', '\x2', '\x6E8', '\x6EA', '\a', '\x157', '\x2', '\x2', 
		'\x6E9', '\x6E7', '\x3', '\x2', '\x2', '\x2', '\x6E9', '\x6EA', '\x3', 
		'\x2', '\x2', '\x2', '\x6EA', 'w', '\x3', '\x2', '\x2', '\x2', '\x6EB', 
		'\x6EC', '\a', '\xB5', '\x2', '\x2', '\x6EC', '\x6ED', '\a', '\x139', 
		'\x2', '\x2', '\x6ED', '\x6EE', '\x5', '\x278', '\x13D', '\x2', '\x6EE', 
		'\x6EF', '\a', '\x105', '\x2', '\x2', '\x6EF', '\x6F0', '\a', '\x100', 
		'\x2', '\x2', '\x6F0', '\x6F1', '\a', '\x23B', '\x2', '\x2', '\x6F1', 
		'\x6F2', '\t', '\xF', '\x2', '\x2', '\x6F2', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x6F3', '\x6F4', '\a', '\x31', '\x2', '\x2', '\x6F4', '\x6F5', 
		'\x5', '\x318', '\x18D', '\x2', '\x6F5', '\x6F7', '\t', '\x2', '\x2', 
		'\x2', '\x6F6', '\x6F8', '\x5', '|', '?', '\x2', '\x6F7', '\x6F6', '\x3', 
		'\x2', '\x2', '\x2', '\x6F8', '\x6F9', '\x3', '\x2', '\x2', '\x2', '\x6F9', 
		'\x6F7', '\x3', '\x2', '\x2', '\x2', '\x6F9', '\x6FA', '\x3', '\x2', '\x2', 
		'\x2', '\x6FA', '\x6FB', '\x3', '\x2', '\x2', '\x2', '\x6FB', '\x6FC', 
		'\a', '\xA1', '\x2', '\x2', '\x6FC', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x6FD', '\x700', '\x5', '~', '@', '\x2', '\x6FE', '\x700', '\x5', '\x80', 
		'\x41', '\x2', '\x6FF', '\x6FD', '\x3', '\x2', '\x2', '\x2', '\x6FF', 
		'\x6FE', '\x3', '\x2', '\x2', '\x2', '\x700', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x701', '\x702', '\t', '\x10', '\x2', '\x2', '\x702', '\x703', 
		'\a', '\x12A', '\x2', '\x2', '\x703', '\x704', '\x5', '\x84', '\x43', 
		'\x2', '\x704', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x705', '\x709', 
		'\t', '\x11', '\x2', '\x2', '\x706', '\x70A', '\x5', '\x82', '\x42', '\x2', 
		'\x707', '\x70A', '\x5', '\x84', '\x43', '\x2', '\x708', '\x70A', '\x5', 
		'\x86', '\x44', '\x2', '\x709', '\x706', '\x3', '\x2', '\x2', '\x2', '\x709', 
		'\x707', '\x3', '\x2', '\x2', '\x2', '\x709', '\x708', '\x3', '\x2', '\x2', 
		'\x2', '\x70A', '\x81', '\x3', '\x2', '\x2', '\x2', '\x70B', '\x70C', 
		'\a', '\x197', '\x2', '\x2', '\x70C', '\x70D', '\x5', '\x320', '\x191', 
		'\x2', '\x70D', '\x70E', '\a', '\x296', '\x2', '\x2', '\x70E', '\x713', 
		'\x5', '\xA0', 'Q', '\x2', '\x70F', '\x710', '\a', '\x29C', '\x2', '\x2', 
		'\x710', '\x712', '\x5', '\xA0', 'Q', '\x2', '\x711', '\x70F', '\x3', 
		'\x2', '\x2', '\x2', '\x712', '\x715', '\x3', '\x2', '\x2', '\x2', '\x713', 
		'\x711', '\x3', '\x2', '\x2', '\x2', '\x713', '\x714', '\x3', '\x2', '\x2', 
		'\x2', '\x714', '\x716', '\x3', '\x2', '\x2', '\x2', '\x715', '\x713', 
		'\x3', '\x2', '\x2', '\x2', '\x716', '\x717', '\a', '\x297', '\x2', '\x2', 
		'\x717', '\x722', '\t', '\x2', '\x2', '\x2', '\x718', '\x723', '\x5', 
		'\x138', '\x9D', '\x2', '\x719', '\x71B', '\a', '}', '\x2', '\x2', '\x71A', 
		'\x719', '\x3', '\x2', '\x2', '\x2', '\x71A', '\x71B', '\x3', '\x2', '\x2', 
		'\x2', '\x71B', '\x71D', '\x3', '\x2', '\x2', '\x2', '\x71C', '\x71E', 
		'\x5', '\x146', '\xA4', '\x2', '\x71D', '\x71C', '\x3', '\x2', '\x2', 
		'\x2', '\x71D', '\x71E', '\x3', '\x2', '\x2', '\x2', '\x71E', '\x71F', 
		'\x3', '\x2', '\x2', '\x2', '\x71F', '\x720', '\x5', '\x192', '\xCA', 
		'\x2', '\x720', '\x721', '\a', '\x2A8', '\x2', '\x2', '\x721', '\x723', 
		'\x3', '\x2', '\x2', '\x2', '\x722', '\x718', '\x3', '\x2', '\x2', '\x2', 
		'\x722', '\x71A', '\x3', '\x2', '\x2', '\x2', '\x723', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x724', '\x725', '\a', '\xCD', '\x2', '\x2', '\x725', 
		'\x731', '\x5', '\x31E', '\x190', '\x2', '\x726', '\x727', '\a', '\x296', 
		'\x2', '\x2', '\x727', '\x72C', '\x5', '\xA0', 'Q', '\x2', '\x728', '\x729', 
		'\a', '\x29C', '\x2', '\x2', '\x729', '\x72B', '\x5', '\xA0', 'Q', '\x2', 
		'\x72A', '\x728', '\x3', '\x2', '\x2', '\x2', '\x72B', '\x72E', '\x3', 
		'\x2', '\x2', '\x2', '\x72C', '\x72A', '\x3', '\x2', '\x2', '\x2', '\x72C', 
		'\x72D', '\x3', '\x2', '\x2', '\x2', '\x72D', '\x72F', '\x3', '\x2', '\x2', 
		'\x2', '\x72E', '\x72C', '\x3', '\x2', '\x2', '\x2', '\x72F', '\x730', 
		'\a', '\x297', '\x2', '\x2', '\x730', '\x732', '\x3', '\x2', '\x2', '\x2', 
		'\x731', '\x726', '\x3', '\x2', '\x2', '\x2', '\x731', '\x732', '\x3', 
		'\x2', '\x2', '\x2', '\x732', '\x733', '\x3', '\x2', '\x2', '\x2', '\x733', 
		'\x734', '\a', '\x1BC', '\x2', '\x2', '\x734', '\x735', '\x5', '\x350', 
		'\x1A9', '\x2', '\x735', '\x740', '\t', '\x2', '\x2', '\x2', '\x736', 
		'\x741', '\x5', '\x138', '\x9D', '\x2', '\x737', '\x739', '\a', '}', '\x2', 
		'\x2', '\x738', '\x737', '\x3', '\x2', '\x2', '\x2', '\x738', '\x739', 
		'\x3', '\x2', '\x2', '\x2', '\x739', '\x73B', '\x3', '\x2', '\x2', '\x2', 
		'\x73A', '\x73C', '\x5', '\x146', '\xA4', '\x2', '\x73B', '\x73A', '\x3', 
		'\x2', '\x2', '\x2', '\x73B', '\x73C', '\x3', '\x2', '\x2', '\x2', '\x73C', 
		'\x73D', '\x3', '\x2', '\x2', '\x2', '\x73D', '\x73E', '\x5', '\x192', 
		'\xCA', '\x2', '\x73E', '\x73F', '\a', '\x2A8', '\x2', '\x2', '\x73F', 
		'\x741', '\x3', '\x2', '\x2', '\x2', '\x740', '\x736', '\x3', '\x2', '\x2', 
		'\x2', '\x740', '\x738', '\x3', '\x2', '\x2', '\x2', '\x741', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x742', '\x744', '\a', '\xBC', '\x2', '\x2', 
		'\x743', '\x742', '\x3', '\x2', '\x2', '\x2', '\x743', '\x744', '\x3', 
		'\x2', '\x2', '\x2', '\x744', '\x746', '\x3', '\x2', '\x2', '\x2', '\x745', 
		'\x747', '\a', '\xF5', '\x2', '\x2', '\x746', '\x745', '\x3', '\x2', '\x2', 
		'\x2', '\x746', '\x747', '\x3', '\x2', '\x2', '\x2', '\x747', '\x748', 
		'\x3', '\x2', '\x2', '\x2', '\x748', '\x749', '\a', ']', '\x2', '\x2', 
		'\x749', '\x74A', '\a', '\xCD', '\x2', '\x2', '\x74A', '\x75C', '\x5', 
		'\x350', '\x1A9', '\x2', '\x74B', '\x74C', '\a', '\x296', '\x2', '\x2', 
		'\x74C', '\x74D', '\a', '\x1D7', '\x2', '\x2', '\x74D', '\x74E', '\a', 
		'\xED', '\x2', '\x2', '\x74E', '\x74F', '\a', '\x171', '\x2', '\x2', '\x74F', 
		'\x750', '\x5', '\x350', '\x1A9', '\x2', '\x750', '\x751', '\a', '\x29C', 
		'\x2', '\x2', '\x751', '\x752', '\x3', '\x2', '\x2', '\x2', '\x752', '\x757', 
		'\x5', '\xA0', 'Q', '\x2', '\x753', '\x754', '\a', '\x29C', '\x2', '\x2', 
		'\x754', '\x756', '\x5', '\xA0', 'Q', '\x2', '\x755', '\x753', '\x3', 
		'\x2', '\x2', '\x2', '\x756', '\x759', '\x3', '\x2', '\x2', '\x2', '\x757', 
		'\x755', '\x3', '\x2', '\x2', '\x2', '\x757', '\x758', '\x3', '\x2', '\x2', 
		'\x2', '\x758', '\x75A', '\x3', '\x2', '\x2', '\x2', '\x759', '\x757', 
		'\x3', '\x2', '\x2', '\x2', '\x75A', '\x75B', '\a', '\x297', '\x2', '\x2', 
		'\x75B', '\x75D', '\x3', '\x2', '\x2', '\x2', '\x75C', '\x74B', '\x3', 
		'\x2', '\x2', '\x2', '\x75C', '\x75D', '\x3', '\x2', '\x2', '\x2', '\x75D', 
		'\x75E', '\x3', '\x2', '\x2', '\x2', '\x75E', '\x75F', '\a', '\x1BC', 
		'\x2', '\x2', '\x75F', '\x760', '\a', '\x1D7', '\x2', '\x2', '\x760', 
		'\x761', '\a', '\x14', '\x2', '\x2', '\x761', '\x762', '\a', '\x1B8', 
		'\x2', '\x2', '\x762', '\x76D', '\t', '\x2', '\x2', '\x2', '\x763', '\x76E', 
		'\x5', '\x138', '\x9D', '\x2', '\x764', '\x766', '\a', '}', '\x2', '\x2', 
		'\x765', '\x764', '\x3', '\x2', '\x2', '\x2', '\x765', '\x766', '\x3', 
		'\x2', '\x2', '\x2', '\x766', '\x768', '\x3', '\x2', '\x2', '\x2', '\x767', 
		'\x769', '\x5', '\x146', '\xA4', '\x2', '\x768', '\x767', '\x3', '\x2', 
		'\x2', '\x2', '\x768', '\x769', '\x3', '\x2', '\x2', '\x2', '\x769', '\x76A', 
		'\x3', '\x2', '\x2', '\x2', '\x76A', '\x76B', '\x5', '\x192', '\xCA', 
		'\x2', '\x76B', '\x76C', '\a', '\x2A8', '\x2', '\x2', '\x76C', '\x76E', 
		'\x3', '\x2', '\x2', '\x2', '\x76D', '\x763', '\x3', '\x2', '\x2', '\x2', 
		'\x76D', '\x765', '\x3', '\x2', '\x2', '\x2', '\x76E', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x76F', '\x771', '\a', '\x154', '\x2', '\x2', '\x770', 
		'\x76F', '\x3', '\x2', '\x2', '\x2', '\x770', '\x771', '\x3', '\x2', '\x2', 
		'\x2', '\x771', '\x772', '\x3', '\x2', '\x2', '\x2', '\x772', '\x773', 
		'\t', '\x12', '\x2', '\x2', '\x773', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x774', '\x775', '\x5', '\x36C', '\x1B7', '\x2', '\x775', '\x777', '\x5', 
		'\x350', '\x1A9', '\x2', '\x776', '\x778', '\x5', '\x8C', 'G', '\x2', 
		'\x777', '\x776', '\x3', '\x2', '\x2', '\x2', '\x777', '\x778', '\x3', 
		'\x2', '\x2', '\x2', '\x778', '\x77B', '\x3', '\x2', '\x2', '\x2', '\x779', 
		'\x77B', '\x5', '\x8E', 'H', '\x2', '\x77A', '\x774', '\x3', '\x2', '\x2', 
		'\x2', '\x77A', '\x779', '\x3', '\x2', '\x2', '\x2', '\x77B', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', '\x77C', '\x77D', '\a', '\xB5', '\x2', '\x2', 
		'\x77D', '\x77E', '\a', '\x139', '\x2', '\x2', '\x77E', '\x77F', '\x5', 
		'\x278', '\x13D', '\x2', '\x77F', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x780', '\x782', '\x5', '\x88', '\x45', '\x2', '\x781', '\x780', '\x3', 
		'\x2', '\x2', '\x2', '\x781', '\x782', '\x3', '\x2', '\x2', '\x2', '\x782', 
		'\x784', '\x3', '\x2', '\x2', '\x2', '\x783', '\x785', '\x5', '\x90', 
		'I', '\x2', '\x784', '\x783', '\x3', '\x2', '\x2', '\x2', '\x785', '\x786', 
		'\x3', '\x2', '\x2', '\x2', '\x786', '\x784', '\x3', '\x2', '\x2', '\x2', 
		'\x786', '\x787', '\x3', '\x2', '\x2', '\x2', '\x787', '\x78A', '\x3', 
		'\x2', '\x2', '\x2', '\x788', '\x789', '\a', '\x29C', '\x2', '\x2', '\x789', 
		'\x78B', '\x5', '\x9C', 'O', '\x2', '\x78A', '\x788', '\x3', '\x2', '\x2', 
		'\x2', '\x78A', '\x78B', '\x3', '\x2', '\x2', '\x2', '\x78B', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x78C', '\x790', '\x5', '\x92', 'J', '\x2', 
		'\x78D', '\x790', '\x5', '\x98', 'M', '\x2', '\x78E', '\x790', '\x5', 
		'\x9A', 'N', '\x2', '\x78F', '\x78C', '\x3', '\x2', '\x2', '\x2', '\x78F', 
		'\x78D', '\x3', '\x2', '\x2', '\x2', '\x78F', '\x78E', '\x3', '\x2', '\x2', 
		'\x2', '\x790', '\x91', '\x3', '\x2', '\x2', '\x2', '\x791', '\x794', 
		'\t', '\x11', '\x2', '\x2', '\x792', '\x795', '\x5', '\x94', 'K', '\x2', 
		'\x793', '\x795', '\x5', '\x96', 'L', '\x2', '\x794', '\x792', '\x3', 
		'\x2', '\x2', '\x2', '\x794', '\x793', '\x3', '\x2', '\x2', '\x2', '\x795', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x796', '\x797', '\a', '\x197', '\x2', 
		'\x2', '\x797', '\x798', '\x5', '\x320', '\x191', '\x2', '\x798', '\x799', 
		'\a', '\x296', '\x2', '\x2', '\x799', '\x79E', '\x5', '\xA0', 'Q', '\x2', 
		'\x79A', '\x79B', '\a', '\x29C', '\x2', '\x2', '\x79B', '\x79D', '\x5', 
		'\xA0', 'Q', '\x2', '\x79C', '\x79A', '\x3', '\x2', '\x2', '\x2', '\x79D', 
		'\x7A0', '\x3', '\x2', '\x2', '\x2', '\x79E', '\x79C', '\x3', '\x2', '\x2', 
		'\x2', '\x79E', '\x79F', '\x3', '\x2', '\x2', '\x2', '\x79F', '\x7A1', 
		'\x3', '\x2', '\x2', '\x2', '\x7A0', '\x79E', '\x3', '\x2', '\x2', '\x2', 
		'\x7A1', '\x7A4', '\a', '\x297', '\x2', '\x2', '\x7A2', '\x7A3', '\t', 
		'\x2', '\x2', '\x2', '\x7A3', '\x7A5', '\x5', '\x138', '\x9D', '\x2', 
		'\x7A4', '\x7A2', '\x3', '\x2', '\x2', '\x2', '\x7A4', '\x7A5', '\x3', 
		'\x2', '\x2', '\x2', '\x7A5', '\x95', '\x3', '\x2', '\x2', '\x2', '\x7A6', 
		'\x7A7', '\a', '\xCD', '\x2', '\x2', '\x7A7', '\x7B3', '\x5', '\x31E', 
		'\x190', '\x2', '\x7A8', '\x7A9', '\a', '\x296', '\x2', '\x2', '\x7A9', 
		'\x7AE', '\x5', '\xA0', 'Q', '\x2', '\x7AA', '\x7AB', '\a', '\x29C', '\x2', 
		'\x2', '\x7AB', '\x7AD', '\x5', '\xA0', 'Q', '\x2', '\x7AC', '\x7AA', 
		'\x3', '\x2', '\x2', '\x2', '\x7AD', '\x7B0', '\x3', '\x2', '\x2', '\x2', 
		'\x7AE', '\x7AC', '\x3', '\x2', '\x2', '\x2', '\x7AE', '\x7AF', '\x3', 
		'\x2', '\x2', '\x2', '\x7AF', '\x7B1', '\x3', '\x2', '\x2', '\x2', '\x7B0', 
		'\x7AE', '\x3', '\x2', '\x2', '\x2', '\x7B1', '\x7B2', '\a', '\x297', 
		'\x2', '\x2', '\x7B2', '\x7B4', '\x3', '\x2', '\x2', '\x2', '\x7B3', '\x7A8', 
		'\x3', '\x2', '\x2', '\x2', '\x7B3', '\x7B4', '\x3', '\x2', '\x2', '\x2', 
		'\x7B4', '\x7B5', '\x3', '\x2', '\x2', '\x2', '\x7B5', '\x7BA', '\a', 
		'\x1BC', '\x2', '\x2', '\x7B6', '\x7BB', '\x5', '\x350', '\x1A9', '\x2', 
		'\x7B7', '\x7B8', '\a', '\x1D7', '\x2', '\x2', '\x7B8', '\x7B9', '\a', 
		'\x14', '\x2', '\x2', '\x7B9', '\x7BB', '\a', '\x1B8', '\x2', '\x2', '\x7BA', 
		'\x7B6', '\x3', '\x2', '\x2', '\x2', '\x7BA', '\x7B7', '\x3', '\x2', '\x2', 
		'\x2', '\x7BB', '\x7C4', '\x3', '\x2', '\x2', '\x2', '\x7BC', '\x7BD', 
		'\t', '\x2', '\x2', '\x2', '\x7BD', '\x7C5', '\x5', '\x138', '\x9D', '\x2', 
		'\x7BE', '\x7C0', '\a', '\xB5', '\x2', '\x2', '\x7BF', '\x7C1', '\a', 
		'\x241', '\x2', '\x2', '\x7C0', '\x7BF', '\x3', '\x2', '\x2', '\x2', '\x7C0', 
		'\x7C1', '\x3', '\x2', '\x2', '\x2', '\x7C1', '\x7C2', '\x3', '\x2', '\x2', 
		'\x2', '\x7C2', '\x7C3', '\a', '\x139', '\x2', '\x2', '\x7C3', '\x7C5', 
		'\x5', '\x278', '\x13D', '\x2', '\x7C4', '\x7BC', '\x3', '\x2', '\x2', 
		'\x2', '\x7C4', '\x7BE', '\x3', '\x2', '\x2', '\x2', '\x7C4', '\x7C5', 
		'\x3', '\x2', '\x2', '\x2', '\x7C5', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x7C6', '\x7C8', '\a', '\xBC', '\x2', '\x2', '\x7C7', '\x7C6', '\x3', 
		'\x2', '\x2', '\x2', '\x7C7', '\x7C8', '\x3', '\x2', '\x2', '\x2', '\x7C8', 
		'\x7CA', '\x3', '\x2', '\x2', '\x2', '\x7C9', '\x7CB', '\a', '\xF5', '\x2', 
		'\x2', '\x7CA', '\x7C9', '\x3', '\x2', '\x2', '\x2', '\x7CA', '\x7CB', 
		'\x3', '\x2', '\x2', '\x2', '\x7CB', '\x7CC', '\x3', '\x2', '\x2', '\x2', 
		'\x7CC', '\x7CD', '\a', ']', '\x2', '\x2', '\x7CD', '\x7CE', '\a', '\xCD', 
		'\x2', '\x2', '\x7CE', '\x7E0', '\x5', '\x350', '\x1A9', '\x2', '\x7CF', 
		'\x7D0', '\a', '\x296', '\x2', '\x2', '\x7D0', '\x7D1', '\a', '\x1D7', 
		'\x2', '\x2', '\x7D1', '\x7D2', '\a', '\xED', '\x2', '\x2', '\x7D2', '\x7D3', 
		'\a', '\x171', '\x2', '\x2', '\x7D3', '\x7D4', '\x5', '\x350', '\x1A9', 
		'\x2', '\x7D4', '\x7D5', '\a', '\x29C', '\x2', '\x2', '\x7D5', '\x7D6', 
		'\x3', '\x2', '\x2', '\x2', '\x7D6', '\x7DB', '\x5', '\xA0', 'Q', '\x2', 
		'\x7D7', '\x7D8', '\a', '\x29C', '\x2', '\x2', '\x7D8', '\x7DA', '\x5', 
		'\xA0', 'Q', '\x2', '\x7D9', '\x7D7', '\x3', '\x2', '\x2', '\x2', '\x7DA', 
		'\x7DD', '\x3', '\x2', '\x2', '\x2', '\x7DB', '\x7D9', '\x3', '\x2', '\x2', 
		'\x2', '\x7DB', '\x7DC', '\x3', '\x2', '\x2', '\x2', '\x7DC', '\x7DE', 
		'\x3', '\x2', '\x2', '\x2', '\x7DD', '\x7DB', '\x3', '\x2', '\x2', '\x2', 
		'\x7DE', '\x7DF', '\a', '\x297', '\x2', '\x2', '\x7DF', '\x7E1', '\x3', 
		'\x2', '\x2', '\x2', '\x7E0', '\x7CF', '\x3', '\x2', '\x2', '\x2', '\x7E0', 
		'\x7E1', '\x3', '\x2', '\x2', '\x2', '\x7E1', '\x7E2', '\x3', '\x2', '\x2', 
		'\x2', '\x7E2', '\x7E3', '\a', '\x1BC', '\x2', '\x2', '\x7E3', '\x7E4', 
		'\a', '\x1D7', '\x2', '\x2', '\x7E4', '\x7E5', '\a', '\x14', '\x2', '\x2', 
		'\x7E5', '\x7E8', '\a', '\x1B8', '\x2', '\x2', '\x7E6', '\x7E7', '\t', 
		'\x2', '\x2', '\x2', '\x7E7', '\x7E9', '\x5', '\x138', '\x9D', '\x2', 
		'\x7E8', '\x7E6', '\x3', '\x2', '\x2', '\x2', '\x7E8', '\x7E9', '\x3', 
		'\x2', '\x2', '\x2', '\x7E9', '\x99', '\x3', '\x2', '\x2', '\x2', '\x7EA', 
		'\x7EB', '\t', '\x10', '\x2', '\x2', '\x7EB', '\x7EC', '\a', '\x12A', 
		'\x2', '\x2', '\x7EC', '\x7ED', '\x5', '\x96', 'L', '\x2', '\x7ED', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x7EE', '\x7EF', '\a', '\x18E', '\x2', '\x2', 
		'\x7EF', '\x7F0', '\a', '\x1B6', '\x2', '\x2', '\x7F0', '\x7F1', '\a', 
		'\x296', '\x2', '\x2', '\x7F1', '\x7F6', '\x5', '\x9E', 'P', '\x2', '\x7F2', 
		'\x7F3', '\a', '\x29C', '\x2', '\x2', '\x7F3', '\x7F5', '\x5', '\x9E', 
		'P', '\x2', '\x7F4', '\x7F2', '\x3', '\x2', '\x2', '\x2', '\x7F5', '\x7F8', 
		'\x3', '\x2', '\x2', '\x2', '\x7F6', '\x7F4', '\x3', '\x2', '\x2', '\x2', 
		'\x7F6', '\x7F7', '\x3', '\x2', '\x2', '\x2', '\x7F7', '\x7F9', '\x3', 
		'\x2', '\x2', '\x2', '\x7F8', '\x7F6', '\x3', '\x2', '\x2', '\x2', '\x7F9', 
		'\x7FA', '\a', '\x297', '\x2', '\x2', '\x7FA', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\x7FB', '\x7FE', '\x5', '\x36C', '\x1B7', '\x2', '\x7FC', '\x7FE', 
		'\a', '\x80', '\x2', '\x2', '\x7FD', '\x7FB', '\x3', '\x2', '\x2', '\x2', 
		'\x7FD', '\x7FC', '\x3', '\x2', '\x2', '\x2', '\x7FE', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\x7FF', '\x800', '\x5', '\x304', '\x183', '\x2', 
		'\x800', '\x801', '\x5', '\x350', '\x1A9', '\x2', '\x801', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\x802', '\x803', '\a', '\x93', '\x2', '\x2', '\x803', 
		'\x804', '\a', '\x1D8', '\x2', '\x2', '\x804', '\x805', '\x5', '\x31A', 
		'\x18E', '\x2', '\x805', '\x806', '\a', '\x2A8', '\x2', '\x2', '\x806', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\x807', '\x808', '\a', '\xE', '\x2', 
		'\x2', '\x808', '\x809', '\a', '\x1D8', '\x2', '\x2', '\x809', '\x80B', 
		'\x5', '\x31A', '\x18E', '\x2', '\x80A', '\x80C', '\x5', '\xA8', 'U', 
		'\x2', '\x80B', '\x80A', '\x3', '\x2', '\x2', '\x2', '\x80C', '\x80D', 
		'\x3', '\x2', '\x2', '\x2', '\x80D', '\x80B', '\x3', '\x2', '\x2', '\x2', 
		'\x80D', '\x80E', '\x3', '\x2', '\x2', '\x2', '\x80E', '\x80F', '\x3', 
		'\x2', '\x2', '\x2', '\x80F', '\x810', '\a', '\x2A8', '\x2', '\x2', '\x810', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\x811', '\x812', '\a', 'h', '\x2', 
		'\x2', '\x812', '\x813', '\a', '\x1D8', '\x2', '\x2', '\x813', '\x818', 
		'\x5', '\x31A', '\x18E', '\x2', '\x814', '\x817', '\x5', '\xAA', 'V', 
		'\x2', '\x815', '\x817', '\x5', '\xA8', 'U', '\x2', '\x816', '\x814', 
		'\x3', '\x2', '\x2', '\x2', '\x816', '\x815', '\x3', '\x2', '\x2', '\x2', 
		'\x817', '\x81A', '\x3', '\x2', '\x2', '\x2', '\x818', '\x816', '\x3', 
		'\x2', '\x2', '\x2', '\x818', '\x819', '\x3', '\x2', '\x2', '\x2', '\x819', 
		'\x81B', '\x3', '\x2', '\x2', '\x2', '\x81A', '\x818', '\x3', '\x2', '\x2', 
		'\x2', '\x81B', '\x81C', '\a', '\x2A8', '\x2', '\x2', '\x81C', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\x81D', '\x81E', '\a', '\xE4', '\x2', '\x2', 
		'\x81E', '\x81F', '\a', '\x38', '\x2', '\x2', '\x81F', '\x82E', '\a', 
		'\x290', '\x2', '\x2', '\x820', '\x821', '\a', '\x127', '\x2', '\x2', 
		'\x821', '\x82E', '\a', '\x290', '\x2', '\x2', '\x822', '\x82E', '\a', 
		'\x14C', '\x2', '\x2', '\x823', '\x824', '\a', '\x131', '\x2', '\x2', 
		'\x824', '\x82E', '\a', '\x290', '\x2', '\x2', '\x825', '\x82E', '\a', 
		'\x14D', '\x2', '\x2', '\x826', '\x82E', '\a', 'p', '\x2', '\x2', '\x827', 
		'\x82E', '\a', '\x148', '\x2', '\x2', '\x828', '\x829', '\a', ':', '\x2', 
		'\x2', '\x829', '\x82E', '\a', '\x290', '\x2', '\x2', '\x82A', '\x82E', 
		'\a', '\x145', '\x2', '\x2', '\x82B', '\x82E', '\a', '\x16B', '\x2', '\x2', 
		'\x82C', '\x82E', '\a', '\x150', '\x2', '\x2', '\x82D', '\x81D', '\x3', 
		'\x2', '\x2', '\x2', '\x82D', '\x820', '\x3', '\x2', '\x2', '\x2', '\x82D', 
		'\x822', '\x3', '\x2', '\x2', '\x2', '\x82D', '\x823', '\x3', '\x2', '\x2', 
		'\x2', '\x82D', '\x825', '\x3', '\x2', '\x2', '\x2', '\x82D', '\x826', 
		'\x3', '\x2', '\x2', '\x2', '\x82D', '\x827', '\x3', '\x2', '\x2', '\x2', 
		'\x82D', '\x828', '\x3', '\x2', '\x2', '\x2', '\x82D', '\x82A', '\x3', 
		'\x2', '\x2', '\x2', '\x82D', '\x82B', '\x3', '\x2', '\x2', '\x2', '\x82D', 
		'\x82C', '\x3', '\x2', '\x2', '\x2', '\x82E', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\x82F', '\x830', '\a', '\x1F7', '\x2', '\x2', '\x830', '\x831', 
		'\a', '\x24F', '\x2', '\x2', '\x831', '\x832', '\a', '\x290', '\x2', '\x2', 
		'\x832', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x833', '\x835', '\a', 'h', 
		'\x2', '\x2', '\x834', '\x836', '\a', '\x22F', '\x2', '\x2', '\x835', 
		'\x834', '\x3', '\x2', '\x2', '\x2', '\x835', '\x836', '\x3', '\x2', '\x2', 
		'\x2', '\x836', '\x837', '\x3', '\x2', '\x2', '\x2', '\x837', '\x838', 
		'\a', '\xE7', '\x2', '\x2', '\x838', '\x839', '\x5', '\x326', '\x194', 
		'\x2', '\x839', '\x83A', '\a', '\x165', '\x2', '\x2', '\x83A', '\x83B', 
		'\x5', '\x332', '\x19A', '\x2', '\x83B', '\x83E', '\x5', '\x342', '\x1A2', 
		'\x2', '\x83C', '\x83D', '\a', '\x20E', '\x2', '\x2', '\x83D', '\x83F', 
		'\a', '\x2B3', '\x2', '\x2', '\x83E', '\x83C', '\x3', '\x2', '\x2', '\x2', 
		'\x83E', '\x83F', '\x3', '\x2', '\x2', '\x2', '\x83F', '\x842', '\x3', 
		'\x2', '\x2', '\x2', '\x840', '\x841', '\a', 'W', '\x2', '\x2', '\x841', 
		'\x843', '\a', '\x1FC', '\x2', '\x2', '\x842', '\x840', '\x3', '\x2', 
		'\x2', '\x2', '\x842', '\x843', '\x3', '\x2', '\x2', '\x2', '\x843', '\x844', 
		'\x3', '\x2', '\x2', '\x2', '\x844', '\x845', '\a', '\x2A8', '\x2', '\x2', 
		'\x845', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x846', '\x847', '\a', '\xE', 
		'\x2', '\x2', '\x847', '\x848', '\a', '\xE7', '\x2', '\x2', '\x848', '\x849', 
		'\x5', '\x326', '\x194', '\x2', '\x849', '\x84A', '\a', '\x1B0', '\x2', 
		'\x2', '\x84A', '\x84B', '\a', '\x21F', '\x2', '\x2', '\x84B', '\x84C', 
		'\x5', '\x326', '\x194', '\x2', '\x84C', '\x84D', '\a', '\x2A8', '\x2', 
		'\x2', '\x84D', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x84E', '\x84F', 
		'\a', 'h', '\x2', '\x2', '\x84F', '\x850', '\a', '\x239', '\x2', '\x2', 
		'\x850', '\x85A', '\x5', '\x33C', '\x19F', '\x2', '\x851', '\x85B', '\x5', 
		'\xB6', '\\', '\x2', '\x852', '\x85B', '\x5', '\xB8', ']', '\x2', '\x853', 
		'\x85B', '\x5', '\xBA', '^', '\x2', '\x854', '\x85B', '\x5', '\xBC', '_', 
		'\x2', '\x855', '\x85B', '\x5', '\xBE', '`', '\x2', '\x856', '\x85B', 
		'\x5', '\xC4', '\x63', '\x2', '\x857', '\x85B', '\x5', '\xC6', '\x64', 
		'\x2', '\x858', '\x85B', '\x5', '\xC8', '\x65', '\x2', '\x859', '\x85B', 
		'\x5', '\xDA', 'n', '\x2', '\x85A', '\x851', '\x3', '\x2', '\x2', '\x2', 
		'\x85A', '\x852', '\x3', '\x2', '\x2', '\x2', '\x85A', '\x853', '\x3', 
		'\x2', '\x2', '\x2', '\x85A', '\x854', '\x3', '\x2', '\x2', '\x2', '\x85A', 
		'\x855', '\x3', '\x2', '\x2', '\x2', '\x85A', '\x856', '\x3', '\x2', '\x2', 
		'\x2', '\x85A', '\x857', '\x3', '\x2', '\x2', '\x2', '\x85A', '\x858', 
		'\x3', '\x2', '\x2', '\x2', '\x85A', '\x859', '\x3', '\x2', '\x2', '\x2', 
		'\x85B', '\x85C', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x85A', '\x3', 
		'\x2', '\x2', '\x2', '\x85C', '\x85D', '\x3', '\x2', '\x2', '\x2', '\x85D', 
		'\x85E', '\x3', '\x2', '\x2', '\x2', '\x85E', '\x85F', '\a', '\x2A8', 
		'\x2', '\x2', '\x85F', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x860', '\x861', 
		'\a', '\xE', '\x2', '\x2', '\x861', '\x862', '\a', '\x239', '\x2', '\x2', 
		'\x862', '\x86E', '\x5', '\x33C', '\x19F', '\x2', '\x863', '\x86F', '\x5', 
		'\xB4', '[', '\x2', '\x864', '\x86F', '\x5', '\xB8', ']', '\x2', '\x865', 
		'\x86F', '\x5', '\xBA', '^', '\x2', '\x866', '\x86F', '\x5', '\xBC', '_', 
		'\x2', '\x867', '\x86F', '\x5', '\xBE', '`', '\x2', '\x868', '\x86F', 
		'\x5', '\xC2', '\x62', '\x2', '\x869', '\x86F', '\x5', '\xC4', '\x63', 
		'\x2', '\x86A', '\x86F', '\x5', '\xC6', '\x64', '\x2', '\x86B', '\x86F', 
		'\x5', '\xCA', '\x66', '\x2', '\x86C', '\x86F', '\x5', '\xDA', 'n', '\x2', 
		'\x86D', '\x86F', '\x5', '\xD4', 'k', '\x2', '\x86E', '\x863', '\x3', 
		'\x2', '\x2', '\x2', '\x86E', '\x864', '\x3', '\x2', '\x2', '\x2', '\x86E', 
		'\x865', '\x3', '\x2', '\x2', '\x2', '\x86E', '\x866', '\x3', '\x2', '\x2', 
		'\x2', '\x86E', '\x867', '\x3', '\x2', '\x2', '\x2', '\x86E', '\x868', 
		'\x3', '\x2', '\x2', '\x2', '\x86E', '\x869', '\x3', '\x2', '\x2', '\x2', 
		'\x86E', '\x86A', '\x3', '\x2', '\x2', '\x2', '\x86E', '\x86B', '\x3', 
		'\x2', '\x2', '\x2', '\x86E', '\x86C', '\x3', '\x2', '\x2', '\x2', '\x86E', 
		'\x86D', '\x3', '\x2', '\x2', '\x2', '\x86F', '\x870', '\x3', '\x2', '\x2', 
		'\x2', '\x870', '\x86E', '\x3', '\x2', '\x2', '\x2', '\x870', '\x871', 
		'\x3', '\x2', '\x2', '\x2', '\x871', '\x872', '\x3', '\x2', '\x2', '\x2', 
		'\x872', '\x873', '\a', '\x2A8', '\x2', '\x2', '\x873', '\x880', '\x3', 
		'\x2', '\x2', '\x2', '\x874', '\x876', '\a', '\x29C', '\x2', '\x2', '\x875', 
		'\x874', '\x3', '\x2', '\x2', '\x2', '\x875', '\x876', '\x3', '\x2', '\x2', 
		'\x2', '\x876', '\x877', '\x3', '\x2', '\x2', '\x2', '\x877', '\x879', 
		'\x5', '\x33C', '\x19F', '\x2', '\x878', '\x875', '\x3', '\x2', '\x2', 
		'\x2', '\x879', '\x87A', '\x3', '\x2', '\x2', '\x2', '\x87A', '\x878', 
		'\x3', '\x2', '\x2', '\x2', '\x87A', '\x87B', '\x3', '\x2', '\x2', '\x2', 
		'\x87B', '\x87C', '\x3', '\x2', '\x2', '\x2', '\x87C', '\x87D', '\x5', 
		'\xCC', 'g', '\x2', '\x87D', '\x87E', '\a', '\x2A8', '\x2', '\x2', '\x87E', 
		'\x880', '\x3', '\x2', '\x2', '\x2', '\x87F', '\x860', '\x3', '\x2', '\x2', 
		'\x2', '\x87F', '\x878', '\x3', '\x2', '\x2', '\x2', '\x880', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\x881', '\x884', '\x5', '\xB6', '\\', '\x2', 
		'\x882', '\x883', '\a', '\x1B1', '\x2', '\x2', '\x883', '\x885', '\x5', 
		'\x36E', '\x1B8', '\x2', '\x884', '\x882', '\x3', '\x2', '\x2', '\x2', 
		'\x884', '\x885', '\x3', '\x2', '\x2', '\x2', '\x885', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\x886', '\x887', '\a', '\xDC', '\x2', '\x2', '\x887', 
		'\x888', '\a', '\x38', '\x2', '\x2', '\x888', '\x889', '\x5', '\x36E', 
		'\x1B8', '\x2', '\x889', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x88A', 
		'\x88B', '\a', '\xDC', '\x2', '\x2', '\x88B', '\x88E', '\t', '\x13', '\x2', 
		'\x2', '\x88C', '\x88D', '\a', '\x14', '\x2', '\x2', '\x88D', '\x88F', 
		'\x5', '\x36A', '\x1B6', '\x2', '\x88E', '\x88C', '\x3', '\x2', '\x2', 
		'\x2', '\x88E', '\x88F', '\x3', '\x2', '\x2', '\x2', '\x88F', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\x890', '\x891', '\t', '\x14', '\x2', '\x2', 
		'\x891', '\x892', '\a', '\x20E', '\x2', '\x2', '\x892', '\x893', '\x5', 
		'\x36E', '\x1B8', '\x2', '\x893', '\xBB', '\x3', '\x2', '\x2', '\x2', 
		'\x894', '\x897', '\a', '\x19E', '\x2', '\x2', '\x895', '\x898', '\x5', 
		'\x112', '\x8A', '\x2', '\x896', '\x898', '\a', '\x230', '\x2', '\x2', 
		'\x897', '\x895', '\x3', '\x2', '\x2', '\x2', '\x897', '\x896', '\x3', 
		'\x2', '\x2', '\x2', '\x898', '\x899', '\x3', '\x2', '\x2', '\x2', '\x899', 
		'\x89A', '\a', '\x165', '\x2', '\x2', '\x89A', '\x89B', '\x5', '\x36E', 
		'\x1B8', '\x2', '\x89B', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x89C', 
		'\x89D', '\a', '\x199', '\x2', '\x2', '\x89D', '\x89E', '\x5', '\x36E', 
		'\x1B8', '\x2', '\x89E', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x89F', 
		'\x8A1', '\a', '\x29C', '\x2', '\x2', '\x8A0', '\x89F', '\x3', '\x2', 
		'\x2', '\x2', '\x8A0', '\x8A1', '\x3', '\x2', '\x2', '\x2', '\x8A1', '\x8A2', 
		'\x3', '\x2', '\x2', '\x2', '\x8A2', '\x8A4', '\x5', '\x312', '\x18A', 
		'\x2', '\x8A3', '\x8A0', '\x3', '\x2', '\x2', '\x2', '\x8A4', '\x8A5', 
		'\x3', '\x2', '\x2', '\x2', '\x8A5', '\x8A3', '\x3', '\x2', '\x2', '\x2', 
		'\x8A5', '\x8A6', '\x3', '\x2', '\x2', '\x2', '\x8A6', '\x8B7', '\x3', 
		'\x2', '\x2', '\x2', '\x8A7', '\x8B3', '\a', '\r', '\x2', '\x2', '\x8A8', 
		'\x8AD', '\a', '\xA8', '\x2', '\x2', '\x8A9', '\x8AB', '\a', '\x29C', 
		'\x2', '\x2', '\x8AA', '\x8A9', '\x3', '\x2', '\x2', '\x2', '\x8AA', '\x8AB', 
		'\x3', '\x2', '\x2', '\x2', '\x8AB', '\x8AC', '\x3', '\x2', '\x2', '\x2', 
		'\x8AC', '\x8AE', '\x5', '\x312', '\x18A', '\x2', '\x8AD', '\x8AA', '\x3', 
		'\x2', '\x2', '\x2', '\x8AE', '\x8AF', '\x3', '\x2', '\x2', '\x2', '\x8AF', 
		'\x8AD', '\x3', '\x2', '\x2', '\x2', '\x8AF', '\x8B0', '\x3', '\x2', '\x2', 
		'\x2', '\x8B0', '\x8B2', '\x3', '\x2', '\x2', '\x2', '\x8B1', '\x8A8', 
		'\x3', '\x2', '\x2', '\x2', '\x8B2', '\x8B5', '\x3', '\x2', '\x2', '\x2', 
		'\x8B3', '\x8B1', '\x3', '\x2', '\x2', '\x2', '\x8B3', '\x8B4', '\x3', 
		'\x2', '\x2', '\x2', '\x8B4', '\x8B7', '\x3', '\x2', '\x2', '\x2', '\x8B5', 
		'\x8B3', '\x3', '\x2', '\x2', '\x2', '\x8B6', '\x8A3', '\x3', '\x2', '\x2', 
		'\x2', '\x8B6', '\x8A7', '\x3', '\x2', '\x2', '\x2', '\x8B7', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\x8B8', '\x8B9', '\a', '\x80', '\x2', '\x2', 
		'\x8B9', '\x8BC', '\a', '\x1C2', '\x2', '\x2', '\x8BA', '\x8BD', '\a', 
		'\x14E', '\x2', '\x2', '\x8BB', '\x8BD', '\x5', '\xC0', '\x61', '\x2', 
		'\x8BC', '\x8BA', '\x3', '\x2', '\x2', '\x2', '\x8BC', '\x8BB', '\x3', 
		'\x2', '\x2', '\x2', '\x8BD', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x8BE', 
		'\x8BF', '\a', '\x17A', '\x2', '\x2', '\x8BF', '\x8C0', '\a', '\xB2', 
		'\x2', '\x2', '\x8C0', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x8C1', '\x8C2', 
		'\a', '\x4', '\x2', '\x2', '\x8C2', '\x8C3', '\t', '\x15', '\x2', '\x2', 
		'\x8C3', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x8C4', '\x8C5', '\a', '\x9D', 
		'\x2', '\x2', '\x8C5', '\x8C6', '\a', '\x98', '\x2', '\x2', '\x8C6', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\x8C7', '\x8D1', '\x5', '\xC8', '\x65', '\x2', 
		'\x8C8', '\x8CD', '\a', '\xC8', '\x2', '\x2', '\x8C9', '\x8CB', '\a', 
		'\x29C', '\x2', '\x2', '\x8CA', '\x8C9', '\x3', '\x2', '\x2', '\x2', '\x8CA', 
		'\x8CB', '\x3', '\x2', '\x2', '\x2', '\x8CB', '\x8CC', '\x3', '\x2', '\x2', 
		'\x2', '\x8CC', '\x8CE', '\x5', '\x372', '\x1BA', '\x2', '\x8CD', '\x8CA', 
		'\x3', '\x2', '\x2', '\x2', '\x8CE', '\x8CF', '\x3', '\x2', '\x2', '\x2', 
		'\x8CF', '\x8CD', '\x3', '\x2', '\x2', '\x2', '\x8CF', '\x8D0', '\x3', 
		'\x2', '\x2', '\x2', '\x8D0', '\x8D2', '\x3', '\x2', '\x2', '\x2', '\x8D1', 
		'\x8C8', '\x3', '\x2', '\x2', '\x2', '\x8D1', '\x8D2', '\x3', '\x2', '\x2', 
		'\x2', '\x8D2', '\x8D4', '\x3', '\x2', '\x2', '\x2', '\x8D3', '\x8D5', 
		'\a', '\xC6', '\x2', '\x2', '\x8D4', '\x8D3', '\x3', '\x2', '\x2', '\x2', 
		'\x8D4', '\x8D5', '\x3', '\x2', '\x2', '\x2', '\x8D5', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\x8D6', '\x8D7', '\a', '\x1BF', '\x2', '\x2', '\x8D7', 
		'\x8D8', '\a', 'Y', '\x2', '\x2', '\x8D8', '\x8DC', '\a', '\x215', '\x2', 
		'\x2', '\x8D9', '\x8DA', '\a', '\xA2', '\x2', '\x2', '\x8DA', '\x8DD', 
		'\a', '\x238', '\x2', '\x2', '\x8DB', '\x8DD', '\x5', '\x33C', '\x19F', 
		'\x2', '\x8DC', '\x8D9', '\x3', '\x2', '\x2', '\x2', '\x8DC', '\x8DB', 
		'\x3', '\x2', '\x2', '\x2', '\x8DD', '\x8FE', '\x3', '\x2', '\x2', '\x2', 
		'\x8DE', '\x8DF', '\a', '\xD1', '\x2', '\x2', '\x8DF', '\x8E0', '\a', 
		'Y', '\x2', '\x2', '\x8E0', '\x8FB', '\a', '\x215', '\x2', '\x2', '\x8E1', 
		'\x8E2', '\a', '\xA2', '\x2', '\x2', '\x8E2', '\x8FC', '\a', '\x238', 
		'\x2', '\x2', '\x8E3', '\x8EB', '\x5', '\x33C', '\x19F', '\x2', '\x8E4', 
		'\x8E9', '\a', '\x24F', '\x2', '\x2', '\x8E5', '\x8E6', '\a', '\x14F', 
		'\x2', '\x2', '\x8E6', '\x8EA', '\a', '\x1C3', '\x2', '\x2', '\x8E7', 
		'\x8E8', '\a', '\x1C2', '\x2', '\x2', '\x8E8', '\x8EA', '\x5', '\xC0', 
		'\x61', '\x2', '\x8E9', '\x8E5', '\x3', '\x2', '\x2', '\x2', '\x8E9', 
		'\x8E7', '\x3', '\x2', '\x2', '\x2', '\x8EA', '\x8EC', '\x3', '\x2', '\x2', 
		'\x2', '\x8EB', '\x8E4', '\x3', '\x2', '\x2', '\x2', '\x8EB', '\x8EC', 
		'\x3', '\x2', '\x2', '\x2', '\x8EC', '\x8EF', '\x3', '\x2', '\x2', '\x2', 
		'\x8ED', '\x8EE', '\a', '\x1B', '\x2', '\x2', '\x8EE', '\x8F0', '\a', 
		'\x1B2', '\x2', '\x2', '\x8EF', '\x8ED', '\x3', '\x2', '\x2', '\x2', '\x8EF', 
		'\x8F0', '\x3', '\x2', '\x2', '\x2', '\x8F0', '\x8F9', '\x3', '\x2', '\x2', 
		'\x2', '\x8F1', '\x8F2', '\a', '\x1A', '\x2', '\x2', '\x8F2', '\x8F7', 
		'\a', '\x23B', '\x2', '\x2', '\x8F3', '\x8F8', '\a', '\x17A', '\x2', '\x2', 
		'\x8F4', '\x8F8', '\a', '@', '\x2', '\x2', '\x8F5', '\x8F6', '\a', '\x90', 
		'\x2', '\x2', '\x8F6', '\x8F8', '\a', '\x139', '\x2', '\x2', '\x8F7', 
		'\x8F3', '\x3', '\x2', '\x2', '\x2', '\x8F7', '\x8F4', '\x3', '\x2', '\x2', 
		'\x2', '\x8F7', '\x8F5', '\x3', '\x2', '\x2', '\x2', '\x8F8', '\x8FA', 
		'\x3', '\x2', '\x2', '\x2', '\x8F9', '\x8F1', '\x3', '\x2', '\x2', '\x2', 
		'\x8F9', '\x8FA', '\x3', '\x2', '\x2', '\x2', '\x8FA', '\x8FC', '\x3', 
		'\x2', '\x2', '\x2', '\x8FB', '\x8E1', '\x3', '\x2', '\x2', '\x2', '\x8FB', 
		'\x8E3', '\x3', '\x2', '\x2', '\x2', '\x8FC', '\x8FE', '\x3', '\x2', '\x2', 
		'\x2', '\x8FD', '\x8D6', '\x3', '\x2', '\x2', '\x2', '\x8FD', '\x8DE', 
		'\x3', '\x2', '\x2', '\x2', '\x8FE', '\xCD', '\x3', '\x2', '\x2', '\x2', 
		'\x8FF', '\x904', '\a', '\x296', '\x2', '\x2', '\x900', '\x902', '\a', 
		'\x29C', '\x2', '\x2', '\x901', '\x900', '\x3', '\x2', '\x2', '\x2', '\x901', 
		'\x902', '\x3', '\x2', '\x2', '\x2', '\x902', '\x903', '\x3', '\x2', '\x2', 
		'\x2', '\x903', '\x905', '\x5', '\x36E', '\x1B8', '\x2', '\x904', '\x901', 
		'\x3', '\x2', '\x2', '\x2', '\x905', '\x906', '\x3', '\x2', '\x2', '\x2', 
		'\x906', '\x904', '\x3', '\x2', '\x2', '\x2', '\x906', '\x907', '\x3', 
		'\x2', '\x2', '\x2', '\x907', '\x908', '\x3', '\x2', '\x2', '\x2', '\x908', 
		'\x909', '\a', '\x297', '\x2', '\x2', '\x909', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\x90A', '\x90B', '\a', '\x1DF', '\x2', '\x2', '\x90B', '\x90C', 
		'\a', '_', '\x2', '\x2', '\x90C', '\x910', '\a', '\x2AA', '\x2', '\x2', 
		'\x90D', '\x911', '\a', '\r', '\x2', '\x2', '\x90E', '\x911', '\a', '\x80', 
		'\x2', '\x2', '\x90F', '\x911', '\x5', '\xCE', 'h', '\x2', '\x910', '\x90D', 
		'\x3', '\x2', '\x2', '\x2', '\x910', '\x90E', '\x3', '\x2', '\x2', '\x2', 
		'\x910', '\x90F', '\x3', '\x2', '\x2', '\x2', '\x911', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\x912', '\x913', '\t', '\x16', '\x2', '\x2', '\x913', 
		'\x914', '\a', '_', '\x2', '\x2', '\x914', '\x915', '\a', '\x2AA', '\x2', 
		'\x2', '\x915', '\x916', '\x5', '\xCE', 'h', '\x2', '\x916', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\x917', '\x91E', '\x5', '\xD0', 'i', '\x2', '\x918', 
		'\x91B', '\x5', '\xD2', 'j', '\x2', '\x919', '\x91A', '\a', '\xC8', '\x2', 
		'\x2', '\x91A', '\x91C', '\x5', '\x30A', '\x186', '\x2', '\x91B', '\x919', 
		'\x3', '\x2', '\x2', '\x2', '\x91B', '\x91C', '\x3', '\x2', '\x2', '\x2', 
		'\x91C', '\x91E', '\x3', '\x2', '\x2', '\x2', '\x91D', '\x917', '\x3', 
		'\x2', '\x2', '\x2', '\x91D', '\x918', '\x3', '\x2', '\x2', '\x2', '\x91E', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\x91F', '\x920', '\a', '\x93', '\x2', 
		'\x2', '\x920', '\x921', '\a', '\xE7', '\x2', '\x2', '\x921', '\x922', 
		'\x5', '\x326', '\x194', '\x2', '\x922', '\x923', '\a', '\x2A8', '\x2', 
		'\x2', '\x923', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x924', '\x930', 
		'\a', '\xD1', '\x2', '\x2', '\x925', '\x927', '\a', '\x29C', '\x2', '\x2', 
		'\x926', '\x925', '\x3', '\x2', '\x2', '\x2', '\x926', '\x927', '\x3', 
		'\x2', '\x2', '\x2', '\x927', '\x92E', '\x3', '\x2', '\x2', '\x2', '\x928', 
		'\x92F', '\x5', '\x312', '\x18A', '\x2', '\x929', '\x92F', '\x5', '\x362', 
		'\x1B2', '\x2', '\x92A', '\x92C', '\x5', '\x360', '\x1B1', '\x2', '\x92B', 
		'\x92D', '\x5', '\x342', '\x1A2', '\x2', '\x92C', '\x92B', '\x3', '\x2', 
		'\x2', '\x2', '\x92C', '\x92D', '\x3', '\x2', '\x2', '\x2', '\x92D', '\x92F', 
		'\x3', '\x2', '\x2', '\x2', '\x92E', '\x928', '\x3', '\x2', '\x2', '\x2', 
		'\x92E', '\x929', '\x3', '\x2', '\x2', '\x2', '\x92E', '\x92A', '\x3', 
		'\x2', '\x2', '\x2', '\x92F', '\x931', '\x3', '\x2', '\x2', '\x2', '\x930', 
		'\x926', '\x3', '\x2', '\x2', '\x2', '\x931', '\x932', '\x3', '\x2', '\x2', 
		'\x2', '\x932', '\x930', '\x3', '\x2', '\x2', '\x2', '\x932', '\x933', 
		'\x3', '\x2', '\x2', '\x2', '\x933', '\x936', '\x3', '\x2', '\x2', '\x2', 
		'\x934', '\x935', '\a', '\x165', '\x2', '\x2', '\x935', '\x937', '\x5', 
		'\x33E', '\x1A0', '\x2', '\x936', '\x934', '\x3', '\x2', '\x2', '\x2', 
		'\x936', '\x937', '\x3', '\x2', '\x2', '\x2', '\x937', '\x938', '\x3', 
		'\x2', '\x2', '\x2', '\x938', '\x93E', '\a', '\x21F', '\x2', '\x2', '\x939', 
		'\x93B', '\a', '\x29C', '\x2', '\x2', '\x93A', '\x939', '\x3', '\x2', 
		'\x2', '\x2', '\x93A', '\x93B', '\x3', '\x2', '\x2', '\x2', '\x93B', '\x93C', 
		'\x3', '\x2', '\x2', '\x2', '\x93C', '\x93F', '\x5', '\x310', '\x189', 
		'\x2', '\x93D', '\x93F', '\a', '\x19B', '\x2', '\x2', '\x93E', '\x93A', 
		'\x3', '\x2', '\x2', '\x2', '\x93E', '\x93D', '\x3', '\x2', '\x2', '\x2', 
		'\x93F', '\x940', '\x3', '\x2', '\x2', '\x2', '\x940', '\x93E', '\x3', 
		'\x2', '\x2', '\x2', '\x940', '\x941', '\x3', '\x2', '\x2', '\x2', '\x941', 
		'\x945', '\x3', '\x2', '\x2', '\x2', '\x942', '\x943', '\a', '\x24F', 
		'\x2', '\x2', '\x943', '\x944', '\t', '\x17', '\x2', '\x2', '\x944', '\x946', 
		'\a', '\x169', '\x2', '\x2', '\x945', '\x942', '\x3', '\x2', '\x2', '\x2', 
		'\x945', '\x946', '\x3', '\x2', '\x2', '\x2', '\x946', '\x94A', '\x3', 
		'\x2', '\x2', '\x2', '\x947', '\x948', '\a', '\x24F', '\x2', '\x2', '\x948', 
		'\x949', '\a', '\xD9', '\x2', '\x2', '\x949', '\x94B', '\a', '\x169', 
		'\x2', '\x2', '\x94A', '\x947', '\x3', '\x2', '\x2', '\x2', '\x94A', '\x94B', 
		'\x3', '\x2', '\x2', '\x2', '\x94B', '\x94F', '\x3', '\x2', '\x2', '\x2', 
		'\x94C', '\x94D', '\a', '\x24F', '\x2', '\x2', '\x94D', '\x94E', '\a', 
		'\xD1', '\x2', '\x2', '\x94E', '\x950', '\a', '\x169', '\x2', '\x2', '\x94F', 
		'\x94C', '\x3', '\x2', '\x2', '\x2', '\x94F', '\x950', '\x3', '\x2', '\x2', 
		'\x2', '\x950', '\x952', '\x3', '\x2', '\x2', '\x2', '\x951', '\x953', 
		'\x5', '\xDA', 'n', '\x2', '\x952', '\x951', '\x3', '\x2', '\x2', '\x2', 
		'\x952', '\x953', '\x3', '\x2', '\x2', '\x2', '\x953', '\x954', '\x3', 
		'\x2', '\x2', '\x2', '\x954', '\x955', '\a', '\x2A8', '\x2', '\x2', '\x955', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\x956', '\x957', '\a', '^', '\x2', 
		'\x2', '\x957', '\x958', '\a', '\x2AA', '\x2', '\x2', '\x958', '\x959', 
		'\t', '\x18', '\x2', '\x2', '\x959', '\xDB', '\x3', '\x2', '\x2', '\x2', 
		'\x95A', '\x95D', '\a', 'h', '\x2', '\x2', '\x95B', '\x95C', '\a', '\x16D', 
		'\x2', '\x2', '\x95C', '\x95E', '\a', '\x1B1', '\x2', '\x2', '\x95D', 
		'\x95B', '\x3', '\x2', '\x2', '\x2', '\x95D', '\x95E', '\x3', '\x2', '\x2', 
		'\x2', '\x95E', '\x963', '\x3', '\x2', '\x2', '\x2', '\x95F', '\x961', 
		'\a', '\x16D', '\x2', '\x2', '\x960', '\x95F', '\x3', '\x2', '\x2', '\x2', 
		'\x960', '\x961', '\x3', '\x2', '\x2', '\x2', '\x961', '\x962', '\x3', 
		'\x2', '\x2', '\x2', '\x962', '\x964', '\a', '\xC6', '\x2', '\x2', '\x963', 
		'\x960', '\x3', '\x2', '\x2', '\x2', '\x963', '\x964', '\x3', '\x2', '\x2', 
		'\x2', '\x964', '\x966', '\x3', '\x2', '\x2', '\x2', '\x965', '\x967', 
		'\a', '\x97', '\x2', '\x2', '\x966', '\x965', '\x3', '\x2', '\x2', '\x2', 
		'\x966', '\x967', '\x3', '\x2', '\x2', '\x2', '\x967', '\x968', '\x3', 
		'\x2', '\x2', '\x2', '\x968', '\x969', '\a', '\x246', '\x2', '\x2', '\x969', 
		'\x96B', '\x5', '\x332', '\x19A', '\x2', '\x96A', '\x96C', '\x5', '\xDE', 
		'p', '\x2', '\x96B', '\x96A', '\x3', '\x2', '\x2', '\x2', '\x96B', '\x96C', 
		'\x3', '\x2', '\x2', '\x2', '\x96C', '\x96D', '\x3', '\x2', '\x2', '\x2', 
		'\x96D', '\x96E', '\a', '\x14', '\x2', '\x2', '\x96E', '\x970', '\x5', 
		'\x1C6', '\xE4', '\x2', '\x96F', '\x971', '\x5', '\x26E', '\x138', '\x2', 
		'\x970', '\x96F', '\x3', '\x2', '\x2', '\x2', '\x970', '\x971', '\x3', 
		'\x2', '\x2', '\x2', '\x971', '\xDD', '\x3', '\x2', '\x2', '\x2', '\x972', 
		'\x975', '\x5', '\xE0', 'q', '\x2', '\x973', '\x975', '\x5', '\xE2', 'r', 
		'\x2', '\x974', '\x972', '\x3', '\x2', '\x2', '\x2', '\x974', '\x973', 
		'\x3', '\x2', '\x2', '\x2', '\x975', '\xDF', '\x3', '\x2', '\x2', '\x2', 
		'\x976', '\x984', '\a', '\x296', '\x2', '\x2', '\x977', '\x979', '\a', 
		'\x29C', '\x2', '\x2', '\x978', '\x977', '\x3', '\x2', '\x2', '\x2', '\x978', 
		'\x979', '\x3', '\x2', '\x2', '\x2', '\x979', '\x982', '\x3', '\x2', '\x2', 
		'\x2', '\x97A', '\x97E', '\x5', '\x2EA', '\x176', '\x2', '\x97B', '\x97D', 
		'\x5', '\xE4', 's', '\x2', '\x97C', '\x97B', '\x3', '\x2', '\x2', '\x2', 
		'\x97D', '\x980', '\x3', '\x2', '\x2', '\x2', '\x97E', '\x97C', '\x3', 
		'\x2', '\x2', '\x2', '\x97E', '\x97F', '\x3', '\x2', '\x2', '\x2', '\x97F', 
		'\x983', '\x3', '\x2', '\x2', '\x2', '\x980', '\x97E', '\x3', '\x2', '\x2', 
		'\x2', '\x981', '\x983', '\x5', '\xE6', 't', '\x2', '\x982', '\x97A', 
		'\x3', '\x2', '\x2', '\x2', '\x982', '\x981', '\x3', '\x2', '\x2', '\x2', 
		'\x983', '\x985', '\x3', '\x2', '\x2', '\x2', '\x984', '\x978', '\x3', 
		'\x2', '\x2', '\x2', '\x985', '\x986', '\x3', '\x2', '\x2', '\x2', '\x986', 
		'\x984', '\x3', '\x2', '\x2', '\x2', '\x986', '\x987', '\x3', '\x2', '\x2', 
		'\x2', '\x987', '\x988', '\x3', '\x2', '\x2', '\x2', '\x988', '\x989', 
		'\a', '\x297', '\x2', '\x2', '\x989', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'\x98A', '\x98B', '\a', '\x15F', '\x2', '\x2', '\x98B', '\x99E', '\x5', 
		'\x318', '\x18D', '\x2', '\x98C', '\x98D', '\a', '\x24F', '\x2', '\x2', 
		'\x98D', '\x98E', '\a', '\x15C', '\x2', '\x2', '\x98E', '\x99A', '\t', 
		'\x19', '\x2', '\x2', '\x98F', '\x99B', '\a', '\x80', '\x2', '\x2', '\x990', 
		'\x995', '\a', '\x296', '\x2', '\x2', '\x991', '\x993', '\a', '\x29C', 
		'\x2', '\x2', '\x992', '\x991', '\x3', '\x2', '\x2', '\x2', '\x992', '\x993', 
		'\x3', '\x2', '\x2', '\x2', '\x993', '\x994', '\x3', '\x2', '\x2', '\x2', 
		'\x994', '\x996', '\a', '\x2B3', '\x2', '\x2', '\x995', '\x992', '\x3', 
		'\x2', '\x2', '\x2', '\x996', '\x997', '\x3', '\x2', '\x2', '\x2', '\x997', 
		'\x995', '\x3', '\x2', '\x2', '\x2', '\x997', '\x998', '\x3', '\x2', '\x2', 
		'\x2', '\x998', '\x999', '\x3', '\x2', '\x2', '\x2', '\x999', '\x99B', 
		'\a', '\x297', '\x2', '\x2', '\x99A', '\x98F', '\x3', '\x2', '\x2', '\x2', 
		'\x99A', '\x990', '\x3', '\x2', '\x2', '\x2', '\x99B', '\x99F', '\x3', 
		'\x2', '\x2', '\x2', '\x99C', '\x99D', '\a', '\x22B', '\x2', '\x2', '\x99D', 
		'\x99F', '\x5', '\x332', '\x19A', '\x2', '\x99E', '\x98C', '\x3', '\x2', 
		'\x2', '\x2', '\x99E', '\x99C', '\x3', '\x2', '\x2', '\x2', '\x99F', '\x9B1', 
		'\x3', '\x2', '\x2', '\x2', '\x9A0', '\x9A9', '\a', '\x296', '\x2', '\x2', 
		'\x9A1', '\x9A3', '\a', '\x29C', '\x2', '\x2', '\x9A2', '\x9A1', '\x3', 
		'\x2', '\x2', '\x2', '\x9A2', '\x9A3', '\x3', '\x2', '\x2', '\x2', '\x9A3', 
		'\x9A7', '\x3', '\x2', '\x2', '\x2', '\x9A4', '\x9A8', '\x5', '\xE6', 
		't', '\x2', '\x9A5', '\x9A6', '\a', '\x2B3', '\x2', '\x2', '\x9A6', '\x9A8', 
		'\x5', '\xE4', 's', '\x2', '\x9A7', '\x9A4', '\x3', '\x2', '\x2', '\x2', 
		'\x9A7', '\x9A5', '\x3', '\x2', '\x2', '\x2', '\x9A8', '\x9AA', '\x3', 
		'\x2', '\x2', '\x2', '\x9A9', '\x9A2', '\x3', '\x2', '\x2', '\x2', '\x9AA', 
		'\x9AB', '\x3', '\x2', '\x2', '\x2', '\x9AB', '\x9A9', '\x3', '\x2', '\x2', 
		'\x2', '\x9AB', '\x9AC', '\x3', '\x2', '\x2', '\x2', '\x9AC', '\x9AD', 
		'\x3', '\x2', '\x2', '\x2', '\x9AD', '\x9AE', '\a', '\x297', '\x2', '\x2', 
		'\x9AE', '\x9B0', '\x3', '\x2', '\x2', '\x2', '\x9AF', '\x9A0', '\x3', 
		'\x2', '\x2', '\x2', '\x9B0', '\x9B3', '\x3', '\x2', '\x2', '\x2', '\x9B1', 
		'\x9AF', '\x3', '\x2', '\x2', '\x2', '\x9B1', '\x9B2', '\x3', '\x2', '\x2', 
		'\x2', '\x9B2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\x9B3', '\x9B1', 
		'\x3', '\x2', '\x2', '\x2', '\x9B4', '\x9B5', '\a', '[', '\x2', '\x2', 
		'\x9B5', '\x9B7', '\x5', '\x314', '\x18B', '\x2', '\x9B6', '\x9B4', '\x3', 
		'\x2', '\x2', '\x2', '\x9B6', '\x9B7', '\x3', '\x2', '\x2', '\x2', '\x9B7', 
		'\x9C1', '\x3', '\x2', '\x2', '\x2', '\x9B8', '\x9BA', '\a', '\x154', 
		'\x2', '\x2', '\x9B9', '\x9B8', '\x3', '\x2', '\x2', '\x2', '\x9B9', '\x9BA', 
		'\x3', '\x2', '\x2', '\x2', '\x9BA', '\x9BB', '\x3', '\x2', '\x2', '\x2', 
		'\x9BB', '\x9C2', '\a', '\x157', '\x2', '\x2', '\x9BC', '\x9C2', '\a', 
		'\x22F', '\x2', '\x2', '\x9BD', '\x9BE', '\a', '\x193', '\x2', '\x2', 
		'\x9BE', '\x9C2', '\a', '\x104', '\x2', '\x2', '\x9BF', '\x9C2', '\x5', 
		'\x12A', '\x96', '\x2', '\x9C0', '\x9C2', '\x5', '\x120', '\x91', '\x2', 
		'\x9C1', '\x9B9', '\x3', '\x2', '\x2', '\x2', '\x9C1', '\x9BC', '\x3', 
		'\x2', '\x2', '\x2', '\x9C1', '\x9BD', '\x3', '\x2', '\x2', '\x2', '\x9C1', 
		'\x9BF', '\x3', '\x2', '\x2', '\x2', '\x9C1', '\x9C0', '\x3', '\x2', '\x2', 
		'\x2', '\x9C2', '\x9C4', '\x3', '\x2', '\x2', '\x2', '\x9C3', '\x9C5', 
		'\x5', '\xE8', 'u', '\x2', '\x9C4', '\x9C3', '\x3', '\x2', '\x2', '\x2', 
		'\x9C4', '\x9C5', '\x3', '\x2', '\x2', '\x2', '\x9C5', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\x9C6', '\x9C7', '\a', '[', '\x2', '\x2', '\x9C7', 
		'\x9C9', '\x5', '\x314', '\x18B', '\x2', '\x9C8', '\x9C6', '\x3', '\x2', 
		'\x2', '\x2', '\x9C8', '\x9C9', '\x3', '\x2', '\x2', '\x2', '\x9C9', '\x9CE', 
		'\x3', '\x2', '\x2', '\x2', '\x9CA', '\x9CF', '\x5', '\x130', '\x99', 
		'\x2', '\x9CB', '\x9CF', '\x5', '\x128', '\x95', '\x2', '\x9CC', '\x9CF', 
		'\x5', '\x12E', '\x98', '\x2', '\x9CD', '\x9CF', '\x5', '\x120', '\x91', 
		'\x2', '\x9CE', '\x9CA', '\x3', '\x2', '\x2', '\x2', '\x9CE', '\x9CB', 
		'\x3', '\x2', '\x2', '\x2', '\x9CE', '\x9CC', '\x3', '\x2', '\x2', '\x2', 
		'\x9CE', '\x9CD', '\x3', '\x2', '\x2', '\x2', '\x9CF', '\x9D1', '\x3', 
		'\x2', '\x2', '\x2', '\x9D0', '\x9C8', '\x3', '\x2', '\x2', '\x2', '\x9D1', 
		'\x9D2', '\x3', '\x2', '\x2', '\x2', '\x9D2', '\x9D0', '\x3', '\x2', '\x2', 
		'\x2', '\x9D2', '\x9D3', '\x3', '\x2', '\x2', '\x2', '\x9D3', '\x9D5', 
		'\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9D6', '\x5', '\xE8', 'u', '\x2', 
		'\x9D5', '\x9D4', '\x3', '\x2', '\x2', '\x2', '\x9D5', '\x9D6', '\x3', 
		'\x2', '\x2', '\x2', '\x9D6', '\xE7', '\x3', '\x2', '\x2', '\x2', '\x9D7', 
		'\x9D9', '\a', '\x154', '\x2', '\x2', '\x9D8', '\x9D7', '\x3', '\x2', 
		'\x2', '\x2', '\x9D8', '\x9D9', '\x3', '\x2', '\x2', '\x2', '\x9D9', '\x9DA', 
		'\x3', '\x2', '\x2', '\x2', '\x9DA', '\x9E1', '\a', '\x82', '\x2', '\x2', 
		'\x9DB', '\x9DC', '\a', '\xEF', '\x2', '\x2', '\x9DC', '\x9E1', '\t', 
		'\x1A', '\x2', '\x2', '\x9DD', '\x9E1', '\t', '\x1B', '\x2', '\x2', '\x9DE', 
		'\x9E1', '\t', '\a', '\x2', '\x2', '\x9DF', '\x9E1', '\t', '\x1C', '\x2', 
		'\x2', '\x9E0', '\x9D8', '\x3', '\x2', '\x2', '\x2', '\x9E0', '\x9DB', 
		'\x3', '\x2', '\x2', '\x2', '\x9E0', '\x9DD', '\x3', '\x2', '\x2', '\x2', 
		'\x9E0', '\x9DE', '\x3', '\x2', '\x2', '\x2', '\x9E0', '\x9DF', '\x3', 
		'\x2', '\x2', '\x2', '\x9E1', '\x9E2', '\x3', '\x2', '\x2', '\x2', '\x9E2', 
		'\x9E0', '\x3', '\x2', '\x2', '\x2', '\x9E2', '\x9E3', '\x3', '\x2', '\x2', 
		'\x2', '\x9E3', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x9E4', '\x9E6', 
		'\a', 'h', '\x2', '\x2', '\x9E5', '\x9E7', '\t', '\x1D', '\x2', '\x2', 
		'\x9E6', '\x9E5', '\x3', '\x2', '\x2', '\x2', '\x9E6', '\x9E7', '\x3', 
		'\x2', '\x2', '\x2', '\x9E7', '\x9EB', '\x3', '\x2', '\x2', '\x2', '\x9E8', 
		'\x9EC', '\x5', '\xEC', 'w', '\x2', '\x9E9', '\x9EC', '\x5', '\xF8', '}', 
		'\x2', '\x9EA', '\x9EC', '\x5', '\xFC', '\x7F', '\x2', '\x9EB', '\x9E8', 
		'\x3', '\x2', '\x2', '\x2', '\x9EB', '\x9E9', '\x3', '\x2', '\x2', '\x2', 
		'\x9EB', '\x9EA', '\x3', '\x2', '\x2', '\x2', '\x9EC', '\x9ED', '\x3', 
		'\x2', '\x2', '\x2', '\x9ED', '\x9EE', '\a', '\x2A8', '\x2', '\x2', '\x9EE', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\x9EF', '\x9F0', '\a', '\x20E', '\x2', 
		'\x2', '\x9F0', '\x9F2', '\a', '\x2B3', '\x2', '\x2', '\x9F1', '\x9F3', 
		'\x5', '\x100', '\x81', '\x2', '\x9F2', '\x9F1', '\x3', '\x2', '\x2', 
		'\x2', '\x9F2', '\x9F3', '\x3', '\x2', '\x2', '\x2', '\x9F3', '\xA05', 
		'\x3', '\x2', '\x2', '\x2', '\x9F4', '\x9F5', '\a', '\x12D', '\x2', '\x2', 
		'\x9F5', '\x9F6', '\a', '\xB4', '\x2', '\x2', '\x9F6', '\xA04', '\x5', 
		'\x112', '\x8A', '\x2', '\x9F7', '\x9F8', '\a', '\x30', '\x2', '\x2', 
		'\x9F8', '\xA04', '\x5', '\x112', '\x8A', '\x2', '\x9F9', '\xA04', '\x5', 
		'\xF0', 'y', '\x2', '\x9FA', '\x9FB', '\a', '\xC6', '\x2', '\x2', '\x9FB', 
		'\xA04', '\a', '\x117', '\x2', '\x2', '\x9FC', '\xA04', '\t', '\x1E', 
		'\x2', '\x2', '\x9FD', '\x9FE', '\a', '\xA0', '\x2', '\x2', '\x9FE', '\xA04', 
		'\x5', '\xEE', 'x', '\x2', '\x9FF', '\xA04', '\a', '\x80', '\x2', '\x2', 
		'\xA00', '\xA04', '\x5', '\xF2', 'z', '\x2', '\xA01', '\xA04', '\x5', 
		'\xF4', '{', '\x2', '\xA02', '\xA04', '\x5', '\xF6', '|', '\x2', '\xA03', 
		'\x9F4', '\x3', '\x2', '\x2', '\x2', '\xA03', '\x9F7', '\x3', '\x2', '\x2', 
		'\x2', '\xA03', '\x9F9', '\x3', '\x2', '\x2', '\x2', '\xA03', '\x9FA', 
		'\x3', '\x2', '\x2', '\x2', '\xA03', '\x9FC', '\x3', '\x2', '\x2', '\x2', 
		'\xA03', '\x9FD', '\x3', '\x2', '\x2', '\x2', '\xA03', '\x9FF', '\x3', 
		'\x2', '\x2', '\x2', '\xA03', '\xA00', '\x3', '\x2', '\x2', '\x2', '\xA03', 
		'\xA01', '\x3', '\x2', '\x2', '\x2', '\xA03', '\xA02', '\x3', '\x2', '\x2', 
		'\x2', '\xA04', '\xA07', '\x3', '\x2', '\x2', '\x2', '\xA05', '\xA03', 
		'\x3', '\x2', '\x2', '\x2', '\xA05', '\xA06', '\x3', '\x2', '\x2', '\x2', 
		'\xA06', '\xED', '\x3', '\x2', '\x2', '\x2', '\xA07', '\xA05', '\x3', 
		'\x2', '\x2', '\x2', '\xA08', '\xA09', '\a', '\x23B', '\x2', '\x2', '\xA09', 
		'\xA0A', '\a', '\x292', '\x2', '\x2', '\xA0A', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\xA0B', '\xA0C', '\t', '\x1F', '\x2', '\x2', '\xA0C', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\xA0D', '\xA0E', '\a', '\xB4', '\x2', '\x2', 
		'\xA0E', '\xA0F', '\a', '\x121', '\x2', '\x2', '\xA0F', '\xA16', '\a', 
		'\x114', '\x2', '\x2', '\xA10', '\xA17', '\a', '\x1D', '\x2', '\x2', '\xA11', 
		'\xA14', '\a', '\x22D', '\x2', '\x2', '\xA12', '\xA13', '\a', '\x1E9', 
		'\x2', '\x2', '\xA13', '\xA15', '\x5', '\x112', '\x8A', '\x2', '\xA14', 
		'\xA12', '\x3', '\x2', '\x2', '\x2', '\xA14', '\xA15', '\x3', '\x2', '\x2', 
		'\x2', '\xA15', '\xA17', '\x3', '\x2', '\x2', '\x2', '\xA16', '\xA10', 
		'\x3', '\x2', '\x2', '\x2', '\xA16', '\xA11', '\x3', '\x2', '\x2', '\x2', 
		'\xA16', '\xA17', '\x3', '\x2', '\x2', '\x2', '\xA17', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xA18', '\xA19', '\a', '\x1D5', '\x2', '\x2', '\xA19', 
		'\xA1A', '\a', '\x1F1', '\x2', '\x2', '\xA1A', '\xA1B', '\a', '\x121', 
		'\x2', '\x2', '\xA1B', '\xA1C', '\t', ' ', '\x2', '\x2', '\xA1C', '\xF5', 
		'\x3', '\x2', '\x2', '\x2', '\xA1D', '\xA1E', '\a', '\xBF', '\x2', '\x2', 
		'\xA1E', '\xA1F', '\t', '!', '\x2', '\x2', '\xA1F', '\xF7', '\x3', '\x2', 
		'\x2', '\x2', '\xA20', '\xA21', '\a', '\x211', '\x2', '\x2', '\xA21', 
		'\xA22', '\a', '\x20E', '\x2', '\x2', '\xA22', '\xA24', '\a', '\x2B3', 
		'\x2', '\x2', '\xA23', '\xA25', '\x5', '\x102', '\x82', '\x2', '\xA24', 
		'\xA23', '\x3', '\x2', '\x2', '\x2', '\xA24', '\xA25', '\x3', '\x2', '\x2', 
		'\x2', '\xA25', '\xA27', '\x3', '\x2', '\x2', '\x2', '\xA26', '\xA28', 
		'\x5', '\xFA', '~', '\x2', '\xA27', '\xA26', '\x3', '\x2', '\x2', '\x2', 
		'\xA27', '\xA28', '\x3', '\x2', '\x2', '\x2', '\xA28', '\xA2A', '\x3', 
		'\x2', '\x2', '\x2', '\xA29', '\xA2B', '\x5', '\xF2', 'z', '\x2', '\xA2A', 
		'\xA29', '\x3', '\x2', '\x2', '\x2', '\xA2A', '\xA2B', '\x3', '\x2', '\x2', 
		'\x2', '\xA2B', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xA2C', '\xA2D', 
		'\a', '\x20E', '\x2', '\x2', '\xA2D', '\xA2E', '\a', '\xD2', '\x2', '\x2', 
		'\xA2E', '\xA2F', '\t', '\"', '\x2', '\x2', '\xA2F', '\xFB', '\x3', '\x2', 
		'\x2', '\x2', '\xA30', '\xA31', '\a', '\x22C', '\x2', '\x2', '\xA31', 
		'\xA32', '\a', '\x20E', '\x2', '\x2', '\xA32', '\xA34', '\a', '\x2B3', 
		'\x2', '\x2', '\xA33', '\xA35', '\x5', '\x100', '\x81', '\x2', '\xA34', 
		'\xA33', '\x3', '\x2', '\x2', '\x2', '\xA34', '\xA35', '\x3', '\x2', '\x2', 
		'\x2', '\xA35', '\xA37', '\x3', '\x2', '\x2', '\x2', '\xA36', '\xA38', 
		'\x5', '\xF2', 'z', '\x2', '\xA37', '\xA36', '\x3', '\x2', '\x2', '\x2', 
		'\xA37', '\xA38', '\x3', '\x2', '\x2', '\x2', '\xA38', '\xA3A', '\x3', 
		'\x2', '\x2', '\x2', '\xA39', '\xA3B', '\x5', '\xFE', '\x80', '\x2', '\xA3A', 
		'\xA39', '\x3', '\x2', '\x2', '\x2', '\xA3A', '\xA3B', '\x3', '\x2', '\x2', 
		'\x2', '\xA3B', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xA3C', '\xA3D', 
		'\a', '\x1BA', '\x2', '\x2', '\xA3D', '\xA3E', '\t', '#', '\x2', '\x2', 
		'\xA3E', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xA3F', '\xA41', '\a', 's', 
		'\x2', '\x2', '\xA40', '\xA42', '\a', '\x29C', '\x2', '\x2', '\xA41', 
		'\xA40', '\x3', '\x2', '\x2', '\x2', '\xA41', '\xA42', '\x3', '\x2', '\x2', 
		'\x2', '\xA42', '\xA43', '\x3', '\x2', '\x2', '\x2', '\xA43', '\xA44', 
		'\x5', '\x104', '\x83', '\x2', '\xA44', '\x101', '\x3', '\x2', '\x2', 
		'\x2', '\xA45', '\xA47', '\a', '\x210', '\x2', '\x2', '\xA46', '\xA48', 
		'\a', '\x29C', '\x2', '\x2', '\xA47', '\xA46', '\x3', '\x2', '\x2', '\x2', 
		'\xA47', '\xA48', '\x3', '\x2', '\x2', '\x2', '\xA48', '\xA49', '\x3', 
		'\x2', '\x2', '\x2', '\xA49', '\xA4A', '\x5', '\x104', '\x83', '\x2', 
		'\xA4A', '\x103', '\x3', '\x2', '\x2', '\x2', '\xA4B', '\xA4D', '\a', 
		'\x292', '\x2', '\x2', '\xA4C', '\xA4B', '\x3', '\x2', '\x2', '\x2', '\xA4C', 
		'\xA4D', '\x3', '\x2', '\x2', '\x2', '\xA4D', '\xA50', '\x3', '\x2', '\x2', 
		'\x2', '\xA4E', '\xA4F', '\a', '\x1E9', '\x2', '\x2', '\xA4F', '\xA51', 
		'\x5', '\x112', '\x8A', '\x2', '\xA50', '\xA4E', '\x3', '\x2', '\x2', 
		'\x2', '\xA50', '\xA51', '\x3', '\x2', '\x2', '\x2', '\xA51', '\xA53', 
		'\x3', '\x2', '\x2', '\x2', '\xA52', '\xA54', '\a', '\x1BD', '\x2', '\x2', 
		'\xA53', '\xA52', '\x3', '\x2', '\x2', '\x2', '\xA53', '\xA54', '\x3', 
		'\x2', '\x2', '\x2', '\xA54', '\xA56', '\x3', '\x2', '\x2', '\x2', '\xA55', 
		'\xA57', '\x5', '\x108', '\x85', '\x2', '\xA56', '\xA55', '\x3', '\x2', 
		'\x2', '\x2', '\xA56', '\xA57', '\x3', '\x2', '\x2', '\x2', '\xA57', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\xA58', '\xA64', '\a', 's', '\x2', '\x2', 
		'\xA59', '\xA65', '\a', '\x292', '\x2', '\x2', '\xA5A', '\xA5F', '\a', 
		'\x296', '\x2', '\x2', '\xA5B', '\xA5D', '\a', '\x29C', '\x2', '\x2', 
		'\xA5C', '\xA5B', '\x3', '\x2', '\x2', '\x2', '\xA5C', '\xA5D', '\x3', 
		'\x2', '\x2', '\x2', '\xA5D', '\xA5E', '\x3', '\x2', '\x2', '\x2', '\xA5E', 
		'\xA60', '\a', '\x292', '\x2', '\x2', '\xA5F', '\xA5C', '\x3', '\x2', 
		'\x2', '\x2', '\xA60', '\xA61', '\x3', '\x2', '\x2', '\x2', '\xA61', '\xA5F', 
		'\x3', '\x2', '\x2', '\x2', '\xA61', '\xA62', '\x3', '\x2', '\x2', '\x2', 
		'\xA62', '\xA63', '\x3', '\x2', '\x2', '\x2', '\xA63', '\xA65', '\a', 
		'\x297', '\x2', '\x2', '\xA64', '\xA59', '\x3', '\x2', '\x2', '\x2', '\xA64', 
		'\xA5A', '\x3', '\x2', '\x2', '\x2', '\xA64', '\xA65', '\x3', '\x2', '\x2', 
		'\x2', '\xA65', '\xA68', '\x3', '\x2', '\x2', '\x2', '\xA66', '\xA67', 
		'\a', '\x1E9', '\x2', '\x2', '\xA67', '\xA69', '\x5', '\x112', '\x8A', 
		'\x2', '\xA68', '\xA66', '\x3', '\x2', '\x2', '\x2', '\xA68', '\xA69', 
		'\x3', '\x2', '\x2', '\x2', '\xA69', '\xA6C', '\x3', '\x2', '\x2', '\x2', 
		'\xA6A', '\xA6B', '\a', '\x30', '\x2', '\x2', '\xA6B', '\xA6D', '\x5', 
		'\x112', '\x8A', '\x2', '\xA6C', '\xA6A', '\x3', '\x2', '\x2', '\x2', 
		'\xA6C', '\xA6D', '\x3', '\x2', '\x2', '\x2', '\xA6D', '\xA6F', '\x3', 
		'\x2', '\x2', '\x2', '\xA6E', '\xA70', '\a', '\x1BD', '\x2', '\x2', '\xA6F', 
		'\xA6E', '\x3', '\x2', '\x2', '\x2', '\xA6F', '\xA70', '\x3', '\x2', '\x2', 
		'\x2', '\xA70', '\x107', '\x3', '\x2', '\x2', '\x2', '\xA71', '\xA7B', 
		'\a', '\x1F', '\x2', '\x2', '\xA72', '\xA7C', '\a', '\x15E', '\x2', '\x2', 
		'\xA73', '\xA76', '\a', '\x165', '\x2', '\x2', '\xA74', '\xA75', '\a', 
		'\x143', '\x2', '\x2', '\xA75', '\xA77', '\x5', '\x112', '\x8A', '\x2', 
		'\xA76', '\xA74', '\x3', '\x2', '\x2', '\x2', '\xA76', '\xA77', '\x3', 
		'\x2', '\x2', '\x2', '\xA77', '\xA79', '\x3', '\x2', '\x2', '\x2', '\xA78', 
		'\xA7A', '\x5', '\x10A', '\x86', '\x2', '\xA79', '\xA78', '\x3', '\x2', 
		'\x2', '\x2', '\xA79', '\xA7A', '\x3', '\x2', '\x2', '\x2', '\xA7A', '\xA7C', 
		'\x3', '\x2', '\x2', '\x2', '\xA7B', '\xA72', '\x3', '\x2', '\x2', '\x2', 
		'\xA7B', '\xA73', '\x3', '\x2', '\x2', '\x2', '\xA7C', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\xA7D', '\xA80', '\a', '\x126', '\x2', '\x2', '\xA7E', 
		'\xA81', '\a', '\x230', '\x2', '\x2', '\xA7F', '\xA81', '\x5', '\x112', 
		'\x8A', '\x2', '\xA80', '\xA7E', '\x3', '\x2', '\x2', '\x2', '\xA80', 
		'\xA7F', '\x3', '\x2', '\x2', '\x2', '\xA81', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\xA82', '\xA85', '\a', 'h', '\x2', '\x2', '\xA83', '\xA84', '\a', 
		'\xCE', '\x2', '\x2', '\xA84', '\xA86', '\a', '\x211', '\x2', '\x2', '\xA85', 
		'\xA83', '\x3', '\x2', '\x2', '\x2', '\xA85', '\xA86', '\x3', '\x2', '\x2', 
		'\x2', '\xA86', '\xA87', '\x3', '\x2', '\x2', '\x2', '\xA87', '\xA88', 
		'\a', '\x20F', '\x2', '\x2', '\xA88', '\xAA4', '\x5', '\x332', '\x19A', 
		'\x2', '\xA89', '\xA8E', '\a', '\x296', '\x2', '\x2', '\xA8A', '\xA8C', 
		'\a', '\x29C', '\x2', '\x2', '\xA8B', '\xA8A', '\x3', '\x2', '\x2', '\x2', 
		'\xA8B', '\xA8C', '\x3', '\x2', '\x2', '\x2', '\xA8C', '\xA8D', '\x3', 
		'\x2', '\x2', '\x2', '\xA8D', '\xA8F', '\x5', '\x110', '\x89', '\x2', 
		'\xA8E', '\xA8B', '\x3', '\x2', '\x2', '\x2', '\xA8F', '\xA90', '\x3', 
		'\x2', '\x2', '\x2', '\xA90', '\xA8E', '\x3', '\x2', '\x2', '\x2', '\xA90', 
		'\xA91', '\x3', '\x2', '\x2', '\x2', '\xA91', '\xA9F', '\x3', '\x2', '\x2', 
		'\x2', '\xA92', '\xA95', '\a', '\x29C', '\x2', '\x2', '\xA93', '\xA94', 
		'\a', '[', '\x2', '\x2', '\xA94', '\xA96', '\x5', '\x314', '\x18B', '\x2', 
		'\xA95', '\xA93', '\x3', '\x2', '\x2', '\x2', '\xA95', '\xA96', '\x3', 
		'\x2', '\x2', '\x2', '\xA96', '\xA9B', '\x3', '\x2', '\x2', '\x2', '\xA97', 
		'\xA9C', '\x5', '\x130', '\x99', '\x2', '\xA98', '\xA9C', '\x5', '\x128', 
		'\x95', '\x2', '\xA99', '\xA9C', '\x5', '\x12E', '\x98', '\x2', '\xA9A', 
		'\xA9C', '\x5', '\x120', '\x91', '\x2', '\xA9B', '\xA97', '\x3', '\x2', 
		'\x2', '\x2', '\xA9B', '\xA98', '\x3', '\x2', '\x2', '\x2', '\xA9B', '\xA99', 
		'\x3', '\x2', '\x2', '\x2', '\xA9B', '\xA9A', '\x3', '\x2', '\x2', '\x2', 
		'\xA9C', '\xA9E', '\x3', '\x2', '\x2', '\x2', '\xA9D', '\xA92', '\x3', 
		'\x2', '\x2', '\x2', '\xA9E', '\xAA1', '\x3', '\x2', '\x2', '\x2', '\xA9F', 
		'\xA9D', '\x3', '\x2', '\x2', '\x2', '\xA9F', '\xAA0', '\x3', '\x2', '\x2', 
		'\x2', '\xAA0', '\xAA2', '\x3', '\x2', '\x2', '\x2', '\xAA1', '\xA9F', 
		'\x3', '\x2', '\x2', '\x2', '\xAA2', '\xAA3', '\a', '\x297', '\x2', '\x2', 
		'\xAA3', '\xAA5', '\x3', '\x2', '\x2', '\x2', '\xAA4', '\xA89', '\x3', 
		'\x2', '\x2', '\x2', '\xAA4', '\xAA5', '\x3', '\x2', '\x2', '\x2', '\xAA5', 
		'\xAAA', '\x3', '\x2', '\x2', '\x2', '\xAA6', '\xAA7', '\a', '\x165', 
		'\x2', '\x2', '\xAA7', '\xAA8', '\a', 'Q', '\x2', '\x2', '\xAA8', '\xAA9', 
		'\t', '$', '\x2', '\x2', '\xAA9', '\xAAB', '\a', '\x1C8', '\x2', '\x2', 
		'\xAAA', '\xAA6', '\x3', '\x2', '\x2', '\x2', '\xAAA', '\xAAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAAB', '\xAAF', '\x3', '\x2', '\x2', '\x2', '\xAAC', 
		'\xAAD', '\a', '\x1D5', '\x2', '\x2', '\xAAD', '\xAAE', '\a', 'i', '\x2', 
		'\x2', '\xAAE', '\xAB0', '\t', '\x1A', '\x2', '\x2', '\xAAF', '\xAAC', 
		'\x3', '\x2', '\x2', '\x2', '\xAAF', '\xAB0', '\x3', '\x2', '\x2', '\x2', 
		'\xAB0', '\xAB9', '\x3', '\x2', '\x2', '\x2', '\xAB1', '\xAB2', '\a', 
		'\x17C', '\x2', '\x2', '\xAB2', '\xAB8', '\a', '\x290', '\x2', '\x2', 
		'\xAB3', '\xAB4', '\a', '\x17E', '\x2', '\x2', '\xAB4', '\xAB8', '\a', 
		'\x290', '\x2', '\x2', '\xAB5', '\xAB6', '\a', '\xF0', '\x2', '\x2', '\xAB6', 
		'\xAB8', '\a', '\x290', '\x2', '\x2', '\xAB7', '\xAB1', '\x3', '\x2', 
		'\x2', '\x2', '\xAB7', '\xAB3', '\x3', '\x2', '\x2', '\x2', '\xAB7', '\xAB5', 
		'\x3', '\x2', '\x2', '\x2', '\xAB8', '\xABB', '\x3', '\x2', '\x2', '\x2', 
		'\xAB9', '\xAB7', '\x3', '\x2', '\x2', '\x2', '\xAB9', '\xABA', '\x3', 
		'\x2', '\x2', '\x2', '\xABA', '\xADA', '\x3', '\x2', '\x2', '\x2', '\xABB', 
		'\xAB9', '\x3', '\x2', '\x2', '\x2', '\xABC', '\xABD', '\a', '\x1FD', 
		'\x2', '\x2', '\xABD', '\xAD5', '\a', '\x296', '\x2', '\x2', '\xABE', 
		'\xABF', '\a', '\xEE', '\x2', '\x2', '\xABF', '\xAD6', '\x5', '\x112', 
		'\x8A', '\x2', '\xAC0', '\xAC1', '\a', '\x143', '\x2', '\x2', '\xAC1', 
		'\xAD6', '\x5', '\x112', '\x8A', '\x2', '\xAC2', '\xAC3', '\a', '\x12C', 
		'\x2', '\x2', '\xAC3', '\xAD6', '\t', '%', '\x2', '\x2', '\xAC4', '\xAC5', 
		'\a', '\x17D', '\x2', '\x2', '\xAC5', '\xAD6', '\a', '\x290', '\x2', '\x2', 
		'\xAC6', '\xAC7', '\a', '\xCA', '\x2', '\x2', '\xAC7', '\xAD6', '\a', 
		'\x290', '\x2', '\x2', '\xAC8', '\xAC9', '\a', '\xC9', '\x2', '\x2', '\xAC9', 
		'\xACA', '\a', '\xD4', '\x2', '\x2', '\xACA', '\xAD6', '\a', '\x290', 
		'\x2', '\x2', '\xACB', '\xACE', '\a', '\x168', '\x2', '\x2', '\xACC', 
		'\xACF', '\x5', '\x112', '\x8A', '\x2', '\xACD', '\xACF', '\a', '\x157', 
		'\x2', '\x2', '\xACE', '\xACC', '\x3', '\x2', '\x2', '\x2', '\xACE', '\xACD', 
		'\x3', '\x2', '\x2', '\x2', '\xACF', '\xAD6', '\x3', '\x2', '\x2', '\x2', 
		'\xAD0', '\xAD1', '\a', '\x35', '\x2', '\x2', '\xAD1', '\xAD6', '\t', 
		'&', '\x2', '\x2', '\xAD2', '\xAD3', '\a', '\xC0', '\x2', '\x2', '\xAD3', 
		'\xAD6', '\t', '\'', '\x2', '\x2', '\xAD4', '\xAD6', '\a', '\x9F', '\x2', 
		'\x2', '\xAD5', '\xABE', '\x3', '\x2', '\x2', '\x2', '\xAD5', '\xAC0', 
		'\x3', '\x2', '\x2', '\x2', '\xAD5', '\xAC2', '\x3', '\x2', '\x2', '\x2', 
		'\xAD5', '\xAC4', '\x3', '\x2', '\x2', '\x2', '\xAD5', '\xAC6', '\x3', 
		'\x2', '\x2', '\x2', '\xAD5', '\xAC8', '\x3', '\x2', '\x2', '\x2', '\xAD5', 
		'\xACB', '\x3', '\x2', '\x2', '\x2', '\xAD5', '\xAD0', '\x3', '\x2', '\x2', 
		'\x2', '\xAD5', '\xAD2', '\x3', '\x2', '\x2', '\x2', '\xAD5', '\xAD4', 
		'\x3', '\x2', '\x2', '\x2', '\xAD6', '\xAD7', '\x3', '\x2', '\x2', '\x2', 
		'\xAD7', '\xAD5', '\x3', '\x2', '\x2', '\x2', '\xAD7', '\xAD8', '\x3', 
		'\x2', '\x2', '\x2', '\xAD8', '\xAD9', '\x3', '\x2', '\x2', '\x2', '\xAD9', 
		'\xADB', '\a', '\x297', '\x2', '\x2', '\xADA', '\xABC', '\x3', '\x2', 
		'\x2', '\x2', '\xADA', '\xADB', '\x3', '\x2', '\x2', '\x2', '\xADB', '\xADE', 
		'\x3', '\x2', '\x2', '\x2', '\xADC', '\xADD', '\a', '\x20E', '\x2', '\x2', 
		'\xADD', '\xADF', '\x5', '\x36E', '\x1B8', '\x2', '\xADE', '\xADC', '\x3', 
		'\x2', '\x2', '\x2', '\xADE', '\xADF', '\x3', '\x2', '\x2', '\x2', '\xADF', 
		'\xAE1', '\x3', '\x2', '\x2', '\x2', '\xAE0', '\xAE2', '\t', '\x1F', '\x2', 
		'\x2', '\xAE1', '\xAE0', '\x3', '\x2', '\x2', '\x2', '\xAE1', '\xAE2', 
		'\x3', '\x2', '\x2', '\x2', '\xAE2', '\xAF0', '\x3', '\x2', '\x2', '\x2', 
		'\xAE3', '\xAED', '\a', 'V', '\x2', '\x2', '\xAE4', '\xAEE', '\a', '#', 
		'\x2', '\x2', '\xAE5', '\xAEB', '\a', '\xC8', '\x2', '\x2', '\xAE6', '\xAEC', 
		'\a', '\x162', '\x2', '\x2', '\xAE7', '\xAE9', '\t', '(', '\x2', '\x2', 
		'\xAE8', '\xAEA', '\t', ')', '\x2', '\x2', '\xAE9', '\xAE8', '\x3', '\x2', 
		'\x2', '\x2', '\xAE9', '\xAEA', '\x3', '\x2', '\x2', '\x2', '\xAEA', '\xAEC', 
		'\x3', '\x2', '\x2', '\x2', '\xAEB', '\xAE6', '\x3', '\x2', '\x2', '\x2', 
		'\xAEB', '\xAE7', '\x3', '\x2', '\x2', '\x2', '\xAEC', '\xAEE', '\x3', 
		'\x2', '\x2', '\x2', '\xAED', '\xAE4', '\x3', '\x2', '\x2', '\x2', '\xAED', 
		'\xAE5', '\x3', '\x2', '\x2', '\x2', '\xAED', '\xAEE', '\x3', '\x2', '\x2', 
		'\x2', '\xAEE', '\xAF1', '\x3', '\x2', '\x2', '\x2', '\xAEF', '\xAF1', 
		'\a', '\x146', '\x2', '\x2', '\xAF0', '\xAE3', '\x3', '\x2', '\x2', '\x2', 
		'\xAF0', '\xAEF', '\x3', '\x2', '\x2', '\x2', '\xAF0', '\xAF1', '\x3', 
		'\x2', '\x2', '\x2', '\xAF1', '\xAF3', '\x3', '\x2', '\x2', '\x2', '\xAF2', 
		'\xAF4', '\x5', '\x10E', '\x88', '\x2', '\xAF3', '\xAF2', '\x3', '\x2', 
		'\x2', '\x2', '\xAF3', '\xAF4', '\x3', '\x2', '\x2', '\x2', '\xAF4', '\xAFA', 
		'\x3', '\x2', '\x2', '\x2', '\xAF5', '\xAF7', '\t', '\a', '\x2', '\x2', 
		'\xAF6', '\xAF5', '\x3', '\x2', '\x2', '\x2', '\xAF6', '\xAF7', '\x3', 
		'\x2', '\x2', '\x2', '\xAF7', '\xAF8', '\x3', '\x2', '\x2', '\x2', '\xAF8', 
		'\xAF9', '\a', '\x1C7', '\x2', '\x2', '\xAF9', '\xAFB', '\a', '\x137', 
		'\x2', '\x2', '\xAFA', '\xAF6', '\x3', '\x2', '\x2', '\x2', '\xAFA', '\xAFB', 
		'\x3', '\x2', '\x2', '\x2', '\xAFB', '\xB02', '\x3', '\x2', '\x2', '\x2', 
		'\xAFC', '\xAFD', '\a', '\xBF', '\x2', '\x2', '\xAFD', '\xAFE', '\a', 
		'\x12', '\x2', '\x2', '\xAFE', '\xB03', '\a', '\x2B3', '\x2', '\x2', '\xAFF', 
		'\xB00', '\a', '\x14F', '\x2', '\x2', '\xB00', '\xB01', '\a', '\xBF', 
		'\x2', '\x2', '\xB01', '\xB03', '\a', '\x12', '\x2', '\x2', '\xB02', '\xAFC', 
		'\x3', '\x2', '\x2', '\x2', '\xB02', '\xAFF', '\x3', '\x2', '\x2', '\x2', 
		'\xB02', '\xB03', '\x3', '\x2', '\x2', '\x2', '\xB03', '\xB06', '\x3', 
		'\x2', '\x2', '\x2', '\xB04', '\xB05', '\a', '\x14', '\x2', '\x2', '\xB05', 
		'\xB07', '\x5', '\x1C6', '\xE4', '\x2', '\xB06', '\xB04', '\x3', '\x2', 
		'\x2', '\x2', '\xB06', '\xB07', '\x3', '\x2', '\x2', '\x2', '\xB07', '\xB08', 
		'\x3', '\x2', '\x2', '\x2', '\xB08', '\xB09', '\a', '\x2A8', '\x2', '\x2', 
		'\xB09', '\x10D', '\x3', '\x2', '\x2', '\x2', '\xB0A', '\xB0B', '\a', 
		'\x178', '\x2', '\x2', '\xB0B', '\xB0C', '\a', '\x38', '\x2', '\x2', '\xB0C', 
		'\xB0D', '\a', '\x1A0', '\x2', '\x2', '\xB0D', '\xB20', '\x5', '\x342', 
		'\x1A2', '\x2', '\xB0E', '\xB0F', '\a', '\xF9', '\x2', '\x2', '\xB0F', 
		'\xB10', '\a', '\x296', '\x2', '\x2', '\xB10', '\xB11', '\x5', '\x278', 
		'\x13D', '\x2', '\xB11', '\xB1E', '\a', '\x297', '\x2', '\x2', '\xB12', 
		'\xB13', '\a', '\x1FE', '\x2', '\x2', '\xB13', '\xB14', '\a', '\xED', 
		'\x2', '\x2', '\xB14', '\xB19', '\a', '\x296', '\x2', '\x2', '\xB15', 
		'\xB17', '\a', '\x29C', '\x2', '\x2', '\xB16', '\xB15', '\x3', '\x2', 
		'\x2', '\x2', '\xB16', '\xB17', '\x3', '\x2', '\x2', '\x2', '\xB17', '\xB18', 
		'\x3', '\x2', '\x2', '\x2', '\xB18', '\xB1A', '\a', '\x2B3', '\x2', '\x2', 
		'\xB19', '\xB16', '\x3', '\x2', '\x2', '\x2', '\xB1A', '\xB1B', '\x3', 
		'\x2', '\x2', '\x2', '\xB1B', '\xB19', '\x3', '\x2', '\x2', '\x2', '\xB1B', 
		'\xB1C', '\x3', '\x2', '\x2', '\x2', '\xB1C', '\xB1D', '\x3', '\x2', '\x2', 
		'\x2', '\xB1D', '\xB1F', '\a', '\x297', '\x2', '\x2', '\xB1E', '\xB12', 
		'\x3', '\x2', '\x2', '\x2', '\xB1E', '\xB1F', '\x3', '\x2', '\x2', '\x2', 
		'\xB1F', '\xB21', '\x3', '\x2', '\x2', '\x2', '\xB20', '\xB0E', '\x3', 
		'\x2', '\x2', '\x2', '\xB20', '\xB21', '\x3', '\x2', '\x2', '\x2', '\xB21', 
		'\xB22', '\x3', '\x2', '\x2', '\x2', '\xB22', '\xB7B', '\a', '\x296', 
		'\x2', '\x2', '\xB23', '\xB25', '\a', '\x29C', '\x2', '\x2', '\xB24', 
		'\xB23', '\x3', '\x2', '\x2', '\x2', '\xB24', '\xB25', '\x3', '\x2', '\x2', 
		'\x2', '\xB25', '\xB26', '\x3', '\x2', '\x2', '\x2', '\xB26', '\xB27', 
		'\a', '\x178', '\x2', '\x2', '\xB27', '\xB28', '\a', '\x2B3', '\x2', '\x2', 
		'\xB28', '\xB29', '\a', '\x23D', '\x2', '\x2', '\xB29', '\xB2A', '\a', 
		'\x10A', '\x2', '\x2', '\xB2A', '\xB2B', '\a', '\x212', '\x2', '\x2', 
		'\xB2B', '\xB3C', '\a', '\x296', '\x2', '\x2', '\xB2C', '\xB2E', '\a', 
		'\x29C', '\x2', '\x2', '\xB2D', '\xB2C', '\x3', '\x2', '\x2', '\x2', '\xB2D', 
		'\xB2E', '\x3', '\x2', '\x2', '\x2', '\xB2E', '\xB2F', '\x3', '\x2', '\x2', 
		'\x2', '\xB2F', '\xB3D', '\a', '\x292', '\x2', '\x2', '\xB30', '\xB32', 
		'\a', '\x29C', '\x2', '\x2', '\xB31', '\xB30', '\x3', '\x2', '\x2', '\x2', 
		'\xB31', '\xB32', '\x3', '\x2', '\x2', '\x2', '\xB32', '\xB33', '\x3', 
		'\x2', '\x2', '\x2', '\xB33', '\xB3D', '\x5', '\x2A8', '\x155', '\x2', 
		'\xB34', '\xB36', '\a', '\x29C', '\x2', '\x2', '\xB35', '\xB34', '\x3', 
		'\x2', '\x2', '\x2', '\xB35', '\xB36', '\x3', '\x2', '\x2', '\x2', '\xB36', 
		'\xB37', '\x3', '\x2', '\x2', '\x2', '\xB37', '\xB3D', '\x5', '\x366', 
		'\x1B4', '\x2', '\xB38', '\xB3A', '\a', '\x29C', '\x2', '\x2', '\xB39', 
		'\xB38', '\x3', '\x2', '\x2', '\x2', '\xB39', '\xB3A', '\x3', '\x2', '\x2', 
		'\x2', '\xB3A', '\xB3B', '\x3', '\x2', '\x2', '\x2', '\xB3B', '\xB3D', 
		'\a', '\x127', '\x2', '\x2', '\xB3C', '\xB2D', '\x3', '\x2', '\x2', '\x2', 
		'\xB3C', '\xB31', '\x3', '\x2', '\x2', '\x2', '\xB3C', '\xB35', '\x3', 
		'\x2', '\x2', '\x2', '\xB3C', '\xB39', '\x3', '\x2', '\x2', '\x2', '\xB3D', 
		'\xB3E', '\x3', '\x2', '\x2', '\x2', '\xB3E', '\xB3C', '\x3', '\x2', '\x2', 
		'\x2', '\xB3E', '\xB3F', '\x3', '\x2', '\x2', '\x2', '\xB3F', '\xB40', 
		'\x3', '\x2', '\x2', '\x2', '\xB40', '\xB43', '\a', '\x297', '\x2', '\x2', 
		'\xB41', '\xB42', '\a', '\x20E', '\x2', '\x2', '\xB42', '\xB44', '\a', 
		'\x2B3', '\x2', '\x2', '\xB43', '\xB41', '\x3', '\x2', '\x2', '\x2', '\xB43', 
		'\xB44', '\x3', '\x2', '\x2', '\x2', '\xB44', '\xB49', '\x3', '\x2', '\x2', 
		'\x2', '\xB45', '\xB46', '\a', '\x165', '\x2', '\x2', '\xB46', '\xB47', 
		'\a', 'Q', '\x2', '\x2', '\xB47', '\xB48', '\t', '$', '\x2', '\x2', '\xB48', 
		'\xB4A', '\a', '\x1C8', '\x2', '\x2', '\xB49', '\xB45', '\x3', '\x2', 
		'\x2', '\x2', '\xB49', '\xB4A', '\x3', '\x2', '\x2', '\x2', '\xB4A', '\xB4E', 
		'\x3', '\x2', '\x2', '\x2', '\xB4B', '\xB4C', '\a', '\x1D5', '\x2', '\x2', 
		'\xB4C', '\xB4D', '\a', 'i', '\x2', '\x2', '\xB4D', '\xB4F', '\t', '\x1A', 
		'\x2', '\x2', '\xB4E', '\xB4B', '\x3', '\x2', '\x2', '\x2', '\xB4E', '\xB4F', 
		'\x3', '\x2', '\x2', '\x2', '\xB4F', '\xB58', '\x3', '\x2', '\x2', '\x2', 
		'\xB50', '\xB51', '\a', '\x17C', '\x2', '\x2', '\xB51', '\xB57', '\a', 
		'\x290', '\x2', '\x2', '\xB52', '\xB53', '\a', '\x17E', '\x2', '\x2', 
		'\xB53', '\xB57', '\a', '\x290', '\x2', '\x2', '\xB54', '\xB55', '\a', 
		'\xF0', '\x2', '\x2', '\xB55', '\xB57', '\a', '\x290', '\x2', '\x2', '\xB56', 
		'\xB50', '\x3', '\x2', '\x2', '\x2', '\xB56', '\xB52', '\x3', '\x2', '\x2', 
		'\x2', '\xB56', '\xB54', '\x3', '\x2', '\x2', '\x2', '\xB57', '\xB5A', 
		'\x3', '\x2', '\x2', '\x2', '\xB58', '\xB56', '\x3', '\x2', '\x2', '\x2', 
		'\xB58', '\xB59', '\x3', '\x2', '\x2', '\x2', '\xB59', '\xB79', '\x3', 
		'\x2', '\x2', '\x2', '\xB5A', '\xB58', '\x3', '\x2', '\x2', '\x2', '\xB5B', 
		'\xB5C', '\a', '\x1FD', '\x2', '\x2', '\xB5C', '\xB74', '\a', '\x296', 
		'\x2', '\x2', '\xB5D', '\xB5E', '\a', '\xEE', '\x2', '\x2', '\xB5E', '\xB75', 
		'\x5', '\x112', '\x8A', '\x2', '\xB5F', '\xB60', '\a', '\x143', '\x2', 
		'\x2', '\xB60', '\xB75', '\x5', '\x112', '\x8A', '\x2', '\xB61', '\xB62', 
		'\a', '\x12C', '\x2', '\x2', '\xB62', '\xB75', '\t', '%', '\x2', '\x2', 
		'\xB63', '\xB64', '\a', '\x17D', '\x2', '\x2', '\xB64', '\xB75', '\a', 
		'\x290', '\x2', '\x2', '\xB65', '\xB66', '\a', '\xCA', '\x2', '\x2', '\xB66', 
		'\xB75', '\a', '\x290', '\x2', '\x2', '\xB67', '\xB68', '\a', '\xC9', 
		'\x2', '\x2', '\xB68', '\xB69', '\a', '\xD4', '\x2', '\x2', '\xB69', '\xB75', 
		'\a', '\x290', '\x2', '\x2', '\xB6A', '\xB6D', '\a', '\x168', '\x2', '\x2', 
		'\xB6B', '\xB6E', '\x5', '\x112', '\x8A', '\x2', '\xB6C', '\xB6E', '\a', 
		'\x157', '\x2', '\x2', '\xB6D', '\xB6B', '\x3', '\x2', '\x2', '\x2', '\xB6D', 
		'\xB6C', '\x3', '\x2', '\x2', '\x2', '\xB6E', '\xB75', '\x3', '\x2', '\x2', 
		'\x2', '\xB6F', '\xB70', '\a', '\x35', '\x2', '\x2', '\xB70', '\xB75', 
		'\t', '&', '\x2', '\x2', '\xB71', '\xB72', '\a', '\xC0', '\x2', '\x2', 
		'\xB72', '\xB75', '\t', '\'', '\x2', '\x2', '\xB73', '\xB75', '\a', '\x9F', 
		'\x2', '\x2', '\xB74', '\xB5D', '\x3', '\x2', '\x2', '\x2', '\xB74', '\xB5F', 
		'\x3', '\x2', '\x2', '\x2', '\xB74', '\xB61', '\x3', '\x2', '\x2', '\x2', 
		'\xB74', '\xB63', '\x3', '\x2', '\x2', '\x2', '\xB74', '\xB65', '\x3', 
		'\x2', '\x2', '\x2', '\xB74', '\xB67', '\x3', '\x2', '\x2', '\x2', '\xB74', 
		'\xB6A', '\x3', '\x2', '\x2', '\x2', '\xB74', '\xB6F', '\x3', '\x2', '\x2', 
		'\x2', '\xB74', '\xB71', '\x3', '\x2', '\x2', '\x2', '\xB74', '\xB73', 
		'\x3', '\x2', '\x2', '\x2', '\xB75', '\xB76', '\x3', '\x2', '\x2', '\x2', 
		'\xB76', '\xB74', '\x3', '\x2', '\x2', '\x2', '\xB76', '\xB77', '\x3', 
		'\x2', '\x2', '\x2', '\xB77', '\xB78', '\x3', '\x2', '\x2', '\x2', '\xB78', 
		'\xB7A', '\a', '\x297', '\x2', '\x2', '\xB79', '\xB5B', '\x3', '\x2', 
		'\x2', '\x2', '\xB79', '\xB7A', '\x3', '\x2', '\x2', '\x2', '\xB7A', '\xB7C', 
		'\x3', '\x2', '\x2', '\x2', '\xB7B', '\xB24', '\x3', '\x2', '\x2', '\x2', 
		'\xB7C', '\xB7D', '\x3', '\x2', '\x2', '\x2', '\xB7D', '\xB7B', '\x3', 
		'\x2', '\x2', '\x2', '\xB7D', '\xB7E', '\x3', '\x2', '\x2', '\x2', '\xB7E', 
		'\xB7F', '\x3', '\x2', '\x2', '\x2', '\xB7F', '\xB80', '\a', '\x297', 
		'\x2', '\x2', '\xB80', '\x10F', '\x3', '\x2', '\x2', '\x2', '\xB81', '\xB82', 
		'\x5', '\x330', '\x199', '\x2', '\xB82', '\xB84', '\x5', '\x352', '\x1AA', 
		'\x2', '\xB83', '\xB85', '\a', '\x1EF', '\x2', '\x2', '\xB84', '\xB83', 
		'\x3', '\x2', '\x2', '\x2', '\xB84', '\xB85', '\x3', '\x2', '\x2', '\x2', 
		'\xB85', '\xB88', '\x3', '\x2', '\x2', '\x2', '\xB86', '\xB87', '\a', 
		'\x80', '\x2', '\x2', '\xB87', '\xB89', '\x5', '\x278', '\x13D', '\x2', 
		'\xB88', '\xB86', '\x3', '\x2', '\x2', '\x2', '\xB88', '\xB89', '\x3', 
		'\x2', '\x2', '\x2', '\xB89', '\xB9D', '\x3', '\x2', '\x2', '\x2', '\xB8A', 
		'\xB8D', '\a', '\x9F', '\x2', '\x2', '\xB8B', '\xB8C', '\a', '\x23B', 
		'\x2', '\x2', '\xB8C', '\xB8E', '\a', '\x292', '\x2', '\x2', '\xB8D', 
		'\xB8B', '\x3', '\x2', '\x2', '\x2', '\xB8D', '\xB8E', '\x3', '\x2', '\x2', 
		'\x2', '\xB8E', '\xB92', '\x3', '\x2', '\x2', '\x2', '\xB8F', '\xB90', 
		'\a', '\xDC', '\x2', '\x2', '\xB90', '\xB91', '\a', '\x38', '\x2', '\x2', 
		'\xB91', '\xB93', '\a', '\x2B3', '\x2', '\x2', '\xB92', '\xB8F', '\x3', 
		'\x2', '\x2', '\x2', '\xB92', '\xB93', '\x3', '\x2', '\x2', '\x2', '\xB93', 
		'\xB95', '\x3', '\x2', '\x2', '\x2', '\xB94', '\xB96', '\a', '\x292', 
		'\x2', '\x2', '\xB95', '\xB94', '\x3', '\x2', '\x2', '\x2', '\xB95', '\xB96', 
		'\x3', '\x2', '\x2', '\x2', '\xB96', '\xB9B', '\x3', '\x2', '\x2', '\x2', 
		'\xB97', '\xB99', '\a', '\x14F', '\x2', '\x2', '\xB98', '\xB97', '\x3', 
		'\x2', '\x2', '\x2', '\xB98', '\xB99', '\x3', '\x2', '\x2', '\x2', '\xB99', 
		'\xB9A', '\x3', '\x2', '\x2', '\x2', '\xB9A', '\xB9C', '\a', '\x1CA', 
		'\x2', '\x2', '\xB9B', '\xB98', '\x3', '\x2', '\x2', '\x2', '\xB9B', '\xB9C', 
		'\x3', '\x2', '\x2', '\x2', '\xB9C', '\xB9E', '\x3', '\x2', '\x2', '\x2', 
		'\xB9D', '\xB8A', '\x3', '\x2', '\x2', '\x2', '\xB9D', '\xB9E', '\x3', 
		'\x2', '\x2', '\x2', '\xB9E', '\xBA1', '\x3', '\x2', '\x2', '\x2', '\xB9F', 
		'\xBA0', '\a', '\x154', '\x2', '\x2', '\xBA0', '\xBA2', '\a', '\x157', 
		'\x2', '\x2', '\xBA1', '\xB9F', '\x3', '\x2', '\x2', '\x2', '\xBA1', '\xBA2', 
		'\x3', '\x2', '\x2', '\x2', '\xBA2', '\xBA4', '\x3', '\x2', '\x2', '\x2', 
		'\xBA3', '\xBA5', '\t', '\a', '\x2', '\x2', '\xBA4', '\xBA3', '\x3', '\x2', 
		'\x2', '\x2', '\xBA4', '\xBA5', '\x3', '\x2', '\x2', '\x2', '\xBA5', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\xBA6', '\xBA8', '\a', '\x290', '\x2', '\x2', 
		'\xBA7', '\xBA9', '\a', '\x2B3', '\x2', '\x2', '\xBA8', '\xBA7', '\x3', 
		'\x2', '\x2', '\x2', '\xBA8', '\xBA9', '\x3', '\x2', '\x2', '\x2', '\xBA9', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\xBAA', '\xBAB', '\a', '\x93', '\x2', 
		'\x2', '\xBAB', '\xBAC', '\a', '\x20F', '\x2', '\x2', '\xBAC', '\xBAD', 
		'\x5', '\x332', '\x19A', '\x2', '\xBAD', '\xBAE', '\a', '\x2A8', '\x2', 
		'\x2', '\xBAE', '\x115', '\x3', '\x2', '\x2', '\x2', '\xBAF', '\xBB0', 
		'\a', 'P', '\x2', '\x2', '\xBB0', '\xBB1', '\a', '\x165', '\x2', '\x2', 
		'\xBB1', '\xBB2', '\a', 'N', '\x2', '\x2', '\xBB2', '\xBB3', '\x5', '\x332', 
		'\x19A', '\x2', '\xBB3', '\xBB4', '\a', '\x28F', '\x2', '\x2', '\xBB4', 
		'\xBB5', '\x5', '\x330', '\x199', '\x2', '\xBB5', '\xBB6', '\a', '\xFD', 
		'\x2', '\x2', '\xBB6', '\xBB7', '\x5', '\x36A', '\x1B6', '\x2', '\xBB7', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\xBB8', '\xBBB', '\a', 'h', '\x2', 
		'\x2', '\xBB9', '\xBBA', '\a', '\x16D', '\x2', '\x2', '\xBBA', '\xBBC', 
		'\a', '\x1B1', '\x2', '\x2', '\xBBB', '\xBB9', '\x3', '\x2', '\x2', '\x2', 
		'\xBBB', '\xBBC', '\x3', '\x2', '\x2', '\x2', '\xBBC', '\xBBD', '\x3', 
		'\x2', '\x2', '\x2', '\xBBD', '\xBBE', '\a', '\x19B', '\x2', '\x2', '\xBBE', 
		'\xBBF', '\a', '\x206', '\x2', '\x2', '\xBBF', '\xBC0', '\x5', '\x336', 
		'\x19C', '\x2', '\xBC0', '\xBC4', '\a', '\xC8', '\x2', '\x2', '\xBC1', 
		'\xBC2', '\x5', '\x2FC', '\x17F', '\x2', '\xBC2', '\xBC3', '\a', '\x28F', 
		'\x2', '\x2', '\xBC3', '\xBC5', '\x3', '\x2', '\x2', '\x2', '\xBC4', '\xBC1', 
		'\x3', '\x2', '\x2', '\x2', '\xBC4', '\xBC5', '\x3', '\x2', '\x2', '\x2', 
		'\xBC5', '\xBC6', '\x3', '\x2', '\x2', '\x2', '\xBC6', '\xBC9', '\x5', 
		'\x338', '\x19D', '\x2', '\xBC7', '\xBC8', '\a', '\x29E', '\x2', '\x2', 
		'\xBC8', '\xBCA', '\x5', '\x32E', '\x198', '\x2', '\xBC9', '\xBC7', '\x3', 
		'\x2', '\x2', '\x2', '\xBC9', '\xBCA', '\x3', '\x2', '\x2', '\x2', '\xBCA', 
		'\xBE3', '\x3', '\x2', '\x2', '\x2', '\xBCB', '\xBCE', '\a', 'h', '\x2', 
		'\x2', '\xBCC', '\xBCD', '\a', '\x16D', '\x2', '\x2', '\xBCD', '\xBCF', 
		'\a', '\x1B1', '\x2', '\x2', '\xBCE', '\xBCC', '\x3', '\x2', '\x2', '\x2', 
		'\xBCE', '\xBCF', '\x3', '\x2', '\x2', '\x2', '\xBCF', '\xBD0', '\x3', 
		'\x2', '\x2', '\x2', '\xBD0', '\xBD4', '\a', '\x206', '\x2', '\x2', '\xBD1', 
		'\xBD2', '\x5', '\x2FC', '\x17F', '\x2', '\xBD2', '\xBD3', '\a', '\x28F', 
		'\x2', '\x2', '\xBD3', '\xBD5', '\x3', '\x2', '\x2', '\x2', '\xBD4', '\xBD1', 
		'\x3', '\x2', '\x2', '\x2', '\xBD4', '\xBD5', '\x3', '\x2', '\x2', '\x2', 
		'\xBD5', '\xBD6', '\x3', '\x2', '\x2', '\x2', '\xBD6', '\xBD7', '\x5', 
		'\x336', '\x19C', '\x2', '\xBD7', '\xBDB', '\a', '\xC8', '\x2', '\x2', 
		'\xBD8', '\xBD9', '\x5', '\x2FC', '\x17F', '\x2', '\xBD9', '\xBDA', '\a', 
		'\x28F', '\x2', '\x2', '\xBDA', '\xBDC', '\x3', '\x2', '\x2', '\x2', '\xBDB', 
		'\xBD8', '\x3', '\x2', '\x2', '\x2', '\xBDB', '\xBDC', '\x3', '\x2', '\x2', 
		'\x2', '\xBDC', '\xBDD', '\x3', '\x2', '\x2', '\x2', '\xBDD', '\xBE0', 
		'\x5', '\x338', '\x19D', '\x2', '\xBDE', '\xBDF', '\a', '\x29E', '\x2', 
		'\x2', '\xBDF', '\xBE1', '\x5', '\x32E', '\x198', '\x2', '\xBE0', '\xBDE', 
		'\x3', '\x2', '\x2', '\x2', '\xBE0', '\xBE1', '\x3', '\x2', '\x2', '\x2', 
		'\xBE1', '\xBE3', '\x3', '\x2', '\x2', '\x2', '\xBE2', '\xBB8', '\x3', 
		'\x2', '\x2', '\x2', '\xBE2', '\xBCB', '\x3', '\x2', '\x2', '\x2', '\xBE3', 
		'\x119', '\x3', '\x2', '\x2', '\x2', '\xBE4', '\xBE5', '\a', 'P', '\x2', 
		'\x2', '\xBE5', '\xBE6', '\a', '\x165', '\x2', '\x2', '\xBE6', '\xBE7', 
		'\a', '\x20F', '\x2', '\x2', '\xBE7', '\xBE8', '\x5', '\x332', '\x19A', 
		'\x2', '\xBE8', '\xBE9', '\a', '\xFD', '\x2', '\x2', '\xBE9', '\xBEA', 
		'\x5', '\x36A', '\x1B6', '\x2', '\xBEA', '\x11B', '\x3', '\x2', '\x2', 
		'\x2', '\xBEB', '\xBEC', '\a', '\xE', '\x2', '\x2', '\xBEC', '\xBED', 
		'\a', '\x20F', '\x2', '\x2', '\xBED', '\xBF2', '\x5', '\x332', '\x19A', 
		'\x2', '\xBEE', '\xBF3', '\x5', '\x11E', '\x90', '\x2', '\xBEF', '\xBF3', 
		'\x5', '\x122', '\x92', '\x2', '\xBF0', '\xBF3', '\x5', '\x124', '\x93', 
		'\x2', '\xBF1', '\xBF3', '\x5', '\x126', '\x94', '\x2', '\xBF2', '\xBEE', 
		'\x3', '\x2', '\x2', '\x2', '\xBF2', '\xBEF', '\x3', '\x2', '\x2', '\x2', 
		'\xBF2', '\xBF0', '\x3', '\x2', '\x2', '\x2', '\xBF2', '\xBF1', '\x3', 
		'\x2', '\x2', '\x2', '\xBF3', '\x11D', '\x3', '\x2', '\x2', '\x2', '\xBF4', 
		'\xBF7', '\a', '\x5', '\x2', '\x2', '\xBF5', '\xBF6', '\a', '[', '\x2', 
		'\x2', '\xBF6', '\xBF8', '\x5', '\x314', '\x18B', '\x2', '\xBF7', '\xBF5', 
		'\x3', '\x2', '\x2', '\x2', '\xBF7', '\xBF8', '\x3', '\x2', '\x2', '\x2', 
		'\xBF8', '\xBFD', '\x3', '\x2', '\x2', '\x2', '\xBF9', '\xBFE', '\x5', 
		'\x130', '\x99', '\x2', '\xBFA', '\xBFE', '\x5', '\x128', '\x95', '\x2', 
		'\xBFB', '\xBFE', '\x5', '\x12E', '\x98', '\x2', '\xBFC', '\xBFE', '\x5', 
		'\x120', '\x91', '\x2', '\xBFD', '\xBF9', '\x3', '\x2', '\x2', '\x2', 
		'\xBFD', '\xBFA', '\x3', '\x2', '\x2', '\x2', '\xBFD', '\xBFB', '\x3', 
		'\x2', '\x2', '\x2', '\xBFD', '\xBFC', '\x3', '\x2', '\x2', '\x2', '\xBFE', 
		'\x11F', '\x3', '\x2', '\x2', '\x2', '\xBFF', '\xC00', '\a', '\x45', '\x2', 
		'\x2', '\xC00', '\xC01', '\a', '\x296', '\x2', '\x2', '\xC01', '\xC02', 
		'\x5', '\x274', '\x13B', '\x2', '\xC02', '\xC04', '\a', '\x297', '\x2', 
		'\x2', '\xC03', '\xC05', '\a', '\x8D', '\x2', '\x2', '\xC04', '\xC03', 
		'\x3', '\x2', '\x2', '\x2', '\xC04', '\xC05', '\x3', '\x2', '\x2', '\x2', 
		'\xC05', '\x121', '\x3', '\x2', '\x2', '\x2', '\xC06', '\xC07', '\a', 
		'\x93', '\x2', '\x2', '\xC07', '\xC08', '\a', '[', '\x2', '\x2', '\xC08', 
		'\xC09', '\x5', '\x314', '\x18B', '\x2', '\xC09', '\x123', '\x3', '\x2', 
		'\x2', '\x2', '\xC0A', '\xC0B', '\a', '\x9D', '\x2', '\x2', '\xC0B', '\xC0C', 
		'\a', '[', '\x2', '\x2', '\xC0C', '\xC0D', '\x5', '\x314', '\x18B', '\x2', 
		'\xC0D', '\x125', '\x3', '\x2', '\x2', '\x2', '\xC0E', '\xC0F', '\a', 
		'\x8D', '\x2', '\x2', '\xC0F', '\xC10', '\a', '[', '\x2', '\x2', '\xC10', 
		'\xC11', '\x5', '\x314', '\x18B', '\x2', '\xC11', '\x127', '\x3', '\x2', 
		'\x2', '\x2', '\xC12', '\xC13', '\a', '\xC7', '\x2', '\x2', '\xC13', '\xC14', 
		'\a', '\x104', '\x2', '\x2', '\xC14', '\xC15', '\x5', '\x342', '\x1A2', 
		'\x2', '\xC15', '\xC17', '\x5', '\x12A', '\x96', '\x2', '\xC16', '\xC18', 
		'\x5', '\x12C', '\x97', '\x2', '\xC17', '\xC16', '\x3', '\x2', '\x2', 
		'\x2', '\xC17', '\xC18', '\x3', '\x2', '\x2', '\x2', '\xC18', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\xC19', '\xC1A', '\a', '\x1A8', '\x2', '\x2', 
		'\xC1A', '\xC1B', '\x5', '\x332', '\x19A', '\x2', '\xC1B', '\xC1C', '\x5', 
		'\x342', '\x1A2', '\x2', '\xC1C', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		'\xC1D', '\xC1E', '\a', '\x165', '\x2', '\x2', '\xC1E', '\xC22', '\a', 
		'\x86', '\x2', '\x2', '\xC1F', '\xC23', '\a', '=', '\x2', '\x2', '\xC20', 
		'\xC21', '\a', '\x1DF', '\x2', '\x2', '\xC21', '\xC23', '\a', '\x157', 
		'\x2', '\x2', '\xC22', '\xC1F', '\x3', '\x2', '\x2', '\x2', '\xC22', '\xC20', 
		'\x3', '\x2', '\x2', '\x2', '\xC23', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\xC24', '\xC25', '\a', '\x22F', '\x2', '\x2', '\xC25', '\xC26', '\x5', 
		'\x342', '\x1A2', '\x2', '\xC26', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\xC27', '\xC28', '\a', '\x193', '\x2', '\x2', '\xC28', '\xC29', '\a', 
		'\x104', '\x2', '\x2', '\xC29', '\xC2A', '\x5', '\x342', '\x1A2', '\x2', 
		'\xC2A', '\x131', '\x3', '\x2', '\x2', '\x2', '\xC2B', '\xC2C', '\a', 
		'}', '\x2', '\x2', '\xC2C', '\xC2E', '\x5', '\x146', '\xA4', '\x2', '\xC2D', 
		'\xC2B', '\x3', '\x2', '\x2', '\x2', '\xC2D', '\xC2E', '\x3', '\x2', '\x2', 
		'\x2', '\xC2E', '\xC2F', '\x3', '\x2', '\x2', '\x2', '\xC2F', '\xC30', 
		'\a', '\'', '\x2', '\x2', '\xC30', '\xC37', '\x5', '\x164', '\xB3', '\x2', 
		'\xC31', '\xC33', '\a', '\xA9', '\x2', '\x2', '\xC32', '\xC34', '\x5', 
		'\x194', '\xCB', '\x2', '\xC33', '\xC32', '\x3', '\x2', '\x2', '\x2', 
		'\xC34', '\xC35', '\x3', '\x2', '\x2', '\x2', '\xC35', '\xC33', '\x3', 
		'\x2', '\x2', '\x2', '\xC35', '\xC36', '\x3', '\x2', '\x2', '\x2', '\xC36', 
		'\xC38', '\x3', '\x2', '\x2', '\x2', '\xC37', '\xC31', '\x3', '\x2', '\x2', 
		'\x2', '\xC37', '\xC38', '\x3', '\x2', '\x2', '\x2', '\xC38', '\xC39', 
		'\x3', '\x2', '\x2', '\x2', '\xC39', '\xC3A', '\a', '\xA1', '\x2', '\x2', 
		'\xC3A', '\xC3B', '\a', '\x2A8', '\x2', '\x2', '\xC3B', '\x133', '\x3', 
		'\x2', '\x2', '\x2', '\xC3C', '\xC3D', '\a', '\x1C', '\x2', '\x2', '\xC3D', 
		'\xC3E', '\t', '*', '\x2', '\x2', '\xC3E', '\x135', '\x3', '\x2', '\x2', 
		'\x2', '\xC3F', '\xC40', '\x5', '\x36C', '\x1B7', '\x2', '\xC40', '\xC41', 
		'\a', '\x2AA', '\x2', '\x2', '\xC41', '\xC42', '\x5', '\x278', '\x13D', 
		'\x2', '\xC42', '\x137', '\x3', '\x2', '\x2', '\x2', '\xC43', '\xC46', 
		'\a', '\x105', '\x2', '\x2', '\xC44', '\xC47', '\x5', '\x13A', '\x9E', 
		'\x2', '\xC45', '\xC47', '\x5', '\x13C', '\x9F', '\x2', '\xC46', '\xC44', 
		'\x3', '\x2', '\x2', '\x2', '\xC46', '\xC45', '\x3', '\x2', '\x2', '\x2', 
		'\xC47', '\x139', '\x3', '\x2', '\x2', '\x2', '\xC48', '\xC49', '\a', 
		'\x100', '\x2', '\x2', '\xC49', '\xC4A', '\a', '\x139', '\x2', '\x2', 
		'\xC4A', '\xC4B', '\a', '\x292', '\x2', '\x2', '\xC4B', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\xC4C', '\xC4F', '\a', 'H', '\x2', '\x2', '\xC4D', 
		'\xC4E', '\a', '\x139', '\x2', '\x2', '\xC4E', '\xC50', '\a', '\x292', 
		'\x2', '\x2', '\xC4F', '\xC4D', '\x3', '\x2', '\x2', '\x2', '\xC4F', '\xC50', 
		'\x3', '\x2', '\x2', '\x2', '\xC50', '\xC51', '\x3', '\x2', '\x2', '\x2', 
		'\xC51', '\xC52', '\a', '\x10C', '\x2', '\x2', '\xC52', '\xC54', '\x5', 
		'\x36C', '\x1B7', '\x2', '\xC53', '\xC55', '\x5', '\x13E', '\xA0', '\x2', 
		'\xC54', '\xC53', '\x3', '\x2', '\x2', '\x2', '\xC54', '\xC55', '\x3', 
		'\x2', '\x2', '\x2', '\xC55', '\xC58', '\x3', '\x2', '\x2', '\x2', '\xC56', 
		'\xC57', '\a', '\x24F', '\x2', '\x2', '\xC57', '\xC59', '\a', '\x61', 
		'\x2', '\x2', '\xC58', '\xC56', '\x3', '\x2', '\x2', '\x2', '\xC58', '\xC59', 
		'\x3', '\x2', '\x2', '\x2', '\xC59', '\xC5B', '\x3', '\x2', '\x2', '\x2', 
		'\xC5A', '\xC5C', '\x5', '\x140', '\xA1', '\x2', '\xC5B', '\xC5A', '\x3', 
		'\x2', '\x2', '\x2', '\xC5B', '\xC5C', '\x3', '\x2', '\x2', '\x2', '\xC5C', 
		'\x13D', '\x3', '\x2', '\x2', '\x2', '\xC5D', '\xC5E', '\a', '\n', '\x2', 
		'\x2', '\xC5E', '\xC5F', '\a', '\xED', '\x2', '\x2', '\xC5F', '\xC60', 
		'\a', '\x296', '\x2', '\x2', '\xC60', '\xC61', '\x5', '\x276', '\x13C', 
		'\x2', '\xC61', '\xC62', '\a', '\x297', '\x2', '\x2', '\xC62', '\x13F', 
		'\x3', '\x2', '\x2', '\x2', '\xC63', '\xC64', '\a', '\x176', '\x2', '\x2', 
		'\xC64', '\xC69', '\a', '\x296', '\x2', '\x2', '\xC65', '\xC6A', '\x5', 
		'\x276', '\x13C', '\x2', '\xC66', '\xC67', '\a', '\x28F', '\x2', '\x2', 
		'\xC67', '\xC68', '\a', '\x28F', '\x2', '\x2', '\xC68', '\xC6A', '\a', 
		'\x28F', '\x2', '\x2', '\xC69', '\xC65', '\x3', '\x2', '\x2', '\x2', '\xC69', 
		'\xC66', '\x3', '\x2', '\x2', '\x2', '\xC6A', '\xC6B', '\x3', '\x2', '\x2', 
		'\x2', '\xC6B', '\xC6C', '\a', '\x297', '\x2', '\x2', '\xC6C', '\x141', 
		'\x3', '\x2', '\x2', '\x2', '\xC6D', '\xC71', '\x5', '\x304', '\x183', 
		'\x2', '\xC6E', '\xC70', '\t', '+', '\x2', '\x2', '\xC6F', '\xC6E', '\x3', 
		'\x2', '\x2', '\x2', '\xC70', '\xC73', '\x3', '\x2', '\x2', '\x2', '\xC71', 
		'\xC6F', '\x3', '\x2', '\x2', '\x2', '\xC71', '\xC72', '\x3', '\x2', '\x2', 
		'\x2', '\xC72', '\xC75', '\x3', '\x2', '\x2', '\x2', '\xC73', '\xC71', 
		'\x3', '\x2', '\x2', '\x2', '\xC74', '\xC76', '\x5', '\x350', '\x1A9', 
		'\x2', '\xC75', '\xC74', '\x3', '\x2', '\x2', '\x2', '\xC75', '\xC76', 
		'\x3', '\x2', '\x2', '\x2', '\xC76', '\xC78', '\x3', '\x2', '\x2', '\x2', 
		'\xC77', '\xC79', '\x5', '\x144', '\xA3', '\x2', '\xC78', '\xC77', '\x3', 
		'\x2', '\x2', '\x2', '\xC78', '\xC79', '\x3', '\x2', '\x2', '\x2', '\xC79', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\xC7A', '\xC7B', '\t', ',', '\x2', 
		'\x2', '\xC7B', '\xC7C', '\x5', '\x278', '\x13D', '\x2', '\xC7C', '\x145', 
		'\x3', '\x2', '\x2', '\x2', '\xC7D', '\xC7F', '\x5', '\x148', '\xA5', 
		'\x2', '\xC7E', '\xC7D', '\x3', '\x2', '\x2', '\x2', '\xC7F', '\xC80', 
		'\x3', '\x2', '\x2', '\x2', '\xC80', '\xC7E', '\x3', '\x2', '\x2', '\x2', 
		'\xC80', '\xC81', '\x3', '\x2', '\x2', '\x2', '\xC81', '\x147', '\x3', 
		'\x2', '\x2', '\x2', '\xC82', '\xC8D', '\x5', '\x14A', '\xA6', '\x2', 
		'\xC83', '\xC8D', '\x5', '\x14C', '\xA7', '\x2', '\xC84', '\xC8D', '\x5', 
		'\x14E', '\xA8', '\x2', '\xC85', '\xC8D', '\x5', '\x152', '\xAA', '\x2', 
		'\xC86', '\xC8D', '\x5', '\x154', '\xAB', '\x2', '\xC87', '\xC8D', '\x5', 
		'\x15C', '\xAF', '\x2', '\xC88', '\xC8D', '\x5', ' ', '\x11', '\x2', '\xC89', 
		'\xC8D', '\x5', '\"', '\x12', '\x2', '\xC8A', '\xC8D', '\x5', ',', '\x17', 
		'\x2', '\xC8B', '\xC8D', '\x5', '*', '\x16', '\x2', '\xC8C', '\xC82', 
		'\x3', '\x2', '\x2', '\x2', '\xC8C', '\xC83', '\x3', '\x2', '\x2', '\x2', 
		'\xC8C', '\xC84', '\x3', '\x2', '\x2', '\x2', '\xC8C', '\xC85', '\x3', 
		'\x2', '\x2', '\x2', '\xC8C', '\xC86', '\x3', '\x2', '\x2', '\x2', '\xC8C', 
		'\xC87', '\x3', '\x2', '\x2', '\x2', '\xC8C', '\xC88', '\x3', '\x2', '\x2', 
		'\x2', '\xC8C', '\xC89', '\x3', '\x2', '\x2', '\x2', '\xC8C', '\xC8A', 
		'\x3', '\x2', '\x2', '\x2', '\xC8C', '\xC8B', '\x3', '\x2', '\x2', '\x2', 
		'\xC8D', '\x149', '\x3', '\x2', '\x2', '\x2', '\xC8E', '\xC90', '\x5', 
		'\x36C', '\x1B7', '\x2', '\xC8F', '\xC91', '\a', 'Z', '\x2', '\x2', '\xC90', 
		'\xC8F', '\x3', '\x2', '\x2', '\x2', '\xC90', '\xC91', '\x3', '\x2', '\x2', 
		'\x2', '\xC91', '\xC92', '\x3', '\x2', '\x2', '\x2', '\xC92', '\xC95', 
		'\x5', '\x350', '\x1A9', '\x2', '\xC93', '\xC94', '\a', '\x154', '\x2', 
		'\x2', '\xC94', '\xC96', '\a', '\x157', '\x2', '\x2', '\xC95', '\xC93', 
		'\x3', '\x2', '\x2', '\x2', '\xC95', '\xC96', '\x3', '\x2', '\x2', '\x2', 
		'\xC96', '\xC98', '\x3', '\x2', '\x2', '\x2', '\xC97', '\xC99', '\x5', 
		'\x144', '\xA3', '\x2', '\xC98', '\xC97', '\x3', '\x2', '\x2', '\x2', 
		'\xC98', '\xC99', '\x3', '\x2', '\x2', '\x2', '\xC99', '\xC9A', '\x3', 
		'\x2', '\x2', '\x2', '\xC9A', '\xC9B', '\a', '\x2A8', '\x2', '\x2', '\xC9B', 
		'\x14B', '\x3', '\x2', '\x2', '\x2', '\xC9C', '\xC9D', '\a', '\x203', 
		'\x2', '\x2', '\xC9D', '\xC9E', '\x5', '\x36C', '\x1B7', '\x2', '\xC9E', 
		'\xC9F', '\a', '\xFD', '\x2', '\x2', '\xC9F', '\xCA5', '\x5', '\x350', 
		'\x1A9', '\x2', '\xCA0', '\xCA1', '\a', '\x1A0', '\x2', '\x2', '\xCA1', 
		'\xCA2', '\x5', '\x278', '\x13D', '\x2', '\xCA2', '\xCA3', '\a', '\x28E', 
		'\x2', '\x2', '\xCA3', '\xCA4', '\x5', '\x278', '\x13D', '\x2', '\xCA4', 
		'\xCA6', '\x3', '\x2', '\x2', '\x2', '\xCA5', '\xCA0', '\x3', '\x2', '\x2', 
		'\x2', '\xCA5', '\xCA6', '\x3', '\x2', '\x2', '\x2', '\xCA6', '\xCA9', 
		'\x3', '\x2', '\x2', '\x2', '\xCA7', '\xCA8', '\a', '\x154', '\x2', '\x2', 
		'\xCA8', '\xCAA', '\a', '\x157', '\x2', '\x2', '\xCA9', '\xCA7', '\x3', 
		'\x2', '\x2', '\x2', '\xCA9', '\xCAA', '\x3', '\x2', '\x2', '\x2', '\xCAA', 
		'\xCAB', '\x3', '\x2', '\x2', '\x2', '\xCAB', '\xCAC', '\a', '\x2A8', 
		'\x2', '\x2', '\xCAC', '\x14D', '\x3', '\x2', '\x2', '\x2', '\xCAD', '\xCAE', 
		'\a', 'n', '\x2', '\x2', '\xCAE', '\xCBA', '\x5', '\x36C', '\x1B7', '\x2', 
		'\xCAF', '\xCB4', '\a', '\x296', '\x2', '\x2', '\xCB0', '\xCB2', '\a', 
		'\x29C', '\x2', '\x2', '\xCB1', '\xCB0', '\x3', '\x2', '\x2', '\x2', '\xCB1', 
		'\xCB2', '\x3', '\x2', '\x2', '\x2', '\xCB2', '\xCB3', '\x3', '\x2', '\x2', 
		'\x2', '\xCB3', '\xCB5', '\x5', '\x150', '\xA9', '\x2', '\xCB4', '\xCB1', 
		'\x3', '\x2', '\x2', '\x2', '\xCB5', '\xCB6', '\x3', '\x2', '\x2', '\x2', 
		'\xCB6', '\xCB4', '\x3', '\x2', '\x2', '\x2', '\xCB6', '\xCB7', '\x3', 
		'\x2', '\x2', '\x2', '\xCB7', '\xCB8', '\x3', '\x2', '\x2', '\x2', '\xCB8', 
		'\xCB9', '\a', '\x297', '\x2', '\x2', '\xCB9', '\xCBB', '\x3', '\x2', 
		'\x2', '\x2', '\xCBA', '\xCAF', '\x3', '\x2', '\x2', '\x2', '\xCBA', '\xCBB', 
		'\x3', '\x2', '\x2', '\x2', '\xCBB', '\xCBE', '\x3', '\x2', '\x2', '\x2', 
		'\xCBC', '\xCBD', '\a', '\x1BC', '\x2', '\x2', '\xCBD', '\xCBF', '\x5', 
		'\x350', '\x1A9', '\x2', '\xCBE', '\xCBC', '\x3', '\x2', '\x2', '\x2', 
		'\xCBE', '\xCBF', '\x3', '\x2', '\x2', '\x2', '\xCBF', '\xCC2', '\x3', 
		'\x2', '\x2', '\x2', '\xCC0', '\xCC1', '\a', '\xFD', '\x2', '\x2', '\xCC1', 
		'\xCC3', '\x5', '\x1BC', '\xDF', '\x2', '\xCC2', '\xCC0', '\x3', '\x2', 
		'\x2', '\x2', '\xCC2', '\xCC3', '\x3', '\x2', '\x2', '\x2', '\xCC3', '\xCC4', 
		'\x3', '\x2', '\x2', '\x2', '\xCC4', '\xCC5', '\a', '\x2A8', '\x2', '\x2', 
		'\xCC5', '\x14F', '\x3', '\x2', '\x2', '\x2', '\xCC6', '\xCCB', '\x5', 
		'\x304', '\x183', '\x2', '\xCC7', '\xCC9', '\a', '\xED', '\x2', '\x2', 
		'\xCC8', '\xCC7', '\x3', '\x2', '\x2', '\x2', '\xCC8', '\xCC9', '\x3', 
		'\x2', '\x2', '\x2', '\xCC9', '\xCCA', '\x3', '\x2', '\x2', '\x2', '\xCCA', 
		'\xCCC', '\x5', '\x350', '\x1A9', '\x2', '\xCCB', '\xCC8', '\x3', '\x2', 
		'\x2', '\x2', '\xCCB', '\xCCC', '\x3', '\x2', '\x2', '\x2', '\xCCC', '\xCCE', 
		'\x3', '\x2', '\x2', '\x2', '\xCCD', '\xCCF', '\x5', '\x144', '\xA3', 
		'\x2', '\xCCE', '\xCCD', '\x3', '\x2', '\x2', '\x2', '\xCCE', '\xCCF', 
		'\x3', '\x2', '\x2', '\x2', '\xCCF', '\x151', '\x3', '\x2', '\x2', '\x2', 
		'\xCD0', '\xCD1', '\x5', '\x36C', '\x1B7', '\x2', '\xCD1', '\xCD2', '\a', 
		'\xA9', '\x2', '\x2', '\xCD2', '\xCD3', '\a', '\x2A8', '\x2', '\x2', '\xCD3', 
		'\x153', '\x3', '\x2', '\x2', '\x2', '\xCD4', '\xCF3', '\a', '\x18E', 
		'\x2', '\x2', '\xCD5', '\xCF4', '\a', '\x1DB', '\x2', '\x2', '\xCD6', 
		'\xCF4', '\a', '!', '\x2', '\x2', '\xCD7', '\xCD8', '\a', '\xAA', '\x2', 
		'\x2', '\xCD8', '\xCD9', '\a', '\x296', '\x2', '\x2', '\xCD9', '\xCDA', 
		'\x5', '\x31C', '\x18F', '\x2', '\xCDA', '\xCDB', '\a', '\x29C', '\x2', 
		'\x2', '\xCDB', '\xCDC', '\x5', '\x368', '\x1B5', '\x2', '\xCDC', '\xCDD', 
		'\a', '\x297', '\x2', '\x2', '\xCDD', '\xCF4', '\x3', '\x2', '\x2', '\x2', 
		'\xCDE', '\xCDF', '\a', '\xF1', '\x2', '\x2', '\xCDF', '\xCE0', '\a', 
		'\x296', '\x2', '\x2', '\xCE0', '\xCE1', '\x5', '\x36C', '\x1B7', '\x2', 
		'\xCE1', '\xCE2', '\a', '\x29C', '\x2', '\x2', '\xCE2', '\xCE3', '\x5', 
		'\x278', '\x13D', '\x2', '\xCE3', '\xCE4', '\a', '\x297', '\x2', '\x2', 
		'\xCE4', '\xCF4', '\x3', '\x2', '\x2', '\x2', '\xCE5', '\xCE6', '\a', 
		'\x1B6', '\x2', '\x2', '\xCE6', '\xCE9', '\a', '\x296', '\x2', '\x2', 
		'\xCE7', '\xCEA', '\x5', '\x36C', '\x1B7', '\x2', '\xCE8', '\xCEA', '\a', 
		'\x80', '\x2', '\x2', '\xCE9', '\xCE7', '\x3', '\x2', '\x2', '\x2', '\xCE9', 
		'\xCE8', '\x3', '\x2', '\x2', '\x2', '\xCEA', '\xCED', '\x3', '\x2', '\x2', 
		'\x2', '\xCEB', '\xCEC', '\a', '\x29C', '\x2', '\x2', '\xCEC', '\xCEE', 
		'\x5', '\x36C', '\x1B7', '\x2', '\xCED', '\xCEB', '\x3', '\x2', '\x2', 
		'\x2', '\xCEE', '\xCEF', '\x3', '\x2', '\x2', '\x2', '\xCEF', '\xCED', 
		'\x3', '\x2', '\x2', '\x2', '\xCEF', '\xCF0', '\x3', '\x2', '\x2', '\x2', 
		'\xCF0', '\xCF1', '\x3', '\x2', '\x2', '\x2', '\xCF1', '\xCF2', '\a', 
		'\x297', '\x2', '\x2', '\xCF2', '\xCF4', '\x3', '\x2', '\x2', '\x2', '\xCF3', 
		'\xCD5', '\x3', '\x2', '\x2', '\x2', '\xCF3', '\xCD6', '\x3', '\x2', '\x2', 
		'\x2', '\xCF3', '\xCD7', '\x3', '\x2', '\x2', '\x2', '\xCF3', '\xCDE', 
		'\x3', '\x2', '\x2', '\x2', '\xCF3', '\xCE5', '\x3', '\x2', '\x2', '\x2', 
		'\xCF4', '\xCF5', '\x3', '\x2', '\x2', '\x2', '\xCF5', '\xCF6', '\a', 
		'\x2A8', '\x2', '\x2', '\xCF6', '\x155', '\x3', '\x2', '\x2', '\x2', '\xCF7', 
		'\xCF8', '\a', '\x1A4', '\x2', '\x2', '\xCF8', '\xCFD', '\a', '\x296', 
		'\x2', '\x2', '\xCF9', '\xCFB', '\a', '\x29C', '\x2', '\x2', '\xCFA', 
		'\xCF9', '\x3', '\x2', '\x2', '\x2', '\xCFA', '\xCFB', '\x3', '\x2', '\x2', 
		'\x2', '\xCFB', '\xCFC', '\x3', '\x2', '\x2', '\x2', '\xCFC', '\xCFE', 
		'\x5', '\x158', '\xAD', '\x2', '\xCFD', '\xCFA', '\x3', '\x2', '\x2', 
		'\x2', '\xCFE', '\xCFF', '\x3', '\x2', '\x2', '\x2', '\xCFF', '\xCFD', 
		'\x3', '\x2', '\x2', '\x2', '\xCFF', '\xD00', '\x3', '\x2', '\x2', '\x2', 
		'\xD00', '\xD01', '\x3', '\x2', '\x2', '\x2', '\xD01', '\xD02', '\a', 
		'\x297', '\x2', '\x2', '\xD02', '\x157', '\x3', '\x2', '\x2', '\x2', '\xD03', 
		'\xD05', '\x5', '\x330', '\x199', '\x2', '\xD04', '\xD06', '\x5', '\x350', 
		'\x1A9', '\x2', '\xD05', '\xD04', '\x3', '\x2', '\x2', '\x2', '\xD05', 
		'\xD06', '\x3', '\x2', '\x2', '\x2', '\xD06', '\xD09', '\x3', '\x2', '\x2', 
		'\x2', '\xD07', '\xD08', '\a', '\x154', '\x2', '\x2', '\xD08', '\xD0A', 
		'\a', '\x157', '\x2', '\x2', '\xD09', '\xD07', '\x3', '\x2', '\x2', '\x2', 
		'\xD09', '\xD0A', '\x3', '\x2', '\x2', '\x2', '\xD0A', '\xD0C', '\x3', 
		'\x2', '\x2', '\x2', '\xD0B', '\xD0D', '\x5', '\x144', '\xA3', '\x2', 
		'\xD0C', '\xD0B', '\x3', '\x2', '\x2', '\x2', '\xD0C', '\xD0D', '\x3', 
		'\x2', '\x2', '\x2', '\xD0D', '\x159', '\x3', '\x2', '\x2', '\x2', '\xD0E', 
		'\xD0F', '\a', '\x1AA', '\x2', '\x2', '\xD0F', '\xD12', '\a', 'n', '\x2', 
		'\x2', '\xD10', '\xD11', '\a', '\x1BC', '\x2', '\x2', '\xD11', '\xD13', 
		'\x5', '\x350', '\x1A9', '\x2', '\xD12', '\xD10', '\x3', '\x2', '\x2', 
		'\x2', '\xD12', '\xD13', '\x3', '\x2', '\x2', '\x2', '\xD13', '\x15B', 
		'\x3', '\x2', '\x2', '\x2', '\xD14', '\xD15', '\a', '\x229', '\x2', '\x2', 
		'\xD15', '\xD16', '\x5', '\x36C', '\x1B7', '\x2', '\xD16', '\xD1B', '\a', 
		'\xFD', '\x2', '\x2', '\xD17', '\xD1C', '\x5', '\x15E', '\xB0', '\x2', 
		'\xD18', '\xD1C', '\x5', '\x162', '\xB2', '\x2', '\xD19', '\xD1C', '\x5', 
		'\x156', '\xAC', '\x2', '\xD1A', '\xD1C', '\x5', '\x15A', '\xAE', '\x2', 
		'\xD1B', '\xD17', '\x3', '\x2', '\x2', '\x2', '\xD1B', '\xD18', '\x3', 
		'\x2', '\x2', '\x2', '\xD1B', '\xD19', '\x3', '\x2', '\x2', '\x2', '\xD1B', 
		'\xD1A', '\x3', '\x2', '\x2', '\x2', '\xD1C', '\xD1D', '\x3', '\x2', '\x2', 
		'\x2', '\xD1D', '\xD1E', '\a', '\x2A8', '\x2', '\x2', '\xD1E', '\x15D', 
		'\x3', '\x2', '\x2', '\x2', '\xD1F', '\xD20', '\a', '\x20F', '\x2', '\x2', 
		'\xD20', '\xD21', '\a', '\x15F', '\x2', '\x2', '\xD21', '\xD23', '\x5', 
		'\x350', '\x1A9', '\x2', '\xD22', '\xD24', '\x5', '\x160', '\xB1', '\x2', 
		'\xD23', '\xD22', '\x3', '\x2', '\x2', '\x2', '\xD23', '\xD24', '\x3', 
		'\x2', '\x2', '\x2', '\xD24', '\xD27', '\x3', '\x2', '\x2', '\x2', '\xD25', 
		'\xD26', '\a', '\x154', '\x2', '\x2', '\xD26', '\xD28', '\a', '\x157', 
		'\x2', '\x2', '\xD27', '\xD25', '\x3', '\x2', '\x2', '\x2', '\xD27', '\xD28', 
		'\x3', '\x2', '\x2', '\x2', '\xD28', '\x15F', '\x3', '\x2', '\x2', '\x2', 
		'\xD29', '\xD2C', '\a', '\xE6', '\x2', '\x2', '\xD2A', '\xD2C', '\a', 
		'\xE7', '\x2', '\x2', '\xD2B', '\xD29', '\x3', '\x2', '\x2', '\x2', '\xD2B', 
		'\xD2A', '\x3', '\x2', '\x2', '\x2', '\xD2C', '\xD2D', '\x3', '\x2', '\x2', 
		'\x2', '\xD2D', '\xD2E', '\a', '\x38', '\x2', '\x2', '\xD2E', '\xD2F', 
		'\x5', '\x350', '\x1A9', '\x2', '\xD2F', '\x161', '\x3', '\x2', '\x2', 
		'\x2', '\xD30', '\xD34', '\a', '\x242', '\x2', '\x2', '\xD31', '\xD32', 
		'\a', '\x243', '\x2', '\x2', '\xD32', '\xD34', '\a', '\x13', '\x2', '\x2', 
		'\xD33', '\xD30', '\x3', '\x2', '\x2', '\x2', '\xD33', '\xD31', '\x3', 
		'\x2', '\x2', '\x2', '\xD34', '\xD35', '\x3', '\x2', '\x2', '\x2', '\xD35', 
		'\xD36', '\a', '\x296', '\x2', '\x2', '\xD36', '\xD37', '\x5', '\x278', 
		'\x13D', '\x2', '\xD37', '\xD38', '\a', '\x297', '\x2', '\x2', '\xD38', 
		'\xD39', '\a', '\x15F', '\x2', '\x2', '\xD39', '\xD3C', '\x5', '\x350', 
		'\x1A9', '\x2', '\xD3A', '\xD3B', '\a', '\x154', '\x2', '\x2', '\xD3B', 
		'\xD3D', '\a', '\x157', '\x2', '\x2', '\xD3C', '\xD3A', '\x3', '\x2', 
		'\x2', '\x2', '\xD3C', '\xD3D', '\x3', '\x2', '\x2', '\x2', '\xD3D', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\xD3E', '\xD3F', '\x5', '\x168', '\xB5', 
		'\x2', '\xD3F', '\xD40', '\t', '-', '\x2', '\x2', '\xD40', '\xD43', '\x3', 
		'\x2', '\x2', '\x2', '\xD41', '\xD43', '\x5', '\x166', '\xB4', '\x2', 
		'\xD42', '\xD3E', '\x3', '\x2', '\x2', '\x2', '\xD42', '\xD41', '\x3', 
		'\x2', '\x2', '\x2', '\xD43', '\xD44', '\x3', '\x2', '\x2', '\x2', '\xD44', 
		'\xD42', '\x3', '\x2', '\x2', '\x2', '\xD44', '\xD45', '\x3', '\x2', '\x2', 
		'\x2', '\xD45', '\x165', '\x3', '\x2', '\x2', '\x2', '\xD46', '\xD47', 
		'\a', '\x2A6', '\x2', '\x2', '\xD47', '\xD48', '\a', '\x2A6', '\x2', '\x2', 
		'\xD48', '\xD49', '\x5', '\x316', '\x18C', '\x2', '\xD49', '\xD4A', '\a', 
		'\x2A5', '\x2', '\x2', '\xD4A', '\xD4B', '\a', '\x2A5', '\x2', '\x2', 
		'\xD4B', '\x167', '\x3', '\x2', '\x2', '\x2', '\xD4C', '\xD4D', '\a', 
		'h', '\x2', '\x2', '\xD4D', '\xD61', '\x5', '\x16A', '\xB6', '\x2', '\xD4E', 
		'\xD4F', '\a', '\x227', '\x2', '\x2', '\xD4F', '\xD61', '\x5', '\x16A', 
		'\xB6', '\x2', '\xD50', '\xD61', '\x5', '\x192', '\xCA', '\x2', '\xD51', 
		'\xD61', '\x5', '\x198', '\xCD', '\x2', '\xD52', '\xD61', '\x5', '\x16C', 
		'\xB7', '\x2', '\xD53', '\xD61', '\x5', '\x16E', '\xB8', '\x2', '\xD54', 
		'\xD61', '\x5', '\x170', '\xB9', '\x2', '\xD55', '\xD61', '\x5', '\x172', 
		'\xBA', '\x2', '\xD56', '\xD61', '\x5', '\x174', '\xBB', '\x2', '\xD57', 
		'\xD61', '\x5', '\x17A', '\xBE', '\x2', '\xD58', '\xD61', '\x5', '\x17E', 
		'\xC0', '\x2', '\xD59', '\xD61', '\x5', '\x188', '\xC5', '\x2', '\xD5A', 
		'\xD61', '\x5', '\x18A', '\xC6', '\x2', '\xD5B', '\xD61', '\x5', '\x18C', 
		'\xC7', '\x2', '\xD5C', '\xD61', '\x5', '\x298', '\x14D', '\x2', '\xD5D', 
		'\xD61', '\x5', '\x19A', '\xCE', '\x2', '\xD5E', '\xD61', '\x5', '\x18E', 
		'\xC8', '\x2', '\xD5F', '\xD61', '\x5', '\x190', '\xC9', '\x2', '\xD60', 
		'\xD4C', '\x3', '\x2', '\x2', '\x2', '\xD60', '\xD4E', '\x3', '\x2', '\x2', 
		'\x2', '\xD60', '\xD50', '\x3', '\x2', '\x2', '\x2', '\xD60', '\xD51', 
		'\x3', '\x2', '\x2', '\x2', '\xD60', '\xD52', '\x3', '\x2', '\x2', '\x2', 
		'\xD60', '\xD53', '\x3', '\x2', '\x2', '\x2', '\xD60', '\xD54', '\x3', 
		'\x2', '\x2', '\x2', '\xD60', '\xD55', '\x3', '\x2', '\x2', '\x2', '\xD60', 
		'\xD56', '\x3', '\x2', '\x2', '\x2', '\xD60', '\xD57', '\x3', '\x2', '\x2', 
		'\x2', '\xD60', '\xD58', '\x3', '\x2', '\x2', '\x2', '\xD60', '\xD59', 
		'\x3', '\x2', '\x2', '\x2', '\xD60', '\xD5A', '\x3', '\x2', '\x2', '\x2', 
		'\xD60', '\xD5B', '\x3', '\x2', '\x2', '\x2', '\xD60', '\xD5C', '\x3', 
		'\x2', '\x2', '\x2', '\xD60', '\xD5D', '\x3', '\x2', '\x2', '\x2', '\xD60', 
		'\xD5E', '\x3', '\x2', '\x2', '\x2', '\xD60', '\xD5F', '\x3', '\x2', '\x2', 
		'\x2', '\xD61', '\x169', '\x3', '\x2', '\x2', '\x2', '\xD62', '\xD64', 
		'\n', '.', '\x2', '\x2', '\xD63', '\xD62', '\x3', '\x2', '\x2', '\x2', 
		'\xD64', '\xD65', '\x3', '\x2', '\x2', '\x2', '\xD65', '\xD63', '\x3', 
		'\x2', '\x2', '\x2', '\xD65', '\xD66', '\x3', '\x2', '\x2', '\x2', '\xD66', 
		'\x16B', '\x3', '\x2', '\x2', '\x2', '\xD67', '\xD6A', '\x5', '\x35A', 
		'\x1AE', '\x2', '\xD68', '\xD6A', '\x5', '\x358', '\x1AD', '\x2', '\xD69', 
		'\xD67', '\x3', '\x2', '\x2', '\x2', '\xD69', '\xD68', '\x3', '\x2', '\x2', 
		'\x2', '\xD6A', '\xD6B', '\x3', '\x2', '\x2', '\x2', '\xD6B', '\xD6C', 
		'\a', '\x29F', '\x2', '\x2', '\xD6C', '\xD6D', '\x5', '\x278', '\x13D', 
		'\x2', '\xD6D', '\x16D', '\x3', '\x2', '\x2', '\x2', '\xD6E', '\xD70', 
		'\a', '\x62', '\x2', '\x2', '\xD6F', '\xD71', '\x5', '\x316', '\x18C', 
		'\x2', '\xD70', '\xD6F', '\x3', '\x2', '\x2', '\x2', '\xD70', '\xD71', 
		'\x3', '\x2', '\x2', '\x2', '\xD71', '\xD74', '\x3', '\x2', '\x2', '\x2', 
		'\xD72', '\xD73', '\a', '\x24B', '\x2', '\x2', '\xD73', '\xD75', '\x5', 
		'\x274', '\x13B', '\x2', '\xD74', '\xD72', '\x3', '\x2', '\x2', '\x2', 
		'\xD74', '\xD75', '\x3', '\x2', '\x2', '\x2', '\xD75', '\x16F', '\x3', 
		'\x2', '\x2', '\x2', '\xD76', '\xD78', '\a', '\xB1', '\x2', '\x2', '\xD77', 
		'\xD79', '\x5', '\x316', '\x18C', '\x2', '\xD78', '\xD77', '\x3', '\x2', 
		'\x2', '\x2', '\xD78', '\xD79', '\x3', '\x2', '\x2', '\x2', '\xD79', '\xD7C', 
		'\x3', '\x2', '\x2', '\x2', '\xD7A', '\xD7B', '\a', '\x24B', '\x2', '\x2', 
		'\xD7B', '\xD7D', '\x5', '\x274', '\x13B', '\x2', '\xD7C', '\xD7A', '\x3', 
		'\x2', '\x2', '\x2', '\xD7C', '\xD7D', '\x3', '\x2', '\x2', '\x2', '\xD7D', 
		'\x171', '\x3', '\x2', '\x2', '\x2', '\xD7E', '\xD7F', '\a', '\xD0', '\x2', 
		'\x2', '\xD7F', '\xD80', '\x5', '\x316', '\x18C', '\x2', '\xD80', '\x173', 
		'\x3', '\x2', '\x2', '\x2', '\xD81', '\xD82', '\a', '\xDF', '\x2', '\x2', 
		'\xD82', '\xD83', '\x5', '\x274', '\x13B', '\x2', '\xD83', '\xD84', '\a', 
		'\x213', '\x2', '\x2', '\xD84', '\xD88', '\x5', '\x164', '\xB3', '\x2', 
		'\xD85', '\xD87', '\x5', '\x176', '\xBC', '\x2', '\xD86', '\xD85', '\x3', 
		'\x2', '\x2', '\x2', '\xD87', '\xD8A', '\x3', '\x2', '\x2', '\x2', '\xD88', 
		'\xD86', '\x3', '\x2', '\x2', '\x2', '\xD88', '\xD89', '\x3', '\x2', '\x2', 
		'\x2', '\xD89', '\xD8C', '\x3', '\x2', '\x2', '\x2', '\xD8A', '\xD88', 
		'\x3', '\x2', '\x2', '\x2', '\xD8B', '\xD8D', '\x5', '\x178', '\xBD', 
		'\x2', '\xD8C', '\xD8B', '\x3', '\x2', '\x2', '\x2', '\xD8C', '\xD8D', 
		'\x3', '\x2', '\x2', '\x2', '\xD8D', '\xD8E', '\x3', '\x2', '\x2', '\x2', 
		'\xD8E', '\xD8F', '\a', '\xA1', '\x2', '\x2', '\xD8F', '\xD90', '\a', 
		'\xDF', '\x2', '\x2', '\xD90', '\x175', '\x3', '\x2', '\x2', '\x2', '\xD91', 
		'\xD92', '\a', '\x9B', '\x2', '\x2', '\xD92', '\xD93', '\x5', '\x274', 
		'\x13B', '\x2', '\xD93', '\xD94', '\a', '\x213', '\x2', '\x2', '\xD94', 
		'\xD95', '\x5', '\x164', '\xB3', '\x2', '\xD95', '\x177', '\x3', '\x2', 
		'\x2', '\x2', '\xD96', '\xD97', '\a', '\x9A', '\x2', '\x2', '\xD97', '\xD98', 
		'\x5', '\x164', '\xB3', '\x2', '\xD98', '\x179', '\x3', '\x2', '\x2', 
		'\x2', '\xD99', '\xD9B', '\x5', '\x166', '\xB4', '\x2', '\xD9A', '\xD99', 
		'\x3', '\x2', '\x2', '\x2', '\xD9A', '\xD9B', '\x3', '\x2', '\x2', '\x2', 
		'\xD9B', '\xDA0', '\x3', '\x2', '\x2', '\x2', '\xD9C', '\xD9D', '\a', 
		'\x24D', '\x2', '\x2', '\xD9D', '\xDA1', '\x5', '\x274', '\x13B', '\x2', 
		'\xD9E', '\xD9F', '\a', '\xC8', '\x2', '\x2', '\xD9F', '\xDA1', '\x5', 
		'\x17C', '\xBF', '\x2', '\xDA0', '\xD9C', '\x3', '\x2', '\x2', '\x2', 
		'\xDA0', '\xD9E', '\x3', '\x2', '\x2', '\x2', '\xDA0', '\xDA1', '\x3', 
		'\x2', '\x2', '\x2', '\xDA1', '\xDA2', '\x3', '\x2', '\x2', '\x2', '\xDA2', 
		'\xDA3', '\a', '\x11D', '\x2', '\x2', '\xDA3', '\xDA4', '\x5', '\x164', 
		'\xB3', '\x2', '\xDA4', '\xDA5', '\a', '\xA1', '\x2', '\x2', '\xDA5', 
		'\xDA7', '\a', '\x11D', '\x2', '\x2', '\xDA6', '\xDA8', '\x5', '\x316', 
		'\x18C', '\x2', '\xDA7', '\xDA6', '\x3', '\x2', '\x2', '\x2', '\xDA7', 
		'\xDA8', '\x3', '\x2', '\x2', '\x2', '\xDA8', '\x17B', '\x3', '\x2', '\x2', 
		'\x2', '\xDA9', '\xDAA', '\x5', '\x326', '\x194', '\x2', '\xDAA', '\xDAC', 
		'\a', '\xED', '\x2', '\x2', '\xDAB', '\xDAD', '\a', '\x1BE', '\x2', '\x2', 
		'\xDAC', '\xDAB', '\x3', '\x2', '\x2', '\x2', '\xDAC', '\xDAD', '\x3', 
		'\x2', '\x2', '\x2', '\xDAD', '\xDAE', '\x3', '\x2', '\x2', '\x2', '\xDAE', 
		'\xDAF', '\x5', '\x184', '\xC3', '\x2', '\xDAF', '\xDB0', '\a', '\x28E', 
		'\x2', '\x2', '\xDB0', '\xDB1', '\x5', '\x186', '\xC4', '\x2', '\xDB1', 
		'\xDC3', '\x3', '\x2', '\x2', '\x2', '\xDB2', '\xDB3', '\x5', '\x32A', 
		'\x196', '\x2', '\xDB3', '\xDC0', '\a', '\xED', '\x2', '\x2', '\xDB4', 
		'\xDBA', '\x5', '\x328', '\x195', '\x2', '\xDB5', '\xDB7', '\a', '\x296', 
		'\x2', '\x2', '\xDB6', '\xDB8', '\x5', '\x276', '\x13C', '\x2', '\xDB7', 
		'\xDB6', '\x3', '\x2', '\x2', '\x2', '\xDB7', '\xDB8', '\x3', '\x2', '\x2', 
		'\x2', '\xDB8', '\xDB9', '\x3', '\x2', '\x2', '\x2', '\xDB9', '\xDBB', 
		'\a', '\x297', '\x2', '\x2', '\xDBA', '\xDB5', '\x3', '\x2', '\x2', '\x2', 
		'\xDBA', '\xDBB', '\x3', '\x2', '\x2', '\x2', '\xDBB', '\xDC1', '\x3', 
		'\x2', '\x2', '\x2', '\xDBC', '\xDBD', '\a', '\x296', '\x2', '\x2', '\xDBD', 
		'\xDBE', '\x5', '\x1BC', '\xDF', '\x2', '\xDBE', '\xDBF', '\a', '\x297', 
		'\x2', '\x2', '\xDBF', '\xDC1', '\x3', '\x2', '\x2', '\x2', '\xDC0', '\xDB4', 
		'\x3', '\x2', '\x2', '\x2', '\xDC0', '\xDBC', '\x3', '\x2', '\x2', '\x2', 
		'\xDC1', '\xDC3', '\x3', '\x2', '\x2', '\x2', '\xDC2', '\xDA9', '\x3', 
		'\x2', '\x2', '\x2', '\xDC2', '\xDB2', '\x3', '\x2', '\x2', '\x2', '\xDC3', 
		'\x17D', '\x3', '\x2', '\x2', '\x2', '\xDC4', '\xDC5', '\a', '\xC5', '\x2', 
		'\x2', '\xDC5', '\xDC6', '\x5', '\x326', '\x194', '\x2', '\xDC6', '\xDC7', 
		'\a', '\xED', '\x2', '\x2', '\xDC7', '\xDC8', '\x5', '\x180', '\xC1', 
		'\x2', '\xDC8', '\xDCB', '\x5', '\x19A', '\xCE', '\x2', '\xDC9', '\xDCA', 
		'\a', '\x1CD', '\x2', '\x2', '\xDCA', '\xDCC', '\a', '\xAB', '\x2', '\x2', 
		'\xDCB', '\xDC9', '\x3', '\x2', '\x2', '\x2', '\xDCB', '\xDCC', '\x3', 
		'\x2', '\x2', '\x2', '\xDCC', '\x17F', '\x3', '\x2', '\x2', '\x2', '\xDCD', 
		'\xDCE', '\x5', '\x184', '\xC3', '\x2', '\xDCE', '\xDCF', '\a', '\x28E', 
		'\x2', '\x2', '\xDCF', '\xDD0', '\x5', '\x186', '\xC4', '\x2', '\xDD0', 
		'\xDDB', '\x3', '\x2', '\x2', '\x2', '\xDD1', '\xDD2', '\a', '\xEA', '\x2', 
		'\x2', '\xDD2', '\xDD3', '\a', '\x15F', '\x2', '\x2', '\xDD3', '\xDD5', 
		'\x5', '\x32C', '\x197', '\x2', '\xDD4', '\xDD6', '\x5', '\x182', '\xC2', 
		'\x2', '\xDD5', '\xDD4', '\x3', '\x2', '\x2', '\x2', '\xDD5', '\xDD6', 
		'\x3', '\x2', '\x2', '\x2', '\xDD6', '\xDDB', '\x3', '\x2', '\x2', '\x2', 
		'\xDD7', '\xDD8', '\a', '\x23D', '\x2', '\x2', '\xDD8', '\xDD9', '\a', 
		'\x15F', '\x2', '\x2', '\xDD9', '\xDDB', '\x5', '\x326', '\x194', '\x2', 
		'\xDDA', '\xDCD', '\x3', '\x2', '\x2', '\x2', '\xDDA', '\xDD1', '\x3', 
		'\x2', '\x2', '\x2', '\xDDA', '\xDD7', '\x3', '\x2', '\x2', '\x2', '\xDDB', 
		'\x181', '\x3', '\x2', '\x2', '\x2', '\xDDC', '\xDDD', '\a', '(', '\x2', 
		'\x2', '\xDDD', '\xDDE', '\x5', '\x184', '\xC3', '\x2', '\xDDE', '\xDDF', 
		'\a', '\x10', '\x2', '\x2', '\xDDF', '\xDE0', '\x5', '\x186', '\xC4', 
		'\x2', '\xDE0', '\x183', '\x3', '\x2', '\x2', '\x2', '\xDE1', '\xDE2', 
		'\x5', '\x28A', '\x146', '\x2', '\xDE2', '\x185', '\x3', '\x2', '\x2', 
		'\x2', '\xDE3', '\xDE4', '\x5', '\x28A', '\x146', '\x2', '\xDE4', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\xDE5', '\xDE6', '\a', '\x157', '\x2', '\x2', 
		'\xDE6', '\x189', '\x3', '\x2', '\x2', '\x2', '\xDE7', '\xDE9', '\a', 
		'\x19F', '\x2', '\x2', '\xDE8', '\xDEA', '\x5', '\x31C', '\x18F', '\x2', 
		'\xDE9', '\xDE8', '\x3', '\x2', '\x2', '\x2', '\xDE9', '\xDEA', '\x3', 
		'\x2', '\x2', '\x2', '\xDEA', '\x18B', '\x3', '\x2', '\x2', '\x2', '\xDEB', 
		'\xDED', '\a', '\x1BC', '\x2', '\x2', '\xDEC', '\xDEE', '\x5', '\x278', 
		'\x13D', '\x2', '\xDED', '\xDEC', '\x3', '\x2', '\x2', '\x2', '\xDED', 
		'\xDEE', '\x3', '\x2', '\x2', '\x2', '\xDEE', '\x18D', '\x3', '\x2', '\x2', 
		'\x2', '\xDEF', '\xDF1', '\a', ';', '\x2', '\x2', '\xDF0', '\xDEF', '\x3', 
		'\x2', '\x2', '\x2', '\xDF0', '\xDF1', '\x3', '\x2', '\x2', '\x2', '\xDF1', 
		'\xDF2', '\x3', '\x2', '\x2', '\x2', '\xDF2', '\xDF4', '\x5', '\x2FE', 
		'\x180', '\x2', '\xDF3', '\xDF5', '\x5', '\x346', '\x1A4', '\x2', '\xDF4', 
		'\xDF3', '\x3', '\x2', '\x2', '\x2', '\xDF4', '\xDF5', '\x3', '\x2', '\x2', 
		'\x2', '\xDF5', '\x18F', '\x3', '\x2', '\x2', '\x2', '\xDF6', '\xDF7', 
		'\a', '\x186', '\x2', '\x2', '\xDF7', '\xDF8', '\a', '\x1C7', '\x2', '\x2', 
		'\xDF8', '\xDF9', '\a', '\x296', '\x2', '\x2', '\xDF9', '\xDFA', '\x5', 
		'\x278', '\x13D', '\x2', '\xDFA', '\xDFB', '\a', '\x297', '\x2', '\x2', 
		'\xDFB', '\x191', '\x3', '\x2', '\x2', '\x2', '\xDFC', '\xDFD', '\a', 
		'\'', '\x2', '\x2', '\xDFD', '\xE04', '\x5', '\x164', '\xB3', '\x2', '\xDFE', 
		'\xE00', '\a', '\xA9', '\x2', '\x2', '\xDFF', '\xE01', '\x5', '\x194', 
		'\xCB', '\x2', '\xE00', '\xDFF', '\x3', '\x2', '\x2', '\x2', '\xE01', 
		'\xE02', '\x3', '\x2', '\x2', '\x2', '\xE02', '\xE00', '\x3', '\x2', '\x2', 
		'\x2', '\xE02', '\xE03', '\x3', '\x2', '\x2', '\x2', '\xE03', '\xE05', 
		'\x3', '\x2', '\x2', '\x2', '\xE04', '\xDFE', '\x3', '\x2', '\x2', '\x2', 
		'\xE04', '\xE05', '\x3', '\x2', '\x2', '\x2', '\xE05', '\xE06', '\x3', 
		'\x2', '\x2', '\x2', '\xE06', '\xE08', '\a', '\xA1', '\x2', '\x2', '\xE07', 
		'\xE09', '\x5', '\x316', '\x18C', '\x2', '\xE08', '\xE07', '\x3', '\x2', 
		'\x2', '\x2', '\xE08', '\xE09', '\x3', '\x2', '\x2', '\x2', '\xE09', '\x193', 
		'\x3', '\x2', '\x2', '\x2', '\xE0A', '\xE0B', '\a', '\x24B', '\x2', '\x2', 
		'\xE0B', '\xE10', '\x5', '\x31C', '\x18F', '\x2', '\xE0C', '\xE0D', '\a', 
		'\x16D', '\x2', '\x2', '\xE0D', '\xE0F', '\x5', '\x31C', '\x18F', '\x2', 
		'\xE0E', '\xE0C', '\x3', '\x2', '\x2', '\x2', '\xE0F', '\xE12', '\x3', 
		'\x2', '\x2', '\x2', '\xE10', '\xE0E', '\x3', '\x2', '\x2', '\x2', '\xE10', 
		'\xE11', '\x3', '\x2', '\x2', '\x2', '\xE11', '\xE13', '\x3', '\x2', '\x2', 
		'\x2', '\xE12', '\xE10', '\x3', '\x2', '\x2', '\x2', '\xE13', '\xE14', 
		'\a', '\x213', '\x2', '\x2', '\xE14', '\xE15', '\x5', '\x164', '\xB3', 
		'\x2', '\xE15', '\x195', '\x3', '\x2', '\x2', '\x2', '\xE16', '\xE18', 
		'\a', '}', '\x2', '\x2', '\xE17', '\xE16', '\x3', '\x2', '\x2', '\x2', 
		'\xE17', '\xE18', '\x3', '\x2', '\x2', '\x2', '\xE18', '\xE1A', '\x3', 
		'\x2', '\x2', '\x2', '\xE19', '\xE1B', '\x5', '\x148', '\xA5', '\x2', 
		'\xE1A', '\xE19', '\x3', '\x2', '\x2', '\x2', '\xE1B', '\xE1C', '\x3', 
		'\x2', '\x2', '\x2', '\xE1C', '\xE1A', '\x3', '\x2', '\x2', '\x2', '\xE1C', 
		'\xE1D', '\x3', '\x2', '\x2', '\x2', '\xE1D', '\xE1F', '\x3', '\x2', '\x2', 
		'\x2', '\xE1E', '\xE17', '\x3', '\x2', '\x2', '\x2', '\xE1E', '\xE1F', 
		'\x3', '\x2', '\x2', '\x2', '\xE1F', '\xE20', '\x3', '\x2', '\x2', '\x2', 
		'\xE20', '\xE21', '\x5', '\x192', '\xCA', '\x2', '\xE21', '\x197', '\x3', 
		'\x2', '\x2', '\x2', '\xE22', '\xE24', '\a', '}', '\x2', '\x2', '\xE23', 
		'\xE22', '\x3', '\x2', '\x2', '\x2', '\xE23', '\xE24', '\x3', '\x2', '\x2', 
		'\x2', '\xE24', '\xE26', '\x3', '\x2', '\x2', '\x2', '\xE25', '\xE27', 
		'\x5', '\x148', '\xA5', '\x2', '\xE26', '\xE25', '\x3', '\x2', '\x2', 
		'\x2', '\xE27', '\xE28', '\x3', '\x2', '\x2', '\x2', '\xE28', '\xE26', 
		'\x3', '\x2', '\x2', '\x2', '\xE28', '\xE29', '\x3', '\x2', '\x2', '\x2', 
		'\xE29', '\xE2A', '\x3', '\x2', '\x2', '\x2', '\xE2A', '\xE2B', '\x5', 
		'\x192', '\xCA', '\x2', '\xE2B', '\x199', '\x3', '\x2', '\x2', '\x2', 
		'\xE2C', '\xE31', '\x5', '\x19C', '\xCF', '\x2', '\xE2D', '\xE31', '\x5', 
		'\x1A0', '\xD1', '\x2', '\xE2E', '\xE31', '\x5', '\x1A2', '\xD2', '\x2', 
		'\xE2F', '\xE31', '\x5', '\x1AC', '\xD7', '\x2', '\xE30', '\xE2C', '\x3', 
		'\x2', '\x2', '\x2', '\xE30', '\xE2D', '\x3', '\x2', '\x2', '\x2', '\xE30', 
		'\xE2E', '\x3', '\x2', '\x2', '\x2', '\xE30', '\xE2F', '\x3', '\x2', '\x2', 
		'\x2', '\xE31', '\x19B', '\x3', '\x2', '\x2', '\x2', '\xE32', '\xE33', 
		'\a', '\xAE', '\x2', '\x2', '\xE33', '\xE34', '\a', '\xE1', '\x2', '\x2', 
		'\xE34', '\xE3E', '\x5', '\x278', '\x13D', '\x2', '\xE35', '\xE37', '\x5', 
		'\x2EE', '\x178', '\x2', '\xE36', '\xE38', '\x5', '\x2C0', '\x161', '\x2', 
		'\xE37', '\xE36', '\x3', '\x2', '\x2', '\x2', '\xE37', '\xE38', '\x3', 
		'\x2', '\x2', '\x2', '\xE38', '\xE3F', '\x3', '\x2', '\x2', '\x2', '\xE39', 
		'\xE3B', '\x5', '\x2C0', '\x161', '\x2', '\xE3A', '\xE3C', '\x5', '\x19E', 
		'\xD0', '\x2', '\xE3B', '\xE3A', '\x3', '\x2', '\x2', '\x2', '\xE3B', 
		'\xE3C', '\x3', '\x2', '\x2', '\x2', '\xE3C', '\xE3F', '\x3', '\x2', '\x2', 
		'\x2', '\xE3D', '\xE3F', '\x5', '\x19E', '\xD0', '\x2', '\xE3E', '\xE35', 
		'\x3', '\x2', '\x2', '\x2', '\xE3E', '\xE39', '\x3', '\x2', '\x2', '\x2', 
		'\xE3E', '\xE3D', '\x3', '\x2', '\x2', '\x2', '\xE3E', '\xE3F', '\x3', 
		'\x2', '\x2', '\x2', '\xE3F', '\x19D', '\x3', '\x2', '\x2', '\x2', '\xE40', 
		'\xE41', '\t', '/', '\x2', '\x2', '\xE41', '\xE42', '\x5', '\x2EE', '\x178', 
		'\x2', '\xE42', '\x19F', '\x3', '\x2', '\x2', '\x2', '\xE43', '\xE4B', 
		'\x5', '\x24C', '\x127', '\x2', '\xE44', '\xE4B', '\x5', '\x258', '\x12D', 
		'\x2', '\xE45', '\xE4B', '\x5', '\x1BC', '\xDF', '\x2', '\xE46', '\xE4B', 
		'\x5', '\x232', '\x11A', '\x2', '\xE47', '\xE4B', '\x5', '\x238', '\x11D', 
		'\x2', '\xE48', '\xE4B', '\x5', '\x23A', '\x11E', '\x2', '\xE49', '\xE4B', 
		'\x5', '\x1BA', '\xDE', '\x2', '\xE4A', '\xE43', '\x3', '\x2', '\x2', 
		'\x2', '\xE4A', '\xE44', '\x3', '\x2', '\x2', '\x2', '\xE4A', '\xE45', 
		'\x3', '\x2', '\x2', '\x2', '\xE4A', '\xE46', '\x3', '\x2', '\x2', '\x2', 
		'\xE4A', '\xE47', '\x3', '\x2', '\x2', '\x2', '\xE4A', '\xE48', '\x3', 
		'\x2', '\x2', '\x2', '\xE4A', '\xE49', '\x3', '\x2', '\x2', '\x2', '\xE4B', 
		'\x1A1', '\x3', '\x2', '\x2', '\x2', '\xE4C', '\xE51', '\x5', '\x1A4', 
		'\xD3', '\x2', '\xE4D', '\xE51', '\x5', '\x1A6', '\xD4', '\x2', '\xE4E', 
		'\xE51', '\x5', '\x1A8', '\xD5', '\x2', '\xE4F', '\xE51', '\x5', '\x1AA', 
		'\xD6', '\x2', '\xE50', '\xE4C', '\x3', '\x2', '\x2', '\x2', '\xE50', 
		'\xE4D', '\x3', '\x2', '\x2', '\x2', '\xE50', '\xE4E', '\x3', '\x2', '\x2', 
		'\x2', '\xE50', '\xE4F', '\x3', '\x2', '\x2', '\x2', '\xE51', '\x1A3', 
		'\x3', '\x2', '\x2', '\x2', '\xE52', '\xE53', '\a', 'J', '\x2', '\x2', 
		'\xE53', '\xE54', '\x5', '\x328', '\x195', '\x2', '\xE54', '\x1A5', '\x3', 
		'\x2', '\x2', '\x2', '\xE55', '\xE56', '\a', '\x166', '\x2', '\x2', '\xE56', 
		'\xE5C', '\x5', '\x328', '\x195', '\x2', '\xE57', '\xE59', '\a', '\x296', 
		'\x2', '\x2', '\xE58', '\xE5A', '\x5', '\x276', '\x13C', '\x2', '\xE59', 
		'\xE58', '\x3', '\x2', '\x2', '\x2', '\xE59', '\xE5A', '\x3', '\x2', '\x2', 
		'\x2', '\xE5A', '\xE5B', '\x3', '\x2', '\x2', '\x2', '\xE5B', '\xE5D', 
		'\a', '\x297', '\x2', '\x2', '\xE5C', '\xE57', '\x3', '\x2', '\x2', '\x2', 
		'\xE5C', '\xE5D', '\x3', '\x2', '\x2', '\x2', '\xE5D', '\x1A7', '\x3', 
		'\x2', '\x2', '\x2', '\xE5E', '\xE5F', '\a', '\xBA', '\x2', '\x2', '\xE5F', 
		'\xE74', '\x5', '\x328', '\x195', '\x2', '\xE60', '\xE65', '\a', '\xFB', 
		'\x2', '\x2', '\xE61', '\xE63', '\a', '\x29C', '\x2', '\x2', '\xE62', 
		'\xE61', '\x3', '\x2', '\x2', '\x2', '\xE62', '\xE63', '\x3', '\x2', '\x2', 
		'\x2', '\xE63', '\xE64', '\x3', '\x2', '\x2', '\x2', '\xE64', '\xE66', 
		'\x5', '\x324', '\x193', '\x2', '\xE65', '\xE62', '\x3', '\x2', '\x2', 
		'\x2', '\xE66', '\xE67', '\x3', '\x2', '\x2', '\x2', '\xE67', '\xE65', 
		'\x3', '\x2', '\x2', '\x2', '\xE67', '\xE68', '\x3', '\x2', '\x2', '\x2', 
		'\xE68', '\xE75', '\x3', '\x2', '\x2', '\x2', '\xE69', '\xE6A', '\a', 
		'\x37', '\x2', '\x2', '\xE6A', '\xE6B', '\a', 'M', '\x2', '\x2', '\xE6B', 
		'\xE70', '\a', '\xFB', '\x2', '\x2', '\xE6C', '\xE6E', '\a', '\x29C', 
		'\x2', '\x2', '\xE6D', '\xE6C', '\x3', '\x2', '\x2', '\x2', '\xE6D', '\xE6E', 
		'\x3', '\x2', '\x2', '\x2', '\xE6E', '\xE6F', '\x3', '\x2', '\x2', '\x2', 
		'\xE6F', '\xE71', '\x5', '\x324', '\x193', '\x2', '\xE70', '\xE6D', '\x3', 
		'\x2', '\x2', '\x2', '\xE71', '\xE72', '\x3', '\x2', '\x2', '\x2', '\xE72', 
		'\xE70', '\x3', '\x2', '\x2', '\x2', '\xE72', '\xE73', '\x3', '\x2', '\x2', 
		'\x2', '\xE73', '\xE75', '\x3', '\x2', '\x2', '\x2', '\xE74', '\xE60', 
		'\x3', '\x2', '\x2', '\x2', '\xE74', '\xE69', '\x3', '\x2', '\x2', '\x2', 
		'\xE75', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\xE76', '\xE77', '\a', 
		'\x166', '\x2', '\x2', '\xE77', '\xE78', '\x5', '\x324', '\x193', '\x2', 
		'\xE78', '\xE7B', '\a', '\xC8', '\x2', '\x2', '\xE79', '\xE7C', '\x5', 
		'\x1BC', '\xDF', '\x2', '\xE7A', '\xE7C', '\x5', '\x278', '\x13D', '\x2', 
		'\xE7B', '\xE79', '\x3', '\x2', '\x2', '\x2', '\xE7B', '\xE7A', '\x3', 
		'\x2', '\x2', '\x2', '\xE7C', '\xE7E', '\x3', '\x2', '\x2', '\x2', '\xE7D', 
		'\xE7F', '\x5', '\x2C0', '\x161', '\x2', '\xE7E', '\xE7D', '\x3', '\x2', 
		'\x2', '\x2', '\xE7E', '\xE7F', '\x3', '\x2', '\x2', '\x2', '\xE7F', '\x1AB', 
		'\x3', '\x2', '\x2', '\x2', '\xE80', '\xE86', '\x5', '\x1AE', '\xD8', 
		'\x2', '\xE81', '\xE86', '\x5', '\x1B0', '\xD9', '\x2', '\xE82', '\xE86', 
		'\x5', '\x1B2', '\xDA', '\x2', '\xE83', '\xE86', '\x5', '\x1B6', '\xDC', 
		'\x2', '\xE84', '\xE86', '\x5', '\x1B8', '\xDD', '\x2', '\xE85', '\xE80', 
		'\x3', '\x2', '\x2', '\x2', '\xE85', '\xE81', '\x3', '\x2', '\x2', '\x2', 
		'\xE85', '\xE82', '\x3', '\x2', '\x2', '\x2', '\xE85', '\xE83', '\x3', 
		'\x2', '\x2', '\x2', '\xE85', '\xE84', '\x3', '\x2', '\x2', '\x2', '\xE86', 
		'\x1AD', '\x3', '\x2', '\x2', '\x2', '\xE87', '\xE88', '\a', '\x1DF', 
		'\x2', '\x2', '\xE88', '\xE96', '\a', '\x221', '\x2', '\x2', '\xE89', 
		'\xE8A', '\a', '\x1A2', '\x2', '\x2', '\xE8A', '\xE97', '\t', '\x30', 
		'\x2', '\x2', '\xE8B', '\xE8C', '\a', '\xFE', '\x2', '\x2', '\xE8C', '\xE90', 
		'\a', '\x10B', '\x2', '\x2', '\xE8D', '\xE91', '\a', '\x1DA', '\x2', '\x2', 
		'\xE8E', '\xE8F', '\a', '\x1A2', '\x2', '\x2', '\xE8F', '\xE91', '\a', 
		'R', '\x2', '\x2', '\xE90', '\xE8D', '\x3', '\x2', '\x2', '\x2', '\xE90', 
		'\xE8E', '\x3', '\x2', '\x2', '\x2', '\xE91', '\xE97', '\x3', '\x2', '\x2', 
		'\x2', '\xE92', '\xE93', '\a', '\x23A', '\x2', '\x2', '\xE93', '\xE94', 
		'\a', '\x1C4', '\x2', '\x2', '\xE94', '\xE95', '\a', '\x1D5', '\x2', '\x2', 
		'\xE95', '\xE97', '\x5', '\x2F8', '\x17D', '\x2', '\xE96', '\xE89', '\x3', 
		'\x2', '\x2', '\x2', '\xE96', '\xE8B', '\x3', '\x2', '\x2', '\x2', '\xE96', 
		'\xE92', '\x3', '\x2', '\x2', '\x2', '\xE96', '\xE97', '\x3', '\x2', '\x2', 
		'\x2', '\xE97', '\xE9A', '\x3', '\x2', '\x2', '\x2', '\xE98', '\xE99', 
		'\a', '\x139', '\x2', '\x2', '\xE99', '\xE9B', '\x5', '\x36A', '\x1B6', 
		'\x2', '\xE9A', '\xE98', '\x3', '\x2', '\x2', '\x2', '\xE9A', '\xE9B', 
		'\x3', '\x2', '\x2', '\x2', '\xE9B', '\x1AF', '\x3', '\x2', '\x2', '\x2', 
		'\xE9C', '\xE9D', '\a', '\x1DF', '\x2', '\x2', '\xE9D', '\xEA7', '\t', 
		'\x31', '\x2', '\x2', '\xE9E', '\xEA8', '\a', '\r', '\x2', '\x2', '\xE9F', 
		'\xEA1', '\a', '\x29C', '\x2', '\x2', '\xEA0', '\xE9F', '\x3', '\x2', 
		'\x2', '\x2', '\xEA0', '\xEA1', '\x3', '\x2', '\x2', '\x2', '\xEA1', '\xEA2', 
		'\x3', '\x2', '\x2', '\x2', '\xEA2', '\xEA4', '\x5', '\x314', '\x18B', 
		'\x2', '\xEA3', '\xEA0', '\x3', '\x2', '\x2', '\x2', '\xEA4', '\xEA5', 
		'\x3', '\x2', '\x2', '\x2', '\xEA5', '\xEA3', '\x3', '\x2', '\x2', '\x2', 
		'\xEA5', '\xEA6', '\x3', '\x2', '\x2', '\x2', '\xEA6', '\xEA8', '\x3', 
		'\x2', '\x2', '\x2', '\xEA7', '\xE9E', '\x3', '\x2', '\x2', '\x2', '\xEA7', 
		'\xEA3', '\x3', '\x2', '\x2', '\x2', '\xEA8', '\xEA9', '\x3', '\x2', '\x2', 
		'\x2', '\xEA9', '\xEAA', '\t', '\x1A', '\x2', '\x2', '\xEAA', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', '\xEAB', '\xEAD', '\a', 'Q', '\x2', '\x2', 
		'\xEAC', '\xEAE', '\a', '\x250', '\x2', '\x2', '\xEAD', '\xEAC', '\x3', 
		'\x2', '\x2', '\x2', '\xEAD', '\xEAE', '\x3', '\x2', '\x2', '\x2', '\xEAE', 
		'\xEBC', '\x3', '\x2', '\x2', '\x2', '\xEAF', '\xEB0', '\a', 'P', '\x2', 
		'\x2', '\xEB0', '\xEBD', '\x5', '\x278', '\x13D', '\x2', '\xEB1', '\xEBA', 
		'\a', '\xC6', '\x2', '\x2', '\xEB2', '\xEB3', '\a', '\x65', '\x2', '\x2', 
		'\xEB3', '\xEBB', '\x5', '\x278', '\x13D', '\x2', '\xEB4', '\xEBB', '\a', 
		'\x64', '\x2', '\x2', '\xEB5', '\xEB8', '\x5', '\x278', '\x13D', '\x2', 
		'\xEB6', '\xEB7', '\a', '\x29C', '\x2', '\x2', '\xEB7', '\xEB9', '\x5', 
		'\x278', '\x13D', '\x2', '\xEB8', '\xEB6', '\x3', '\x2', '\x2', '\x2', 
		'\xEB8', '\xEB9', '\x3', '\x2', '\x2', '\x2', '\xEB9', '\xEBB', '\x3', 
		'\x2', '\x2', '\x2', '\xEBA', '\xEB2', '\x3', '\x2', '\x2', '\x2', '\xEBA', 
		'\xEB4', '\x3', '\x2', '\x2', '\x2', '\xEBA', '\xEB5', '\x3', '\x2', '\x2', 
		'\x2', '\xEBB', '\xEBD', '\x3', '\x2', '\x2', '\x2', '\xEBC', '\xEAF', 
		'\x3', '\x2', '\x2', '\x2', '\xEBC', '\xEB1', '\x3', '\x2', '\x2', '\x2', 
		'\xEBC', '\xEBD', '\x3', '\x2', '\x2', '\x2', '\xEBD', '\xEBF', '\x3', 
		'\x2', '\x2', '\x2', '\xEBE', '\xEC0', '\x5', '\x1B4', '\xDB', '\x2', 
		'\xEBF', '\xEBE', '\x3', '\x2', '\x2', '\x2', '\xEBF', '\xEC0', '\x3', 
		'\x2', '\x2', '\x2', '\xEC0', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\xEC1', 
		'\xEC3', '\a', '\x251', '\x2', '\x2', '\xEC2', '\xEC4', '\t', '\x32', 
		'\x2', '\x2', '\xEC3', '\xEC2', '\x3', '\x2', '\x2', '\x2', '\xEC3', '\xEC4', 
		'\x3', '\x2', '\x2', '\x2', '\xEC4', '\xEC6', '\x3', '\x2', '\x2', '\x2', 
		'\xEC5', '\xEC7', '\t', '\x33', '\x2', '\x2', '\xEC6', '\xEC5', '\x3', 
		'\x2', '\x2', '\x2', '\xEC6', '\xEC7', '\x3', '\x2', '\x2', '\x2', '\xEC7', 
		'\x1B5', '\x3', '\x2', '\x2', '\x2', '\xEC8', '\xECA', '\a', '\x1C4', 
		'\x2', '\x2', '\xEC9', '\xECB', '\a', '\x250', '\x2', '\x2', '\xECA', 
		'\xEC9', '\x3', '\x2', '\x2', '\x2', '\xECA', '\xECB', '\x3', '\x2', '\x2', 
		'\x2', '\xECB', '\xED3', '\x3', '\x2', '\x2', '\x2', '\xECC', '\xECE', 
		'\a', '\x21F', '\x2', '\x2', '\xECD', '\xECF', '\a', '\x1CC', '\x2', '\x2', 
		'\xECE', '\xECD', '\x3', '\x2', '\x2', '\x2', '\xECE', '\xECF', '\x3', 
		'\x2', '\x2', '\x2', '\xECF', '\xED0', '\x3', '\x2', '\x2', '\x2', '\xED0', 
		'\xED4', '\x5', '\x2F6', '\x17C', '\x2', '\xED1', '\xED2', '\a', '\xC6', 
		'\x2', '\x2', '\xED2', '\xED4', '\x5', '\x36A', '\x1B6', '\x2', '\xED3', 
		'\xECC', '\x3', '\x2', '\x2', '\x2', '\xED3', '\xED1', '\x3', '\x2', '\x2', 
		'\x2', '\xED3', '\xED4', '\x3', '\x2', '\x2', '\x2', '\xED4', '\x1B7', 
		'\x3', '\x2', '\x2', '\x2', '\xED5', '\xED6', '\a', '\x1CC', '\x2', '\x2', 
		'\xED6', '\xED7', '\x5', '\x2F6', '\x17C', '\x2', '\xED7', '\x1B9', '\x3', 
		'\x2', '\x2', '\x2', '\xED8', '\xED9', '\a', '\xB3', '\x2', '\x2', '\xED9', 
		'\xEDE', '\a', '\x188', '\x2', '\x2', '\xEDA', '\xEDB', '\a', '\x1DF', 
		'\x2', '\x2', '\xEDB', '\xEDC', '\a', '\x1F9', '\x2', '\x2', '\xEDC', 
		'\xEDD', '\a', '\x2AA', '\x2', '\x2', '\xEDD', '\xEDF', '\x5', '\x36A', 
		'\x1B6', '\x2', '\xEDE', '\xEDA', '\x3', '\x2', '\x2', '\x2', '\xEDE', 
		'\xEDF', '\x3', '\x2', '\x2', '\x2', '\xEDF', '\xEE2', '\x3', '\x2', '\x2', 
		'\x2', '\xEE0', '\xEE1', '\a', '\xFB', '\x2', '\x2', '\xEE1', '\xEE3', 
		'\x5', '\x332', '\x19A', '\x2', '\xEE2', '\xEE0', '\x3', '\x2', '\x2', 
		'\x2', '\xEE2', '\xEE3', '\x3', '\x2', '\x2', '\x2', '\xEE3', '\xEE4', 
		'\x3', '\x2', '\x2', '\x2', '\xEE4', '\xEEA', '\a', '\xC8', '\x2', '\x2', 
		'\xEE5', '\xEEB', '\x5', '\x1BC', '\xDF', '\x2', '\xEE6', '\xEEB', '\x5', 
		'\x232', '\x11A', '\x2', '\xEE7', '\xEEB', '\x5', '\x238', '\x11D', '\x2', 
		'\xEE8', '\xEEB', '\x5', '\x23A', '\x11E', '\x2', '\xEE9', '\xEEB', '\x5', 
		'\x24C', '\x127', '\x2', '\xEEA', '\xEE5', '\x3', '\x2', '\x2', '\x2', 
		'\xEEA', '\xEE6', '\x3', '\x2', '\x2', '\x2', '\xEEA', '\xEE7', '\x3', 
		'\x2', '\x2', '\x2', '\xEEA', '\xEE8', '\x3', '\x2', '\x2', '\x2', '\xEEA', 
		'\xEE9', '\x3', '\x2', '\x2', '\x2', '\xEEB', '\x1BB', '\x3', '\x2', '\x2', 
		'\x2', '\xEEC', '\xEEE', '\x5', '\x1BE', '\xE0', '\x2', '\xEED', '\xEEC', 
		'\x3', '\x2', '\x2', '\x2', '\xEED', '\xEEE', '\x3', '\x2', '\x2', '\x2', 
		'\xEEE', '\xEEF', '\x3', '\x2', '\x2', '\x2', '\xEEF', '\xEF4', '\x5', 
		'\x1C6', '\xE4', '\x2', '\xEF0', '\xEF3', '\x5', '\x22C', '\x117', '\x2', 
		'\xEF1', '\xEF3', '\x5', '\x228', '\x115', '\x2', '\xEF2', '\xEF0', '\x3', 
		'\x2', '\x2', '\x2', '\xEF2', '\xEF1', '\x3', '\x2', '\x2', '\x2', '\xEF3', 
		'\xEF6', '\x3', '\x2', '\x2', '\x2', '\xEF4', '\xEF2', '\x3', '\x2', '\x2', 
		'\x2', '\xEF4', '\xEF5', '\x3', '\x2', '\x2', '\x2', '\xEF5', '\x1BD', 
		'\x3', '\x2', '\x2', '\x2', '\xEF6', '\xEF4', '\x3', '\x2', '\x2', '\x2', 
		'\xEF7', '\xEFC', '\a', '\x24F', '\x2', '\x2', '\xEF8', '\xEFA', '\a', 
		'\x29C', '\x2', '\x2', '\xEF9', '\xEF8', '\x3', '\x2', '\x2', '\x2', '\xEF9', 
		'\xEFA', '\x3', '\x2', '\x2', '\x2', '\xEFA', '\xEFB', '\x3', '\x2', '\x2', 
		'\x2', '\xEFB', '\xEFD', '\x5', '\x1C0', '\xE1', '\x2', '\xEFC', '\xEF9', 
		'\x3', '\x2', '\x2', '\x2', '\xEFD', '\xEFE', '\x3', '\x2', '\x2', '\x2', 
		'\xEFE', '\xEFC', '\x3', '\x2', '\x2', '\x2', '\xEFE', '\xEFF', '\x3', 
		'\x2', '\x2', '\x2', '\xEFF', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\xF00', 
		'\xF02', '\x5', '\x30E', '\x188', '\x2', '\xF01', '\xF03', '\x5', '\x342', 
		'\x1A2', '\x2', '\xF02', '\xF01', '\x3', '\x2', '\x2', '\x2', '\xF02', 
		'\xF03', '\x3', '\x2', '\x2', '\x2', '\xF03', '\xF04', '\x3', '\x2', '\x2', 
		'\x2', '\xF04', '\xF05', '\a', '\x14', '\x2', '\x2', '\xF05', '\xF06', 
		'\a', '\x296', '\x2', '\x2', '\xF06', '\xF08', '\x5', '\x1C6', '\xE4', 
		'\x2', '\xF07', '\xF09', '\x5', '\x228', '\x115', '\x2', '\xF08', '\xF07', 
		'\x3', '\x2', '\x2', '\x2', '\xF08', '\xF09', '\x3', '\x2', '\x2', '\x2', 
		'\xF09', '\xF0A', '\x3', '\x2', '\x2', '\x2', '\xF0A', '\xF0C', '\a', 
		'\x297', '\x2', '\x2', '\xF0B', '\xF0D', '\x5', '\x1C2', '\xE2', '\x2', 
		'\xF0C', '\xF0B', '\x3', '\x2', '\x2', '\x2', '\xF0C', '\xF0D', '\x3', 
		'\x2', '\x2', '\x2', '\xF0D', '\xF0F', '\x3', '\x2', '\x2', '\x2', '\xF0E', 
		'\xF10', '\x5', '\x1C4', '\xE3', '\x2', '\xF0F', '\xF0E', '\x3', '\x2', 
		'\x2', '\x2', '\xF0F', '\xF10', '\x3', '\x2', '\x2', '\x2', '\xF10', '\x1C1', 
		'\x3', '\x2', '\x2', '\x2', '\xF11', '\xF12', '\a', '\x1D2', '\x2', '\x2', 
		'\xF12', '\xF13', '\t', '\x34', '\x2', '\x2', '\xF13', '\xF14', '\a', 
		'\xBD', '\x2', '\x2', '\xF14', '\xF15', '\a', '\x38', '\x2', '\x2', '\xF15', 
		'\xF17', '\x5', '\x330', '\x199', '\x2', '\xF16', '\xF18', '\a', '\x15', 
		'\x2', '\x2', '\xF17', '\xF16', '\x3', '\x2', '\x2', '\x2', '\xF17', '\xF18', 
		'\x3', '\x2', '\x2', '\x2', '\xF18', '\xF1A', '\x3', '\x2', '\x2', '\x2', 
		'\xF19', '\xF1B', '\a', '\x88', '\x2', '\x2', '\xF1A', '\xF19', '\x3', 
		'\x2', '\x2', '\x2', '\xF1A', '\xF1B', '\x3', '\x2', '\x2', '\x2', '\xF1B', 
		'\xF1E', '\x3', '\x2', '\x2', '\x2', '\xF1C', '\xF1D', '\a', '\x158', 
		'\x2', '\x2', '\xF1D', '\xF1F', '\a', '\xBD', '\x2', '\x2', '\xF1E', '\xF1C', 
		'\x3', '\x2', '\x2', '\x2', '\xF1E', '\xF1F', '\x3', '\x2', '\x2', '\x2', 
		'\xF1F', '\xF22', '\x3', '\x2', '\x2', '\x2', '\xF20', '\xF21', '\a', 
		'\x158', '\x2', '\x2', '\xF21', '\xF23', '\a', '\x106', '\x2', '\x2', 
		'\xF22', '\xF20', '\x3', '\x2', '\x2', '\x2', '\xF22', '\xF23', '\x3', 
		'\x2', '\x2', '\x2', '\xF23', '\xF36', '\x3', '\x2', '\x2', '\x2', '\xF24', 
		'\xF25', '\a', '\x29C', '\x2', '\x2', '\xF25', '\xF27', '\x5', '\x330', 
		'\x199', '\x2', '\xF26', '\xF28', '\a', '\x15', '\x2', '\x2', '\xF27', 
		'\xF26', '\x3', '\x2', '\x2', '\x2', '\xF27', '\xF28', '\x3', '\x2', '\x2', 
		'\x2', '\xF28', '\xF2A', '\x3', '\x2', '\x2', '\x2', '\xF29', '\xF2B', 
		'\a', '\x88', '\x2', '\x2', '\xF2A', '\xF29', '\x3', '\x2', '\x2', '\x2', 
		'\xF2A', '\xF2B', '\x3', '\x2', '\x2', '\x2', '\xF2B', '\xF2E', '\x3', 
		'\x2', '\x2', '\x2', '\xF2C', '\xF2D', '\a', '\x158', '\x2', '\x2', '\xF2D', 
		'\xF2F', '\a', '\xBD', '\x2', '\x2', '\xF2E', '\xF2C', '\x3', '\x2', '\x2', 
		'\x2', '\xF2E', '\xF2F', '\x3', '\x2', '\x2', '\x2', '\xF2F', '\xF32', 
		'\x3', '\x2', '\x2', '\x2', '\xF30', '\xF31', '\a', '\x158', '\x2', '\x2', 
		'\xF31', '\xF33', '\a', '\x106', '\x2', '\x2', '\xF32', '\xF30', '\x3', 
		'\x2', '\x2', '\x2', '\xF32', '\xF33', '\x3', '\x2', '\x2', '\x2', '\xF33', 
		'\xF35', '\x3', '\x2', '\x2', '\x2', '\xF34', '\xF24', '\x3', '\x2', '\x2', 
		'\x2', '\xF35', '\xF38', '\x3', '\x2', '\x2', '\x2', '\xF36', '\xF34', 
		'\x3', '\x2', '\x2', '\x2', '\xF36', '\xF37', '\x3', '\x2', '\x2', '\x2', 
		'\xF37', '\xF39', '\x3', '\x2', '\x2', '\x2', '\xF38', '\xF36', '\x3', 
		'\x2', '\x2', '\x2', '\xF39', '\xF3A', '\a', '\x1DF', '\x2', '\x2', '\xF3A', 
		'\xF3B', '\x5', '\x330', '\x199', '\x2', '\xF3B', '\x1C3', '\x3', '\x2', 
		'\x2', '\x2', '\xF3C', '\xF3D', '\a', 'p', '\x2', '\x2', '\xF3D', '\xF3E', 
		'\x5', '\x340', '\x1A1', '\x2', '\xF3E', '\xF3F', '\a', '\x1DF', '\x2', 
		'\x2', '\xF3F', '\xF40', '\x5', '\x330', '\x199', '\x2', '\xF40', '\xF41', 
		'\a', '\x21F', '\x2', '\x2', '\xF41', '\xF42', '\x5', '\x278', '\x13D', 
		'\x2', '\xF42', '\xF43', '\a', '\x80', '\x2', '\x2', '\xF43', '\xF44', 
		'\x5', '\x278', '\x13D', '\x2', '\xF44', '\x1C5', '\x3', '\x2', '\x2', 
		'\x2', '\xF45', '\xF49', '\x5', '\x1C8', '\xE5', '\x2', '\xF46', '\xF48', 
		'\x5', '\x1CA', '\xE6', '\x2', '\xF47', '\xF46', '\x3', '\x2', '\x2', 
		'\x2', '\xF48', '\xF4B', '\x3', '\x2', '\x2', '\x2', '\xF49', '\xF47', 
		'\x3', '\x2', '\x2', '\x2', '\xF49', '\xF4A', '\x3', '\x2', '\x2', '\x2', 
		'\xF4A', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\xF4B', '\xF49', '\x3', 
		'\x2', '\x2', '\x2', '\xF4C', '\xF52', '\x5', '\x1CC', '\xE7', '\x2', 
		'\xF4D', '\xF4E', '\a', '\x296', '\x2', '\x2', '\xF4E', '\xF4F', '\x5', 
		'\x1C6', '\xE4', '\x2', '\xF4F', '\xF50', '\a', '\x297', '\x2', '\x2', 
		'\xF50', '\xF52', '\x3', '\x2', '\x2', '\x2', '\xF51', '\xF4C', '\x3', 
		'\x2', '\x2', '\x2', '\xF51', '\xF4D', '\x3', '\x2', '\x2', '\x2', '\xF52', 
		'\x1C9', '\x3', '\x2', '\x2', '\x2', '\xF53', '\xF55', '\a', '\x22E', 
		'\x2', '\x2', '\xF54', '\xF56', '\a', '\r', '\x2', '\x2', '\xF55', '\xF54', 
		'\x3', '\x2', '\x2', '\x2', '\xF55', '\xF56', '\x3', '\x2', '\x2', '\x2', 
		'\xF56', '\xF5A', '\x3', '\x2', '\x2', '\x2', '\xF57', '\xF5A', '\a', 
		'\xF8', '\x2', '\x2', '\xF58', '\xF5A', '\a', '\x12F', '\x2', '\x2', '\xF59', 
		'\xF53', '\x3', '\x2', '\x2', '\x2', '\xF59', '\xF57', '\x3', '\x2', '\x2', 
		'\x2', '\xF59', '\xF58', '\x3', '\x2', '\x2', '\x2', '\xF5A', '\xF5B', 
		'\x3', '\x2', '\x2', '\x2', '\xF5B', '\xF5C', '\x5', '\x1C8', '\xE5', 
		'\x2', '\xF5C', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\xF5D', '\xF5F', 
		'\a', '\x1D6', '\x2', '\x2', '\xF5E', '\xF60', '\t', '\x35', '\x2', '\x2', 
		'\xF5F', '\xF5E', '\x3', '\x2', '\x2', '\x2', '\xF5F', '\xF60', '\x3', 
		'\x2', '\x2', '\x2', '\xF60', '\xF6A', '\x3', '\x2', '\x2', '\x2', '\xF61', 
		'\xF6B', '\a', '\x299', '\x2', '\x2', '\xF62', '\xF64', '\a', '\x29C', 
		'\x2', '\x2', '\xF63', '\xF62', '\x3', '\x2', '\x2', '\x2', '\xF63', '\xF64', 
		'\x3', '\x2', '\x2', '\x2', '\xF64', '\xF65', '\x3', '\x2', '\x2', '\x2', 
		'\xF65', '\xF67', '\x5', '\x1CE', '\xE8', '\x2', '\xF66', '\xF63', '\x3', 
		'\x2', '\x2', '\x2', '\xF67', '\xF68', '\x3', '\x2', '\x2', '\x2', '\xF68', 
		'\xF66', '\x3', '\x2', '\x2', '\x2', '\xF68', '\xF69', '\x3', '\x2', '\x2', 
		'\x2', '\xF69', '\xF6B', '\x3', '\x2', '\x2', '\x2', '\xF6A', '\xF61', 
		'\x3', '\x2', '\x2', '\x2', '\xF6A', '\xF66', '\x3', '\x2', '\x2', '\x2', 
		'\xF6B', '\xF6D', '\x3', '\x2', '\x2', '\x2', '\xF6C', '\xF6E', '\x5', 
		'\x2EE', '\x178', '\x2', '\xF6D', '\xF6C', '\x3', '\x2', '\x2', '\x2', 
		'\xF6D', '\xF6E', '\x3', '\x2', '\x2', '\x2', '\xF6E', '\xF6F', '\x3', 
		'\x2', '\x2', '\x2', '\xF6F', '\xF71', '\x5', '\x1D0', '\xE9', '\x2', 
		'\xF70', '\xF72', '\x5', '\x2EC', '\x177', '\x2', '\xF71', '\xF70', '\x3', 
		'\x2', '\x2', '\x2', '\xF71', '\xF72', '\x3', '\x2', '\x2', '\x2', '\xF72', 
		'\xF74', '\x3', '\x2', '\x2', '\x2', '\xF73', '\xF75', '\x5', '\x1FA', 
		'\xFE', '\x2', '\xF74', '\xF73', '\x3', '\x2', '\x2', '\x2', '\xF74', 
		'\xF75', '\x3', '\x2', '\x2', '\x2', '\xF75', '\xF77', '\x3', '\x2', '\x2', 
		'\x2', '\xF76', '\xF78', '\x5', '\x1FE', '\x100', '\x2', '\xF77', '\xF76', 
		'\x3', '\x2', '\x2', '\x2', '\xF77', '\xF78', '\x3', '\x2', '\x2', '\x2', 
		'\xF78', '\xF7A', '\x3', '\x2', '\x2', '\x2', '\xF79', '\xF7B', '\x5', 
		'\x20A', '\x106', '\x2', '\xF7A', '\xF79', '\x3', '\x2', '\x2', '\x2', 
		'\xF7A', '\xF7B', '\x3', '\x2', '\x2', '\x2', '\xF7B', '\x1CD', '\x3', 
		'\x2', '\x2', '\x2', '\xF7C', '\xF7E', '\x5', '\x1D2', '\xEA', '\x2', 
		'\xF7D', '\xF7F', '\x5', '\x2E8', '\x175', '\x2', '\xF7E', '\xF7D', '\x3', 
		'\x2', '\x2', '\x2', '\xF7E', '\xF7F', '\x3', '\x2', '\x2', '\x2', '\xF7F', 
		'\x1CF', '\x3', '\x2', '\x2', '\x2', '\xF80', '\xF81', '\a', '\xCB', '\x2', 
		'\x2', '\xF81', '\xF82', '\x5', '\x1D4', '\xEB', '\x2', '\xF82', '\x1D1', 
		'\x3', '\x2', '\x2', '\x2', '\xF83', '\xF84', '\x5', '\x332', '\x19A', 
		'\x2', '\xF84', '\xF85', '\a', '\x28F', '\x2', '\x2', '\xF85', '\xF86', 
		'\a', '\x299', '\x2', '\x2', '\xF86', '\xF8E', '\x3', '\x2', '\x2', '\x2', 
		'\xF87', '\xF88', '\x5', '\x372', '\x1BA', '\x2', '\xF88', '\xF89', '\a', 
		'\x28F', '\x2', '\x2', '\xF89', '\xF8B', '\x3', '\x2', '\x2', '\x2', '\xF8A', 
		'\xF87', '\x3', '\x2', '\x2', '\x2', '\xF8A', '\xF8B', '\x3', '\x2', '\x2', 
		'\x2', '\xF8B', '\xF8C', '\x3', '\x2', '\x2', '\x2', '\xF8C', '\xF8E', 
		'\x5', '\x278', '\x13D', '\x2', '\xF8D', '\xF83', '\x3', '\x2', '\x2', 
		'\x2', '\xF8D', '\xF8A', '\x3', '\x2', '\x2', '\x2', '\xF8E', '\x1D3', 
		'\x3', '\x2', '\x2', '\x2', '\xF8F', '\xF91', '\a', '\x29C', '\x2', '\x2', 
		'\xF90', '\xF8F', '\x3', '\x2', '\x2', '\x2', '\xF90', '\xF91', '\x3', 
		'\x2', '\x2', '\x2', '\xF91', '\xF92', '\x3', '\x2', '\x2', '\x2', '\xF92', 
		'\xF94', '\x5', '\x1D6', '\xEC', '\x2', '\xF93', '\xF90', '\x3', '\x2', 
		'\x2', '\x2', '\xF94', '\xF95', '\x3', '\x2', '\x2', '\x2', '\xF95', '\xF93', 
		'\x3', '\x2', '\x2', '\x2', '\xF95', '\xF96', '\x3', '\x2', '\x2', '\x2', 
		'\xF96', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\xF97', '\xF9B', '\x5', 
		'\x1D8', '\xED', '\x2', '\xF98', '\xF9A', '\x5', '\x1DC', '\xEF', '\x2', 
		'\xF99', '\xF98', '\x3', '\x2', '\x2', '\x2', '\xF9A', '\xF9D', '\x3', 
		'\x2', '\x2', '\x2', '\xF9B', '\xF99', '\x3', '\x2', '\x2', '\x2', '\xF9B', 
		'\xF9C', '\x3', '\x2', '\x2', '\x2', '\xF9C', '\xFA0', '\x3', '\x2', '\x2', 
		'\x2', '\xF9D', '\xF9B', '\x3', '\x2', '\x2', '\x2', '\xF9E', '\xFA1', 
		'\x5', '\x1E8', '\xF5', '\x2', '\xF9F', '\xFA1', '\x5', '\x1F4', '\xFB', 
		'\x2', '\xFA0', '\xF9E', '\x3', '\x2', '\x2', '\x2', '\xFA0', '\xF9F', 
		'\x3', '\x2', '\x2', '\x2', '\xFA0', '\xFA1', '\x3', '\x2', '\x2', '\x2', 
		'\xFA1', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\xFA2', '\xFA6', '\x5', 
		'\x1DA', '\xEE', '\x2', '\xFA3', '\xFA5', '\x5', '\x1E6', '\xF4', '\x2', 
		'\xFA4', '\xFA3', '\x3', '\x2', '\x2', '\x2', '\xFA5', '\xFA8', '\x3', 
		'\x2', '\x2', '\x2', '\xFA6', '\xFA4', '\x3', '\x2', '\x2', '\x2', '\xFA6', 
		'\xFA7', '\x3', '\x2', '\x2', '\x2', '\xFA7', '\xFAA', '\x3', '\x2', '\x2', 
		'\x2', '\xFA8', '\xFA6', '\x3', '\x2', '\x2', '\x2', '\xFA9', '\xFAB', 
		'\x5', '\x2EA', '\x176', '\x2', '\xFAA', '\xFA9', '\x3', '\x2', '\x2', 
		'\x2', '\xFAA', '\xFAB', '\x3', '\x2', '\x2', '\x2', '\xFAB', '\x1D9', 
		'\x3', '\x2', '\x2', '\x2', '\xFAC', '\xFAF', '\x5', '\x26A', '\x136', 
		'\x2', '\xFAD', '\xFB0', '\x5', '\x1E8', '\xF5', '\x2', '\xFAE', '\xFB0', 
		'\x5', '\x1F4', '\xFB', '\x2', '\xFAF', '\xFAD', '\x3', '\x2', '\x2', 
		'\x2', '\xFAF', '\xFAE', '\x3', '\x2', '\x2', '\x2', '\xFAF', '\xFB0', 
		'\x3', '\x2', '\x2', '\x2', '\xFB0', '\xFC4', '\x3', '\x2', '\x2', '\x2', 
		'\xFB1', '\xFB2', '\a', '\x296', '\x2', '\x2', '\xFB2', '\xFB6', '\x5', 
		'\x1D6', '\xEC', '\x2', '\xFB3', '\xFB5', '\x5', '\x1CA', '\xE6', '\x2', 
		'\xFB4', '\xFB3', '\x3', '\x2', '\x2', '\x2', '\xFB5', '\xFB8', '\x3', 
		'\x2', '\x2', '\x2', '\xFB6', '\xFB4', '\x3', '\x2', '\x2', '\x2', '\xFB6', 
		'\xFB7', '\x3', '\x2', '\x2', '\x2', '\xFB7', '\xFB9', '\x3', '\x2', '\x2', 
		'\x2', '\xFB8', '\xFB6', '\x3', '\x2', '\x2', '\x2', '\xFB9', '\xFBC', 
		'\a', '\x297', '\x2', '\x2', '\xFBA', '\xFBD', '\x5', '\x1E8', '\xF5', 
		'\x2', '\xFBB', '\xFBD', '\x5', '\x1F4', '\xFB', '\x2', '\xFBC', '\xFBA', 
		'\x3', '\x2', '\x2', '\x2', '\xFBC', '\xFBB', '\x3', '\x2', '\x2', '\x2', 
		'\xFBC', '\xFBD', '\x3', '\x2', '\x2', '\x2', '\xFBD', '\xFC4', '\x3', 
		'\x2', '\x2', '\x2', '\xFBE', '\xFBF', '\a', '\x164', '\x2', '\x2', '\xFBF', 
		'\xFC0', '\a', '\x296', '\x2', '\x2', '\xFC0', '\xFC1', '\x5', '\x26A', 
		'\x136', '\x2', '\xFC1', '\xFC2', '\a', '\x297', '\x2', '\x2', '\xFC2', 
		'\xFC4', '\x3', '\x2', '\x2', '\x2', '\xFC3', '\xFAC', '\x3', '\x2', '\x2', 
		'\x2', '\xFC3', '\xFB1', '\x3', '\x2', '\x2', '\x2', '\xFC3', '\xFBE', 
		'\x3', '\x2', '\x2', '\x2', '\xFC4', '\x1DB', '\x3', '\x2', '\x2', '\x2', 
		'\xFC5', '\xFC7', '\x5', '\x1E4', '\xF3', '\x2', '\xFC6', '\xFC5', '\x3', 
		'\x2', '\x2', '\x2', '\xFC6', '\xFC7', '\x3', '\x2', '\x2', '\x2', '\xFC7', 
		'\xFC9', '\x3', '\x2', '\x2', '\x2', '\xFC8', '\xFCA', '\t', '\x36', '\x2', 
		'\x2', '\xFC9', '\xFC8', '\x3', '\x2', '\x2', '\x2', '\xFC9', '\xFCA', 
		'\x3', '\x2', '\x2', '\x2', '\xFCA', '\xFCD', '\x3', '\x2', '\x2', '\x2', 
		'\xFCB', '\xFCE', '\a', '\xF2', '\x2', '\x2', '\xFCC', '\xFCE', '\x5', 
		'\x1E2', '\xF2', '\x2', '\xFCD', '\xFCB', '\x3', '\x2', '\x2', '\x2', 
		'\xFCD', '\xFCC', '\x3', '\x2', '\x2', '\x2', '\xFCD', '\xFCE', '\x3', 
		'\x2', '\x2', '\x2', '\xFCE', '\xFCF', '\x3', '\x2', '\x2', '\x2', '\xFCF', 
		'\xFD0', '\a', '\x102', '\x2', '\x2', '\xFD0', '\xFD2', '\x5', '\x1D8', 
		'\xED', '\x2', '\xFD1', '\xFD3', '\x5', '\x1E4', '\xF3', '\x2', '\xFD2', 
		'\xFD1', '\x3', '\x2', '\x2', '\x2', '\xFD2', '\xFD3', '\x3', '\x2', '\x2', 
		'\x2', '\xFD3', '\xFD8', '\x3', '\x2', '\x2', '\x2', '\xFD4', '\xFD7', 
		'\x5', '\x1DE', '\xF0', '\x2', '\xFD5', '\xFD7', '\x5', '\x1E0', '\xF1', 
		'\x2', '\xFD6', '\xFD4', '\x3', '\x2', '\x2', '\x2', '\xFD6', '\xFD5', 
		'\x3', '\x2', '\x2', '\x2', '\xFD7', '\xFDA', '\x3', '\x2', '\x2', '\x2', 
		'\xFD8', '\xFD6', '\x3', '\x2', '\x2', '\x2', '\xFD8', '\xFD9', '\x3', 
		'\x2', '\x2', '\x2', '\xFD9', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\xFDA', 
		'\xFD8', '\x3', '\x2', '\x2', '\x2', '\xFDB', '\xFDC', '\a', '\x165', 
		'\x2', '\x2', '\xFDC', '\xFDD', '\x5', '\x274', '\x13B', '\x2', '\xFDD', 
		'\x1DF', '\x3', '\x2', '\x2', '\x2', '\xFDE', '\xFDF', '\a', '\x23B', 
		'\x2', '\x2', '\xFDF', '\xFE0', '\x5', '\x342', '\x1A2', '\x2', '\xFE0', 
		'\x1E1', '\x3', '\x2', '\x2', '\x2', '\xFE1', '\xFE3', '\t', '\x37', '\x2', 
		'\x2', '\xFE2', '\xFE4', '\a', '\x16F', '\x2', '\x2', '\xFE3', '\xFE2', 
		'\x3', '\x2', '\x2', '\x2', '\xFE3', '\xFE4', '\x3', '\x2', '\x2', '\x2', 
		'\xFE4', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\xFE5', '\xFE6', '\a', 
		'\x178', '\x2', '\x2', '\xFE6', '\xFEE', '\a', '\x38', '\x2', '\x2', '\xFE7', 
		'\xFEA', '\a', '\x296', '\x2', '\x2', '\xFE8', '\xFEB', '\x5', '\x1C6', 
		'\xE4', '\x2', '\xFE9', '\xFEB', '\x5', '\x276', '\x13C', '\x2', '\xFEA', 
		'\xFE8', '\x3', '\x2', '\x2', '\x2', '\xFEA', '\xFE9', '\x3', '\x2', '\x2', 
		'\x2', '\xFEA', '\xFEB', '\x3', '\x2', '\x2', '\x2', '\xFEB', '\xFEC', 
		'\x3', '\x2', '\x2', '\x2', '\xFEC', '\xFEF', '\a', '\x297', '\x2', '\x2', 
		'\xFED', '\xFEF', '\x5', '\x276', '\x13C', '\x2', '\xFEE', '\xFE7', '\x3', 
		'\x2', '\x2', '\x2', '\xFEE', '\xFED', '\x3', '\x2', '\x2', '\x2', '\xFEF', 
		'\x1E5', '\x3', '\x2', '\x2', '\x2', '\xFF0', '\xFF1', '\a', '\x244', 
		'\x2', '\x2', '\xFF1', '\xFF2', '\a', '(', '\x2', '\x2', '\xFF2', '\xFF3', 
		'\t', '\x38', '\x2', '\x2', '\xFF3', '\xFF9', '\x5', '\x278', '\x13D', 
		'\x2', '\xFF4', '\xFF5', '\a', '\x14', '\x2', '\x2', '\xFF5', '\xFF6', 
		'\a', '\x15F', '\x2', '\x2', '\xFF6', '\xFF7', '\t', '\x39', '\x2', '\x2', 
		'\xFF7', '\xFF9', '\x5', '\x278', '\x13D', '\x2', '\xFF8', '\xFF0', '\x3', 
		'\x2', '\x2', '\x2', '\xFF8', '\xFF4', '\x3', '\x2', '\x2', '\x2', '\xFF9', 
		'\x1E7', '\x3', '\x2', '\x2', '\x2', '\xFFA', '\xFFC', '\a', '\x187', 
		'\x2', '\x2', '\xFFB', '\xFFD', '\a', '\x260', '\x2', '\x2', '\xFFC', 
		'\xFFB', '\x3', '\x2', '\x2', '\x2', '\xFFC', '\xFFD', '\x3', '\x2', '\x2', 
		'\x2', '\xFFD', '\xFFE', '\x3', '\x2', '\x2', '\x2', '\xFFE', '\x1003', 
		'\a', '\x296', '\x2', '\x2', '\xFFF', '\x1001', '\a', '\x29C', '\x2', 
		'\x2', '\x1000', '\xFFF', '\x3', '\x2', '\x2', '\x2', '\x1000', '\x1001', 
		'\x3', '\x2', '\x2', '\x2', '\x1001', '\x1002', '\x3', '\x2', '\x2', '\x2', 
		'\x1002', '\x1004', '\x5', '\x1EA', '\xF6', '\x2', '\x1003', '\x1000', 
		'\x3', '\x2', '\x2', '\x2', '\x1004', '\x1005', '\x3', '\x2', '\x2', '\x2', 
		'\x1005', '\x1003', '\x3', '\x2', '\x2', '\x2', '\x1005', '\x1006', '\x3', 
		'\x2', '\x2', '\x2', '\x1006', '\x1007', '\x3', '\x2', '\x2', '\x2', '\x1007', 
		'\x1008', '\x5', '\x1EC', '\xF7', '\x2', '\x1008', '\x1009', '\x5', '\x1EE', 
		'\xF8', '\x2', '\x1009', '\x100A', '\a', '\x297', '\x2', '\x2', '\x100A', 
		'\x1E9', '\x3', '\x2', '\x2', '\x2', '\x100B', '\x100C', '\x5', '\x30C', 
		'\x187', '\x2', '\x100C', '\x100D', '\a', '\x296', '\x2', '\x2', '\x100D', 
		'\x100E', '\x5', '\x278', '\x13D', '\x2', '\x100E', '\x1010', '\a', '\x297', 
		'\x2', '\x2', '\x100F', '\x1011', '\x5', '\x2E8', '\x175', '\x2', '\x1010', 
		'\x100F', '\x3', '\x2', '\x2', '\x2', '\x1010', '\x1011', '\x3', '\x2', 
		'\x2', '\x2', '\x1011', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1012', 
		'\x1015', '\a', '\xC8', '\x2', '\x2', '\x1013', '\x1016', '\x5', '\x330', 
		'\x199', '\x2', '\x1014', '\x1016', '\x5', '\x342', '\x1A2', '\x2', '\x1015', 
		'\x1013', '\x3', '\x2', '\x2', '\x2', '\x1015', '\x1014', '\x3', '\x2', 
		'\x2', '\x2', '\x1016', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1017', 
		'\x1018', '\a', '\xED', '\x2', '\x2', '\x1018', '\x102A', '\a', '\x296', 
		'\x2', '\x2', '\x1019', '\x102B', '\x5', '\x1C6', '\xE4', '\x2', '\x101A', 
		'\x101C', '\a', '\x29C', '\x2', '\x2', '\x101B', '\x101A', '\x3', '\x2', 
		'\x2', '\x2', '\x101B', '\x101C', '\x3', '\x2', '\x2', '\x2', '\x101C', 
		'\x101D', '\x3', '\x2', '\x2', '\x2', '\x101D', '\x101F', '\a', '\x11', 
		'\x2', '\x2', '\x101E', '\x101B', '\x3', '\x2', '\x2', '\x2', '\x101F', 
		'\x1020', '\x3', '\x2', '\x2', '\x2', '\x1020', '\x101E', '\x3', '\x2', 
		'\x2', '\x2', '\x1020', '\x1021', '\x3', '\x2', '\x2', '\x2', '\x1021', 
		'\x102B', '\x3', '\x2', '\x2', '\x2', '\x1022', '\x1024', '\a', '\x29C', 
		'\x2', '\x2', '\x1023', '\x1022', '\x3', '\x2', '\x2', '\x2', '\x1023', 
		'\x1024', '\x3', '\x2', '\x2', '\x2', '\x1024', '\x1025', '\x3', '\x2', 
		'\x2', '\x2', '\x1025', '\x1027', '\x5', '\x1F0', '\xF9', '\x2', '\x1026', 
		'\x1023', '\x3', '\x2', '\x2', '\x2', '\x1027', '\x1028', '\x3', '\x2', 
		'\x2', '\x2', '\x1028', '\x1026', '\x3', '\x2', '\x2', '\x2', '\x1028', 
		'\x1029', '\x3', '\x2', '\x2', '\x2', '\x1029', '\x102B', '\x3', '\x2', 
		'\x2', '\x2', '\x102A', '\x1019', '\x3', '\x2', '\x2', '\x2', '\x102A', 
		'\x101E', '\x3', '\x2', '\x2', '\x2', '\x102A', '\x1026', '\x3', '\x2', 
		'\x2', '\x2', '\x102B', '\x102C', '\x3', '\x2', '\x2', '\x2', '\x102C', 
		'\x102D', '\a', '\x297', '\x2', '\x2', '\x102D', '\x1EF', '\x3', '\x2', 
		'\x2', '\x2', '\x102E', '\x1030', '\x5', '\x1F2', '\xFA', '\x2', '\x102F', 
		'\x1031', '\x5', '\x2E8', '\x175', '\x2', '\x1030', '\x102F', '\x3', '\x2', 
		'\x2', '\x2', '\x1030', '\x1031', '\x3', '\x2', '\x2', '\x2', '\x1031', 
		'\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1032', '\x1039', '\x5', '\x278', 
		'\x13D', '\x2', '\x1033', '\x1035', '\a', '\x296', '\x2', '\x2', '\x1034', 
		'\x1036', '\x5', '\x276', '\x13C', '\x2', '\x1035', '\x1034', '\x3', '\x2', 
		'\x2', '\x2', '\x1035', '\x1036', '\x3', '\x2', '\x2', '\x2', '\x1036', 
		'\x1037', '\x3', '\x2', '\x2', '\x2', '\x1037', '\x1039', '\a', '\x297', 
		'\x2', '\x2', '\x1038', '\x1032', '\x3', '\x2', '\x2', '\x2', '\x1038', 
		'\x1033', '\x3', '\x2', '\x2', '\x2', '\x1039', '\x1F3', '\x3', '\x2', 
		'\x2', '\x2', '\x103A', '\x103D', '\a', '\x232', '\x2', '\x2', '\x103B', 
		'\x103C', '\t', ':', '\x2', '\x2', '\x103C', '\x103E', '\a', '\x158', 
		'\x2', '\x2', '\x103D', '\x103B', '\x3', '\x2', '\x2', '\x2', '\x103D', 
		'\x103E', '\x3', '\x2', '\x2', '\x2', '\x103E', '\x103F', '\x3', '\x2', 
		'\x2', '\x2', '\x103F', '\x1042', '\a', '\x296', '\x2', '\x2', '\x1040', 
		'\x1043', '\x5', '\x330', '\x199', '\x2', '\x1041', '\x1043', '\x5', '\x342', 
		'\x1A2', '\x2', '\x1042', '\x1040', '\x3', '\x2', '\x2', '\x2', '\x1042', 
		'\x1041', '\x3', '\x2', '\x2', '\x2', '\x1043', '\x1044', '\x3', '\x2', 
		'\x2', '\x2', '\x1044', '\x1045', '\x5', '\x1EC', '\xF7', '\x2', '\x1045', 
		'\x1046', '\x5', '\x1F6', '\xFC', '\x2', '\x1046', '\x1047', '\a', '\x297', 
		'\x2', '\x2', '\x1047', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1048', 
		'\x1049', '\a', '\xED', '\x2', '\x2', '\x1049', '\x104E', '\a', '\x296', 
		'\x2', '\x2', '\x104A', '\x104C', '\a', '\x29C', '\x2', '\x2', '\x104B', 
		'\x104A', '\x3', '\x2', '\x2', '\x2', '\x104B', '\x104C', '\x3', '\x2', 
		'\x2', '\x2', '\x104C', '\x104D', '\x3', '\x2', '\x2', '\x2', '\x104D', 
		'\x104F', '\x5', '\x1F8', '\xFD', '\x2', '\x104E', '\x104B', '\x3', '\x2', 
		'\x2', '\x2', '\x104F', '\x1050', '\x3', '\x2', '\x2', '\x2', '\x1050', 
		'\x104E', '\x3', '\x2', '\x2', '\x2', '\x1050', '\x1051', '\x3', '\x2', 
		'\x2', '\x2', '\x1051', '\x1052', '\x3', '\x2', '\x2', '\x2', '\x1052', 
		'\x1053', '\a', '\x297', '\x2', '\x2', '\x1053', '\x1F7', '\x3', '\x2', 
		'\x2', '\x2', '\x1054', '\x1057', '\x5', '\x330', '\x199', '\x2', '\x1055', 
		'\x1057', '\x5', '\x342', '\x1A2', '\x2', '\x1056', '\x1054', '\x3', '\x2', 
		'\x2', '\x2', '\x1056', '\x1055', '\x3', '\x2', '\x2', '\x2', '\x1057', 
		'\x1067', '\x3', '\x2', '\x2', '\x2', '\x1058', '\x1065', '\a', '\x14', 
		'\x2', '\x2', '\x1059', '\x1066', '\x5', '\x364', '\x1B3', '\x2', '\x105A', 
		'\x105F', '\a', '\x296', '\x2', '\x2', '\x105B', '\x105D', '\a', '\x29C', 
		'\x2', '\x2', '\x105C', '\x105B', '\x3', '\x2', '\x2', '\x2', '\x105C', 
		'\x105D', '\x3', '\x2', '\x2', '\x2', '\x105D', '\x105E', '\x3', '\x2', 
		'\x2', '\x2', '\x105E', '\x1060', '\x5', '\x364', '\x1B3', '\x2', '\x105F', 
		'\x105C', '\x3', '\x2', '\x2', '\x2', '\x1060', '\x1061', '\x3', '\x2', 
		'\x2', '\x2', '\x1061', '\x105F', '\x3', '\x2', '\x2', '\x2', '\x1061', 
		'\x1062', '\x3', '\x2', '\x2', '\x2', '\x1062', '\x1063', '\x3', '\x2', 
		'\x2', '\x2', '\x1063', '\x1064', '\a', '\x297', '\x2', '\x2', '\x1064', 
		'\x1066', '\x3', '\x2', '\x2', '\x2', '\x1065', '\x1059', '\x3', '\x2', 
		'\x2', '\x2', '\x1065', '\x105A', '\x3', '\x2', '\x2', '\x2', '\x1066', 
		'\x1068', '\x3', '\x2', '\x2', '\x2', '\x1067', '\x1058', '\x3', '\x2', 
		'\x2', '\x2', '\x1067', '\x1068', '\x3', '\x2', '\x2', '\x2', '\x1068', 
		'\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1069', '\x106A', '\a', 'Y', '\x2', 
		'\x2', '\x106A', '\x106C', '\a', '\x38', '\x2', '\x2', '\x106B', '\x106D', 
		'\a', '\x148', '\x2', '\x2', '\x106C', '\x106B', '\x3', '\x2', '\x2', 
		'\x2', '\x106C', '\x106D', '\x3', '\x2', '\x2', '\x2', '\x106D', '\x106E', 
		'\x3', '\x2', '\x2', '\x2', '\x106E', '\x1070', '\x5', '\x274', '\x13B', 
		'\x2', '\x106F', '\x1071', '\x5', '\x1FC', '\xFF', '\x2', '\x1070', '\x106F', 
		'\x3', '\x2', '\x2', '\x2', '\x1070', '\x1071', '\x3', '\x2', '\x2', '\x2', 
		'\x1071', '\x107B', '\x3', '\x2', '\x2', '\x2', '\x1072', '\x1073', '\x5', 
		'\x1FC', '\xFF', '\x2', '\x1073', '\x1074', '\a', 'Y', '\x2', '\x2', '\x1074', 
		'\x1076', '\a', '\x38', '\x2', '\x2', '\x1075', '\x1077', '\a', '\x148', 
		'\x2', '\x2', '\x1076', '\x1075', '\x3', '\x2', '\x2', '\x2', '\x1076', 
		'\x1077', '\x3', '\x2', '\x2', '\x2', '\x1077', '\x1078', '\x3', '\x2', 
		'\x2', '\x2', '\x1078', '\x1079', '\x5', '\x274', '\x13B', '\x2', '\x1079', 
		'\x107B', '\x3', '\x2', '\x2', '\x2', '\x107A', '\x1069', '\x3', '\x2', 
		'\x2', '\x2', '\x107A', '\x1072', '\x3', '\x2', '\x2', '\x2', '\x107B', 
		'\x1FB', '\x3', '\x2', '\x2', '\x2', '\x107C', '\x107D', '\a', '\x1F7', 
		'\x2', '\x2', '\x107D', '\x107E', '\a', '\x24F', '\x2', '\x2', '\x107E', 
		'\x107F', '\x5', '\x274', '\x13B', '\x2', '\x107F', '\x1FD', '\x3', '\x2', 
		'\x2', '\x2', '\x1080', '\x1081', '\a', '\xD2', '\x2', '\x2', '\x1081', 
		'\x1086', '\a', '\x38', '\x2', '\x2', '\x1082', '\x1084', '\a', '\x29C', 
		'\x2', '\x2', '\x1083', '\x1082', '\x3', '\x2', '\x2', '\x2', '\x1083', 
		'\x1084', '\x3', '\x2', '\x2', '\x2', '\x1084', '\x1085', '\x3', '\x2', 
		'\x2', '\x2', '\x1085', '\x1087', '\x5', '\x200', '\x101', '\x2', '\x1086', 
		'\x1083', '\x3', '\x2', '\x2', '\x2', '\x1087', '\x1088', '\x3', '\x2', 
		'\x2', '\x2', '\x1088', '\x1086', '\x3', '\x2', '\x2', '\x2', '\x1088', 
		'\x1089', '\x3', '\x2', '\x2', '\x2', '\x1089', '\x108B', '\x3', '\x2', 
		'\x2', '\x2', '\x108A', '\x108C', '\x5', '\x208', '\x105', '\x2', '\x108B', 
		'\x108A', '\x3', '\x2', '\x2', '\x2', '\x108B', '\x108C', '\x3', '\x2', 
		'\x2', '\x2', '\x108C', '\x109B', '\x3', '\x2', '\x2', '\x2', '\x108D', 
		'\x1098', '\x5', '\x208', '\x105', '\x2', '\x108E', '\x108F', '\a', '\xD2', 
		'\x2', '\x2', '\x108F', '\x1094', '\a', '\x38', '\x2', '\x2', '\x1090', 
		'\x1092', '\a', '\x29C', '\x2', '\x2', '\x1091', '\x1090', '\x3', '\x2', 
		'\x2', '\x2', '\x1091', '\x1092', '\x3', '\x2', '\x2', '\x2', '\x1092', 
		'\x1093', '\x3', '\x2', '\x2', '\x2', '\x1093', '\x1095', '\x5', '\x200', 
		'\x101', '\x2', '\x1094', '\x1091', '\x3', '\x2', '\x2', '\x2', '\x1095', 
		'\x1096', '\x3', '\x2', '\x2', '\x2', '\x1096', '\x1094', '\x3', '\x2', 
		'\x2', '\x2', '\x1096', '\x1097', '\x3', '\x2', '\x2', '\x2', '\x1097', 
		'\x1099', '\x3', '\x2', '\x2', '\x2', '\x1098', '\x108E', '\x3', '\x2', 
		'\x2', '\x2', '\x1098', '\x1099', '\x3', '\x2', '\x2', '\x2', '\x1099', 
		'\x109B', '\x3', '\x2', '\x2', '\x2', '\x109A', '\x1080', '\x3', '\x2', 
		'\x2', '\x2', '\x109A', '\x108D', '\x3', '\x2', '\x2', '\x2', '\x109B', 
		'\x1FF', '\x3', '\x2', '\x2', '\x2', '\x109C', '\x10A0', '\x5', '\x204', 
		'\x103', '\x2', '\x109D', '\x10A0', '\x5', '\x202', '\x102', '\x2', '\x109E', 
		'\x10A0', '\x5', '\x278', '\x13D', '\x2', '\x109F', '\x109C', '\x3', '\x2', 
		'\x2', '\x2', '\x109F', '\x109D', '\x3', '\x2', '\x2', '\x2', '\x109F', 
		'\x109E', '\x3', '\x2', '\x2', '\x2', '\x10A0', '\x201', '\x3', '\x2', 
		'\x2', '\x2', '\x10A1', '\x10A2', '\t', ';', '\x2', '\x2', '\x10A2', '\x10A7', 
		'\a', '\x296', '\x2', '\x2', '\x10A3', '\x10A5', '\a', '\x29C', '\x2', 
		'\x2', '\x10A4', '\x10A3', '\x3', '\x2', '\x2', '\x2', '\x10A4', '\x10A5', 
		'\x3', '\x2', '\x2', '\x2', '\x10A5', '\x10A6', '\x3', '\x2', '\x2', '\x2', 
		'\x10A6', '\x10A8', '\x5', '\x206', '\x104', '\x2', '\x10A7', '\x10A4', 
		'\x3', '\x2', '\x2', '\x2', '\x10A8', '\x10A9', '\x3', '\x2', '\x2', '\x2', 
		'\x10A9', '\x10A7', '\x3', '\x2', '\x2', '\x2', '\x10A9', '\x10AA', '\x3', 
		'\x2', '\x2', '\x2', '\x10AA', '\x10AB', '\x3', '\x2', '\x2', '\x2', '\x10AB', 
		'\x10AC', '\a', '\x297', '\x2', '\x2', '\x10AC', '\x203', '\x3', '\x2', 
		'\x2', '\x2', '\x10AD', '\x10AE', '\a', '\xD3', '\x2', '\x2', '\x10AE', 
		'\x10AF', '\a', '\x1E0', '\x2', '\x2', '\x10AF', '\x10B4', '\a', '\x296', 
		'\x2', '\x2', '\x10B0', '\x10B2', '\a', '\x29C', '\x2', '\x2', '\x10B1', 
		'\x10B0', '\x3', '\x2', '\x2', '\x2', '\x10B1', '\x10B2', '\x3', '\x2', 
		'\x2', '\x2', '\x10B2', '\x10B3', '\x3', '\x2', '\x2', '\x2', '\x10B3', 
		'\x10B5', '\x5', '\x206', '\x104', '\x2', '\x10B4', '\x10B1', '\x3', '\x2', 
		'\x2', '\x2', '\x10B5', '\x10B6', '\x3', '\x2', '\x2', '\x2', '\x10B6', 
		'\x10B4', '\x3', '\x2', '\x2', '\x2', '\x10B6', '\x10B7', '\x3', '\x2', 
		'\x2', '\x2', '\x10B7', '\x10B8', '\x3', '\x2', '\x2', '\x2', '\x10B8', 
		'\x10B9', '\a', '\x297', '\x2', '\x2', '\x10B9', '\x205', '\x3', '\x2', 
		'\x2', '\x2', '\x10BA', '\x10C2', '\x5', '\x202', '\x102', '\x2', '\x10BB', 
		'\x10BD', '\a', '\x296', '\x2', '\x2', '\x10BC', '\x10BE', '\x5', '\x276', 
		'\x13C', '\x2', '\x10BD', '\x10BC', '\x3', '\x2', '\x2', '\x2', '\x10BD', 
		'\x10BE', '\x3', '\x2', '\x2', '\x2', '\x10BE', '\x10BF', '\x3', '\x2', 
		'\x2', '\x2', '\x10BF', '\x10C2', '\a', '\x297', '\x2', '\x2', '\x10C0', 
		'\x10C2', '\x5', '\x278', '\x13D', '\x2', '\x10C1', '\x10BA', '\x3', '\x2', 
		'\x2', '\x2', '\x10C1', '\x10BB', '\x3', '\x2', '\x2', '\x2', '\x10C1', 
		'\x10C0', '\x3', '\x2', '\x2', '\x2', '\x10C2', '\x207', '\x3', '\x2', 
		'\x2', '\x2', '\x10C3', '\x10C4', '\a', '\xD7', '\x2', '\x2', '\x10C4', 
		'\x10C5', '\x5', '\x274', '\x13B', '\x2', '\x10C5', '\x209', '\x3', '\x2', 
		'\x2', '\x2', '\x10C6', '\x10CA', '\a', '\x133', '\x2', '\x2', '\x10C7', 
		'\x10C9', '\x5', '\x20C', '\x107', '\x2', '\x10C8', '\x10C7', '\x3', '\x2', 
		'\x2', '\x2', '\x10C9', '\x10CC', '\x3', '\x2', '\x2', '\x2', '\x10CA', 
		'\x10C8', '\x3', '\x2', '\x2', '\x2', '\x10CA', '\x10CB', '\x3', '\x2', 
		'\x2', '\x2', '\x10CB', '\x10CE', '\x3', '\x2', '\x2', '\x2', '\x10CC', 
		'\x10CA', '\x3', '\x2', '\x2', '\x2', '\x10CD', '\x10CF', '\x5', '\x20E', 
		'\x108', '\x2', '\x10CE', '\x10CD', '\x3', '\x2', '\x2', '\x2', '\x10CE', 
		'\x10CF', '\x3', '\x2', '\x2', '\x2', '\x10CF', '\x10D3', '\x3', '\x2', 
		'\x2', '\x2', '\x10D0', '\x10D2', '\x5', '\x210', '\x109', '\x2', '\x10D1', 
		'\x10D0', '\x3', '\x2', '\x2', '\x2', '\x10D2', '\x10D5', '\x3', '\x2', 
		'\x2', '\x2', '\x10D3', '\x10D1', '\x3', '\x2', '\x2', '\x2', '\x10D3', 
		'\x10D4', '\x3', '\x2', '\x2', '\x2', '\x10D4', '\x10D6', '\x3', '\x2', 
		'\x2', '\x2', '\x10D5', '\x10D3', '\x3', '\x2', '\x2', '\x2', '\x10D6', 
		'\x10D7', '\x5', '\x212', '\x10A', '\x2', '\x10D7', '\x20B', '\x3', '\x2', 
		'\x2', '\x2', '\x10D8', '\x10D9', '\t', '<', '\x2', '\x2', '\x10D9', '\x10E1', 
		'\a', '\x13D', '\x2', '\x2', '\x10DA', '\x10DE', '\a', '\x22F', '\x2', 
		'\x2', '\x10DB', '\x10DF', '\a', '\x8B', '\x2', '\x2', '\x10DC', '\x10DD', 
		'\a', '\x1E8', '\x2', '\x2', '\x10DD', '\x10DF', '\a', '\x1A7', '\x2', 
		'\x2', '\x10DE', '\x10DB', '\x3', '\x2', '\x2', '\x2', '\x10DE', '\x10DC', 
		'\x3', '\x2', '\x2', '\x2', '\x10DF', '\x10E1', '\x3', '\x2', '\x2', '\x2', 
		'\x10E0', '\x10D8', '\x3', '\x2', '\x2', '\x2', '\x10E0', '\x10DA', '\x3', 
		'\x2', '\x2', '\x2', '\x10E1', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x10E2', 
		'\x10E3', '\a', '\x1BC', '\x2', '\x2', '\x10E3', '\x10E4', '\t', '=', 
		'\x2', '\x2', '\x10E4', '\x10E5', '\a', '\x1C8', '\x2', '\x2', '\x10E5', 
		'\x20F', '\x3', '\x2', '\x2', '\x2', '\x10E6', '\x10E7', '\a', '\x1A7', 
		'\x2', '\x2', '\x10E7', '\x10E8', '\x5', '\x306', '\x184', '\x2', '\x10E8', 
		'\x10E9', '\a', '\x165', '\x2', '\x2', '\x10E9', '\x10EA', '\a', '\x296', 
		'\x2', '\x2', '\x10EA', '\x10EB', '\x5', '\x1C6', '\xE4', '\x2', '\x10EB', 
		'\x10EC', '\a', '\x297', '\x2', '\x2', '\x10EC', '\x10F0', '\x5', '\x214', 
		'\x10B', '\x2', '\x10ED', '\x10EF', '\x5', '\x20C', '\x107', '\x2', '\x10EE', 
		'\x10ED', '\x3', '\x2', '\x2', '\x2', '\x10EF', '\x10F2', '\x3', '\x2', 
		'\x2', '\x2', '\x10F0', '\x10EE', '\x3', '\x2', '\x2', '\x2', '\x10F0', 
		'\x10F1', '\x3', '\x2', '\x2', '\x2', '\x10F1', '\x211', '\x3', '\x2', 
		'\x2', '\x2', '\x10F2', '\x10F0', '\x3', '\x2', '\x2', '\x2', '\x10F3', 
		'\x10F4', '\a', '\x11F', '\x2', '\x2', '\x10F4', '\x10F6', '\x5', '\x308', 
		'\x185', '\x2', '\x10F5', '\x10F3', '\x3', '\x2', '\x2', '\x2', '\x10F5', 
		'\x10F6', '\x3', '\x2', '\x2', '\x2', '\x10F6', '\x10F7', '\x3', '\x2', 
		'\x2', '\x2', '\x10F7', '\x10FB', '\x5', '\x214', '\x10B', '\x2', '\x10F8', 
		'\x10FA', '\x5', '\x20C', '\x107', '\x2', '\x10F9', '\x10F8', '\x3', '\x2', 
		'\x2', '\x2', '\x10FA', '\x10FD', '\x3', '\x2', '\x2', '\x2', '\x10FB', 
		'\x10F9', '\x3', '\x2', '\x2', '\x2', '\x10FB', '\x10FC', '\x3', '\x2', 
		'\x2', '\x2', '\x10FC', '\x10FE', '\x3', '\x2', '\x2', '\x2', '\x10FD', 
		'\x10FB', '\x3', '\x2', '\x2', '\x2', '\x10FE', '\x10FF', '\x5', '\x21C', 
		'\x10F', '\x2', '\x10FF', '\x213', '\x3', '\x2', '\x2', '\x2', '\x1100', 
		'\x1102', '\x5', '\x216', '\x10C', '\x2', '\x1101', '\x1100', '\x3', '\x2', 
		'\x2', '\x2', '\x1101', '\x1102', '\x3', '\x2', '\x2', '\x2', '\x1102', 
		'\x1103', '\x3', '\x2', '\x2', '\x2', '\x1103', '\x1104', '\a', '\x8B', 
		'\x2', '\x2', '\x1104', '\x1105', '\a', '\x38', '\x2', '\x2', '\x1105', 
		'\x1106', '\x5', '\x218', '\x10D', '\x2', '\x1106', '\x1107', '\a', '\x129', 
		'\x2', '\x2', '\x1107', '\x1108', '\x5', '\x218', '\x10D', '\x2', '\x1108', 
		'\x215', '\x3', '\x2', '\x2', '\x2', '\x1109', '\x110A', '\a', '\x178', 
		'\x2', '\x2', '\x110A', '\x110B', '\a', '\x38', '\x2', '\x2', '\x110B', 
		'\x110C', '\x5', '\x218', '\x10D', '\x2', '\x110C', '\x217', '\x3', '\x2', 
		'\x2', '\x2', '\x110D', '\x1112', '\a', '\x296', '\x2', '\x2', '\x110E', 
		'\x1110', '\a', '\x29C', '\x2', '\x2', '\x110F', '\x110E', '\x3', '\x2', 
		'\x2', '\x2', '\x110F', '\x1110', '\x3', '\x2', '\x2', '\x2', '\x1110', 
		'\x1111', '\x3', '\x2', '\x2', '\x2', '\x1111', '\x1113', '\x5', '\x21A', 
		'\x10E', '\x2', '\x1112', '\x110F', '\x3', '\x2', '\x2', '\x2', '\x1113', 
		'\x1114', '\x3', '\x2', '\x2', '\x2', '\x1114', '\x1112', '\x3', '\x2', 
		'\x2', '\x2', '\x1114', '\x1115', '\x3', '\x2', '\x2', '\x2', '\x1115', 
		'\x1116', '\x3', '\x2', '\x2', '\x2', '\x1116', '\x1117', '\a', '\x297', 
		'\x2', '\x2', '\x1117', '\x219', '\x3', '\x2', '\x2', '\x2', '\x1118', 
		'\x111B', '\x5', '\x278', '\x13D', '\x2', '\x1119', '\x111B', '\x5', '\x1CC', 
		'\xE7', '\x2', '\x111A', '\x1118', '\x3', '\x2', '\x2', '\x2', '\x111A', 
		'\x1119', '\x3', '\x2', '\x2', '\x2', '\x111B', '\x111D', '\x3', '\x2', 
		'\x2', '\x2', '\x111C', '\x111E', '\x5', '\x2E8', '\x175', '\x2', '\x111D', 
		'\x111C', '\x3', '\x2', '\x2', '\x2', '\x111D', '\x111E', '\x3', '\x2', 
		'\x2', '\x2', '\x111E', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x111F', 
		'\x1121', '\x5', '\x21E', '\x110', '\x2', '\x1120', '\x111F', '\x3', '\x2', 
		'\x2', '\x2', '\x1120', '\x1121', '\x3', '\x2', '\x2', '\x2', '\x1121', 
		'\x1122', '\x3', '\x2', '\x2', '\x2', '\x1122', '\x1129', '\a', '\x296', 
		'\x2', '\x2', '\x1123', '\x1125', '\a', '\x29C', '\x2', '\x2', '\x1124', 
		'\x1123', '\x3', '\x2', '\x2', '\x2', '\x1124', '\x1125', '\x3', '\x2', 
		'\x2', '\x2', '\x1125', '\x1126', '\x3', '\x2', '\x2', '\x2', '\x1126', 
		'\x1128', '\x5', '\x220', '\x111', '\x2', '\x1127', '\x1124', '\x3', '\x2', 
		'\x2', '\x2', '\x1128', '\x112B', '\x3', '\x2', '\x2', '\x2', '\x1129', 
		'\x1127', '\x3', '\x2', '\x2', '\x2', '\x1129', '\x112A', '\x3', '\x2', 
		'\x2', '\x2', '\x112A', '\x112C', '\x3', '\x2', '\x2', '\x2', '\x112B', 
		'\x1129', '\x3', '\x2', '\x2', '\x2', '\x112C', '\x112D', '\a', '\x297', 
		'\x2', '\x2', '\x112D', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x112E', 
		'\x1134', '\a', '\x1C9', '\x2', '\x2', '\x112F', '\x1135', '\a', '\x235', 
		'\x2', '\x2', '\x1130', '\x1132', '\a', '\x236', '\x2', '\x2', '\x1131', 
		'\x1133', '\a', '\r', '\x2', '\x2', '\x1132', '\x1131', '\x3', '\x2', 
		'\x2', '\x2', '\x1132', '\x1133', '\x3', '\x2', '\x2', '\x2', '\x1133', 
		'\x1135', '\x3', '\x2', '\x2', '\x2', '\x1134', '\x112F', '\x3', '\x2', 
		'\x2', '\x2', '\x1134', '\x1130', '\x3', '\x2', '\x2', '\x2', '\x1134', 
		'\x1135', '\x3', '\x2', '\x2', '\x2', '\x1135', '\x1138', '\x3', '\x2', 
		'\x2', '\x2', '\x1136', '\x1137', '\t', '>', '\x2', '\x2', '\x1137', '\x1139', 
		'\a', '\x16B', '\x2', '\x2', '\x1138', '\x1136', '\x3', '\x2', '\x2', 
		'\x2', '\x1138', '\x1139', '\x3', '\x2', '\x2', '\x2', '\x1139', '\x113B', 
		'\x3', '\x2', '\x2', '\x2', '\x113A', '\x113C', '\x5', '\x224', '\x113', 
		'\x2', '\x113B', '\x113A', '\x3', '\x2', '\x2', '\x2', '\x113B', '\x113C', 
		'\x3', '\x2', '\x2', '\x2', '\x113C', '\x21F', '\x3', '\x2', '\x2', '\x2', 
		'\x113D', '\x1143', '\a', '\x235', '\x2', '\x2', '\x113E', '\x1140', '\a', 
		'\x236', '\x2', '\x2', '\x113F', '\x1141', '\a', '\r', '\x2', '\x2', '\x1140', 
		'\x113F', '\x3', '\x2', '\x2', '\x2', '\x1140', '\x1141', '\x3', '\x2', 
		'\x2', '\x2', '\x1141', '\x1143', '\x3', '\x2', '\x2', '\x2', '\x1142', 
		'\x113D', '\x3', '\x2', '\x2', '\x2', '\x1142', '\x113E', '\x3', '\x2', 
		'\x2', '\x2', '\x1142', '\x1143', '\x3', '\x2', '\x2', '\x2', '\x1143', 
		'\x1144', '\x3', '\x2', '\x2', '\x2', '\x1144', '\x1146', '\x5', '\x222', 
		'\x112', '\x2', '\x1145', '\x1147', '\x5', '\x228', '\x115', '\x2', '\x1146', 
		'\x1145', '\x3', '\x2', '\x2', '\x2', '\x1146', '\x1147', '\x3', '\x2', 
		'\x2', '\x2', '\x1147', '\x1148', '\x3', '\x2', '\x2', '\x2', '\x1148', 
		'\x1149', '\a', '\x2AA', '\x2', '\x2', '\x1149', '\x114A', '\x5', '\x278', 
		'\x13D', '\x2', '\x114A', '\x221', '\x3', '\x2', '\x2', '\x2', '\x114B', 
		'\x114C', '\x5', '\x28E', '\x148', '\x2', '\x114C', '\x223', '\x3', '\x2', 
		'\x2', '\x2', '\x114D', '\x114E', '\a', '\xFF', '\x2', '\x2', '\x114E', 
		'\x114F', '\a', '\x296', '\x2', '\x2', '\x114F', '\x1150', '\x5', '\x278', 
		'\x13D', '\x2', '\x1150', '\x1152', '\a', '\x297', '\x2', '\x2', '\x1151', 
		'\x1153', '\x5', '\x226', '\x114', '\x2', '\x1152', '\x1151', '\x3', '\x2', 
		'\x2', '\x2', '\x1152', '\x1153', '\x3', '\x2', '\x2', '\x2', '\x1153', 
		'\x225', '\x3', '\x2', '\x2', '\x2', '\x1154', '\x1155', '\a', '\x233', 
		'\x2', '\x2', '\x1155', '\x1156', '\a', '\x296', '\x2', '\x2', '\x1156', 
		'\x1157', '\x5', '\x274', '\x13B', '\x2', '\x1157', '\x1158', '\a', '\x297', 
		'\x2', '\x2', '\x1158', '\x227', '\x3', '\x2', '\x2', '\x2', '\x1159', 
		'\x115B', '\a', '\x16B', '\x2', '\x2', '\x115A', '\x115C', '\a', '\x1E5', 
		'\x2', '\x2', '\x115B', '\x115A', '\x3', '\x2', '\x2', '\x2', '\x115B', 
		'\x115C', '\x3', '\x2', '\x2', '\x2', '\x115C', '\x115D', '\x3', '\x2', 
		'\x2', '\x2', '\x115D', '\x1162', '\a', '\x38', '\x2', '\x2', '\x115E', 
		'\x1160', '\a', '\x29C', '\x2', '\x2', '\x115F', '\x115E', '\x3', '\x2', 
		'\x2', '\x2', '\x115F', '\x1160', '\x3', '\x2', '\x2', '\x2', '\x1160', 
		'\x1161', '\x3', '\x2', '\x2', '\x2', '\x1161', '\x1163', '\x5', '\x22A', 
		'\x116', '\x2', '\x1162', '\x115F', '\x3', '\x2', '\x2', '\x2', '\x1163', 
		'\x1164', '\x3', '\x2', '\x2', '\x2', '\x1164', '\x1162', '\x3', '\x2', 
		'\x2', '\x2', '\x1164', '\x1165', '\x3', '\x2', '\x2', '\x2', '\x1165', 
		'\x229', '\x3', '\x2', '\x2', '\x2', '\x1166', '\x1168', '\x5', '\x278', 
		'\x13D', '\x2', '\x1167', '\x1169', '\t', '?', '\x2', '\x2', '\x1168', 
		'\x1167', '\x3', '\x2', '\x2', '\x2', '\x1168', '\x1169', '\x3', '\x2', 
		'\x2', '\x2', '\x1169', '\x116C', '\x3', '\x2', '\x2', '\x2', '\x116A', 
		'\x116B', '\a', '\x158', '\x2', '\x2', '\x116B', '\x116D', '\t', '@', 
		'\x2', '\x2', '\x116C', '\x116A', '\x3', '\x2', '\x2', '\x2', '\x116C', 
		'\x116D', '\x3', '\x2', '\x2', '\x2', '\x116D', '\x22B', '\x3', '\x2', 
		'\x2', '\x2', '\x116E', '\x116F', '\a', '\xC8', '\x2', '\x2', '\x116F', 
		'\x1171', '\a', '\x235', '\x2', '\x2', '\x1170', '\x1172', '\x5', '\x22E', 
		'\x118', '\x2', '\x1171', '\x1170', '\x3', '\x2', '\x2', '\x2', '\x1171', 
		'\x1172', '\x3', '\x2', '\x2', '\x2', '\x1172', '\x1174', '\x3', '\x2', 
		'\x2', '\x2', '\x1173', '\x1175', '\x5', '\x230', '\x119', '\x2', '\x1174', 
		'\x1173', '\x3', '\x2', '\x2', '\x2', '\x1174', '\x1175', '\x3', '\x2', 
		'\x2', '\x2', '\x1175', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x1176', 
		'\x1177', '\a', '\x15F', '\x2', '\x2', '\x1177', '\x1178', '\x5', '\x340', 
		'\x1A1', '\x2', '\x1178', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x1179', 
		'\x117A', '\a', '\x1EA', '\x2', '\x2', '\x117A', '\x117F', '\a', '\x115', 
		'\x2', '\x2', '\x117B', '\x117F', '\a', '\x156', '\x2', '\x2', '\x117C', 
		'\x117D', '\a', '\x247', '\x2', '\x2', '\x117D', '\x117F', '\x5', '\x278', 
		'\x13D', '\x2', '\x117E', '\x1179', '\x3', '\x2', '\x2', '\x2', '\x117E', 
		'\x117B', '\x3', '\x2', '\x2', '\x2', '\x117E', '\x117C', '\x3', '\x2', 
		'\x2', '\x2', '\x117F', '\x231', '\x3', '\x2', '\x2', '\x2', '\x1180', 
		'\x1181', '\a', '\x235', '\x2', '\x2', '\x1181', '\x1182', '\x5', '\x260', 
		'\x131', '\x2', '\x1182', '\x1184', '\x5', '\x234', '\x11B', '\x2', '\x1183', 
		'\x1185', '\x5', '\x2EC', '\x177', '\x2', '\x1184', '\x1183', '\x3', '\x2', 
		'\x2', '\x2', '\x1184', '\x1185', '\x3', '\x2', '\x2', '\x2', '\x1185', 
		'\x1187', '\x3', '\x2', '\x2', '\x2', '\x1186', '\x1188', '\x5', '\x262', 
		'\x132', '\x2', '\x1187', '\x1186', '\x3', '\x2', '\x2', '\x2', '\x1187', 
		'\x1188', '\x3', '\x2', '\x2', '\x2', '\x1188', '\x118A', '\x3', '\x2', 
		'\x2', '\x2', '\x1189', '\x118B', '\x5', '\x264', '\x133', '\x2', '\x118A', 
		'\x1189', '\x3', '\x2', '\x2', '\x2', '\x118A', '\x118B', '\x3', '\x2', 
		'\x2', '\x2', '\x118B', '\x233', '\x3', '\x2', '\x2', '\x2', '\x118C', 
		'\x119C', '\a', '\x1DF', '\x2', '\x2', '\x118D', '\x118F', '\a', '\x29C', 
		'\x2', '\x2', '\x118E', '\x118D', '\x3', '\x2', '\x2', '\x2', '\x118E', 
		'\x118F', '\x3', '\x2', '\x2', '\x2', '\x118F', '\x1190', '\x3', '\x2', 
		'\x2', '\x2', '\x1190', '\x1192', '\x5', '\x236', '\x11C', '\x2', '\x1191', 
		'\x118E', '\x3', '\x2', '\x2', '\x2', '\x1192', '\x1193', '\x3', '\x2', 
		'\x2', '\x2', '\x1193', '\x1191', '\x3', '\x2', '\x2', '\x2', '\x1193', 
		'\x1194', '\x3', '\x2', '\x2', '\x2', '\x1194', '\x119D', '\x3', '\x2', 
		'\x2', '\x2', '\x1195', '\x1196', '\a', '\x23E', '\x2', '\x2', '\x1196', 
		'\x1197', '\a', '\x296', '\x2', '\x2', '\x1197', '\x1198', '\x5', '\x36C', 
		'\x1B7', '\x2', '\x1198', '\x1199', '\a', '\x297', '\x2', '\x2', '\x1199', 
		'\x119A', '\a', '\x2AA', '\x2', '\x2', '\x119A', '\x119B', '\x5', '\x278', 
		'\x13D', '\x2', '\x119B', '\x119D', '\x3', '\x2', '\x2', '\x2', '\x119C', 
		'\x1191', '\x3', '\x2', '\x2', '\x2', '\x119C', '\x1195', '\x3', '\x2', 
		'\x2', '\x2', '\x119D', '\x235', '\x3', '\x2', '\x2', '\x2', '\x119E', 
		'\x119F', '\x5', '\x330', '\x199', '\x2', '\x119F', '\x11A0', '\a', '\x2AA', 
		'\x2', '\x2', '\x11A0', '\x11A1', '\x5', '\x278', '\x13D', '\x2', '\x11A1', 
		'\x11A7', '\x3', '\x2', '\x2', '\x2', '\x11A2', '\x11A3', '\x5', '\x342', 
		'\x1A2', '\x2', '\x11A3', '\x11A4', '\a', '\x2AA', '\x2', '\x2', '\x11A4', 
		'\x11A5', '\x5', '\x1C6', '\xE4', '\x2', '\x11A5', '\x11A7', '\x3', '\x2', 
		'\x2', '\x2', '\x11A6', '\x119E', '\x3', '\x2', '\x2', '\x2', '\x11A6', 
		'\x11A2', '\x3', '\x2', '\x2', '\x2', '\x11A7', '\x237', '\x3', '\x2', 
		'\x2', '\x2', '\x11A8', '\x11AA', '\a', '\x86', '\x2', '\x2', '\x11A9', 
		'\x11AB', '\a', '\xCB', '\x2', '\x2', '\x11AA', '\x11A9', '\x3', '\x2', 
		'\x2', '\x2', '\x11AA', '\x11AB', '\x3', '\x2', '\x2', '\x2', '\x11AB', 
		'\x11AC', '\x3', '\x2', '\x2', '\x2', '\x11AC', '\x11AE', '\x5', '\x260', 
		'\x131', '\x2', '\x11AD', '\x11AF', '\x5', '\x2EC', '\x177', '\x2', '\x11AE', 
		'\x11AD', '\x3', '\x2', '\x2', '\x2', '\x11AE', '\x11AF', '\x3', '\x2', 
		'\x2', '\x2', '\x11AF', '\x11B1', '\x3', '\x2', '\x2', '\x2', '\x11B0', 
		'\x11B2', '\x5', '\x262', '\x132', '\x2', '\x11B1', '\x11B0', '\x3', '\x2', 
		'\x2', '\x2', '\x11B1', '\x11B2', '\x3', '\x2', '\x2', '\x2', '\x11B2', 
		'\x11B4', '\x3', '\x2', '\x2', '\x2', '\x11B3', '\x11B5', '\x5', '\x264', 
		'\x133', '\x2', '\x11B4', '\x11B3', '\x3', '\x2', '\x2', '\x2', '\x11B4', 
		'\x11B5', '\x3', '\x2', '\x2', '\x2', '\x11B5', '\x239', '\x3', '\x2', 
		'\x2', '\x2', '\x11B6', '\x11B9', '\a', '\xF4', '\x2', '\x2', '\x11B7', 
		'\x11BA', '\x5', '\x23C', '\x11F', '\x2', '\x11B8', '\x11BA', '\x5', '\x23E', 
		'\x120', '\x2', '\x11B9', '\x11B7', '\x3', '\x2', '\x2', '\x2', '\x11B9', 
		'\x11B8', '\x3', '\x2', '\x2', '\x2', '\x11BA', '\x23B', '\x3', '\x2', 
		'\x2', '\x2', '\x11BB', '\x11C1', '\x5', '\x248', '\x125', '\x2', '\x11BC', 
		'\x11BE', '\x5', '\x24A', '\x126', '\x2', '\x11BD', '\x11BF', '\x5', '\x262', 
		'\x132', '\x2', '\x11BE', '\x11BD', '\x3', '\x2', '\x2', '\x2', '\x11BE', 
		'\x11BF', '\x3', '\x2', '\x2', '\x2', '\x11BF', '\x11C2', '\x3', '\x2', 
		'\x2', '\x2', '\x11C0', '\x11C2', '\x5', '\x1BC', '\xDF', '\x2', '\x11C1', 
		'\x11BC', '\x3', '\x2', '\x2', '\x2', '\x11C1', '\x11C0', '\x3', '\x2', 
		'\x2', '\x2', '\x11C2', '\x11C4', '\x3', '\x2', '\x2', '\x2', '\x11C3', 
		'\x11C5', '\x5', '\x264', '\x133', '\x2', '\x11C4', '\x11C3', '\x3', '\x2', 
		'\x2', '\x2', '\x11C4', '\x11C5', '\x3', '\x2', '\x2', '\x2', '\x11C5', 
		'\x23D', '\x3', '\x2', '\x2', '\x2', '\x11C6', '\x11C8', '\a', '\r', '\x2', 
		'\x2', '\x11C7', '\x11C9', '\x5', '\x240', '\x121', '\x2', '\x11C8', '\x11C7', 
		'\x3', '\x2', '\x2', '\x2', '\x11C9', '\x11CA', '\x3', '\x2', '\x2', '\x2', 
		'\x11CA', '\x11C8', '\x3', '\x2', '\x2', '\x2', '\x11CA', '\x11CB', '\x3', 
		'\x2', '\x2', '\x2', '\x11CB', '\x11CE', '\x3', '\x2', '\x2', '\x2', '\x11CC', 
		'\x11CE', '\x5', '\x242', '\x122', '\x2', '\x11CD', '\x11C6', '\x3', '\x2', 
		'\x2', '\x2', '\x11CD', '\x11CC', '\x3', '\x2', '\x2', '\x2', '\x11CE', 
		'\x11CF', '\x3', '\x2', '\x2', '\x2', '\x11CF', '\x11D0', '\x5', '\x1BC', 
		'\xDF', '\x2', '\x11D0', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x11D1', 
		'\x11D3', '\x5', '\x248', '\x125', '\x2', '\x11D2', '\x11D4', '\x5', '\x24A', 
		'\x126', '\x2', '\x11D3', '\x11D2', '\x3', '\x2', '\x2', '\x2', '\x11D3', 
		'\x11D4', '\x3', '\x2', '\x2', '\x2', '\x11D4', '\x11D6', '\x3', '\x2', 
		'\x2', '\x2', '\x11D5', '\x11D7', '\x5', '\x264', '\x133', '\x2', '\x11D6', 
		'\x11D5', '\x3', '\x2', '\x2', '\x2', '\x11D6', '\x11D7', '\x3', '\x2', 
		'\x2', '\x2', '\x11D7', '\x241', '\x3', '\x2', '\x2', '\x2', '\x11D8', 
		'\x11DA', '\t', '\x41', '\x2', '\x2', '\x11D9', '\x11D8', '\x3', '\x2', 
		'\x2', '\x2', '\x11D9', '\x11DA', '\x3', '\x2', '\x2', '\x2', '\x11DA', 
		'\x11DC', '\x3', '\x2', '\x2', '\x2', '\x11DB', '\x11DD', '\x5', '\x244', 
		'\x123', '\x2', '\x11DC', '\x11DB', '\x3', '\x2', '\x2', '\x2', '\x11DD', 
		'\x11DE', '\x3', '\x2', '\x2', '\x2', '\x11DE', '\x11DC', '\x3', '\x2', 
		'\x2', '\x2', '\x11DE', '\x11DF', '\x3', '\x2', '\x2', '\x2', '\x11DF', 
		'\x11E1', '\x3', '\x2', '\x2', '\x2', '\x11E0', '\x11E2', '\x5', '\x246', 
		'\x124', '\x2', '\x11E1', '\x11E0', '\x3', '\x2', '\x2', '\x2', '\x11E1', 
		'\x11E2', '\x3', '\x2', '\x2', '\x2', '\x11E2', '\x243', '\x3', '\x2', 
		'\x2', '\x2', '\x11E3', '\x11E4', '\a', '\x24B', '\x2', '\x2', '\x11E4', 
		'\x11E5', '\x5', '\x274', '\x13B', '\x2', '\x11E5', '\x11E7', '\a', '\x213', 
		'\x2', '\x2', '\x11E6', '\x11E8', '\x5', '\x240', '\x121', '\x2', '\x11E7', 
		'\x11E6', '\x3', '\x2', '\x2', '\x2', '\x11E8', '\x11E9', '\x3', '\x2', 
		'\x2', '\x2', '\x11E9', '\x11E7', '\x3', '\x2', '\x2', '\x2', '\x11E9', 
		'\x11EA', '\x3', '\x2', '\x2', '\x2', '\x11EA', '\x245', '\x3', '\x2', 
		'\x2', '\x2', '\x11EB', '\x11ED', '\a', '\x9A', '\x2', '\x2', '\x11EC', 
		'\x11EE', '\x5', '\x240', '\x121', '\x2', '\x11ED', '\x11EC', '\x3', '\x2', 
		'\x2', '\x2', '\x11EE', '\x11EF', '\x3', '\x2', '\x2', '\x2', '\x11EF', 
		'\x11ED', '\x3', '\x2', '\x2', '\x2', '\x11EF', '\x11F0', '\x3', '\x2', 
		'\x2', '\x2', '\x11F0', '\x247', '\x3', '\x2', '\x2', '\x2', '\x11F1', 
		'\x11F2', '\a', '\xFB', '\x2', '\x2', '\x11F2', '\x11F4', '\x5', '\x260', 
		'\x131', '\x2', '\x11F3', '\x11F5', '\x5', '\x342', '\x1A2', '\x2', '\x11F4', 
		'\x11F3', '\x3', '\x2', '\x2', '\x2', '\x11F4', '\x11F5', '\x3', '\x2', 
		'\x2', '\x2', '\x11F5', '\x249', '\x3', '\x2', '\x2', '\x2', '\x11F6', 
		'\x11F7', '\a', '\x23D', '\x2', '\x2', '\x11F7', '\x11F9', '\a', '\x296', 
		'\x2', '\x2', '\x11F8', '\x11FA', '\x5', '\x276', '\x13C', '\x2', '\x11F9', 
		'\x11F8', '\x3', '\x2', '\x2', '\x2', '\x11F9', '\x11FA', '\x3', '\x2', 
		'\x2', '\x2', '\x11FA', '\x11FB', '\x3', '\x2', '\x2', '\x2', '\x11FB', 
		'\x11FC', '\a', '\x297', '\x2', '\x2', '\x11FC', '\x24B', '\x3', '\x2', 
		'\x2', '\x2', '\x11FD', '\x11FE', '\a', '\x12B', '\x2', '\x2', '\x11FE', 
		'\x11FF', '\a', '\xFB', '\x2', '\x2', '\x11FF', '\x1201', '\x5', '\x332', 
		'\x19A', '\x2', '\x1200', '\x1202', '\x5', '\x2EA', '\x176', '\x2', '\x1201', 
		'\x1200', '\x3', '\x2', '\x2', '\x2', '\x1201', '\x1202', '\x3', '\x2', 
		'\x2', '\x2', '\x1202', '\x1203', '\x3', '\x2', '\x2', '\x2', '\x1203', 
		'\x1204', '\a', '\x23B', '\x2', '\x2', '\x1204', '\x1205', '\x5', '\x256', 
		'\x12C', '\x2', '\x1205', '\x1206', '\a', '\x165', '\x2', '\x2', '\x1206', 
		'\x1207', '\a', '\x296', '\x2', '\x2', '\x1207', '\x1208', '\x5', '\x274', 
		'\x13B', '\x2', '\x1208', '\x1211', '\a', '\x297', '\x2', '\x2', '\x1209', 
		'\x120B', '\x5', '\x24E', '\x128', '\x2', '\x120A', '\x120C', '\x5', '\x254', 
		'\x12B', '\x2', '\x120B', '\x120A', '\x3', '\x2', '\x2', '\x2', '\x120B', 
		'\x120C', '\x3', '\x2', '\x2', '\x2', '\x120C', '\x1212', '\x3', '\x2', 
		'\x2', '\x2', '\x120D', '\x120F', '\x5', '\x254', '\x12B', '\x2', '\x120E', 
		'\x1210', '\x5', '\x24E', '\x128', '\x2', '\x120F', '\x120E', '\x3', '\x2', 
		'\x2', '\x2', '\x120F', '\x1210', '\x3', '\x2', '\x2', '\x2', '\x1210', 
		'\x1212', '\x3', '\x2', '\x2', '\x2', '\x1211', '\x1209', '\x3', '\x2', 
		'\x2', '\x2', '\x1211', '\x120D', '\x3', '\x2', '\x2', '\x2', '\x1211', 
		'\x1212', '\x3', '\x2', '\x2', '\x2', '\x1212', '\x1214', '\x3', '\x2', 
		'\x2', '\x2', '\x1213', '\x1215', '\x5', '\x264', '\x133', '\x2', '\x1214', 
		'\x1213', '\x3', '\x2', '\x2', '\x2', '\x1214', '\x1215', '\x3', '\x2', 
		'\x2', '\x2', '\x1215', '\x24D', '\x3', '\x2', '\x2', '\x2', '\x1216', 
		'\x1217', '\a', '\x24B', '\x2', '\x2', '\x1217', '\x1218', '\a', '\x124', 
		'\x2', '\x2', '\x1218', '\x1219', '\a', '\x213', '\x2', '\x2', '\x1219', 
		'\x121A', '\a', '\x235', '\x2', '\x2', '\x121A', '\x121B', '\a', '\x1DF', 
		'\x2', '\x2', '\x121B', '\x1220', '\x5', '\x250', '\x129', '\x2', '\x121C', 
		'\x121D', '\a', '\x29C', '\x2', '\x2', '\x121D', '\x121F', '\x5', '\x250', 
		'\x129', '\x2', '\x121E', '\x121C', '\x3', '\x2', '\x2', '\x2', '\x121F', 
		'\x1222', '\x3', '\x2', '\x2', '\x2', '\x1220', '\x121E', '\x3', '\x2', 
		'\x2', '\x2', '\x1220', '\x1221', '\x3', '\x2', '\x2', '\x2', '\x1221', 
		'\x1224', '\x3', '\x2', '\x2', '\x2', '\x1222', '\x1220', '\x3', '\x2', 
		'\x2', '\x2', '\x1223', '\x1225', '\x5', '\x2EC', '\x177', '\x2', '\x1224', 
		'\x1223', '\x3', '\x2', '\x2', '\x2', '\x1224', '\x1225', '\x3', '\x2', 
		'\x2', '\x2', '\x1225', '\x1227', '\x3', '\x2', '\x2', '\x2', '\x1226', 
		'\x1228', '\x5', '\x252', '\x12A', '\x2', '\x1227', '\x1226', '\x3', '\x2', 
		'\x2', '\x2', '\x1227', '\x1228', '\x3', '\x2', '\x2', '\x2', '\x1228', 
		'\x24F', '\x3', '\x2', '\x2', '\x2', '\x1229', '\x122A', '\x5', '\x330', 
		'\x199', '\x2', '\x122A', '\x122B', '\a', '\x2AA', '\x2', '\x2', '\x122B', 
		'\x122C', '\x5', '\x278', '\x13D', '\x2', '\x122C', '\x251', '\x3', '\x2', 
		'\x2', '\x2', '\x122D', '\x122E', '\a', '\x86', '\x2', '\x2', '\x122E', 
		'\x122F', '\x5', '\x2EC', '\x177', '\x2', '\x122F', '\x253', '\x3', '\x2', 
		'\x2', '\x2', '\x1230', '\x1231', '\a', '\x24B', '\x2', '\x2', '\x1231', 
		'\x1232', '\a', '\x154', '\x2', '\x2', '\x1232', '\x1233', '\a', '\x124', 
		'\x2', '\x2', '\x1233', '\x1234', '\a', '\x213', '\x2', '\x2', '\x1234', 
		'\x1236', '\a', '\xF4', '\x2', '\x2', '\x1235', '\x1237', '\x5', '\x342', 
		'\x1A2', '\x2', '\x1236', '\x1235', '\x3', '\x2', '\x2', '\x2', '\x1236', 
		'\x1237', '\x3', '\x2', '\x2', '\x2', '\x1237', '\x1238', '\x3', '\x2', 
		'\x2', '\x2', '\x1238', '\x1239', '\a', '\x23D', '\x2', '\x2', '\x1239', 
		'\x123B', '\a', '\x296', '\x2', '\x2', '\x123A', '\x123C', '\x5', '\x276', 
		'\x13C', '\x2', '\x123B', '\x123A', '\x3', '\x2', '\x2', '\x2', '\x123B', 
		'\x123C', '\x3', '\x2', '\x2', '\x2', '\x123C', '\x123D', '\x3', '\x2', 
		'\x2', '\x2', '\x123D', '\x123F', '\a', '\x297', '\x2', '\x2', '\x123E', 
		'\x1240', '\x5', '\x2EC', '\x177', '\x2', '\x123F', '\x123E', '\x3', '\x2', 
		'\x2', '\x2', '\x123F', '\x1240', '\x3', '\x2', '\x2', '\x2', '\x1240', 
		'\x255', '\x3', '\x2', '\x2', '\x2', '\x1241', '\x1247', '\x5', '\x332', 
		'\x19A', '\x2', '\x1242', '\x1243', '\a', '\x296', '\x2', '\x2', '\x1243', 
		'\x1244', '\x5', '\x1BC', '\xDF', '\x2', '\x1244', '\x1245', '\a', '\x297', 
		'\x2', '\x2', '\x1245', '\x1247', '\x3', '\x2', '\x2', '\x2', '\x1246', 
		'\x1241', '\x3', '\x2', '\x2', '\x2', '\x1246', '\x1242', '\x3', '\x2', 
		'\x2', '\x2', '\x1247', '\x1249', '\x3', '\x2', '\x2', '\x2', '\x1248', 
		'\x124A', '\x5', '\x2EA', '\x176', '\x2', '\x1249', '\x1248', '\x3', '\x2', 
		'\x2', '\x2', '\x1249', '\x124A', '\x3', '\x2', '\x2', '\x2', '\x124A', 
		'\x257', '\x3', '\x2', '\x2', '\x2', '\x124B', '\x124C', '\a', '\x116', 
		'\x2', '\x2', '\x124C', '\x124D', '\a', '\x20F', '\x2', '\x2', '\x124D', 
		'\x1252', '\x5', '\x25C', '\x12F', '\x2', '\x124E', '\x124F', '\a', '\x29C', 
		'\x2', '\x2', '\x124F', '\x1251', '\x5', '\x25C', '\x12F', '\x2', '\x1250', 
		'\x124E', '\x3', '\x2', '\x2', '\x2', '\x1251', '\x1254', '\x3', '\x2', 
		'\x2', '\x2', '\x1252', '\x1250', '\x3', '\x2', '\x2', '\x2', '\x1252', 
		'\x1253', '\x3', '\x2', '\x2', '\x2', '\x1253', '\x1255', '\x3', '\x2', 
		'\x2', '\x2', '\x1254', '\x1252', '\x3', '\x2', '\x2', '\x2', '\x1255', 
		'\x1256', '\a', '\xED', '\x2', '\x2', '\x1256', '\x1257', '\x5', '\x25E', 
		'\x130', '\x2', '\x1257', '\x1259', '\a', '\x134', '\x2', '\x2', '\x1258', 
		'\x125A', '\x5', '\x25A', '\x12E', '\x2', '\x1259', '\x1258', '\x3', '\x2', 
		'\x2', '\x2', '\x1259', '\x125A', '\x3', '\x2', '\x2', '\x2', '\x125A', 
		'\x259', '\x3', '\x2', '\x2', '\x2', '\x125B', '\x125C', '\a', '\x247', 
		'\x2', '\x2', '\x125C', '\x125F', '\x5', '\x278', '\x13D', '\x2', '\x125D', 
		'\x125F', '\a', '\x156', '\x2', '\x2', '\x125E', '\x125B', '\x3', '\x2', 
		'\x2', '\x2', '\x125E', '\x125D', '\x3', '\x2', '\x2', '\x2', '\x125F', 
		'\x25B', '\x3', '\x2', '\x2', '\x2', '\x1260', '\x1262', '\x5', '\x332', 
		'\x19A', '\x2', '\x1261', '\x1263', '\x5', '\x2E6', '\x174', '\x2', '\x1262', 
		'\x1261', '\x3', '\x2', '\x2', '\x2', '\x1262', '\x1263', '\x3', '\x2', 
		'\x2', '\x2', '\x1263', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x1264', 
		'\x1265', '\a', '\x1C7', '\x2', '\x2', '\x1265', '\x1271', '\a', '\x1E2', 
		'\x2', '\x2', '\x1266', '\x1267', '\a', '\x1C7', '\x2', '\x2', '\x1267', 
		'\x1271', '\a', '\xAD', '\x2', '\x2', '\x1268', '\x126A', '\a', '\x1E2', 
		'\x2', '\x2', '\x1269', '\x126B', '\a', '\x235', '\x2', '\x2', '\x126A', 
		'\x1269', '\x3', '\x2', '\x2', '\x2', '\x126A', '\x126B', '\x3', '\x2', 
		'\x2', '\x2', '\x126B', '\x1271', '\x3', '\x2', '\x2', '\x2', '\x126C', 
		'\x126D', '\a', '\x1E2', '\x2', '\x2', '\x126D', '\x126E', '\a', '\x1C7', 
		'\x2', '\x2', '\x126E', '\x1271', '\a', '\xAD', '\x2', '\x2', '\x126F', 
		'\x1271', '\a', '\xAD', '\x2', '\x2', '\x1270', '\x1264', '\x3', '\x2', 
		'\x2', '\x2', '\x1270', '\x1266', '\x3', '\x2', '\x2', '\x2', '\x1270', 
		'\x1268', '\x3', '\x2', '\x2', '\x2', '\x1270', '\x126C', '\x3', '\x2', 
		'\x2', '\x2', '\x1270', '\x126F', '\x3', '\x2', '\x2', '\x2', '\x1271', 
		'\x25F', '\x3', '\x2', '\x2', '\x2', '\x1272', '\x1279', '\x5', '\x26A', 
		'\x136', '\x2', '\x1273', '\x1274', '\a', '\x164', '\x2', '\x2', '\x1274', 
		'\x1275', '\a', '\x296', '\x2', '\x2', '\x1275', '\x1276', '\x5', '\x26A', 
		'\x136', '\x2', '\x1276', '\x1277', '\a', '\x297', '\x2', '\x2', '\x1277', 
		'\x1279', '\x3', '\x2', '\x2', '\x2', '\x1278', '\x1272', '\x3', '\x2', 
		'\x2', '\x2', '\x1278', '\x1273', '\x3', '\x2', '\x2', '\x2', '\x1279', 
		'\x127B', '\x3', '\x2', '\x2', '\x2', '\x127A', '\x127C', '\x5', '\x2EA', 
		'\x176', '\x2', '\x127B', '\x127A', '\x3', '\x2', '\x2', '\x2', '\x127B', 
		'\x127C', '\x3', '\x2', '\x2', '\x2', '\x127C', '\x261', '\x3', '\x2', 
		'\x2', '\x2', '\x127D', '\x127E', '\t', '/', '\x2', '\x2', '\x127E', '\x127F', 
		'\x5', '\x276', '\x13C', '\x2', '\x127F', '\x1280', '\x5', '\x2EE', '\x178', 
		'\x2', '\x1280', '\x263', '\x3', '\x2', '\x2', '\x2', '\x1281', '\x1282', 
		'\a', '\x118', '\x2', '\x2', '\x1282', '\x1284', '\a', '\xA5', '\x2', 
		'\x2', '\x1283', '\x1285', '\x5', '\x266', '\x134', '\x2', '\x1284', '\x1283', 
		'\x3', '\x2', '\x2', '\x2', '\x1284', '\x1285', '\x3', '\x2', '\x2', '\x2', 
		'\x1285', '\x1287', '\x3', '\x2', '\x2', '\x2', '\x1286', '\x1288', '\x5', 
		'\x278', '\x13D', '\x2', '\x1287', '\x1286', '\x3', '\x2', '\x2', '\x2', 
		'\x1287', '\x1288', '\x3', '\x2', '\x2', '\x2', '\x1288', '\x128A', '\x3', 
		'\x2', '\x2', '\x2', '\x1289', '\x128B', '\x5', '\x268', '\x135', '\x2', 
		'\x128A', '\x1289', '\x3', '\x2', '\x2', '\x2', '\x128A', '\x128B', '\x3', 
		'\x2', '\x2', '\x2', '\x128B', '\x265', '\x3', '\x2', '\x2', '\x2', '\x128C', 
		'\x128D', '\a', '\xFB', '\x2', '\x2', '\x128D', '\x128E', '\x5', '\x332', 
		'\x19A', '\x2', '\x128E', '\x267', '\x3', '\x2', '\x2', '\x2', '\x128F', 
		'\x1290', '\a', '\x1AC', '\x2', '\x2', '\x1290', '\x1293', '\a', '\x111', 
		'\x2', '\x2', '\x1291', '\x1294', '\a', '\x230', '\x2', '\x2', '\x1292', 
		'\x1294', '\x5', '\x278', '\x13D', '\x2', '\x1293', '\x1291', '\x3', '\x2', 
		'\x2', '\x2', '\x1293', '\x1292', '\x3', '\x2', '\x2', '\x2', '\x1294', 
		'\x269', '\x3', '\x2', '\x2', '\x2', '\x1295', '\x12A2', '\x5', '\x26C', 
		'\x137', '\x2', '\x1296', '\x1297', '\a', '\x296', '\x2', '\x2', '\x1297', 
		'\x1299', '\x5', '\x1BC', '\xDF', '\x2', '\x1298', '\x129A', '\x5', '\x26E', 
		'\x138', '\x2', '\x1299', '\x1298', '\x3', '\x2', '\x2', '\x2', '\x1299', 
		'\x129A', '\x3', '\x2', '\x2', '\x2', '\x129A', '\x129B', '\x3', '\x2', 
		'\x2', '\x2', '\x129B', '\x129C', '\a', '\x297', '\x2', '\x2', '\x129C', 
		'\x12A2', '\x3', '\x2', '\x2', '\x2', '\x129D', '\x129F', '\x5', '\x332', 
		'\x19A', '\x2', '\x129E', '\x12A0', '\x5', '\x270', '\x139', '\x2', '\x129F', 
		'\x129E', '\x3', '\x2', '\x2', '\x2', '\x129F', '\x12A0', '\x3', '\x2', 
		'\x2', '\x2', '\x12A0', '\x12A2', '\x3', '\x2', '\x2', '\x2', '\x12A1', 
		'\x1295', '\x3', '\x2', '\x2', '\x2', '\x12A1', '\x1296', '\x3', '\x2', 
		'\x2', '\x2', '\x12A1', '\x129D', '\x3', '\x2', '\x2', '\x2', '\x12A2', 
		'\x26B', '\x3', '\x2', '\x2', '\x2', '\x12A3', '\x12B0', '\t', '\x42', 
		'\x2', '\x2', '\x12A4', '\x12A5', '\a', '\x296', '\x2', '\x2', '\x12A5', 
		'\x12A6', '\x5', '\x1C6', '\xE4', '\x2', '\x12A6', '\x12A7', '\a', '\x297', 
		'\x2', '\x2', '\x12A7', '\x12B1', '\x3', '\x2', '\x2', '\x2', '\x12A8', 
		'\x12A9', '\a', '\x296', '\x2', '\x2', '\x12A9', '\x12AA', '\x5', '\x278', 
		'\x13D', '\x2', '\x12AA', '\x12AE', '\a', '\x297', '\x2', '\x2', '\x12AB', 
		'\x12AC', '\a', '\x296', '\x2', '\x2', '\x12AC', '\x12AD', '\a', '\x29A', 
		'\x2', '\x2', '\x12AD', '\x12AF', '\a', '\x297', '\x2', '\x2', '\x12AE', 
		'\x12AB', '\x3', '\x2', '\x2', '\x2', '\x12AE', '\x12AF', '\x3', '\x2', 
		'\x2', '\x2', '\x12AF', '\x12B1', '\x3', '\x2', '\x2', '\x2', '\x12B0', 
		'\x12A4', '\x3', '\x2', '\x2', '\x2', '\x12B0', '\x12A8', '\x3', '\x2', 
		'\x2', '\x2', '\x12B1', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x12B2', 
		'\x12BB', '\a', '\x24F', '\x2', '\x2', '\x12B3', '\x12B4', '\a', '\x1A2', 
		'\x2', '\x2', '\x12B4', '\x12BC', '\a', '\x164', '\x2', '\x2', '\x12B5', 
		'\x12B6', '\a', '\x45', '\x2', '\x2', '\x12B6', '\x12B9', '\a', '\x169', 
		'\x2', '\x2', '\x12B7', '\x12B8', '\a', '[', '\x2', '\x2', '\x12B8', '\x12BA', 
		'\x5', '\x314', '\x18B', '\x2', '\x12B9', '\x12B7', '\x3', '\x2', '\x2', 
		'\x2', '\x12B9', '\x12BA', '\x3', '\x2', '\x2', '\x2', '\x12BA', '\x12BC', 
		'\x3', '\x2', '\x2', '\x2', '\x12BB', '\x12B3', '\x3', '\x2', '\x2', '\x2', 
		'\x12BB', '\x12B5', '\x3', '\x2', '\x2', '\x2', '\x12BC', '\x26F', '\x3', 
		'\x2', '\x2', '\x2', '\x12BD', '\x12BF', '\a', '\x1CB', '\x2', '\x2', 
		'\x12BE', '\x12C0', '\a', '/', '\x2', '\x2', '\x12BF', '\x12BE', '\x3', 
		'\x2', '\x2', '\x2', '\x12BF', '\x12C0', '\x3', '\x2', '\x2', '\x2', '\x12C0', 
		'\x12C1', '\x3', '\x2', '\x2', '\x2', '\x12C1', '\x12C2', '\a', '\x296', 
		'\x2', '\x2', '\x12C2', '\x12C5', '\x5', '\x278', '\x13D', '\x2', '\x12C3', 
		'\x12C4', '\a', '\x29C', '\x2', '\x2', '\x12C4', '\x12C6', '\x5', '\x278', 
		'\x13D', '\x2', '\x12C5', '\x12C3', '\x3', '\x2', '\x2', '\x2', '\x12C5', 
		'\x12C6', '\x3', '\x2', '\x2', '\x2', '\x12C6', '\x12C7', '\x3', '\x2', 
		'\x2', '\x2', '\x12C7', '\x12C9', '\a', '\x297', '\x2', '\x2', '\x12C8', 
		'\x12CA', '\x5', '\x272', '\x13A', '\x2', '\x12C9', '\x12C8', '\x3', '\x2', 
		'\x2', '\x2', '\x12C9', '\x12CA', '\x3', '\x2', '\x2', '\x2', '\x12CA', 
		'\x271', '\x3', '\x2', '\x2', '\x2', '\x12CB', '\x12CC', '\a', '\x1D4', 
		'\x2', '\x2', '\x12CC', '\x12CD', '\a', '\x296', '\x2', '\x2', '\x12CD', 
		'\x12CE', '\x5', '\x278', '\x13D', '\x2', '\x12CE', '\x12CF', '\a', '\x297', 
		'\x2', '\x2', '\x12CF', '\x273', '\x3', '\x2', '\x2', '\x2', '\x12D0', 
		'\x12D1', '\x5', '\x278', '\x13D', '\x2', '\x12D1', '\x275', '\x3', '\x2', 
		'\x2', '\x2', '\x12D2', '\x12D7', '\x5', '\x278', '\x13D', '\x2', '\x12D3', 
		'\x12D4', '\a', '\x29C', '\x2', '\x2', '\x12D4', '\x12D6', '\x5', '\x278', 
		'\x13D', '\x2', '\x12D5', '\x12D3', '\x3', '\x2', '\x2', '\x2', '\x12D6', 
		'\x12D9', '\x3', '\x2', '\x2', '\x2', '\x12D7', '\x12D5', '\x3', '\x2', 
		'\x2', '\x2', '\x12D7', '\x12D8', '\x3', '\x2', '\x2', '\x2', '\x12D8', 
		'\x277', '\x3', '\x2', '\x2', '\x2', '\x12D9', '\x12D7', '\x3', '\x2', 
		'\x2', '\x2', '\x12DA', '\x12DD', '\x5', '\x27A', '\x13E', '\x2', '\x12DB', 
		'\x12DD', '\x5', '\x27C', '\x13F', '\x2', '\x12DC', '\x12DA', '\x3', '\x2', 
		'\x2', '\x2', '\x12DC', '\x12DB', '\x3', '\x2', '\x2', '\x2', '\x12DD', 
		'\x279', '\x3', '\x2', '\x2', '\x2', '\x12DE', '\x12DF', '\a', 'n', '\x2', 
		'\x2', '\x12DF', '\x12E0', '\a', '\x296', '\x2', '\x2', '\x12E0', '\x12E1', 
		'\x5', '\x1C6', '\xE4', '\x2', '\x12E1', '\x12E2', '\a', '\x297', '\x2', 
		'\x2', '\x12E2', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x12E3', '\x12E4', 
		'\b', '\x13F', '\x1', '\x2', '\x12E4', '\x1306', '\x5', '\x27E', '\x140', 
		'\x2', '\x12E5', '\x12E7', '\a', '\xFD', '\x2', '\x2', '\x12E6', '\x12E8', 
		'\a', '\x154', '\x2', '\x2', '\x12E7', '\x12E6', '\x3', '\x2', '\x2', 
		'\x2', '\x12E7', '\x12E8', '\x3', '\x2', '\x2', '\x2', '\x12E8', '\x1302', 
		'\x3', '\x2', '\x2', '\x2', '\x12E9', '\x1303', '\a', '\x157', '\x2', 
		'\x2', '\x12EA', '\x1303', '\a', '\x13A', '\x2', '\x2', '\x12EB', '\x1303', 
		'\a', '\x191', '\x2', '\x2', '\x12EC', '\x1303', '\a', '\xEB', '\x2', 
		'\x2', '\x12ED', '\x12EE', '\a', '\f', '\x2', '\x2', '\x12EE', '\x1303', 
		'\a', '\x1DF', '\x2', '\x2', '\x12EF', '\x1303', '\a', '\x9C', '\x2', 
		'\x2', '\x12F0', '\x12F2', '\a', '\x15F', '\x2', '\x2', '\x12F1', '\x12F3', 
		'\a', '\x229', '\x2', '\x2', '\x12F2', '\x12F1', '\x3', '\x2', '\x2', 
		'\x2', '\x12F2', '\x12F3', '\x3', '\x2', '\x2', '\x2', '\x12F3', '\x12F4', 
		'\x3', '\x2', '\x2', '\x2', '\x12F4', '\x12F6', '\a', '\x296', '\x2', 
		'\x2', '\x12F5', '\x12F7', '\a', '\x164', '\x2', '\x2', '\x12F6', '\x12F5', 
		'\x3', '\x2', '\x2', '\x2', '\x12F6', '\x12F7', '\x3', '\x2', '\x2', '\x2', 
		'\x12F7', '\x12F8', '\x3', '\x2', '\x2', '\x2', '\x12F8', '\x12FD', '\x5', 
		'\x350', '\x1A9', '\x2', '\x12F9', '\x12FA', '\a', '\x29C', '\x2', '\x2', 
		'\x12FA', '\x12FC', '\x5', '\x350', '\x1A9', '\x2', '\x12FB', '\x12F9', 
		'\x3', '\x2', '\x2', '\x2', '\x12FC', '\x12FF', '\x3', '\x2', '\x2', '\x2', 
		'\x12FD', '\x12FB', '\x3', '\x2', '\x2', '\x2', '\x12FD', '\x12FE', '\x3', 
		'\x2', '\x2', '\x2', '\x12FE', '\x1300', '\x3', '\x2', '\x2', '\x2', '\x12FF', 
		'\x12FD', '\x3', '\x2', '\x2', '\x2', '\x1300', '\x1301', '\a', '\x297', 
		'\x2', '\x2', '\x1301', '\x1303', '\x3', '\x2', '\x2', '\x2', '\x1302', 
		'\x12E9', '\x3', '\x2', '\x2', '\x2', '\x1302', '\x12EA', '\x3', '\x2', 
		'\x2', '\x2', '\x1302', '\x12EB', '\x3', '\x2', '\x2', '\x2', '\x1302', 
		'\x12EC', '\x3', '\x2', '\x2', '\x2', '\x1302', '\x12ED', '\x3', '\x2', 
		'\x2', '\x2', '\x1302', '\x12EF', '\x3', '\x2', '\x2', '\x2', '\x1302', 
		'\x12F0', '\x3', '\x2', '\x2', '\x2', '\x1303', '\x1305', '\x3', '\x2', 
		'\x2', '\x2', '\x1304', '\x12E5', '\x3', '\x2', '\x2', '\x2', '\x1305', 
		'\x1308', '\x3', '\x2', '\x2', '\x2', '\x1306', '\x1304', '\x3', '\x2', 
		'\x2', '\x2', '\x1306', '\x1307', '\x3', '\x2', '\x2', '\x2', '\x1307', 
		'\x130C', '\x3', '\x2', '\x2', '\x2', '\x1308', '\x1306', '\x3', '\x2', 
		'\x2', '\x2', '\x1309', '\x130A', '\a', '\x154', '\x2', '\x2', '\x130A', 
		'\x130C', '\x5', '\x27C', '\x13F', '\x5', '\x130B', '\x12E3', '\x3', '\x2', 
		'\x2', '\x2', '\x130B', '\x1309', '\x3', '\x2', '\x2', '\x2', '\x130C', 
		'\x1315', '\x3', '\x2', '\x2', '\x2', '\x130D', '\x130E', '\f', '\x4', 
		'\x2', '\x2', '\x130E', '\x130F', '\a', '\x10', '\x2', '\x2', '\x130F', 
		'\x1314', '\x5', '\x27C', '\x13F', '\x5', '\x1310', '\x1311', '\f', '\x3', 
		'\x2', '\x2', '\x1311', '\x1312', '\a', '\x16D', '\x2', '\x2', '\x1312', 
		'\x1314', '\x5', '\x27C', '\x13F', '\x4', '\x1313', '\x130D', '\x3', '\x2', 
		'\x2', '\x2', '\x1313', '\x1310', '\x3', '\x2', '\x2', '\x2', '\x1314', 
		'\x1317', '\x3', '\x2', '\x2', '\x2', '\x1315', '\x1313', '\x3', '\x2', 
		'\x2', '\x2', '\x1315', '\x1316', '\x3', '\x2', '\x2', '\x2', '\x1316', 
		'\x27D', '\x3', '\x2', '\x2', '\x2', '\x1317', '\x1315', '\x3', '\x2', 
		'\x2', '\x2', '\x1318', '\x131E', '\x5', '\x280', '\x141', '\x2', '\x1319', 
		'\x131B', '\t', '\x43', '\x2', '\x2', '\x131A', '\x131C', '\a', '\x15F', 
		'\x2', '\x2', '\x131B', '\x131A', '\x3', '\x2', '\x2', '\x2', '\x131B', 
		'\x131C', '\x3', '\x2', '\x2', '\x2', '\x131C', '\x131D', '\x3', '\x2', 
		'\x2', '\x2', '\x131D', '\x131F', '\x5', '\x28A', '\x146', '\x2', '\x131E', 
		'\x1319', '\x3', '\x2', '\x2', '\x2', '\x131E', '\x131F', '\x3', '\x2', 
		'\x2', '\x2', '\x131F', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x1320', 
		'\x1321', '\b', '\x141', '\x1', '\x2', '\x1321', '\x1322', '\x5', '\x282', 
		'\x142', '\x2', '\x1322', '\x1329', '\x3', '\x2', '\x2', '\x2', '\x1323', 
		'\x1324', '\f', '\x4', '\x2', '\x2', '\x1324', '\x1325', '\x5', '\x284', 
		'\x143', '\x2', '\x1325', '\x1326', '\x5', '\x280', '\x141', '\x5', '\x1326', 
		'\x1328', '\x3', '\x2', '\x2', '\x2', '\x1327', '\x1323', '\x3', '\x2', 
		'\x2', '\x2', '\x1328', '\x132B', '\x3', '\x2', '\x2', '\x2', '\x1329', 
		'\x1327', '\x3', '\x2', '\x2', '\x2', '\x1329', '\x132A', '\x3', '\x2', 
		'\x2', '\x2', '\x132A', '\x281', '\x3', '\x2', '\x2', '\x2', '\x132B', 
		'\x1329', '\x3', '\x2', '\x2', '\x2', '\x132C', '\x133C', '\x5', '\x28A', 
		'\x146', '\x2', '\x132D', '\x132F', '\a', '\x154', '\x2', '\x2', '\x132E', 
		'\x132D', '\x3', '\x2', '\x2', '\x2', '\x132E', '\x132F', '\x3', '\x2', 
		'\x2', '\x2', '\x132F', '\x133A', '\x3', '\x2', '\x2', '\x2', '\x1330', 
		'\x1331', '\a', '\xED', '\x2', '\x2', '\x1331', '\x133B', '\x5', '\x286', 
		'\x144', '\x2', '\x1332', '\x1333', '\a', '(', '\x2', '\x2', '\x1333', 
		'\x133B', '\x5', '\x288', '\x145', '\x2', '\x1334', '\x1335', '\t', '\x44', 
		'\x2', '\x2', '\x1335', '\x1338', '\x5', '\x28A', '\x146', '\x2', '\x1336', 
		'\x1337', '\a', '\xA6', '\x2', '\x2', '\x1337', '\x1339', '\x5', '\x28A', 
		'\x146', '\x2', '\x1338', '\x1336', '\x3', '\x2', '\x2', '\x2', '\x1338', 
		'\x1339', '\x3', '\x2', '\x2', '\x2', '\x1339', '\x133B', '\x3', '\x2', 
		'\x2', '\x2', '\x133A', '\x1330', '\x3', '\x2', '\x2', '\x2', '\x133A', 
		'\x1332', '\x3', '\x2', '\x2', '\x2', '\x133A', '\x1334', '\x3', '\x2', 
		'\x2', '\x2', '\x133B', '\x133D', '\x3', '\x2', '\x2', '\x2', '\x133C', 
		'\x132E', '\x3', '\x2', '\x2', '\x2', '\x133C', '\x133D', '\x3', '\x2', 
		'\x2', '\x2', '\x133D', '\x283', '\x3', '\x2', '\x2', '\x2', '\x133E', 
		'\x134D', '\a', '\x2AA', '\x2', '\x2', '\x133F', '\x1347', '\a', '\x2A1', 
		'\x2', '\x2', '\x1340', '\x1341', '\a', '\x2A6', '\x2', '\x2', '\x1341', 
		'\x1347', '\a', '\x2A5', '\x2', '\x2', '\x1342', '\x1343', '\a', '\x2A4', 
		'\x2', '\x2', '\x1343', '\x1347', '\a', '\x2AA', '\x2', '\x2', '\x1344', 
		'\x1345', '\a', '\x2A2', '\x2', '\x2', '\x1345', '\x1347', '\a', '\x2AA', 
		'\x2', '\x2', '\x1346', '\x133F', '\x3', '\x2', '\x2', '\x2', '\x1346', 
		'\x1340', '\x3', '\x2', '\x2', '\x2', '\x1346', '\x1342', '\x3', '\x2', 
		'\x2', '\x2', '\x1346', '\x1344', '\x3', '\x2', '\x2', '\x2', '\x1347', 
		'\x134D', '\x3', '\x2', '\x2', '\x2', '\x1348', '\x134A', '\t', '\x45', 
		'\x2', '\x2', '\x1349', '\x134B', '\a', '\x2AA', '\x2', '\x2', '\x134A', 
		'\x1349', '\x3', '\x2', '\x2', '\x2', '\x134A', '\x134B', '\x3', '\x2', 
		'\x2', '\x2', '\x134B', '\x134D', '\x3', '\x2', '\x2', '\x2', '\x134C', 
		'\x133E', '\x3', '\x2', '\x2', '\x2', '\x134C', '\x1346', '\x3', '\x2', 
		'\x2', '\x2', '\x134C', '\x1348', '\x3', '\x2', '\x2', '\x2', '\x134D', 
		'\x285', '\x3', '\x2', '\x2', '\x2', '\x134E', '\x134F', '\a', '\x296', 
		'\x2', '\x2', '\x134F', '\x1350', '\x5', '\x1C6', '\xE4', '\x2', '\x1350', 
		'\x1351', '\a', '\x297', '\x2', '\x2', '\x1351', '\x1361', '\x3', '\x2', 
		'\x2', '\x2', '\x1352', '\x1353', '\a', '\x296', '\x2', '\x2', '\x1353', 
		'\x1358', '\x5', '\x28A', '\x146', '\x2', '\x1354', '\x1355', '\a', '\x29C', 
		'\x2', '\x2', '\x1355', '\x1357', '\x5', '\x28A', '\x146', '\x2', '\x1356', 
		'\x1354', '\x3', '\x2', '\x2', '\x2', '\x1357', '\x135A', '\x3', '\x2', 
		'\x2', '\x2', '\x1358', '\x1356', '\x3', '\x2', '\x2', '\x2', '\x1358', 
		'\x1359', '\x3', '\x2', '\x2', '\x2', '\x1359', '\x135B', '\x3', '\x2', 
		'\x2', '\x2', '\x135A', '\x1358', '\x3', '\x2', '\x2', '\x2', '\x135B', 
		'\x135C', '\a', '\x297', '\x2', '\x2', '\x135C', '\x1361', '\x3', '\x2', 
		'\x2', '\x2', '\x135D', '\x1361', '\x5', '\x364', '\x1B3', '\x2', '\x135E', 
		'\x1361', '\x5', '\x358', '\x1AD', '\x2', '\x135F', '\x1361', '\x5', '\x35A', 
		'\x1AE', '\x2', '\x1360', '\x134E', '\x3', '\x2', '\x2', '\x2', '\x1360', 
		'\x1352', '\x3', '\x2', '\x2', '\x2', '\x1360', '\x135D', '\x3', '\x2', 
		'\x2', '\x2', '\x1360', '\x135E', '\x3', '\x2', '\x2', '\x2', '\x1360', 
		'\x135F', '\x3', '\x2', '\x2', '\x2', '\x1361', '\x287', '\x3', '\x2', 
		'\x2', '\x2', '\x1362', '\x1363', '\x5', '\x28A', '\x146', '\x2', '\x1363', 
		'\x1364', '\a', '\x10', '\x2', '\x2', '\x1364', '\x1365', '\x5', '\x28A', 
		'\x146', '\x2', '\x1365', '\x289', '\x3', '\x2', '\x2', '\x2', '\x1366', 
		'\x1367', '\b', '\x146', '\x1', '\x2', '\x1367', '\x1370', '\x5', '\x28E', 
		'\x148', '\x2', '\x1368', '\x136D', '\a', '\x17', '\x2', '\x2', '\x1369', 
		'\x136E', '\a', '\x114', '\x2', '\x2', '\x136A', '\x136B', '\a', '\x21A', 
		'\x2', '\x2', '\x136B', '\x136C', '\a', '\x264', '\x2', '\x2', '\x136C', 
		'\x136E', '\x5', '\x28A', '\x146', '\x2', '\x136D', '\x1369', '\x3', '\x2', 
		'\x2', '\x2', '\x136D', '\x136A', '\x3', '\x2', '\x2', '\x2', '\x136E', 
		'\x1371', '\x3', '\x2', '\x2', '\x2', '\x136F', '\x1371', '\x5', '\x28C', 
		'\x147', '\x2', '\x1370', '\x1368', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x136F', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x1371', '\x3', '\x2', 
		'\x2', '\x2', '\x1371', '\x137E', '\x3', '\x2', '\x2', '\x2', '\x1372', 
		'\x1373', '\f', '\x5', '\x2', '\x2', '\x1373', '\x1374', '\t', '\x46', 
		'\x2', '\x2', '\x1374', '\x137D', '\x5', '\x28A', '\x146', '\x6', '\x1375', 
		'\x1376', '\f', '\x4', '\x2', '\x2', '\x1376', '\x1377', '\t', 'G', '\x2', 
		'\x2', '\x1377', '\x137D', '\x5', '\x28A', '\x146', '\x5', '\x1378', '\x1379', 
		'\f', '\x3', '\x2', '\x2', '\x1379', '\x137A', '\a', '\x2A9', '\x2', '\x2', 
		'\x137A', '\x137B', '\a', '\x2A9', '\x2', '\x2', '\x137B', '\x137D', '\x5', 
		'\x28A', '\x146', '\x4', '\x137C', '\x1372', '\x3', '\x2', '\x2', '\x2', 
		'\x137C', '\x1375', '\x3', '\x2', '\x2', '\x2', '\x137C', '\x1378', '\x3', 
		'\x2', '\x2', '\x2', '\x137D', '\x1380', '\x3', '\x2', '\x2', '\x2', '\x137E', 
		'\x137C', '\x3', '\x2', '\x2', '\x2', '\x137E', '\x137F', '\x3', '\x2', 
		'\x2', '\x2', '\x137F', '\x28B', '\x3', '\x2', '\x2', '\x2', '\x1380', 
		'\x137E', '\x3', '\x2', '\x2', '\x2', '\x1381', '\x1386', '\a', 'u', '\x2', 
		'\x2', '\x1382', '\x1383', '\a', '\x296', '\x2', '\x2', '\x1383', '\x1384', 
		'\x5', '\x28A', '\x146', '\x2', '\x1384', '\x1385', '\a', '\x297', '\x2', 
		'\x2', '\x1385', '\x1387', '\x3', '\x2', '\x2', '\x2', '\x1386', '\x1382', 
		'\x3', '\x2', '\x2', '\x2', '\x1386', '\x1387', '\x3', '\x2', '\x2', '\x2', 
		'\x1387', '\x1388', '\x3', '\x2', '\x2', '\x2', '\x1388', '\x1389', '\a', 
		'\x21F', '\x2', '\x2', '\x1389', '\x138E', '\a', '\x1D3', '\x2', '\x2', 
		'\x138A', '\x138B', '\a', '\x296', '\x2', '\x2', '\x138B', '\x138C', '\x5', 
		'\x28A', '\x146', '\x2', '\x138C', '\x138D', '\a', '\x297', '\x2', '\x2', 
		'\x138D', '\x138F', '\x3', '\x2', '\x2', '\x2', '\x138E', '\x138A', '\x3', 
		'\x2', '\x2', '\x2', '\x138E', '\x138F', '\x3', '\x2', '\x2', '\x2', '\x138F', 
		'\x139A', '\x3', '\x2', '\x2', '\x2', '\x1390', '\x1395', '\a', '\x261', 
		'\x2', '\x2', '\x1391', '\x1392', '\a', '\x296', '\x2', '\x2', '\x1392', 
		'\x1393', '\x5', '\x28A', '\x146', '\x2', '\x1393', '\x1394', '\a', '\x297', 
		'\x2', '\x2', '\x1394', '\x1396', '\x3', '\x2', '\x2', '\x2', '\x1395', 
		'\x1391', '\x3', '\x2', '\x2', '\x2', '\x1395', '\x1396', '\x3', '\x2', 
		'\x2', '\x2', '\x1396', '\x1397', '\x3', '\x2', '\x2', '\x2', '\x1397', 
		'\x1398', '\a', '\x21F', '\x2', '\x2', '\x1398', '\x139A', '\a', '\x136', 
		'\x2', '\x2', '\x1399', '\x1381', '\x3', '\x2', '\x2', '\x2', '\x1399', 
		'\x1390', '\x3', '\x2', '\x2', '\x2', '\x139A', '\x28D', '\x3', '\x2', 
		'\x2', '\x2', '\x139B', '\x13A0', '\x5', '\x296', '\x14C', '\x2', '\x139C', 
		'\x139D', '\a', '\x2AB', '\x2', '\x2', '\x139D', '\x139E', '\x5', '\x290', 
		'\x149', '\x2', '\x139E', '\x139F', '\a', '\x2AC', '\x2', '\x2', '\x139F', 
		'\x13A1', '\x3', '\x2', '\x2', '\x2', '\x13A0', '\x139C', '\x3', '\x2', 
		'\x2', '\x2', '\x13A0', '\x13A1', '\x3', '\x2', '\x2', '\x2', '\x13A1', 
		'\x28F', '\x3', '\x2', '\x2', '\x2', '\x13A2', '\x13A5', '\a', '\x11', 
		'\x2', '\x2', '\x13A3', '\x13A5', '\x5', '\x278', '\x13D', '\x2', '\x13A4', 
		'\x13A2', '\x3', '\x2', '\x2', '\x2', '\x13A4', '\x13A3', '\x3', '\x2', 
		'\x2', '\x2', '\x13A5', '\x13AD', '\x3', '\x2', '\x2', '\x2', '\x13A6', 
		'\x13A9', '\a', '\x29C', '\x2', '\x2', '\x13A7', '\x13AA', '\a', '\x11', 
		'\x2', '\x2', '\x13A8', '\x13AA', '\x5', '\x278', '\x13D', '\x2', '\x13A9', 
		'\x13A7', '\x3', '\x2', '\x2', '\x2', '\x13A9', '\x13A8', '\x3', '\x2', 
		'\x2', '\x2', '\x13AA', '\x13AC', '\x3', '\x2', '\x2', '\x2', '\x13AB', 
		'\x13A6', '\x3', '\x2', '\x2', '\x2', '\x13AC', '\x13AF', '\x3', '\x2', 
		'\x2', '\x2', '\x13AD', '\x13AB', '\x3', '\x2', '\x2', '\x2', '\x13AD', 
		'\x13AE', '\x3', '\x2', '\x2', '\x2', '\x13AE', '\x13BA', '\x3', '\x2', 
		'\x2', '\x2', '\x13AF', '\x13AD', '\x3', '\x2', '\x2', '\x2', '\x13B0', 
		'\x13B5', '\x5', '\x292', '\x14A', '\x2', '\x13B1', '\x13B2', '\a', '\x29C', 
		'\x2', '\x2', '\x13B2', '\x13B4', '\x5', '\x292', '\x14A', '\x2', '\x13B3', 
		'\x13B1', '\x3', '\x2', '\x2', '\x2', '\x13B4', '\x13B7', '\x3', '\x2', 
		'\x2', '\x2', '\x13B5', '\x13B3', '\x3', '\x2', '\x2', '\x2', '\x13B5', 
		'\x13B6', '\x3', '\x2', '\x2', '\x2', '\x13B6', '\x13BA', '\x3', '\x2', 
		'\x2', '\x2', '\x13B7', '\x13B5', '\x3', '\x2', '\x2', '\x2', '\x13B8', 
		'\x13BA', '\x5', '\x294', '\x14B', '\x2', '\x13B9', '\x13A4', '\x3', '\x2', 
		'\x2', '\x2', '\x13B9', '\x13B0', '\x3', '\x2', '\x2', '\x2', '\x13B9', 
		'\x13B8', '\x3', '\x2', '\x2', '\x2', '\x13BA', '\x291', '\x3', '\x2', 
		'\x2', '\x2', '\x13BB', '\x13BC', '\a', '\xC8', '\x2', '\x2', '\x13BC', 
		'\x13CE', '\x5', '\x330', '\x199', '\x2', '\x13BD', '\x13BE', '\a', '\xED', 
		'\x2', '\x2', '\x13BE', '\x13C0', '\a', '\x296', '\x2', '\x2', '\x13BF', 
		'\x13C1', '\x5', '\x276', '\x13C', '\x2', '\x13C0', '\x13BF', '\x3', '\x2', 
		'\x2', '\x2', '\x13C0', '\x13C1', '\x3', '\x2', '\x2', '\x2', '\x13C1', 
		'\x13C2', '\x3', '\x2', '\x2', '\x2', '\x13C2', '\x13CF', '\a', '\x297', 
		'\x2', '\x2', '\x13C3', '\x13C4', '\a', '\x110', '\x2', '\x2', '\x13C4', 
		'\x13C6', '\x5', '\x278', '\x13D', '\x2', '\x13C5', '\x13C3', '\x3', '\x2', 
		'\x2', '\x2', '\x13C5', '\x13C6', '\x3', '\x2', '\x2', '\x2', '\x13C6', 
		'\x13C7', '\x3', '\x2', '\x2', '\x2', '\x13C7', '\x13C8', '\a', '\xCB', 
		'\x2', '\x2', '\x13C8', '\x13C9', '\x5', '\x278', '\x13D', '\x2', '\x13C9', 
		'\x13CA', '\a', '\x21F', '\x2', '\x2', '\x13CA', '\x13CB', '\x5', '\x278', 
		'\x13D', '\x2', '\x13CB', '\x13CC', '\t', 'H', '\x2', '\x2', '\x13CC', 
		'\x13CD', '\x5', '\x278', '\x13D', '\x2', '\x13CD', '\x13CF', '\x3', '\x2', 
		'\x2', '\x2', '\x13CE', '\x13BD', '\x3', '\x2', '\x2', '\x2', '\x13CE', 
		'\x13C5', '\x3', '\x2', '\x2', '\x2', '\x13CF', '\x293', '\x3', '\x2', 
		'\x2', '\x2', '\x13D0', '\x13D1', '\a', '\xC8', '\x2', '\x2', '\x13D1', 
		'\x13D2', '\x5', '\x342', '\x1A2', '\x2', '\x13D2', '\x13D3', '\a', '\xED', 
		'\x2', '\x2', '\x13D3', '\x13DA', '\a', '\x296', '\x2', '\x2', '\x13D4', 
		'\x13DB', '\x5', '\x1C6', '\xE4', '\x2', '\x13D5', '\x13D7', '\a', '\x296', 
		'\x2', '\x2', '\x13D6', '\x13D8', '\x5', '\x276', '\x13C', '\x2', '\x13D7', 
		'\x13D6', '\x3', '\x2', '\x2', '\x2', '\x13D7', '\x13D8', '\x3', '\x2', 
		'\x2', '\x2', '\x13D8', '\x13D9', '\x3', '\x2', '\x2', '\x2', '\x13D9', 
		'\x13DB', '\a', '\x297', '\x2', '\x2', '\x13DA', '\x13D4', '\x3', '\x2', 
		'\x2', '\x2', '\x13DA', '\x13D5', '\x3', '\x2', '\x2', '\x2', '\x13DB', 
		'\x13DC', '\x3', '\x2', '\x2', '\x2', '\x13DC', '\x13DD', '\a', '\x297', 
		'\x2', '\x2', '\x13DD', '\x295', '\x3', '\x2', '\x2', '\x2', '\x13DE', 
		'\x13DF', '\t', 'G', '\x2', '\x2', '\x13DF', '\x13EF', '\x5', '\x296', 
		'\x14C', '\x2', '\x13E0', '\x13E1', '\a', '\x194', '\x2', '\x2', '\x13E1', 
		'\x13EF', '\x5', '\x296', '\x14C', '\x2', '\x13E2', '\x13E3', '\a', 'X', 
		'\x2', '\x2', '\x13E3', '\x13EF', '\x5', '\x296', '\x14C', '\x2', '\x13E4', 
		'\x13E5', '\a', '\x142', '\x2', '\x2', '\x13E5', '\x13EF', '\x5', '\x296', 
		'\x14C', '\x2', '\x13E6', '\x13E7', '\a', '\x8F', '\x2', '\x2', '\x13E7', 
		'\x13EF', '\x5', '\x296', '\x14C', '\x2', '\x13E8', '\x13E9', '\a', '\r', 
		'\x2', '\x2', '\x13E9', '\x13EF', '\x5', '\x296', '\x14C', '\x2', '\x13EA', 
		'\x13EF', '\x5', '\x298', '\x14D', '\x2', '\x13EB', '\x13EF', '\x5', '\x2A6', 
		'\x154', '\x2', '\x13EC', '\x13EF', '\x5', '\x2AA', '\x156', '\x2', '\x13ED', 
		'\x13EF', '\x5', '\x2A4', '\x153', '\x2', '\x13EE', '\x13DE', '\x3', '\x2', 
		'\x2', '\x2', '\x13EE', '\x13E0', '\x3', '\x2', '\x2', '\x2', '\x13EE', 
		'\x13E2', '\x3', '\x2', '\x2', '\x2', '\x13EE', '\x13E4', '\x3', '\x2', 
		'\x2', '\x2', '\x13EE', '\x13E6', '\x3', '\x2', '\x2', '\x2', '\x13EE', 
		'\x13E8', '\x3', '\x2', '\x2', '\x2', '\x13EE', '\x13EA', '\x3', '\x2', 
		'\x2', '\x2', '\x13EE', '\x13EB', '\x3', '\x2', '\x2', '\x2', '\x13EE', 
		'\x13EC', '\x3', '\x2', '\x2', '\x2', '\x13EE', '\x13ED', '\x3', '\x2', 
		'\x2', '\x2', '\x13EF', '\x297', '\x3', '\x2', '\x2', '\x2', '\x13F0', 
		'\x13F3', '\x5', '\x29E', '\x150', '\x2', '\x13F1', '\x13F3', '\x5', '\x29A', 
		'\x14E', '\x2', '\x13F2', '\x13F0', '\x3', '\x2', '\x2', '\x2', '\x13F2', 
		'\x13F1', '\x3', '\x2', '\x2', '\x2', '\x13F3', '\x299', '\x3', '\x2', 
		'\x2', '\x2', '\x13F4', '\x13F6', '\x5', '\x316', '\x18C', '\x2', '\x13F5', 
		'\x13F4', '\x3', '\x2', '\x2', '\x2', '\x13F5', '\x13F6', '\x3', '\x2', 
		'\x2', '\x2', '\x13F6', '\x13F7', '\x3', '\x2', '\x2', '\x2', '\x13F7', 
		'\x13F8', '\a', '>', '\x2', '\x2', '\x13F8', '\x13FA', '\x5', '\x278', 
		'\x13D', '\x2', '\x13F9', '\x13FB', '\x5', '\x29C', '\x14F', '\x2', '\x13FA', 
		'\x13F9', '\x3', '\x2', '\x2', '\x2', '\x13FB', '\x13FC', '\x3', '\x2', 
		'\x2', '\x2', '\x13FC', '\x13FA', '\x3', '\x2', '\x2', '\x2', '\x13FC', 
		'\x13FD', '\x3', '\x2', '\x2', '\x2', '\x13FD', '\x13FF', '\x3', '\x2', 
		'\x2', '\x2', '\x13FE', '\x1400', '\x5', '\x2A2', '\x152', '\x2', '\x13FF', 
		'\x13FE', '\x3', '\x2', '\x2', '\x2', '\x13FF', '\x1400', '\x3', '\x2', 
		'\x2', '\x2', '\x1400', '\x1401', '\x3', '\x2', '\x2', '\x2', '\x1401', 
		'\x1403', '\a', '\xA1', '\x2', '\x2', '\x1402', '\x1404', '\a', '>', '\x2', 
		'\x2', '\x1403', '\x1402', '\x3', '\x2', '\x2', '\x2', '\x1403', '\x1404', 
		'\x3', '\x2', '\x2', '\x2', '\x1404', '\x1406', '\x3', '\x2', '\x2', '\x2', 
		'\x1405', '\x1407', '\x5', '\x316', '\x18C', '\x2', '\x1406', '\x1405', 
		'\x3', '\x2', '\x2', '\x2', '\x1406', '\x1407', '\x3', '\x2', '\x2', '\x2', 
		'\x1407', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x1408', '\x1409', '\a', 
		'\x24B', '\x2', '\x2', '\x1409', '\x140A', '\x5', '\x278', '\x13D', '\x2', 
		'\x140A', '\x140D', '\a', '\x213', '\x2', '\x2', '\x140B', '\x140E', '\x5', 
		'\x164', '\xB3', '\x2', '\x140C', '\x140E', '\x5', '\x278', '\x13D', '\x2', 
		'\x140D', '\x140B', '\x3', '\x2', '\x2', '\x2', '\x140D', '\x140C', '\x3', 
		'\x2', '\x2', '\x2', '\x140E', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x140F', 
		'\x1411', '\x5', '\x316', '\x18C', '\x2', '\x1410', '\x140F', '\x3', '\x2', 
		'\x2', '\x2', '\x1410', '\x1411', '\x3', '\x2', '\x2', '\x2', '\x1411', 
		'\x1412', '\x3', '\x2', '\x2', '\x2', '\x1412', '\x1414', '\a', '>', '\x2', 
		'\x2', '\x1413', '\x1415', '\x5', '\x2A0', '\x151', '\x2', '\x1414', '\x1413', 
		'\x3', '\x2', '\x2', '\x2', '\x1415', '\x1416', '\x3', '\x2', '\x2', '\x2', 
		'\x1416', '\x1414', '\x3', '\x2', '\x2', '\x2', '\x1416', '\x1417', '\x3', 
		'\x2', '\x2', '\x2', '\x1417', '\x1419', '\x3', '\x2', '\x2', '\x2', '\x1418', 
		'\x141A', '\x5', '\x2A2', '\x152', '\x2', '\x1419', '\x1418', '\x3', '\x2', 
		'\x2', '\x2', '\x1419', '\x141A', '\x3', '\x2', '\x2', '\x2', '\x141A', 
		'\x141B', '\x3', '\x2', '\x2', '\x2', '\x141B', '\x141D', '\a', '\xA1', 
		'\x2', '\x2', '\x141C', '\x141E', '\a', '>', '\x2', '\x2', '\x141D', '\x141C', 
		'\x3', '\x2', '\x2', '\x2', '\x141D', '\x141E', '\x3', '\x2', '\x2', '\x2', 
		'\x141E', '\x1420', '\x3', '\x2', '\x2', '\x2', '\x141F', '\x1421', '\x5', 
		'\x316', '\x18C', '\x2', '\x1420', '\x141F', '\x3', '\x2', '\x2', '\x2', 
		'\x1420', '\x1421', '\x3', '\x2', '\x2', '\x2', '\x1421', '\x29F', '\x3', 
		'\x2', '\x2', '\x2', '\x1422', '\x1423', '\a', '\x24B', '\x2', '\x2', 
		'\x1423', '\x1424', '\x5', '\x278', '\x13D', '\x2', '\x1424', '\x1427', 
		'\a', '\x213', '\x2', '\x2', '\x1425', '\x1428', '\x5', '\x164', '\xB3', 
		'\x2', '\x1426', '\x1428', '\x5', '\x278', '\x13D', '\x2', '\x1427', '\x1425', 
		'\x3', '\x2', '\x2', '\x2', '\x1427', '\x1426', '\x3', '\x2', '\x2', '\x2', 
		'\x1428', '\x2A1', '\x3', '\x2', '\x2', '\x2', '\x1429', '\x142C', '\a', 
		'\x9A', '\x2', '\x2', '\x142A', '\x142D', '\x5', '\x164', '\xB3', '\x2', 
		'\x142B', '\x142D', '\x5', '\x278', '\x13D', '\x2', '\x142C', '\x142A', 
		'\x3', '\x2', '\x2', '\x2', '\x142C', '\x142B', '\x3', '\x2', '\x2', '\x2', 
		'\x142D', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x142E', '\x142F', '\x5', 
		'\x35E', '\x1B0', '\x2', '\x142F', '\x1430', '\x5', '\x370', '\x1B9', 
		'\x2', '\x1430', '\x1442', '\x3', '\x2', '\x2', '\x2', '\x1431', '\x1442', 
		'\x5', '\x358', '\x1AD', '\x2', '\x1432', '\x1442', '\x5', '\x364', '\x1B3', 
		'\x2', '\x1433', '\x1442', '\x5', '\x35A', '\x1AE', '\x2', '\x1434', '\x1435', 
		'\a', '\x296', '\x2', '\x2', '\x1435', '\x1436', '\x5', '\x1C6', '\xE4', 
		'\x2', '\x1436', '\x143A', '\a', '\x297', '\x2', '\x2', '\x1437', '\x1439', 
		'\x5', '\x1CA', '\xE6', '\x2', '\x1438', '\x1437', '\x3', '\x2', '\x2', 
		'\x2', '\x1439', '\x143C', '\x3', '\x2', '\x2', '\x2', '\x143A', '\x1438', 
		'\x3', '\x2', '\x2', '\x2', '\x143A', '\x143B', '\x3', '\x2', '\x2', '\x2', 
		'\x143B', '\x1442', '\x3', '\x2', '\x2', '\x2', '\x143C', '\x143A', '\x3', 
		'\x2', '\x2', '\x2', '\x143D', '\x143E', '\a', '\x296', '\x2', '\x2', 
		'\x143E', '\x143F', '\x5', '\x276', '\x13C', '\x2', '\x143F', '\x1440', 
		'\a', '\x297', '\x2', '\x2', '\x1440', '\x1442', '\x3', '\x2', '\x2', 
		'\x2', '\x1441', '\x142E', '\x3', '\x2', '\x2', '\x2', '\x1441', '\x1431', 
		'\x3', '\x2', '\x2', '\x2', '\x1441', '\x1432', '\x3', '\x2', '\x2', '\x2', 
		'\x1441', '\x1433', '\x3', '\x2', '\x2', '\x2', '\x1441', '\x1434', '\x3', 
		'\x2', '\x2', '\x2', '\x1441', '\x143D', '\x3', '\x2', '\x2', '\x2', '\x1442', 
		'\x2A5', '\x3', '\x2', '\x2', '\x2', '\x1443', '\x144C', '\t', 'I', '\x2', 
		'\x2', '\x1444', '\x1445', '\a', '\x296', '\x2', '\x2', '\x1445', '\x1446', 
		'\x5', '\x1C6', '\xE4', '\x2', '\x1446', '\x1447', '\a', '\x297', '\x2', 
		'\x2', '\x1447', '\x144D', '\x3', '\x2', '\x2', '\x2', '\x1448', '\x1449', 
		'\a', '\x296', '\x2', '\x2', '\x1449', '\x144A', '\x5', '\x278', '\x13D', 
		'\x2', '\x144A', '\x144B', '\a', '\x297', '\x2', '\x2', '\x144B', '\x144D', 
		'\x3', '\x2', '\x2', '\x2', '\x144C', '\x1444', '\x3', '\x2', '\x2', '\x2', 
		'\x144C', '\x1448', '\x3', '\x2', '\x2', '\x2', '\x144D', '\x2A7', '\x3', 
		'\x2', '\x2', '\x2', '\x144E', '\x144F', '\a', '\x281', '\x2', '\x2', 
		'\x144F', '\x1450', '\a', '\x296', '\x2', '\x2', '\x1450', '\x1451', '\x5', 
		'\x278', '\x13D', '\x2', '\x1451', '\x1452', '\a', '\x29C', '\x2', '\x2', 
		'\x1452', '\x1455', '\x5', '\x278', '\x13D', '\x2', '\x1453', '\x1454', 
		'\a', '\x29C', '\x2', '\x2', '\x1454', '\x1456', '\x5', '\x278', '\x13D', 
		'\x2', '\x1455', '\x1453', '\x3', '\x2', '\x2', '\x2', '\x1455', '\x1456', 
		'\x3', '\x2', '\x2', '\x2', '\x1456', '\x1457', '\x3', '\x2', '\x2', '\x2', 
		'\x1457', '\x1458', '\a', '\x297', '\x2', '\x2', '\x1458', '\x1495', '\x3', 
		'\x2', '\x2', '\x2', '\x1459', '\x145A', '\a', '\x282', '\x2', '\x2', 
		'\x145A', '\x145E', '\a', '\x296', '\x2', '\x2', '\x145B', '\x145F', '\x5', 
		'\x35E', '\x1B0', '\x2', '\x145C', '\x145F', '\x5', '\x2AA', '\x156', 
		'\x2', '\x145D', '\x145F', '\x5', '\x278', '\x13D', '\x2', '\x145E', '\x145B', 
		'\x3', '\x2', '\x2', '\x2', '\x145E', '\x145C', '\x3', '\x2', '\x2', '\x2', 
		'\x145E', '\x145D', '\x3', '\x2', '\x2', '\x2', '\x145F', '\x1462', '\x3', 
		'\x2', '\x2', '\x2', '\x1460', '\x1461', '\a', '\x29C', '\x2', '\x2', 
		'\x1461', '\x1463', '\x5', '\x36A', '\x1B6', '\x2', '\x1462', '\x1460', 
		'\x3', '\x2', '\x2', '\x2', '\x1462', '\x1463', '\x3', '\x2', '\x2', '\x2', 
		'\x1463', '\x1466', '\x3', '\x2', '\x2', '\x2', '\x1464', '\x1465', '\a', 
		'\x29C', '\x2', '\x2', '\x1465', '\x1467', '\x5', '\x36A', '\x1B6', '\x2', 
		'\x1466', '\x1464', '\x3', '\x2', '\x2', '\x2', '\x1466', '\x1467', '\x3', 
		'\x2', '\x2', '\x2', '\x1467', '\x1468', '\x3', '\x2', '\x2', '\x2', '\x1468', 
		'\x1469', '\a', '\x297', '\x2', '\x2', '\x1469', '\x1495', '\x3', '\x2', 
		'\x2', '\x2', '\x146A', '\x146B', '\a', '\x275', '\x2', '\x2', '\x146B', 
		'\x146C', '\a', '\x296', '\x2', '\x2', '\x146C', '\x146D', '\x5', '\x276', 
		'\x13C', '\x2', '\x146D', '\x146E', '\a', '\x297', '\x2', '\x2', '\x146E', 
		'\x1495', '\x3', '\x2', '\x2', '\x2', '\x146F', '\x1470', '\a', '\x46', 
		'\x2', '\x2', '\x1470', '\x1471', '\a', '\x296', '\x2', '\x2', '\x1471', 
		'\x1472', '\x5', '\x28A', '\x146', '\x2', '\x1472', '\x1473', '\a', '\x23B', 
		'\x2', '\x2', '\x1473', '\x1474', '\a', '\x13E', '\x2', '\x2', '\x1474', 
		'\x1475', '\a', '\x297', '\x2', '\x2', '\x1475', '\x1495', '\x3', '\x2', 
		'\x2', '\x2', '\x1476', '\x1477', '\a', '\x27C', '\x2', '\x2', '\x1477', 
		'\x1478', '\a', '\x296', '\x2', '\x2', '\x1478', '\x1479', '\x5', '\x278', 
		'\x13D', '\x2', '\x1479', '\x147A', '\a', '\x29C', '\x2', '\x2', '\x147A', 
		'\x147B', '\x5', '\x278', '\x13D', '\x2', '\x147B', '\x147C', '\a', '\x297', 
		'\x2', '\x2', '\x147C', '\x1495', '\x3', '\x2', '\x2', '\x2', '\x147D', 
		'\x147E', '\a', '\x283', '\x2', '\x2', '\x147E', '\x1486', '\a', '\x296', 
		'\x2', '\x2', '\x147F', '\x1481', '\t', 'J', '\x2', '\x2', '\x1480', '\x147F', 
		'\x3', '\x2', '\x2', '\x2', '\x1480', '\x1481', '\x3', '\x2', '\x2', '\x2', 
		'\x1481', '\x1483', '\x3', '\x2', '\x2', '\x2', '\x1482', '\x1484', '\x5', 
		'\x36A', '\x1B6', '\x2', '\x1483', '\x1482', '\x3', '\x2', '\x2', '\x2', 
		'\x1483', '\x1484', '\x3', '\x2', '\x2', '\x2', '\x1484', '\x1485', '\x3', 
		'\x2', '\x2', '\x2', '\x1485', '\x1487', '\a', '\xCB', '\x2', '\x2', '\x1486', 
		'\x1480', '\x3', '\x2', '\x2', '\x2', '\x1486', '\x1487', '\x3', '\x2', 
		'\x2', '\x2', '\x1487', '\x1488', '\x3', '\x2', '\x2', '\x2', '\x1488', 
		'\x1489', '\x5', '\x28A', '\x146', '\x2', '\x1489', '\x148A', '\a', '\x297', 
		'\x2', '\x2', '\x148A', '\x1495', '\x3', '\x2', '\x2', '\x2', '\x148B', 
		'\x148C', '\a', '\x28A', '\x2', '\x2', '\x148C', '\x148D', '\a', '\x296', 
		'\x2', '\x2', '\x148D', '\x1490', '\x5', '\x278', '\x13D', '\x2', '\x148E', 
		'\x148F', '\a', '\x29C', '\x2', '\x2', '\x148F', '\x1491', '\x5', '\x36A', 
		'\x1B6', '\x2', '\x1490', '\x148E', '\x3', '\x2', '\x2', '\x2', '\x1490', 
		'\x1491', '\x3', '\x2', '\x2', '\x2', '\x1491', '\x1492', '\x3', '\x2', 
		'\x2', '\x2', '\x1492', '\x1493', '\a', '\x297', '\x2', '\x2', '\x1493', 
		'\x1495', '\x3', '\x2', '\x2', '\x2', '\x1494', '\x144E', '\x3', '\x2', 
		'\x2', '\x2', '\x1494', '\x1459', '\x3', '\x2', '\x2', '\x2', '\x1494', 
		'\x146A', '\x3', '\x2', '\x2', '\x2', '\x1494', '\x146F', '\x3', '\x2', 
		'\x2', '\x2', '\x1494', '\x1476', '\x3', '\x2', '\x2', '\x2', '\x1494', 
		'\x147D', '\x3', '\x2', '\x2', '\x2', '\x1494', '\x148B', '\x3', '\x2', 
		'\x2', '\x2', '\x1495', '\x2A9', '\x3', '\x2', '\x2', '\x2', '\x1496', 
		'\x149A', '\x5', '\x2A8', '\x155', '\x2', '\x1497', '\x149A', '\x5', '\x2AC', 
		'\x157', '\x2', '\x1498', '\x149A', '\x5', '\x2B0', '\x159', '\x2', '\x1499', 
		'\x1496', '\x3', '\x2', '\x2', '\x2', '\x1499', '\x1497', '\x3', '\x2', 
		'\x2', '\x2', '\x1499', '\x1498', '\x3', '\x2', '\x2', '\x2', '\x149A', 
		'\x2AB', '\x3', '\x2', '\x2', '\x2', '\x149B', '\x149E', '\x5', '\x2AE', 
		'\x158', '\x2', '\x149C', '\x149F', '\x5', '\x292', '\x14A', '\x2', '\x149D', 
		'\x149F', '\x5', '\x294', '\x14B', '\x2', '\x149E', '\x149C', '\x3', '\x2', 
		'\x2', '\x2', '\x149E', '\x149D', '\x3', '\x2', '\x2', '\x2', '\x149E', 
		'\x149F', '\x3', '\x2', '\x2', '\x2', '\x149F', '\x2AD', '\x3', '\x2', 
		'\x2', '\x2', '\x14A0', '\x14A1', '\a', '\x284', '\x2', '\x2', '\x14A1', 
		'\x14A3', '\a', '\x296', '\x2', '\x2', '\x14A2', '\x14A4', '\t', 'K', 
		'\x2', '\x2', '\x14A3', '\x14A2', '\x3', '\x2', '\x2', '\x2', '\x14A3', 
		'\x14A4', '\x3', '\x2', '\x2', '\x2', '\x14A4', '\x14A5', '\x3', '\x2', 
		'\x2', '\x2', '\x14A5', '\x14A6', '\x5', '\x278', '\x13D', '\x2', '\x14A6', 
		'\x14A7', '\a', '\x297', '\x2', '\x2', '\x14A7', '\x14DB', '\x3', '\x2', 
		'\x2', '\x2', '\x14A8', '\x14A9', '\a', 'g', '\x2', '\x2', '\x14A9', '\x14B1', 
		'\a', '\x296', '\x2', '\x2', '\x14AA', '\x14B2', '\a', '\x299', '\x2', 
		'\x2', '\x14AB', '\x14AD', '\t', '\x35', '\x2', '\x2', '\x14AC', '\x14AB', 
		'\x3', '\x2', '\x2', '\x2', '\x14AC', '\x14AD', '\x3', '\x2', '\x2', '\x2', 
		'\x14AD', '\x14AE', '\x3', '\x2', '\x2', '\x2', '\x14AE', '\x14B0', '\x5', 
		'\x28A', '\x146', '\x2', '\x14AF', '\x14AC', '\x3', '\x2', '\x2', '\x2', 
		'\x14AF', '\x14B0', '\x3', '\x2', '\x2', '\x2', '\x14B0', '\x14B2', '\x3', 
		'\x2', '\x2', '\x2', '\x14B1', '\x14AA', '\x3', '\x2', '\x2', '\x2', '\x14B1', 
		'\x14AF', '\x3', '\x2', '\x2', '\x2', '\x14B2', '\x14B3', '\x3', '\x2', 
		'\x2', '\x2', '\x14B3', '\x14B5', '\a', '\x297', '\x2', '\x2', '\x14B4', 
		'\x14B6', '\x5', '\x2B8', '\x15D', '\x2', '\x14B5', '\x14B4', '\x3', '\x2', 
		'\x2', '\x2', '\x14B5', '\x14B6', '\x3', '\x2', '\x2', '\x2', '\x14B6', 
		'\x14DB', '\x3', '\x2', '\x2', '\x2', '\x14B7', '\x14B8', '\a', '\x27F', 
		'\x2', '\x2', '\x14B8', '\x14B9', '\a', '\x296', '\x2', '\x2', '\x14B9', 
		'\x14BC', '\x5', '\x278', '\x13D', '\x2', '\x14BA', '\x14BB', '\a', '\x29C', 
		'\x2', '\x2', '\x14BB', '\x14BD', '\a', '\x290', '\x2', '\x2', '\x14BC', 
		'\x14BA', '\x3', '\x2', '\x2', '\x2', '\x14BC', '\x14BD', '\x3', '\x2', 
		'\x2', '\x2', '\x14BD', '\x14BE', '\x3', '\x2', '\x2', '\x2', '\x14BE', 
		'\x14BF', '\a', '\x297', '\x2', '\x2', '\x14BF', '\x14DB', '\x3', '\x2', 
		'\x2', '\x2', '\x14C0', '\x14C1', '\a', '\x272', '\x2', '\x2', '\x14C1', 
		'\x14C3', '\a', '\x296', '\x2', '\x2', '\x14C2', '\x14C4', '\t', 'K', 
		'\x2', '\x2', '\x14C3', '\x14C2', '\x3', '\x2', '\x2', '\x2', '\x14C3', 
		'\x14C4', '\x3', '\x2', '\x2', '\x2', '\x14C4', '\x14C5', '\x3', '\x2', 
		'\x2', '\x2', '\x14C5', '\x14C6', '\x5', '\x278', '\x13D', '\x2', '\x14C6', 
		'\x14C7', '\a', '\x297', '\x2', '\x2', '\x14C7', '\x14DB', '\x3', '\x2', 
		'\x2', '\x2', '\x14C8', '\x14C9', '\a', '\x278', '\x2', '\x2', '\x14C9', 
		'\x14CB', '\a', '\x296', '\x2', '\x2', '\x14CA', '\x14CC', '\t', 'K', 
		'\x2', '\x2', '\x14CB', '\x14CA', '\x3', '\x2', '\x2', '\x2', '\x14CB', 
		'\x14CC', '\x3', '\x2', '\x2', '\x2', '\x14CC', '\x14CD', '\x3', '\x2', 
		'\x2', '\x2', '\x14CD', '\x14CE', '\x5', '\x278', '\x13D', '\x2', '\x14CE', 
		'\x14CF', '\a', '\x297', '\x2', '\x2', '\x14CF', '\x14DB', '\x3', '\x2', 
		'\x2', '\x2', '\x14D0', '\x14D1', '\a', '\x288', '\x2', '\x2', '\x14D1', 
		'\x14D2', '\a', '\x296', '\x2', '\x2', '\x14D2', '\x14D3', '\x5', '\x276', 
		'\x13C', '\x2', '\x14D3', '\x14D4', '\a', '\x297', '\x2', '\x2', '\x14D4', 
		'\x14DB', '\x3', '\x2', '\x2', '\x2', '\x14D5', '\x14D6', '\a', '\x289', 
		'\x2', '\x2', '\x14D6', '\x14D7', '\a', '\x296', '\x2', '\x2', '\x14D7', 
		'\x14D8', '\x5', '\x276', '\x13C', '\x2', '\x14D8', '\x14D9', '\a', '\x297', 
		'\x2', '\x2', '\x14D9', '\x14DB', '\x3', '\x2', '\x2', '\x2', '\x14DA', 
		'\x14A0', '\x3', '\x2', '\x2', '\x2', '\x14DA', '\x14A8', '\x3', '\x2', 
		'\x2', '\x2', '\x14DA', '\x14B7', '\x3', '\x2', '\x2', '\x2', '\x14DA', 
		'\x14C0', '\x3', '\x2', '\x2', '\x2', '\x14DA', '\x14C8', '\x3', '\x2', 
		'\x2', '\x2', '\x14DA', '\x14D0', '\x3', '\x2', '\x2', '\x2', '\x14DA', 
		'\x14D5', '\x3', '\x2', '\x2', '\x2', '\x14DB', '\x2AF', '\x3', '\x2', 
		'\x2', '\x2', '\x14DC', '\x14DD', '\x5', '\x2B2', '\x15A', '\x2', '\x14DD', 
		'\x14DF', '\x5', '\x348', '\x1A5', '\x2', '\x14DE', '\x14E0', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x14DF', '\x14DE', '\x3', '\x2', '\x2', '\x2', '\x14DF', 
		'\x14E0', '\x3', '\x2', '\x2', '\x2', '\x14E0', '\x1618', '\x3', '\x2', 
		'\x2', '\x2', '\x14E1', '\x14E2', '\x5', '\x372', '\x1BA', '\x2', '\x14E2', 
		'\x14E4', '\x5', '\x34A', '\x1A6', '\x2', '\x14E3', '\x14E5', '\x5', '\x2C0', 
		'\x161', '\x2', '\x14E4', '\x14E3', '\x3', '\x2', '\x2', '\x2', '\x14E4', 
		'\x14E5', '\x3', '\x2', '\x2', '\x2', '\x14E5', '\x1618', '\x3', '\x2', 
		'\x2', '\x2', '\x14E6', '\x14E7', '\a', 'g', '\x2', '\x2', '\x14E7', '\x14ED', 
		'\a', '\x296', '\x2', '\x2', '\x14E8', '\x14EE', '\a', '\x299', '\x2', 
		'\x2', '\x14E9', '\x14EB', '\t', '\x35', '\x2', '\x2', '\x14EA', '\x14E9', 
		'\x3', '\x2', '\x2', '\x2', '\x14EA', '\x14EB', '\x3', '\x2', '\x2', '\x2', 
		'\x14EB', '\x14EC', '\x3', '\x2', '\x2', '\x2', '\x14EC', '\x14EE', '\x5', 
		'\x28A', '\x146', '\x2', '\x14ED', '\x14E8', '\x3', '\x2', '\x2', '\x2', 
		'\x14ED', '\x14EA', '\x3', '\x2', '\x2', '\x2', '\x14EE', '\x14EF', '\x3', 
		'\x2', '\x2', '\x2', '\x14EF', '\x14F1', '\a', '\x297', '\x2', '\x2', 
		'\x14F0', '\x14F2', '\x5', '\x2B8', '\x15D', '\x2', '\x14F1', '\x14F0', 
		'\x3', '\x2', '\x2', '\x2', '\x14F1', '\x14F2', '\x3', '\x2', '\x2', '\x2', 
		'\x14F2', '\x1618', '\x3', '\x2', '\x2', '\x2', '\x14F3', '\x14F4', '\t', 
		'L', '\x2', '\x2', '\x14F4', '\x14FB', '\a', '\x296', '\x2', '\x2', '\x14F5', 
		'\x14F6', '\a', '\x138', '\x2', '\x2', '\x14F6', '\x14F7', '\a', '\x296', 
		'\x2', '\x2', '\x14F7', '\x14F8', '\x5', '\x1C6', '\xE4', '\x2', '\x14F8', 
		'\x14F9', '\a', '\x297', '\x2', '\x2', '\x14F9', '\x14FC', '\x3', '\x2', 
		'\x2', '\x2', '\x14FA', '\x14FC', '\x5', '\x28A', '\x146', '\x2', '\x14FB', 
		'\x14F5', '\x3', '\x2', '\x2', '\x2', '\x14FB', '\x14FA', '\x3', '\x2', 
		'\x2', '\x2', '\x14FC', '\x14FD', '\x3', '\x2', '\x2', '\x2', '\x14FD', 
		'\x14FE', '\a', '\x14', '\x2', '\x2', '\x14FE', '\x14FF', '\x5', '\x350', 
		'\x1A9', '\x2', '\x14FF', '\x1500', '\a', '\x297', '\x2', '\x2', '\x1500', 
		'\x1618', '\x3', '\x2', '\x2', '\x2', '\x1501', '\x1502', '\a', 'L', '\x2', 
		'\x2', '\x1502', '\x1503', '\a', '\x296', '\x2', '\x2', '\x1503', '\x1509', 
		'\x5', '\x35E', '\x1B0', '\x2', '\x1504', '\x1507', '\a', '\x29C', '\x2', 
		'\x2', '\x1505', '\x1508', '\x5', '\x366', '\x1B4', '\x2', '\x1506', '\x1508', 
		'\x5', '\x36A', '\x1B6', '\x2', '\x1507', '\x1505', '\x3', '\x2', '\x2', 
		'\x2', '\x1507', '\x1506', '\x3', '\x2', '\x2', '\x2', '\x1508', '\x150A', 
		'\x3', '\x2', '\x2', '\x2', '\x1509', '\x1504', '\x3', '\x2', '\x2', '\x2', 
		'\x1509', '\x150A', '\x3', '\x2', '\x2', '\x2', '\x150A', '\x150B', '\x3', 
		'\x2', '\x2', '\x2', '\x150B', '\x150C', '\a', '\x297', '\x2', '\x2', 
		'\x150C', '\x1618', '\x3', '\x2', '\x2', '\x2', '\x150D', '\x150E', '\a', 
		'M', '\x2', '\x2', '\x150E', '\x1510', '\a', '\x296', '\x2', '\x2', '\x150F', 
		'\x1511', '\t', 'M', '\x2', '\x2', '\x1510', '\x150F', '\x3', '\x2', '\x2', 
		'\x2', '\x1510', '\x1511', '\x3', '\x2', '\x2', '\x2', '\x1511', '\x1512', 
		'\x3', '\x2', '\x2', '\x2', '\x1512', '\x1514', '\x5', '\x28A', '\x146', 
		'\x2', '\x1513', '\x1515', '\x5', '\x2C4', '\x163', '\x2', '\x1514', '\x1513', 
		'\x3', '\x2', '\x2', '\x2', '\x1514', '\x1515', '\x3', '\x2', '\x2', '\x2', 
		'\x1515', '\x1516', '\x3', '\x2', '\x2', '\x2', '\x1516', '\x1517', '\a', 
		'\x297', '\x2', '\x2', '\x1517', '\x1618', '\x3', '\x2', '\x2', '\x2', 
		'\x1518', '\x1519', '\x5', '\x2B4', '\x15B', '\x2', '\x1519', '\x151B', 
		'\x5', '\x346', '\x1A4', '\x2', '\x151A', '\x151C', '\x5', '\x2C6', '\x164', 
		'\x2', '\x151B', '\x151A', '\x3', '\x2', '\x2', '\x2', '\x151C', '\x151D', 
		'\x3', '\x2', '\x2', '\x2', '\x151D', '\x151B', '\x3', '\x2', '\x2', '\x2', 
		'\x151D', '\x151E', '\x3', '\x2', '\x2', '\x2', '\x151E', '\x1618', '\x3', 
		'\x2', '\x2', '\x2', '\x151F', '\x1520', '\x5', '\x328', '\x195', '\x2', 
		'\x1520', '\x1521', '\t', 'N', '\x2', '\x2', '\x1521', '\x1618', '\x3', 
		'\x2', '\x2', '\x2', '\x1522', '\x1523', '\a', '~', '\x2', '\x2', '\x1523', 
		'\x1524', '\a', '\x296', '\x2', '\x2', '\x1524', '\x1526', '\x5', '\x28A', 
		'\x146', '\x2', '\x1525', '\x1527', '\t', 'O', '\x2', '\x2', '\x1526', 
		'\x1525', '\x3', '\x2', '\x2', '\x2', '\x1526', '\x1527', '\x3', '\x2', 
		'\x2', '\x2', '\x1527', '\x1528', '\x3', '\x2', '\x2', '\x2', '\x1528', 
		'\x1529', '\a', '\x297', '\x2', '\x2', '\x1529', '\x1618', '\x3', '\x2', 
		'\x2', '\x2', '\x152A', '\x152B', '\a', '\xB7', '\x2', '\x2', '\x152B', 
		'\x152C', '\a', '\x296', '\x2', '\x2', '\x152C', '\x152D', '\x5', '\x372', 
		'\x1BA', '\x2', '\x152D', '\x152E', '\a', '\xCB', '\x2', '\x2', '\x152E', 
		'\x152F', '\x5', '\x28A', '\x146', '\x2', '\x152F', '\x1530', '\a', '\x297', 
		'\x2', '\x2', '\x1530', '\x1618', '\x3', '\x2', '\x2', '\x2', '\x1531', 
		'\x1532', '\t', 'P', '\x2', '\x2', '\x1532', '\x1534', '\x5', '\x348', 
		'\x1A5', '\x2', '\x1533', '\x1535', '\x5', '\x34C', '\x1A7', '\x2', '\x1534', 
		'\x1533', '\x3', '\x2', '\x2', '\x2', '\x1534', '\x1535', '\x3', '\x2', 
		'\x2', '\x2', '\x1535', '\x1536', '\x3', '\x2', '\x2', '\x2', '\x1536', 
		'\x1537', '\x5', '\x2B8', '\x15D', '\x2', '\x1537', '\x1618', '\x3', '\x2', 
		'\x2', '\x2', '\x1538', '\x1539', '\x5', '\x2B6', '\x15C', '\x2', '\x1539', 
		'\x153A', '\a', '\x296', '\x2', '\x2', '\x153A', '\x153C', '\x5', '\x276', 
		'\x13C', '\x2', '\x153B', '\x153D', '\x5', '\x2C8', '\x165', '\x2', '\x153C', 
		'\x153B', '\x3', '\x2', '\x2', '\x2', '\x153C', '\x153D', '\x3', '\x2', 
		'\x2', '\x2', '\x153D', '\x153F', '\x3', '\x2', '\x2', '\x2', '\x153E', 
		'\x1540', '\x5', '\x2C0', '\x161', '\x2', '\x153F', '\x153E', '\x3', '\x2', 
		'\x2', '\x2', '\x153F', '\x1540', '\x3', '\x2', '\x2', '\x2', '\x1540', 
		'\x1541', '\x3', '\x2', '\x2', '\x2', '\x1541', '\x1542', '\a', '\x297', 
		'\x2', '\x2', '\x1542', '\x1618', '\x3', '\x2', '\x2', '\x2', '\x1543', 
		'\x1544', '\a', '\x222', '\x2', '\x2', '\x1544', '\x1545', '\a', '\x296', 
		'\x2', '\x2', '\x1545', '\x1548', '\x5', '\x278', '\x13D', '\x2', '\x1546', 
		'\x1547', '\a', '\x23B', '\x2', '\x2', '\x1547', '\x1549', '\t', 'Q', 
		'\x2', '\x2', '\x1548', '\x1546', '\x3', '\x2', '\x2', '\x2', '\x1548', 
		'\x1549', '\x3', '\x2', '\x2', '\x2', '\x1549', '\x154E', '\x3', '\x2', 
		'\x2', '\x2', '\x154A', '\x154B', '\a', '\x29C', '\x2', '\x2', '\x154B', 
		'\x154D', '\x5', '\x278', '\x13D', '\x2', '\x154C', '\x154A', '\x3', '\x2', 
		'\x2', '\x2', '\x154D', '\x1550', '\x3', '\x2', '\x2', '\x2', '\x154E', 
		'\x154C', '\x3', '\x2', '\x2', '\x2', '\x154E', '\x154F', '\x3', '\x2', 
		'\x2', '\x2', '\x154F', '\x1551', '\x3', '\x2', '\x2', '\x2', '\x1550', 
		'\x154E', '\x3', '\x2', '\x2', '\x2', '\x1551', '\x1552', '\a', '\x297', 
		'\x2', '\x2', '\x1552', '\x1618', '\x3', '\x2', '\x2', '\x2', '\x1553', 
		'\x1554', '\a', '\x224', '\x2', '\x2', '\x1554', '\x1555', '\a', '\x296', 
		'\x2', '\x2', '\x1555', '\x1556', '\x5', '\x278', '\x13D', '\x2', '\x1556', 
		'\x1558', '\a', '\x14', '\x2', '\x2', '\x1557', '\x1559', '\a', '\x1AA', 
		'\x2', '\x2', '\x1558', '\x1557', '\x3', '\x2', '\x2', '\x2', '\x1558', 
		'\x1559', '\x3', '\x2', '\x2', '\x2', '\x1559', '\x155A', '\x3', '\x2', 
		'\x2', '\x2', '\x155A', '\x155B', '\x5', '\x350', '\x1A9', '\x2', '\x155B', 
		'\x155C', '\a', '\x297', '\x2', '\x2', '\x155C', '\x1618', '\x3', '\x2', 
		'\x2', '\x2', '\x155D', '\x155E', '\a', '\x283', '\x2', '\x2', '\x155E', 
		'\x1566', '\a', '\x296', '\x2', '\x2', '\x155F', '\x1561', '\t', 'J', 
		'\x2', '\x2', '\x1560', '\x155F', '\x3', '\x2', '\x2', '\x2', '\x1560', 
		'\x1561', '\x3', '\x2', '\x2', '\x2', '\x1561', '\x1563', '\x3', '\x2', 
		'\x2', '\x2', '\x1562', '\x1564', '\x5', '\x36A', '\x1B6', '\x2', '\x1563', 
		'\x1562', '\x3', '\x2', '\x2', '\x2', '\x1563', '\x1564', '\x3', '\x2', 
		'\x2', '\x2', '\x1564', '\x1565', '\x3', '\x2', '\x2', '\x2', '\x1565', 
		'\x1567', '\a', '\xCB', '\x2', '\x2', '\x1566', '\x1560', '\x3', '\x2', 
		'\x2', '\x2', '\x1566', '\x1567', '\x3', '\x2', '\x2', '\x2', '\x1567', 
		'\x1568', '\x3', '\x2', '\x2', '\x2', '\x1568', '\x1569', '\x5', '\x28A', 
		'\x146', '\x2', '\x1569', '\x156A', '\a', '\x297', '\x2', '\x2', '\x156A', 
		'\x1618', '\x3', '\x2', '\x2', '\x2', '\x156B', '\x156C', '\a', '\x252', 
		'\x2', '\x2', '\x156C', '\x156D', '\a', '\x296', '\x2', '\x2', '\x156D', 
		'\x156F', '\x5', '\x278', '\x13D', '\x2', '\x156E', '\x1570', '\x5', '\x228', 
		'\x115', '\x2', '\x156F', '\x156E', '\x3', '\x2', '\x2', '\x2', '\x156F', 
		'\x1570', '\x3', '\x2', '\x2', '\x2', '\x1570', '\x1571', '\x3', '\x2', 
		'\x2', '\x2', '\x1571', '\x1574', '\a', '\x297', '\x2', '\x2', '\x1572', 
		'\x1573', '\a', '\x28F', '\x2', '\x2', '\x1573', '\x1575', '\x5', '\x35C', 
		'\x1AF', '\x2', '\x1574', '\x1572', '\x3', '\x2', '\x2', '\x2', '\x1574', 
		'\x1575', '\x3', '\x2', '\x2', '\x2', '\x1575', '\x1618', '\x3', '\x2', 
		'\x2', '\x2', '\x1576', '\x1577', '\t', 'R', '\x2', '\x2', '\x1577', '\x157C', 
		'\a', '\x296', '\x2', '\x2', '\x1578', '\x157A', '\a', '\x29C', '\x2', 
		'\x2', '\x1579', '\x1578', '\x3', '\x2', '\x2', '\x2', '\x1579', '\x157A', 
		'\x3', '\x2', '\x2', '\x2', '\x157A', '\x157B', '\x3', '\x2', '\x2', '\x2', 
		'\x157B', '\x157D', '\x5', '\x2D4', '\x16B', '\x2', '\x157C', '\x1579', 
		'\x3', '\x2', '\x2', '\x2', '\x157D', '\x157E', '\x3', '\x2', '\x2', '\x2', 
		'\x157E', '\x157C', '\x3', '\x2', '\x2', '\x2', '\x157E', '\x157F', '\x3', 
		'\x2', '\x2', '\x2', '\x157F', '\x1580', '\x3', '\x2', '\x2', '\x2', '\x1580', 
		'\x1583', '\a', '\x297', '\x2', '\x2', '\x1581', '\x1582', '\a', '\x28F', 
		'\x2', '\x2', '\x1582', '\x1584', '\x5', '\x35C', '\x1AF', '\x2', '\x1583', 
		'\x1581', '\x3', '\x2', '\x2', '\x2', '\x1583', '\x1584', '\x3', '\x2', 
		'\x2', '\x2', '\x1584', '\x1618', '\x3', '\x2', '\x2', '\x2', '\x1585', 
		'\x1586', '\a', '\x256', '\x2', '\x2', '\x1586', '\x1588', '\a', '\x296', 
		'\x2', '\x2', '\x1587', '\x1589', '\t', 'S', '\x2', '\x2', '\x1588', '\x1587', 
		'\x3', '\x2', '\x2', '\x2', '\x1588', '\x1589', '\x3', '\x2', '\x2', '\x2', 
		'\x1589', '\x158B', '\x3', '\x2', '\x2', '\x2', '\x158A', '\x158C', '\t', 
		'T', '\x2', '\x2', '\x158B', '\x158A', '\x3', '\x2', '\x2', '\x2', '\x158B', 
		'\x158C', '\x3', '\x2', '\x2', '\x2', '\x158C', '\x158D', '\x3', '\x2', 
		'\x2', '\x2', '\x158D', '\x1590', '\x5', '\x278', '\x13D', '\x2', '\x158E', 
		'\x158F', '\a', '\x29C', '\x2', '\x2', '\x158F', '\x1591', '\x5', '\x2CC', 
		'\x167', '\x2', '\x1590', '\x158E', '\x3', '\x2', '\x2', '\x2', '\x1590', 
		'\x1591', '\x3', '\x2', '\x2', '\x2', '\x1591', '\x1599', '\x3', '\x2', 
		'\x2', '\x2', '\x1592', '\x1593', '\a', '\x29C', '\x2', '\x2', '\x1593', 
		'\x1595', '\x5', '\x278', '\x13D', '\x2', '\x1594', '\x1596', '\x5', '\x2E8', 
		'\x175', '\x2', '\x1595', '\x1594', '\x3', '\x2', '\x2', '\x2', '\x1595', 
		'\x1596', '\x3', '\x2', '\x2', '\x2', '\x1596', '\x1598', '\x3', '\x2', 
		'\x2', '\x2', '\x1597', '\x1592', '\x3', '\x2', '\x2', '\x2', '\x1598', 
		'\x159B', '\x3', '\x2', '\x2', '\x2', '\x1599', '\x1597', '\x3', '\x2', 
		'\x2', '\x2', '\x1599', '\x159A', '\x3', '\x2', '\x2', '\x2', '\x159A', 
		'\x159C', '\x3', '\x2', '\x2', '\x2', '\x159B', '\x1599', '\x3', '\x2', 
		'\x2', '\x2', '\x159C', '\x159F', '\a', '\x297', '\x2', '\x2', '\x159D', 
		'\x159E', '\a', '\x28F', '\x2', '\x2', '\x159E', '\x15A0', '\x5', '\x35C', 
		'\x1AF', '\x2', '\x159F', '\x159D', '\x3', '\x2', '\x2', '\x2', '\x159F', 
		'\x15A0', '\x3', '\x2', '\x2', '\x2', '\x15A0', '\x1618', '\x3', '\x2', 
		'\x2', '\x2', '\x15A1', '\x15A2', '\a', '\x257', '\x2', '\x2', '\x15A2', 
		'\x15A3', '\a', '\x296', '\x2', '\x2', '\x15A3', '\x15A5', '\x5', '\x278', 
		'\x13D', '\x2', '\x15A4', '\x15A6', '\x5', '\x2CA', '\x166', '\x2', '\x15A5', 
		'\x15A4', '\x3', '\x2', '\x2', '\x2', '\x15A5', '\x15A6', '\x3', '\x2', 
		'\x2', '\x2', '\x15A6', '\x15A7', '\x3', '\x2', '\x2', '\x2', '\x15A7', 
		'\x15A8', '\a', '\x297', '\x2', '\x2', '\x15A8', '\x1618', '\x3', '\x2', 
		'\x2', '\x2', '\x15A9', '\x15AA', '\a', '\x25A', '\x2', '\x2', '\x15AA', 
		'\x15AB', '\a', '\x296', '\x2', '\x2', '\x15AB', '\x15AC', '\t', 'U', 
		'\x2', '\x2', '\x15AC', '\x15AE', '\x5', '\x28A', '\x146', '\x2', '\x15AD', 
		'\x15AF', '\a', '\x249', '\x2', '\x2', '\x15AE', '\x15AD', '\x3', '\x2', 
		'\x2', '\x2', '\x15AE', '\x15AF', '\x3', '\x2', '\x2', '\x2', '\x15AF', 
		'\x15B0', '\x3', '\x2', '\x2', '\x2', '\x15B0', '\x15B3', '\a', '\x297', 
		'\x2', '\x2', '\x15B1', '\x15B2', '\a', '\x28F', '\x2', '\x2', '\x15B2', 
		'\x15B4', '\x5', '\x35C', '\x1AF', '\x2', '\x15B3', '\x15B1', '\x3', '\x2', 
		'\x2', '\x2', '\x15B3', '\x15B4', '\x3', '\x2', '\x2', '\x2', '\x15B4', 
		'\x1618', '\x3', '\x2', '\x2', '\x2', '\x15B5', '\x15B6', '\a', '\x25B', 
		'\x2', '\x2', '\x15B6', '\x15BB', '\a', '\x296', '\x2', '\x2', '\x15B7', 
		'\x15B8', '\a', '\x139', '\x2', '\x2', '\x15B8', '\x15BC', '\x5', '\x36C', 
		'\x1B7', '\x2', '\x15B9', '\x15BA', '\a', '\xA7', '\x2', '\x2', '\x15BA', 
		'\x15BC', '\x5', '\x28A', '\x146', '\x2', '\x15BB', '\x15B7', '\x3', '\x2', 
		'\x2', '\x2', '\x15BB', '\x15B9', '\x3', '\x2', '\x2', '\x2', '\x15BC', 
		'\x15BF', '\x3', '\x2', '\x2', '\x2', '\x15BD', '\x15BE', '\a', '\x29C', 
		'\x2', '\x2', '\x15BE', '\x15C0', '\x5', '\x28A', '\x146', '\x2', '\x15BF', 
		'\x15BD', '\x3', '\x2', '\x2', '\x2', '\x15BF', '\x15C0', '\x3', '\x2', 
		'\x2', '\x2', '\x15C0', '\x15C1', '\x3', '\x2', '\x2', '\x2', '\x15C1', 
		'\x15C4', '\a', '\x297', '\x2', '\x2', '\x15C2', '\x15C3', '\a', '\x28F', 
		'\x2', '\x2', '\x15C3', '\x15C5', '\x5', '\x35C', '\x1AF', '\x2', '\x15C4', 
		'\x15C2', '\x3', '\x2', '\x2', '\x2', '\x15C4', '\x15C5', '\x3', '\x2', 
		'\x2', '\x2', '\x15C5', '\x1618', '\x3', '\x2', '\x2', '\x2', '\x15C6', 
		'\x15C7', '\a', '\x25C', '\x2', '\x2', '\x15C7', '\x15C8', '\a', '\x296', 
		'\x2', '\x2', '\x15C8', '\x15CA', '\x5', '\x28A', '\x146', '\x2', '\x15C9', 
		'\x15CB', '\x5', '\x2CA', '\x166', '\x2', '\x15CA', '\x15C9', '\x3', '\x2', 
		'\x2', '\x2', '\x15CA', '\x15CB', '\x3', '\x2', '\x2', '\x2', '\x15CB', 
		'\x15CC', '\x3', '\x2', '\x2', '\x2', '\x15CC', '\x15CD', '\a', '\x1BB', 
		'\x2', '\x2', '\x15CD', '\x15D1', '\a', '`', '\x2', '\x2', '\x15CE', '\x15CF', 
		'\a', '\x157', '\x2', '\x2', '\x15CF', '\x15D0', '\a', '\x165', '\x2', 
		'\x2', '\x15D0', '\x15D2', '\a', '\x9C', '\x2', '\x2', '\x15D1', '\x15CE', 
		'\x3', '\x2', '\x2', '\x2', '\x15D1', '\x15D2', '\x3', '\x2', '\x2', '\x2', 
		'\x15D2', '\x15D3', '\x3', '\x2', '\x2', '\x2', '\x15D3', '\x15D6', '\a', 
		'\x297', '\x2', '\x2', '\x15D4', '\x15D5', '\a', '\x28F', '\x2', '\x2', 
		'\x15D5', '\x15D7', '\x5', '\x35C', '\x1AF', '\x2', '\x15D6', '\x15D4', 
		'\x3', '\x2', '\x2', '\x2', '\x15D6', '\x15D7', '\x3', '\x2', '\x2', '\x2', 
		'\x15D7', '\x1618', '\x3', '\x2', '\x2', '\x2', '\x15D8', '\x15D9', '\a', 
		'\x25D', '\x2', '\x2', '\x15D9', '\x15DA', '\a', '\x296', '\x2', '\x2', 
		'\x15DA', '\x15DD', '\x5', '\x28A', '\x146', '\x2', '\x15DB', '\x15DC', 
		'\a', '\x29C', '\x2', '\x2', '\x15DC', '\x15DE', '\x5', '\x2D6', '\x16C', 
		'\x2', '\x15DD', '\x15DB', '\x3', '\x2', '\x2', '\x2', '\x15DD', '\x15DE', 
		'\x3', '\x2', '\x2', '\x2', '\x15DE', '\x15E1', '\x3', '\x2', '\x2', '\x2', 
		'\x15DF', '\x15E0', '\a', '\x29C', '\x2', '\x2', '\x15E0', '\x15E2', '\x5', 
		'\x2D8', '\x16D', '\x2', '\x15E1', '\x15DF', '\x3', '\x2', '\x2', '\x2', 
		'\x15E1', '\x15E2', '\x3', '\x2', '\x2', '\x2', '\x15E2', '\x15E3', '\x3', 
		'\x2', '\x2', '\x2', '\x15E3', '\x15E6', '\a', '\x297', '\x2', '\x2', 
		'\x15E4', '\x15E5', '\a', '\x28F', '\x2', '\x2', '\x15E5', '\x15E7', '\x5', 
		'\x35C', '\x1AF', '\x2', '\x15E6', '\x15E4', '\x3', '\x2', '\x2', '\x2', 
		'\x15E6', '\x15E7', '\x3', '\x2', '\x2', '\x2', '\x15E7', '\x1618', '\x3', 
		'\x2', '\x2', '\x2', '\x15E8', '\x15E9', '\a', '\x25E', '\x2', '\x2', 
		'\x15E9', '\x15EA', '\a', '\x296', '\x2', '\x2', '\x15EA', '\x15EB', '\t', 
		'U', '\x2', '\x2', '\x15EB', '\x15EE', '\x5', '\x28A', '\x146', '\x2', 
		'\x15EC', '\x15ED', '\a', '\x14', '\x2', '\x2', '\x15ED', '\x15EF', '\x5', 
		'\x350', '\x1A9', '\x2', '\x15EE', '\x15EC', '\x3', '\x2', '\x2', '\x2', 
		'\x15EE', '\x15EF', '\x3', '\x2', '\x2', '\x2', '\x15EF', '\x15F1', '\x3', 
		'\x2', '\x2', '\x2', '\x15F0', '\x15F2', '\x5', '\x2DA', '\x16E', '\x2', 
		'\x15F1', '\x15F0', '\x3', '\x2', '\x2', '\x2', '\x15F1', '\x15F2', '\x3', 
		'\x2', '\x2', '\x2', '\x15F2', '\x15F4', '\x3', '\x2', '\x2', '\x2', '\x15F3', 
		'\x15F5', '\x5', '\x2DC', '\x16F', '\x2', '\x15F4', '\x15F3', '\x3', '\x2', 
		'\x2', '\x2', '\x15F4', '\x15F5', '\x3', '\x2', '\x2', '\x2', '\x15F5', 
		'\x15F7', '\x3', '\x2', '\x2', '\x2', '\x15F6', '\x15F8', '\x5', '\x2DE', 
		'\x170', '\x2', '\x15F7', '\x15F6', '\x3', '\x2', '\x2', '\x2', '\x15F7', 
		'\x15F8', '\x3', '\x2', '\x2', '\x2', '\x15F8', '\x15FB', '\x3', '\x2', 
		'\x2', '\x2', '\x15F9', '\x15FA', '\t', 'V', '\x2', '\x2', '\x15FA', '\x15FC', 
		'\a', '\x81', '\x2', '\x2', '\x15FB', '\x15F9', '\x3', '\x2', '\x2', '\x2', 
		'\x15FB', '\x15FC', '\x3', '\x2', '\x2', '\x2', '\x15FC', '\x15FD', '\x3', 
		'\x2', '\x2', '\x2', '\x15FD', '\x1600', '\a', '\x297', '\x2', '\x2', 
		'\x15FE', '\x15FF', '\a', '\x28F', '\x2', '\x2', '\x15FF', '\x1601', '\x5', 
		'\x35C', '\x1AF', '\x2', '\x1600', '\x15FE', '\x3', '\x2', '\x2', '\x2', 
		'\x1600', '\x1601', '\x3', '\x2', '\x2', '\x2', '\x1601', '\x1618', '\x3', 
		'\x2', '\x2', '\x2', '\x1602', '\x1603', '\a', '\x25F', '\x2', '\x2', 
		'\x1603', '\x1605', '\a', '\x296', '\x2', '\x2', '\x1604', '\x1606', '\x5', 
		'\x2CE', '\x168', '\x2', '\x1605', '\x1604', '\x3', '\x2', '\x2', '\x2', 
		'\x1605', '\x1606', '\x3', '\x2', '\x2', '\x2', '\x1606', '\x1607', '\x3', 
		'\x2', '\x2', '\x2', '\x1607', '\x1609', '\x5', '\x28A', '\x146', '\x2', 
		'\x1608', '\x160A', '\x5', '\x2CA', '\x166', '\x2', '\x1609', '\x1608', 
		'\x3', '\x2', '\x2', '\x2', '\x1609', '\x160A', '\x3', '\x2', '\x2', '\x2', 
		'\x160A', '\x1610', '\x3', '\x2', '\x2', '\x2', '\x160B', '\x160C', '\a', 
		'O', '\x2', '\x2', '\x160C', '\x160D', '\x5', '\x2D0', '\x169', '\x2', 
		'\x160D', '\x160E', '\a', '\x29C', '\x2', '\x2', '\x160E', '\x160F', '\x5', 
		'\x2D0', '\x169', '\x2', '\x160F', '\x1611', '\x3', '\x2', '\x2', '\x2', 
		'\x1610', '\x160B', '\x3', '\x2', '\x2', '\x2', '\x1610', '\x1611', '\x3', 
		'\x2', '\x2', '\x2', '\x1611', '\x1612', '\x3', '\x2', '\x2', '\x2', '\x1612', 
		'\x1615', '\a', '\x297', '\x2', '\x2', '\x1613', '\x1614', '\a', '\x28F', 
		'\x2', '\x2', '\x1614', '\x1616', '\x5', '\x35C', '\x1AF', '\x2', '\x1615', 
		'\x1613', '\x3', '\x2', '\x2', '\x2', '\x1615', '\x1616', '\x3', '\x2', 
		'\x2', '\x2', '\x1616', '\x1618', '\x3', '\x2', '\x2', '\x2', '\x1617', 
		'\x14DC', '\x3', '\x2', '\x2', '\x2', '\x1617', '\x14E1', '\x3', '\x2', 
		'\x2', '\x2', '\x1617', '\x14E6', '\x3', '\x2', '\x2', '\x2', '\x1617', 
		'\x14F3', '\x3', '\x2', '\x2', '\x2', '\x1617', '\x1501', '\x3', '\x2', 
		'\x2', '\x2', '\x1617', '\x150D', '\x3', '\x2', '\x2', '\x2', '\x1617', 
		'\x1518', '\x3', '\x2', '\x2', '\x2', '\x1617', '\x151F', '\x3', '\x2', 
		'\x2', '\x2', '\x1617', '\x1522', '\x3', '\x2', '\x2', '\x2', '\x1617', 
		'\x152A', '\x3', '\x2', '\x2', '\x2', '\x1617', '\x1531', '\x3', '\x2', 
		'\x2', '\x2', '\x1617', '\x1538', '\x3', '\x2', '\x2', '\x2', '\x1617', 
		'\x1543', '\x3', '\x2', '\x2', '\x2', '\x1617', '\x1553', '\x3', '\x2', 
		'\x2', '\x2', '\x1617', '\x155D', '\x3', '\x2', '\x2', '\x2', '\x1617', 
		'\x156B', '\x3', '\x2', '\x2', '\x2', '\x1617', '\x1576', '\x3', '\x2', 
		'\x2', '\x2', '\x1617', '\x1585', '\x3', '\x2', '\x2', '\x2', '\x1617', 
		'\x15A1', '\x3', '\x2', '\x2', '\x2', '\x1617', '\x15A9', '\x3', '\x2', 
		'\x2', '\x2', '\x1617', '\x15B5', '\x3', '\x2', '\x2', '\x2', '\x1617', 
		'\x15C6', '\x3', '\x2', '\x2', '\x2', '\x1617', '\x15D8', '\x3', '\x2', 
		'\x2', '\x2', '\x1617', '\x15E8', '\x3', '\x2', '\x2', '\x2', '\x1617', 
		'\x1602', '\x3', '\x2', '\x2', '\x2', '\x1618', '\x2B1', '\x3', '\x2', 
		'\x2', '\x2', '\x1619', '\x161A', '\t', 'W', '\x2', '\x2', '\x161A', '\x2B3', 
		'\x3', '\x2', '\x2', '\x2', '\x161B', '\x161C', '\t', 'X', '\x2', '\x2', 
		'\x161C', '\x2B5', '\x3', '\x2', '\x2', '\x2', '\x161D', '\x161E', '\t', 
		'Y', '\x2', '\x2', '\x161E', '\x2B7', '\x3', '\x2', '\x2', '\x2', '\x161F', 
		'\x1620', '\a', '\x172', '\x2', '\x2', '\x1620', '\x1622', '\a', '\x296', 
		'\x2', '\x2', '\x1621', '\x1623', '\x5', '\x1E4', '\xF3', '\x2', '\x1622', 
		'\x1621', '\x3', '\x2', '\x2', '\x2', '\x1622', '\x1623', '\x3', '\x2', 
		'\x2', '\x2', '\x1623', '\x1628', '\x3', '\x2', '\x2', '\x2', '\x1624', 
		'\x1626', '\x5', '\x228', '\x115', '\x2', '\x1625', '\x1627', '\x5', '\x2BA', 
		'\x15E', '\x2', '\x1626', '\x1625', '\x3', '\x2', '\x2', '\x2', '\x1626', 
		'\x1627', '\x3', '\x2', '\x2', '\x2', '\x1627', '\x1629', '\x3', '\x2', 
		'\x2', '\x2', '\x1628', '\x1624', '\x3', '\x2', '\x2', '\x2', '\x1628', 
		'\x1629', '\x3', '\x2', '\x2', '\x2', '\x1629', '\x162A', '\x3', '\x2', 
		'\x2', '\x2', '\x162A', '\x162B', '\a', '\x297', '\x2', '\x2', '\x162B', 
		'\x2B9', '\x3', '\x2', '\x2', '\x2', '\x162C', '\x1633', '\x5', '\x2BC', 
		'\x15F', '\x2', '\x162D', '\x162E', '\a', '(', '\x2', '\x2', '\x162E', 
		'\x162F', '\x5', '\x2BE', '\x160', '\x2', '\x162F', '\x1630', '\a', '\x10', 
		'\x2', '\x2', '\x1630', '\x1631', '\x5', '\x2BE', '\x160', '\x2', '\x1631', 
		'\x1634', '\x3', '\x2', '\x2', '\x2', '\x1632', '\x1634', '\x5', '\x2BE', 
		'\x160', '\x2', '\x1633', '\x162D', '\x3', '\x2', '\x2', '\x2', '\x1633', 
		'\x1632', '\x3', '\x2', '\x2', '\x2', '\x1634', '\x2BB', '\x3', '\x2', 
		'\x2', '\x2', '\x1635', '\x1636', '\t', 'Z', '\x2', '\x2', '\x1636', '\x2BD', 
		'\x3', '\x2', '\x2', '\x2', '\x1637', '\x1638', '\a', '\x22A', '\x2', 
		'\x2', '\x1638', '\x163F', '\a', '\x18F', '\x2', '\x2', '\x1639', '\x163A', 
		'\a', 'l', '\x2', '\x2', '\x163A', '\x163F', '\a', '\x1C7', '\x2', '\x2', 
		'\x163B', '\x163C', '\x5', '\x28A', '\x146', '\x2', '\x163C', '\x163D', 
		'\t', '[', '\x2', '\x2', '\x163D', '\x163F', '\x3', '\x2', '\x2', '\x2', 
		'\x163E', '\x1637', '\x3', '\x2', '\x2', '\x2', '\x163E', '\x1639', '\x3', 
		'\x2', '\x2', '\x2', '\x163E', '\x163B', '\x3', '\x2', '\x2', '\x2', '\x163F', 
		'\x2BF', '\x3', '\x2', '\x2', '\x2', '\x1640', '\x164A', '\a', '\x23B', 
		'\x2', '\x2', '\x1641', '\x164B', '\a', '\x299', '\x2', '\x2', '\x1642', 
		'\x1644', '\a', '\x29C', '\x2', '\x2', '\x1643', '\x1642', '\x3', '\x2', 
		'\x2', '\x2', '\x1643', '\x1644', '\x3', '\x2', '\x2', '\x2', '\x1644', 
		'\x1645', '\x3', '\x2', '\x2', '\x2', '\x1645', '\x1647', '\x5', '\x2C2', 
		'\x162', '\x2', '\x1646', '\x1643', '\x3', '\x2', '\x2', '\x2', '\x1647', 
		'\x1648', '\x3', '\x2', '\x2', '\x2', '\x1648', '\x1646', '\x3', '\x2', 
		'\x2', '\x2', '\x1648', '\x1649', '\x3', '\x2', '\x2', '\x2', '\x1649', 
		'\x164B', '\x3', '\x2', '\x2', '\x2', '\x164A', '\x1641', '\x3', '\x2', 
		'\x2', '\x2', '\x164A', '\x1646', '\x3', '\x2', '\x2', '\x2', '\x164B', 
		'\x2C1', '\x3', '\x2', '\x2', '\x2', '\x164C', '\x164E', '\a', '\xED', 
		'\x2', '\x2', '\x164D', '\x164F', '\a', '\x171', '\x2', '\x2', '\x164E', 
		'\x164D', '\x3', '\x2', '\x2', '\x2', '\x164E', '\x164F', '\x3', '\x2', 
		'\x2', '\x2', '\x164F', '\x1652', '\x3', '\x2', '\x2', '\x2', '\x1650', 
		'\x1652', '\a', '\x171', '\x2', '\x2', '\x1651', '\x164C', '\x3', '\x2', 
		'\x2', '\x2', '\x1651', '\x1650', '\x3', '\x2', '\x2', '\x2', '\x1651', 
		'\x1652', '\x3', '\x2', '\x2', '\x2', '\x1652', '\x1653', '\x3', '\x2', 
		'\x2', '\x2', '\x1653', '\x1655', '\x5', '\x1D2', '\xEA', '\x2', '\x1654', 
		'\x1656', '\x5', '\x2E8', '\x175', '\x2', '\x1655', '\x1654', '\x3', '\x2', 
		'\x2', '\x2', '\x1655', '\x1656', '\x3', '\x2', '\x2', '\x2', '\x1656', 
		'\x2C3', '\x3', '\x2', '\x2', '\x2', '\x1657', '\x1658', '\a', '\x16B', 
		'\x2', '\x2', '\x1658', '\x1659', '\a', '\x38', '\x2', '\x2', '\x1659', 
		'\x165A', '\x5', '\x28A', '\x146', '\x2', '\x165A', '\x2C5', '\x3', '\x2', 
		'\x2', '\x2', '\x165B', '\x165C', '\a', '\x24E', '\x2', '\x2', '\x165C', 
		'\x165D', '\a', '\xD2', '\x2', '\x2', '\x165D', '\x165E', '\a', '\x296', 
		'\x2', '\x2', '\x165E', '\x165F', '\x5', '\x228', '\x115', '\x2', '\x165F', 
		'\x1660', '\a', '\x297', '\x2', '\x2', '\x1660', '\x1663', '\x3', '\x2', 
		'\x2', '\x2', '\x1661', '\x1663', '\x5', '\x2B8', '\x15D', '\x2', '\x1662', 
		'\x165B', '\x3', '\x2', '\x2', '\x2', '\x1662', '\x1661', '\x3', '\x2', 
		'\x2', '\x2', '\x1663', '\x2C7', '\x3', '\x2', '\x2', '\x2', '\x1664', 
		'\x167A', '\a', '\x66', '\x2', '\x2', '\x1665', '\x1667', '\a', '\x133', 
		'\x2', '\x2', '\x1666', '\x1668', '\a', '\x1E', '\x2', '\x2', '\x1667', 
		'\x1666', '\x3', '\x2', '\x2', '\x2', '\x1667', '\x1668', '\x3', '\x2', 
		'\x2', '\x2', '\x1668', '\x167B', '\x3', '\x2', '\x2', '\x2', '\x1669', 
		'\x166E', '\a', '\x296', '\x2', '\x2', '\x166A', '\x166C', '\a', '\x29C', 
		'\x2', '\x2', '\x166B', '\x166A', '\x3', '\x2', '\x2', '\x2', '\x166B', 
		'\x166C', '\x3', '\x2', '\x2', '\x2', '\x166C', '\x166D', '\x3', '\x2', 
		'\x2', '\x2', '\x166D', '\x166F', '\x5', '\x2F2', '\x17A', '\x2', '\x166E', 
		'\x166B', '\x3', '\x2', '\x2', '\x2', '\x166F', '\x1670', '\x3', '\x2', 
		'\x2', '\x2', '\x1670', '\x166E', '\x3', '\x2', '\x2', '\x2', '\x1670', 
		'\x1671', '\x3', '\x2', '\x2', '\x2', '\x1671', '\x1672', '\x3', '\x2', 
		'\x2', '\x2', '\x1672', '\x1673', '\a', '\x297', '\x2', '\x2', '\x1673', 
		'\x1674', '\a', '\x23D', '\x2', '\x2', '\x1674', '\x1676', '\a', '\x296', 
		'\x2', '\x2', '\x1675', '\x1677', '\x5', '\x276', '\x13C', '\x2', '\x1676', 
		'\x1675', '\x3', '\x2', '\x2', '\x2', '\x1676', '\x1677', '\x3', '\x2', 
		'\x2', '\x2', '\x1677', '\x1678', '\x3', '\x2', '\x2', '\x2', '\x1678', 
		'\x1679', '\a', '\x297', '\x2', '\x2', '\x1679', '\x167B', '\x3', '\x2', 
		'\x2', '\x2', '\x167A', '\x1665', '\x3', '\x2', '\x2', '\x2', '\x167A', 
		'\x1669', '\x3', '\x2', '\x2', '\x2', '\x167B', '\x2C9', '\x3', '\x2', 
		'\x2', '\x2', '\x167C', '\x167F', '\a', '\x179', '\x2', '\x2', '\x167D', 
		'\x167E', '\a', '\x38', '\x2', '\x2', '\x167E', '\x1680', '\a', '\x23E', 
		'\x2', '\x2', '\x167F', '\x167D', '\x3', '\x2', '\x2', '\x2', '\x167F', 
		'\x1680', '\x3', '\x2', '\x2', '\x2', '\x1680', '\x1681', '\x3', '\x2', 
		'\x2', '\x2', '\x1681', '\x1683', '\x5', '\x278', '\x13D', '\x2', '\x1682', 
		'\x1684', '\x5', '\x2E8', '\x175', '\x2', '\x1683', '\x1682', '\x3', '\x2', 
		'\x2', '\x2', '\x1683', '\x1684', '\x3', '\x2', '\x2', '\x2', '\x1684', 
		'\x1685', '\x3', '\x2', '\x2', '\x2', '\x1685', '\x1686', '\a', '\x29C', 
		'\x2', '\x2', '\x1686', '\x1688', '\x5', '\x278', '\x13D', '\x2', '\x1687', 
		'\x1689', '\x5', '\x2E8', '\x175', '\x2', '\x1688', '\x1687', '\x3', '\x2', 
		'\x2', '\x2', '\x1688', '\x1689', '\x3', '\x2', '\x2', '\x2', '\x1689', 
		'\x2CB', '\x3', '\x2', '\x2', '\x2', '\x168A', '\x168B', '\a', '\x253', 
		'\x2', '\x2', '\x168B', '\x168D', '\a', '\x296', '\x2', '\x2', '\x168C', 
		'\x168E', '\t', 'S', '\x2', '\x2', '\x168D', '\x168C', '\x3', '\x2', '\x2', 
		'\x2', '\x168D', '\x168E', '\x3', '\x2', '\x2', '\x2', '\x168E', '\x1690', 
		'\x3', '\x2', '\x2', '\x2', '\x168F', '\x1691', '\t', '\\', '\x2', '\x2', 
		'\x1690', '\x168F', '\x3', '\x2', '\x2', '\x2', '\x1690', '\x1691', '\x3', 
		'\x2', '\x2', '\x2', '\x1691', '\x1696', '\x3', '\x2', '\x2', '\x2', '\x1692', 
		'\x1694', '\a', '\x29C', '\x2', '\x2', '\x1693', '\x1692', '\x3', '\x2', 
		'\x2', '\x2', '\x1693', '\x1694', '\x3', '\x2', '\x2', '\x2', '\x1694', 
		'\x1695', '\x3', '\x2', '\x2', '\x2', '\x1695', '\x1697', '\x5', '\x2D4', 
		'\x16B', '\x2', '\x1696', '\x1693', '\x3', '\x2', '\x2', '\x2', '\x1697', 
		'\x1698', '\x3', '\x2', '\x2', '\x2', '\x1698', '\x1696', '\x3', '\x2', 
		'\x2', '\x2', '\x1698', '\x1699', '\x3', '\x2', '\x2', '\x2', '\x1699', 
		'\x169A', '\x3', '\x2', '\x2', '\x2', '\x169A', '\x169B', '\a', '\x297', 
		'\x2', '\x2', '\x169B', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x169C', 
		'\x169D', '\a', '\x259', '\x2', '\x2', '\x169D', '\x16A1', '\a', '\x296', 
		'\x2', '\x2', '\x169E', '\x169F', '\x5', '\x28A', '\x146', '\x2', '\x169F', 
		'\x16A0', '\x5', '\x2E8', '\x175', '\x2', '\x16A0', '\x16A2', '\x3', '\x2', 
		'\x2', '\x2', '\x16A1', '\x169E', '\x3', '\x2', '\x2', '\x2', '\x16A1', 
		'\x16A2', '\x3', '\x2', '\x2', '\x2', '\x16A2', '\x16A9', '\x3', '\x2', 
		'\x2', '\x2', '\x16A3', '\x16A4', '\a', '\x29C', '\x2', '\x2', '\x16A4', 
		'\x16A5', '\x5', '\x28A', '\x146', '\x2', '\x16A5', '\x16A6', '\x5', '\x2E8', 
		'\x175', '\x2', '\x16A6', '\x16A8', '\x3', '\x2', '\x2', '\x2', '\x16A7', 
		'\x16A3', '\x3', '\x2', '\x2', '\x2', '\x16A8', '\x16AB', '\x3', '\x2', 
		'\x2', '\x2', '\x16A9', '\x16A7', '\x3', '\x2', '\x2', '\x2', '\x16A9', 
		'\x16AA', '\x3', '\x2', '\x2', '\x2', '\x16AA', '\x16AD', '\x3', '\x2', 
		'\x2', '\x2', '\x16AB', '\x16A9', '\x3', '\x2', '\x2', '\x2', '\x16AC', 
		'\x16AE', '\x5', '\x2D2', '\x16A', '\x2', '\x16AD', '\x16AC', '\x3', '\x2', 
		'\x2', '\x2', '\x16AD', '\x16AE', '\x3', '\x2', '\x2', '\x2', '\x16AE', 
		'\x16AF', '\x3', '\x2', '\x2', '\x2', '\x16AF', '\x16B0', '\a', '\x297', 
		'\x2', '\x2', '\x16B0', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x16B1', 
		'\x16BC', '\x5', '\x2F0', '\x179', '\x2', '\x16B2', '\x16B3', '\a', '\xC8', 
		'\x2', '\x2', '\x16B3', '\x16BD', '\a', '\x16C', '\x2', '\x2', '\x16B4', 
		'\x16B7', '\x5', '\x350', '\x1A9', '\x2', '\x16B5', '\x16B6', '\a', '\x17B', 
		'\x2', '\x2', '\x16B6', '\x16B8', '\x5', '\x28A', '\x146', '\x2', '\x16B7', 
		'\x16B5', '\x3', '\x2', '\x2', '\x2', '\x16B7', '\x16B8', '\x3', '\x2', 
		'\x2', '\x2', '\x16B8', '\x16BA', '\x3', '\x2', '\x2', '\x2', '\x16B9', 
		'\x16BB', '\x5', '\x2D2', '\x16A', '\x2', '\x16BA', '\x16B9', '\x3', '\x2', 
		'\x2', '\x2', '\x16BA', '\x16BB', '\x3', '\x2', '\x2', '\x2', '\x16BB', 
		'\x16BD', '\x3', '\x2', '\x2', '\x2', '\x16BC', '\x16B2', '\x3', '\x2', 
		'\x2', '\x2', '\x16BC', '\x16B4', '\x3', '\x2', '\x2', '\x2', '\x16BD', 
		'\x2D1', '\x3', '\x2', '\x2', '\x2', '\x16BE', '\x16BF', '\a', '\x80', 
		'\x2', '\x2', '\x16BF', '\x16C0', '\x5', '\x28A', '\x146', '\x2', '\x16C0', 
		'\x2D3', '\x3', '\x2', '\x2', '\x2', '\x16C1', '\x16C8', '\x5', '\x278', 
		'\x13D', '\x2', '\x16C2', '\x16C6', '\a', '\x14', '\x2', '\x2', '\x16C3', 
		'\x16C7', '\x5', '\x36E', '\x1B8', '\x2', '\x16C4', '\x16C5', '\a', '\xA7', 
		'\x2', '\x2', '\x16C5', '\x16C7', '\x5', '\x28A', '\x146', '\x2', '\x16C6', 
		'\x16C3', '\x3', '\x2', '\x2', '\x2', '\x16C6', '\x16C4', '\x3', '\x2', 
		'\x2', '\x2', '\x16C7', '\x16C9', '\x3', '\x2', '\x2', '\x2', '\x16C8', 
		'\x16C2', '\x3', '\x2', '\x2', '\x2', '\x16C8', '\x16C9', '\x3', '\x2', 
		'\x2', '\x2', '\x16C9', '\x2D5', '\x3', '\x2', '\x2', '\x2', '\x16CA', 
		'\x16CE', '\a', '\x245', '\x2', '\x2', '\x16CB', '\x16CC', '\a', '\x14F', 
		'\x2', '\x2', '\x16CC', '\x16CF', '\a', '\x23E', '\x2', '\x2', '\x16CD', 
		'\x16CF', '\x5', '\x278', '\x13D', '\x2', '\x16CE', '\x16CB', '\x3', '\x2', 
		'\x2', '\x2', '\x16CE', '\x16CD', '\x3', '\x2', '\x2', '\x2', '\x16CF', 
		'\x2D7', '\x3', '\x2', '\x2', '\x2', '\x16D0', '\x16D6', '\a', '\x1F6', 
		'\x2', '\x2', '\x16D1', '\x16D7', '\a', '\x262', '\x2', '\x2', '\x16D2', 
		'\x16D4', '\a', '\x14F', '\x2', '\x2', '\x16D3', '\x16D5', '\a', '\x23E', 
		'\x2', '\x2', '\x16D4', '\x16D3', '\x3', '\x2', '\x2', '\x2', '\x16D4', 
		'\x16D5', '\x3', '\x2', '\x2', '\x2', '\x16D5', '\x16D7', '\x3', '\x2', 
		'\x2', '\x2', '\x16D6', '\x16D1', '\x3', '\x2', '\x2', '\x2', '\x16D6', 
		'\x16D2', '\x3', '\x2', '\x2', '\x2', '\x16D7', '\x2D9', '\x3', '\x2', 
		'\x2', '\x2', '\x16D8', '\x16D9', '\a', '\x9E', '\x2', '\x2', '\x16D9', 
		'\x16DA', '\x5', '\x28A', '\x146', '\x2', '\x16DA', '\x2DB', '\x3', '\x2', 
		'\x2', '\x2', '\x16DB', '\x16DC', '\a', '\x245', '\x2', '\x2', '\x16DC', 
		'\x16DD', '\x5', '\x28A', '\x146', '\x2', '\x16DD', '\x2DD', '\x3', '\x2', 
		'\x2', '\x2', '\x16DE', '\x16DF', '\a', '\x14F', '\x2', '\x2', '\x16DF', 
		'\x16E7', '\a', '\xE5', '\x2', '\x2', '\x16E0', '\x16E4', '\a', '\xE5', 
		'\x2', '\x2', '\x16E1', '\x16E2', '\a', '\x1E9', '\x2', '\x2', '\x16E2', 
		'\x16E3', '\a', '\x2AA', '\x2', '\x2', '\x16E3', '\x16E5', '\x5', '\x28A', 
		'\x146', '\x2', '\x16E4', '\x16E1', '\x3', '\x2', '\x2', '\x2', '\x16E4', 
		'\x16E5', '\x3', '\x2', '\x2', '\x2', '\x16E5', '\x16E7', '\x3', '\x2', 
		'\x2', '\x2', '\x16E6', '\x16DE', '\x3', '\x2', '\x2', '\x2', '\x16E6', 
		'\x16E0', '\x3', '\x2', '\x2', '\x2', '\x16E7', '\x2DF', '\x3', '\x2', 
		'\x2', '\x2', '\x16E8', '\x16F1', '\a', '\x29D', '\x2', '\x2', '\x16E9', 
		'\x16F1', '\a', '\xB1', '\x2', '\x2', '\x16EA', '\x16F1', '\a', '\x2B1', 
		'\x2', '\x2', '\x16EB', '\x16EC', '\a', '\x1E3', '\x2', '\x2', '\x16EC', 
		'\x16F1', '\t', ']', '\x2', '\x2', '\x16ED', '\x16F1', '\a', '\x2B2', 
		'\x2', '\x2', '\x16EE', '\x16F1', '\x5', '\x2E2', '\x172', '\x2', '\x16EF', 
		'\x16F1', '\x5', '\x2E4', '\x173', '\x2', '\x16F0', '\x16E8', '\x3', '\x2', 
		'\x2', '\x2', '\x16F0', '\x16E9', '\x3', '\x2', '\x2', '\x2', '\x16F0', 
		'\x16EA', '\x3', '\x2', '\x2', '\x2', '\x16F0', '\x16EB', '\x3', '\x2', 
		'\x2', '\x2', '\x16F0', '\x16ED', '\x3', '\x2', '\x2', '\x2', '\x16F0', 
		'\x16EE', '\x3', '\x2', '\x2', '\x2', '\x16F0', '\x16EF', '\x3', '\x2', 
		'\x2', '\x2', '\x16F1', '\x2E1', '\x3', '\x2', '\x2', '\x2', '\x16F2', 
		'\x16F3', '\a', '\x24A', '\x2', '\x2', '\x16F3', '\x16F9', '\t', '^', 
		'\x2', '\x2', '\x16F4', '\x16F5', '\a', '\xB1', '\x2', '\x2', '\x16F5', 
		'\x16F6', '\t', '_', '\x2', '\x2', '\x16F6', '\x16FA', '\t', '`', '\x2', 
		'\x2', '\x16F7', '\x16F8', '\a', '\x62', '\x2', '\x2', '\x16F8', '\x16FA', 
		'\t', '\x61', '\x2', '\x2', '\x16F9', '\x16F4', '\x3', '\x2', '\x2', '\x2', 
		'\x16F9', '\x16F7', '\x3', '\x2', '\x2', '\x2', '\x16FA', '\x2E3', '\x3', 
		'\x2', '\x2', '\x2', '\x16FB', '\x16FC', '\a', '\x1DF', '\x2', '\x2', 
		'\x16FC', '\x1702', '\x5', '\x372', '\x1BA', '\x2', '\x16FD', '\x1703', 
		'\a', '\x292', '\x2', '\x2', '\x16FE', '\x1703', '\a', '\x165', '\x2', 
		'\x2', '\x16FF', '\x1703', '\a', '\x15E', '\x2', '\x2', '\x1700', '\x1703', 
		'\x5', '\x366', '\x1B4', '\x2', '\x1701', '\x1703', '\x5', '\x372', '\x1BA', 
		'\x2', '\x1702', '\x16FD', '\x3', '\x2', '\x2', '\x2', '\x1702', '\x16FE', 
		'\x3', '\x2', '\x2', '\x2', '\x1702', '\x16FF', '\x3', '\x2', '\x2', '\x2', 
		'\x1702', '\x1700', '\x3', '\x2', '\x2', '\x2', '\x1702', '\x1701', '\x3', 
		'\x2', '\x2', '\x2', '\x1703', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x1704', 
		'\x1706', '\t', '\x62', '\x2', '\x2', '\x1705', '\x1707', '\a', '\xC8', 
		'\x2', '\x2', '\x1706', '\x1705', '\x3', '\x2', '\x2', '\x2', '\x1706', 
		'\x1707', '\x3', '\x2', '\x2', '\x2', '\x1707', '\x1708', '\x3', '\x2', 
		'\x2', '\x2', '\x1708', '\x170A', '\a', '\x296', '\x2', '\x2', '\x1709', 
		'\x170B', '\x5', '\x276', '\x13C', '\x2', '\x170A', '\x1709', '\x3', '\x2', 
		'\x2', '\x2', '\x170A', '\x170B', '\x3', '\x2', '\x2', '\x2', '\x170B', 
		'\x170C', '\x3', '\x2', '\x2', '\x2', '\x170C', '\x170D', '\a', '\x297', 
		'\x2', '\x2', '\x170D', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x170E', 
		'\x1710', '\a', '\x14', '\x2', '\x2', '\x170F', '\x170E', '\x3', '\x2', 
		'\x2', '\x2', '\x170F', '\x1710', '\x3', '\x2', '\x2', '\x2', '\x1710', 
		'\x1713', '\x3', '\x2', '\x2', '\x2', '\x1711', '\x1714', '\x5', '\x36C', 
		'\x1B7', '\x2', '\x1712', '\x1714', '\x5', '\x36A', '\x1B6', '\x2', '\x1713', 
		'\x1711', '\x3', '\x2', '\x2', '\x2', '\x1713', '\x1712', '\x3', '\x2', 
		'\x2', '\x2', '\x1714', '\x1717', '\x3', '\x2', '\x2', '\x2', '\x1715', 
		'\x1717', '\a', '\x14', '\x2', '\x2', '\x1716', '\x170F', '\x3', '\x2', 
		'\x2', '\x2', '\x1716', '\x1715', '\x3', '\x2', '\x2', '\x2', '\x1717', 
		'\x2E9', '\x3', '\x2', '\x2', '\x2', '\x1718', '\x171B', '\x5', '\x36C', 
		'\x1B7', '\x2', '\x1719', '\x171B', '\x5', '\x36A', '\x1B6', '\x2', '\x171A', 
		'\x1718', '\x3', '\x2', '\x2', '\x2', '\x171A', '\x1719', '\x3', '\x2', 
		'\x2', '\x2', '\x171B', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\x171C', 
		'\x1721', '\a', '\x24C', '\x2', '\x2', '\x171D', '\x171E', '\a', 'l', 
		'\x2', '\x2', '\x171E', '\x171F', '\a', '\x15F', '\x2', '\x2', '\x171F', 
		'\x1722', '\x5', '\x328', '\x195', '\x2', '\x1720', '\x1722', '\x5', '\x278', 
		'\x13D', '\x2', '\x1721', '\x171D', '\x3', '\x2', '\x2', '\x2', '\x1721', 
		'\x1720', '\x3', '\x2', '\x2', '\x2', '\x1722', '\x2ED', '\x3', '\x2', 
		'\x2', '\x2', '\x1723', '\x1724', '\a', '\x37', '\x2', '\x2', '\x1724', 
		'\x1726', '\a', 'M', '\x2', '\x2', '\x1725', '\x1723', '\x3', '\x2', '\x2', 
		'\x2', '\x1725', '\x1726', '\x3', '\x2', '\x2', '\x2', '\x1726', '\x1727', 
		'\x3', '\x2', '\x2', '\x2', '\x1727', '\x172C', '\a', '\xFB', '\x2', '\x2', 
		'\x1728', '\x172A', '\a', '\x29C', '\x2', '\x2', '\x1729', '\x1728', '\x3', 
		'\x2', '\x2', '\x2', '\x1729', '\x172A', '\x3', '\x2', '\x2', '\x2', '\x172A', 
		'\x172B', '\x3', '\x2', '\x2', '\x2', '\x172B', '\x172D', '\x5', '\x324', 
		'\x193', '\x2', '\x172C', '\x1729', '\x3', '\x2', '\x2', '\x2', '\x172D', 
		'\x172E', '\x3', '\x2', '\x2', '\x2', '\x172E', '\x172C', '\x3', '\x2', 
		'\x2', '\x2', '\x172E', '\x172F', '\x3', '\x2', '\x2', '\x2', '\x172F', 
		'\x2EF', '\x3', '\x2', '\x2', '\x2', '\x1730', '\x1733', '\x5', '\x36C', 
		'\x1B7', '\x2', '\x1731', '\x1733', '\x5', '\x36A', '\x1B6', '\x2', '\x1732', 
		'\x1730', '\x3', '\x2', '\x2', '\x2', '\x1732', '\x1731', '\x3', '\x2', 
		'\x2', '\x2', '\x1733', '\x2F1', '\x3', '\x2', '\x2', '\x2', '\x1734', 
		'\x1735', '\x5', '\x36C', '\x1B7', '\x2', '\x1735', '\x2F3', '\x3', '\x2', 
		'\x2', '\x2', '\x1736', '\x1737', '\x5', '\x36C', '\x1B7', '\x2', '\x1737', 
		'\x2F5', '\x3', '\x2', '\x2', '\x2', '\x1738', '\x1739', '\x5', '\x36C', 
		'\x1B7', '\x2', '\x1739', '\x2F7', '\x3', '\x2', '\x2', '\x2', '\x173A', 
		'\x173B', '\x5', '\x36C', '\x1B7', '\x2', '\x173B', '\x2F9', '\x3', '\x2', 
		'\x2', '\x2', '\x173C', '\x173D', '\x5', '\x36C', '\x1B7', '\x2', '\x173D', 
		'\x2FB', '\x3', '\x2', '\x2', '\x2', '\x173E', '\x173F', '\x5', '\x36C', 
		'\x1B7', '\x2', '\x173F', '\x2FD', '\x3', '\x2', '\x2', '\x2', '\x1740', 
		'\x1745', '\x5', '\x36C', '\x1B7', '\x2', '\x1741', '\x1742', '\a', '\x28F', 
		'\x2', '\x2', '\x1742', '\x1744', '\x5', '\x36E', '\x1B8', '\x2', '\x1743', 
		'\x1741', '\x3', '\x2', '\x2', '\x2', '\x1744', '\x1747', '\x3', '\x2', 
		'\x2', '\x2', '\x1745', '\x1743', '\x3', '\x2', '\x2', '\x2', '\x1745', 
		'\x1746', '\x3', '\x2', '\x2', '\x2', '\x1746', '\x174A', '\x3', '\x2', 
		'\x2', '\x2', '\x1747', '\x1745', '\x3', '\x2', '\x2', '\x2', '\x1748', 
		'\x1749', '\a', '\x29E', '\x2', '\x2', '\x1749', '\x174B', '\x5', '\x32E', 
		'\x198', '\x2', '\x174A', '\x1748', '\x3', '\x2', '\x2', '\x2', '\x174A', 
		'\x174B', '\x3', '\x2', '\x2', '\x2', '\x174B', '\x2FF', '\x3', '\x2', 
		'\x2', '\x2', '\x174C', '\x174D', '\x5', '\x36C', '\x1B7', '\x2', '\x174D', 
		'\x301', '\x3', '\x2', '\x2', '\x2', '\x174E', '\x1751', '\x5', '\x36C', 
		'\x1B7', '\x2', '\x174F', '\x1750', '\a', '\x28F', '\x2', '\x2', '\x1750', 
		'\x1752', '\x5', '\x36E', '\x1B8', '\x2', '\x1751', '\x174F', '\x3', '\x2', 
		'\x2', '\x2', '\x1751', '\x1752', '\x3', '\x2', '\x2', '\x2', '\x1752', 
		'\x303', '\x3', '\x2', '\x2', '\x2', '\x1753', '\x1754', '\x5', '\x36C', 
		'\x1B7', '\x2', '\x1754', '\x305', '\x3', '\x2', '\x2', '\x2', '\x1755', 
		'\x1756', '\x5', '\x36C', '\x1B7', '\x2', '\x1756', '\x307', '\x3', '\x2', 
		'\x2', '\x2', '\x1757', '\x1758', '\x5', '\x36C', '\x1B7', '\x2', '\x1758', 
		'\x309', '\x3', '\x2', '\x2', '\x2', '\x1759', '\x175C', '\x5', '\x36C', 
		'\x1B7', '\x2', '\x175A', '\x175B', '\a', '\x28F', '\x2', '\x2', '\x175B', 
		'\x175D', '\x5', '\x36E', '\x1B8', '\x2', '\x175C', '\x175A', '\x3', '\x2', 
		'\x2', '\x2', '\x175C', '\x175D', '\x3', '\x2', '\x2', '\x2', '\x175D', 
		'\x30B', '\x3', '\x2', '\x2', '\x2', '\x175E', '\x1763', '\x5', '\x36C', 
		'\x1B7', '\x2', '\x175F', '\x1760', '\a', '\x28F', '\x2', '\x2', '\x1760', 
		'\x1762', '\x5', '\x36E', '\x1B8', '\x2', '\x1761', '\x175F', '\x3', '\x2', 
		'\x2', '\x2', '\x1762', '\x1765', '\x3', '\x2', '\x2', '\x2', '\x1763', 
		'\x1761', '\x3', '\x2', '\x2', '\x2', '\x1763', '\x1764', '\x3', '\x2', 
		'\x2', '\x2', '\x1764', '\x30D', '\x3', '\x2', '\x2', '\x2', '\x1765', 
		'\x1763', '\x3', '\x2', '\x2', '\x2', '\x1766', '\x1767', '\x5', '\x36C', 
		'\x1B7', '\x2', '\x1767', '\x30F', '\x3', '\x2', '\x2', '\x2', '\x1768', 
		'\x176A', '\x5', '\x36E', '\x1B8', '\x2', '\x1769', '\x176B', '\x5', '\xB6', 
		'\\', '\x2', '\x176A', '\x1769', '\x3', '\x2', '\x2', '\x2', '\x176A', 
		'\x176B', '\x3', '\x2', '\x2', '\x2', '\x176B', '\x311', '\x3', '\x2', 
		'\x2', '\x2', '\x176C', '\x176F', '\x5', '\x36E', '\x1B8', '\x2', '\x176D', 
		'\x176F', '\a', 'Y', '\x2', '\x2', '\x176E', '\x176C', '\x3', '\x2', '\x2', 
		'\x2', '\x176E', '\x176D', '\x3', '\x2', '\x2', '\x2', '\x176F', '\x313', 
		'\x3', '\x2', '\x2', '\x2', '\x1770', '\x1775', '\x5', '\x36C', '\x1B7', 
		'\x2', '\x1771', '\x1772', '\a', '\x28F', '\x2', '\x2', '\x1772', '\x1774', 
		'\x5', '\x36E', '\x1B8', '\x2', '\x1773', '\x1771', '\x3', '\x2', '\x2', 
		'\x2', '\x1774', '\x1777', '\x3', '\x2', '\x2', '\x2', '\x1775', '\x1773', 
		'\x3', '\x2', '\x2', '\x2', '\x1775', '\x1776', '\x3', '\x2', '\x2', '\x2', 
		'\x1776', '\x177A', '\x3', '\x2', '\x2', '\x2', '\x1777', '\x1775', '\x3', 
		'\x2', '\x2', '\x2', '\x1778', '\x1779', '\a', '\x29E', '\x2', '\x2', 
		'\x1779', '\x177B', '\x5', '\x32E', '\x198', '\x2', '\x177A', '\x1778', 
		'\x3', '\x2', '\x2', '\x2', '\x177A', '\x177B', '\x3', '\x2', '\x2', '\x2', 
		'\x177B', '\x315', '\x3', '\x2', '\x2', '\x2', '\x177C', '\x177D', '\x5', 
		'\x36E', '\x1B8', '\x2', '\x177D', '\x317', '\x3', '\x2', '\x2', '\x2', 
		'\x177E', '\x1783', '\x5', '\x36E', '\x1B8', '\x2', '\x177F', '\x1780', 
		'\a', '\x28F', '\x2', '\x2', '\x1780', '\x1782', '\x5', '\x36E', '\x1B8', 
		'\x2', '\x1781', '\x177F', '\x3', '\x2', '\x2', '\x2', '\x1782', '\x1785', 
		'\x3', '\x2', '\x2', '\x2', '\x1783', '\x1781', '\x3', '\x2', '\x2', '\x2', 
		'\x1783', '\x1784', '\x3', '\x2', '\x2', '\x2', '\x1784', '\x319', '\x3', 
		'\x2', '\x2', '\x2', '\x1785', '\x1783', '\x3', '\x2', '\x2', '\x2', '\x1786', 
		'\x178B', '\x5', '\x36E', '\x1B8', '\x2', '\x1787', '\x1788', '\a', '\x28F', 
		'\x2', '\x2', '\x1788', '\x178A', '\x5', '\x36E', '\x1B8', '\x2', '\x1789', 
		'\x1787', '\x3', '\x2', '\x2', '\x2', '\x178A', '\x178D', '\x3', '\x2', 
		'\x2', '\x2', '\x178B', '\x1789', '\x3', '\x2', '\x2', '\x2', '\x178B', 
		'\x178C', '\x3', '\x2', '\x2', '\x2', '\x178C', '\x31B', '\x3', '\x2', 
		'\x2', '\x2', '\x178D', '\x178B', '\x3', '\x2', '\x2', '\x2', '\x178E', 
		'\x1793', '\x5', '\x36C', '\x1B7', '\x2', '\x178F', '\x1790', '\a', '\x28F', 
		'\x2', '\x2', '\x1790', '\x1792', '\x5', '\x36E', '\x1B8', '\x2', '\x1791', 
		'\x178F', '\x3', '\x2', '\x2', '\x2', '\x1792', '\x1795', '\x3', '\x2', 
		'\x2', '\x2', '\x1793', '\x1791', '\x3', '\x2', '\x2', '\x2', '\x1793', 
		'\x1794', '\x3', '\x2', '\x2', '\x2', '\x1794', '\x31D', '\x3', '\x2', 
		'\x2', '\x2', '\x1795', '\x1793', '\x3', '\x2', '\x2', '\x2', '\x1796', 
		'\x1799', '\x5', '\x36C', '\x1B7', '\x2', '\x1797', '\x1798', '\a', '\x28F', 
		'\x2', '\x2', '\x1798', '\x179A', '\x5', '\x36E', '\x1B8', '\x2', '\x1799', 
		'\x1797', '\x3', '\x2', '\x2', '\x2', '\x1799', '\x179A', '\x3', '\x2', 
		'\x2', '\x2', '\x179A', '\x31F', '\x3', '\x2', '\x2', '\x2', '\x179B', 
		'\x179E', '\x5', '\x36C', '\x1B7', '\x2', '\x179C', '\x179D', '\a', '\x28F', 
		'\x2', '\x2', '\x179D', '\x179F', '\x5', '\x36E', '\x1B8', '\x2', '\x179E', 
		'\x179C', '\x3', '\x2', '\x2', '\x2', '\x179E', '\x179F', '\x3', '\x2', 
		'\x2', '\x2', '\x179F', '\x321', '\x3', '\x2', '\x2', '\x2', '\x17A0', 
		'\x17A3', '\x5', '\x36C', '\x1B7', '\x2', '\x17A1', '\x17A2', '\a', '\x28F', 
		'\x2', '\x2', '\x17A2', '\x17A4', '\x5', '\x36E', '\x1B8', '\x2', '\x17A3', 
		'\x17A1', '\x3', '\x2', '\x2', '\x2', '\x17A3', '\x17A4', '\x3', '\x2', 
		'\x2', '\x2', '\x17A4', '\x323', '\x3', '\x2', '\x2', '\x2', '\x17A5', 
		'\x17A6', '\a', '\x2AD', '\x2', '\x2', '\x17A6', '\x17A8', '\x5', '\x334', 
		'\x19B', '\x2', '\x17A7', '\x17A5', '\x3', '\x2', '\x2', '\x2', '\x17A7', 
		'\x17A8', '\x3', '\x2', '\x2', '\x2', '\x17A8', '\x17A9', '\x3', '\x2', 
		'\x2', '\x2', '\x17A9', '\x17AC', '\x5', '\x36E', '\x1B8', '\x2', '\x17AA', 
		'\x17AB', '\a', '\x28F', '\x2', '\x2', '\x17AB', '\x17AD', '\x5', '\x36E', 
		'\x1B8', '\x2', '\x17AC', '\x17AA', '\x3', '\x2', '\x2', '\x2', '\x17AC', 
		'\x17AD', '\x3', '\x2', '\x2', '\x2', '\x17AD', '\x17B0', '\x3', '\x2', 
		'\x2', '\x2', '\x17AE', '\x17B0', '\x5', '\x358', '\x1AD', '\x2', '\x17AF', 
		'\x17A7', '\x3', '\x2', '\x2', '\x2', '\x17AF', '\x17AE', '\x3', '\x2', 
		'\x2', '\x2', '\x17B0', '\x325', '\x3', '\x2', '\x2', '\x2', '\x17B1', 
		'\x17B4', '\x5', '\x36C', '\x1B7', '\x2', '\x17B2', '\x17B3', '\a', '\x28F', 
		'\x2', '\x2', '\x17B3', '\x17B5', '\x5', '\x36E', '\x1B8', '\x2', '\x17B4', 
		'\x17B2', '\x3', '\x2', '\x2', '\x2', '\x17B4', '\x17B5', '\x3', '\x2', 
		'\x2', '\x2', '\x17B5', '\x327', '\x3', '\x2', '\x2', '\x2', '\x17B6', 
		'\x17B9', '\x5', '\x35A', '\x1AE', '\x2', '\x17B7', '\x17B9', '\x5', '\x358', 
		'\x1AD', '\x2', '\x17B8', '\x17B6', '\x3', '\x2', '\x2', '\x2', '\x17B8', 
		'\x17B7', '\x3', '\x2', '\x2', '\x2', '\x17B9', '\x329', '\x3', '\x2', 
		'\x2', '\x2', '\x17BA', '\x17BD', '\x5', '\x36C', '\x1B7', '\x2', '\x17BB', 
		'\x17BD', '\x5', '\x358', '\x1AD', '\x2', '\x17BC', '\x17BA', '\x3', '\x2', 
		'\x2', '\x2', '\x17BC', '\x17BB', '\x3', '\x2', '\x2', '\x2', '\x17BD', 
		'\x32B', '\x3', '\x2', '\x2', '\x2', '\x17BE', '\x17C1', '\x5', '\x36C', 
		'\x1B7', '\x2', '\x17BF', '\x17C0', '\a', '\x28F', '\x2', '\x2', '\x17C0', 
		'\x17C2', '\x5', '\x36E', '\x1B8', '\x2', '\x17C1', '\x17BF', '\x3', '\x2', 
		'\x2', '\x2', '\x17C1', '\x17C2', '\x3', '\x2', '\x2', '\x2', '\x17C2', 
		'\x32D', '\x3', '\x2', '\x2', '\x2', '\x17C3', '\x17C4', '\x5', '\x36C', 
		'\x1B7', '\x2', '\x17C4', '\x32F', '\x3', '\x2', '\x2', '\x2', '\x17C5', 
		'\x17CA', '\x5', '\x36C', '\x1B7', '\x2', '\x17C6', '\x17C7', '\a', '\x28F', 
		'\x2', '\x2', '\x17C7', '\x17C9', '\x5', '\x36E', '\x1B8', '\x2', '\x17C8', 
		'\x17C6', '\x3', '\x2', '\x2', '\x2', '\x17C9', '\x17CC', '\x3', '\x2', 
		'\x2', '\x2', '\x17CA', '\x17C8', '\x3', '\x2', '\x2', '\x2', '\x17CA', 
		'\x17CB', '\x3', '\x2', '\x2', '\x2', '\x17CB', '\x331', '\x3', '\x2', 
		'\x2', '\x2', '\x17CC', '\x17CA', '\x3', '\x2', '\x2', '\x2', '\x17CD', 
		'\x17D0', '\x5', '\x36C', '\x1B7', '\x2', '\x17CE', '\x17CF', '\a', '\x28F', 
		'\x2', '\x2', '\x17CF', '\x17D1', '\x5', '\x36E', '\x1B8', '\x2', '\x17D0', 
		'\x17CE', '\x3', '\x2', '\x2', '\x2', '\x17D0', '\x17D1', '\x3', '\x2', 
		'\x2', '\x2', '\x17D1', '\x17D5', '\x3', '\x2', '\x2', '\x2', '\x17D2', 
		'\x17D3', '\a', '\x29E', '\x2', '\x2', '\x17D3', '\x17D6', '\x5', '\x32E', 
		'\x198', '\x2', '\x17D4', '\x17D6', '\x5', '\x2E6', '\x174', '\x2', '\x17D5', 
		'\x17D2', '\x3', '\x2', '\x2', '\x2', '\x17D5', '\x17D4', '\x3', '\x2', 
		'\x2', '\x2', '\x17D5', '\x17D6', '\x3', '\x2', '\x2', '\x2', '\x17D6', 
		'\x333', '\x3', '\x2', '\x2', '\x2', '\x17D7', '\x17DC', '\x5', '\x36E', 
		'\x1B8', '\x2', '\x17D8', '\x17D9', '\a', '\x28F', '\x2', '\x2', '\x17D9', 
		'\x17DB', '\x5', '\x36E', '\x1B8', '\x2', '\x17DA', '\x17D8', '\x3', '\x2', 
		'\x2', '\x2', '\x17DB', '\x17DE', '\x3', '\x2', '\x2', '\x2', '\x17DC', 
		'\x17DA', '\x3', '\x2', '\x2', '\x2', '\x17DC', '\x17DD', '\x3', '\x2', 
		'\x2', '\x2', '\x17DD', '\x335', '\x3', '\x2', '\x2', '\x2', '\x17DE', 
		'\x17DC', '\x3', '\x2', '\x2', '\x2', '\x17DF', '\x17E0', '\x5', '\x36C', 
		'\x1B7', '\x2', '\x17E0', '\x337', '\x3', '\x2', '\x2', '\x2', '\x17E1', 
		'\x17E2', '\x5', '\x36E', '\x1B8', '\x2', '\x17E2', '\x339', '\x3', '\x2', 
		'\x2', '\x2', '\x17E3', '\x17E4', '\x5', '\x36E', '\x1B8', '\x2', '\x17E4', 
		'\x33B', '\x3', '\x2', '\x2', '\x2', '\x17E5', '\x17E6', '\x5', '\x36E', 
		'\x1B8', '\x2', '\x17E6', '\x33D', '\x3', '\x2', '\x2', '\x2', '\x17E7', 
		'\x1800', '\x5', '\x332', '\x19A', '\x2', '\x17E8', '\x17ED', '\a', '\x239', 
		'\x2', '\x2', '\x17E9', '\x17EB', '\a', '\x29C', '\x2', '\x2', '\x17EA', 
		'\x17E9', '\x3', '\x2', '\x2', '\x2', '\x17EA', '\x17EB', '\x3', '\x2', 
		'\x2', '\x2', '\x17EB', '\x17EC', '\x3', '\x2', '\x2', '\x2', '\x17EC', 
		'\x17EE', '\x5', '\x33C', '\x19F', '\x2', '\x17ED', '\x17EA', '\x3', '\x2', 
		'\x2', '\x2', '\x17EE', '\x17EF', '\x3', '\x2', '\x2', '\x2', '\x17EF', 
		'\x17ED', '\x3', '\x2', '\x2', '\x2', '\x17EF', '\x17F0', '\x3', '\x2', 
		'\x2', '\x2', '\x17F0', '\x1800', '\x3', '\x2', '\x2', '\x2', '\x17F1', 
		'\x17F2', '\a', '\x8C', '\x2', '\x2', '\x17F2', '\x1800', '\x5', '\x33A', 
		'\x19E', '\x2', '\x17F3', '\x17F4', '\a', '\x96', '\x2', '\x2', '\x17F4', 
		'\x1800', '\x5', '\x338', '\x19D', '\x2', '\x17F5', '\x17F6', '\a', '\x12E', 
		'\x2', '\x2', '\x17F6', '\x17F7', '\a', '\x133', '\x2', '\x2', '\x17F7', 
		'\x1800', '\x5', '\x338', '\x19D', '\x2', '\x17F8', '\x17F9', '\a', '\x100', 
		'\x2', '\x2', '\x17F9', '\x17FA', '\t', '\x63', '\x2', '\x2', '\x17FA', 
		'\x1800', '\x5', '\x338', '\x19D', '\x2', '\x17FB', '\x17FC', '\a', '\x1F5', 
		'\x2', '\x2', '\x17FC', '\x17FD', '\a', '\x223', '\x2', '\x2', '\x17FD', 
		'\x17FE', '\a', '\x199', '\x2', '\x2', '\x17FE', '\x1800', '\x5', '\x338', 
		'\x19D', '\x2', '\x17FF', '\x17E7', '\x3', '\x2', '\x2', '\x2', '\x17FF', 
		'\x17E8', '\x3', '\x2', '\x2', '\x2', '\x17FF', '\x17F1', '\x3', '\x2', 
		'\x2', '\x2', '\x17FF', '\x17F3', '\x3', '\x2', '\x2', '\x2', '\x17FF', 
		'\x17F5', '\x3', '\x2', '\x2', '\x2', '\x17FF', '\x17F8', '\x3', '\x2', 
		'\x2', '\x2', '\x17FF', '\x17FB', '\x3', '\x2', '\x2', '\x2', '\x1800', 
		'\x33F', '\x3', '\x2', '\x2', '\x2', '\x1801', '\x1803', '\a', '\x29C', 
		'\x2', '\x2', '\x1802', '\x1801', '\x3', '\x2', '\x2', '\x2', '\x1802', 
		'\x1803', '\x3', '\x2', '\x2', '\x2', '\x1803', '\x1804', '\x3', '\x2', 
		'\x2', '\x2', '\x1804', '\x1806', '\x5', '\x330', '\x199', '\x2', '\x1805', 
		'\x1802', '\x3', '\x2', '\x2', '\x2', '\x1806', '\x1807', '\x3', '\x2', 
		'\x2', '\x2', '\x1807', '\x1805', '\x3', '\x2', '\x2', '\x2', '\x1807', 
		'\x1808', '\x3', '\x2', '\x2', '\x2', '\x1808', '\x341', '\x3', '\x2', 
		'\x2', '\x2', '\x1809', '\x180A', '\a', '\x296', '\x2', '\x2', '\x180A', 
		'\x180B', '\x5', '\x340', '\x1A1', '\x2', '\x180B', '\x180C', '\a', '\x297', 
		'\x2', '\x2', '\x180C', '\x343', '\x3', '\x2', '\x2', '\x2', '\x180D', 
		'\x180E', '\a', '\x103', '\x2', '\x2', '\x180E', '\x180F', '\a', '\x296', 
		'\x2', '\x2', '\x180F', '\x1810', '\a', '\x26C', '\x2', '\x2', '\x1810', 
		'\x1811', '\t', '@', '\x2', '\x2', '\x1811', '\x1812', '\x5', '\x228', 
		'\x115', '\x2', '\x1812', '\x1814', '\a', '\x297', '\x2', '\x2', '\x1813', 
		'\x1815', '\x5', '\x2B8', '\x15D', '\x2', '\x1814', '\x1813', '\x3', '\x2', 
		'\x2', '\x2', '\x1814', '\x1815', '\x3', '\x2', '\x2', '\x2', '\x1815', 
		'\x345', '\x3', '\x2', '\x2', '\x2', '\x1816', '\x181D', '\a', '\x296', 
		'\x2', '\x2', '\x1817', '\x1819', '\a', '\x29C', '\x2', '\x2', '\x1818', 
		'\x1817', '\x3', '\x2', '\x2', '\x2', '\x1818', '\x1819', '\x3', '\x2', 
		'\x2', '\x2', '\x1819', '\x181A', '\x3', '\x2', '\x2', '\x2', '\x181A', 
		'\x181C', '\x5', '\x34E', '\x1A8', '\x2', '\x181B', '\x1818', '\x3', '\x2', 
		'\x2', '\x2', '\x181C', '\x181F', '\x3', '\x2', '\x2', '\x2', '\x181D', 
		'\x181B', '\x3', '\x2', '\x2', '\x2', '\x181D', '\x181E', '\x3', '\x2', 
		'\x2', '\x2', '\x181E', '\x1820', '\x3', '\x2', '\x2', '\x2', '\x181F', 
		'\x181D', '\x3', '\x2', '\x2', '\x2', '\x1820', '\x1822', '\a', '\x297', 
		'\x2', '\x2', '\x1821', '\x1823', '\x5', '\x344', '\x1A3', '\x2', '\x1822', 
		'\x1821', '\x3', '\x2', '\x2', '\x2', '\x1822', '\x1823', '\x3', '\x2', 
		'\x2', '\x2', '\x1823', '\x347', '\x3', '\x2', '\x2', '\x2', '\x1824', 
		'\x182E', '\a', '\x296', '\x2', '\x2', '\x1825', '\x1827', '\a', '\x29C', 
		'\x2', '\x2', '\x1826', '\x1825', '\x3', '\x2', '\x2', '\x2', '\x1826', 
		'\x1827', '\x3', '\x2', '\x2', '\x2', '\x1827', '\x1828', '\x3', '\x2', 
		'\x2', '\x2', '\x1828', '\x182A', '\x5', '\x34E', '\x1A8', '\x2', '\x1829', 
		'\x182B', '\x5', '\x34C', '\x1A7', '\x2', '\x182A', '\x1829', '\x3', '\x2', 
		'\x2', '\x2', '\x182A', '\x182B', '\x3', '\x2', '\x2', '\x2', '\x182B', 
		'\x182D', '\x3', '\x2', '\x2', '\x2', '\x182C', '\x1826', '\x3', '\x2', 
		'\x2', '\x2', '\x182D', '\x1830', '\x3', '\x2', '\x2', '\x2', '\x182E', 
		'\x182C', '\x3', '\x2', '\x2', '\x2', '\x182E', '\x182F', '\x3', '\x2', 
		'\x2', '\x2', '\x182F', '\x1831', '\x3', '\x2', '\x2', '\x2', '\x1830', 
		'\x182E', '\x3', '\x2', '\x2', '\x2', '\x1831', '\x1833', '\a', '\x297', 
		'\x2', '\x2', '\x1832', '\x1834', '\x5', '\x344', '\x1A3', '\x2', '\x1833', 
		'\x1832', '\x3', '\x2', '\x2', '\x2', '\x1833', '\x1834', '\x3', '\x2', 
		'\x2', '\x2', '\x1834', '\x349', '\x3', '\x2', '\x2', '\x2', '\x1835', 
		'\x1836', '\a', '\x296', '\x2', '\x2', '\x1836', '\x1843', '\x5', '\x330', 
		'\x199', '\x2', '\x1837', '\x183A', '\a', '\x29C', '\x2', '\x2', '\x1838', 
		'\x183B', '\x5', '\x366', '\x1B4', '\x2', '\x1839', '\x183B', '\a', '\x157', 
		'\x2', '\x2', '\x183A', '\x1838', '\x3', '\x2', '\x2', '\x2', '\x183A', 
		'\x1839', '\x3', '\x2', '\x2', '\x2', '\x183B', '\x1841', '\x3', '\x2', 
		'\x2', '\x2', '\x183C', '\x183F', '\a', '\x29C', '\x2', '\x2', '\x183D', 
		'\x1840', '\x5', '\x366', '\x1B4', '\x2', '\x183E', '\x1840', '\a', '\x157', 
		'\x2', '\x2', '\x183F', '\x183D', '\x3', '\x2', '\x2', '\x2', '\x183F', 
		'\x183E', '\x3', '\x2', '\x2', '\x2', '\x1840', '\x1842', '\x3', '\x2', 
		'\x2', '\x2', '\x1841', '\x183C', '\x3', '\x2', '\x2', '\x2', '\x1841', 
		'\x1842', '\x3', '\x2', '\x2', '\x2', '\x1842', '\x1844', '\x3', '\x2', 
		'\x2', '\x2', '\x1843', '\x1837', '\x3', '\x2', '\x2', '\x2', '\x1843', 
		'\x1844', '\x3', '\x2', '\x2', '\x2', '\x1844', '\x1845', '\x3', '\x2', 
		'\x2', '\x2', '\x1845', '\x1856', '\a', '\x23B', '\x2', '\x2', '\x1846', 
		'\x1847', '\x5', '\x332', '\x19A', '\x2', '\x1847', '\x1848', '\a', '\x28F', 
		'\x2', '\x2', '\x1848', '\x1849', '\a', '\x299', '\x2', '\x2', '\x1849', 
		'\x1857', '\x3', '\x2', '\x2', '\x2', '\x184A', '\x1857', '\a', '\x299', 
		'\x2', '\x2', '\x184B', '\x184D', '\a', '\x29C', '\x2', '\x2', '\x184C', 
		'\x184B', '\x3', '\x2', '\x2', '\x2', '\x184C', '\x184D', '\x3', '\x2', 
		'\x2', '\x2', '\x184D', '\x184E', '\x3', '\x2', '\x2', '\x2', '\x184E', 
		'\x1850', '\x5', '\x278', '\x13D', '\x2', '\x184F', '\x1851', '\x5', '\x2E8', 
		'\x175', '\x2', '\x1850', '\x184F', '\x3', '\x2', '\x2', '\x2', '\x1850', 
		'\x1851', '\x3', '\x2', '\x2', '\x2', '\x1851', '\x1853', '\x3', '\x2', 
		'\x2', '\x2', '\x1852', '\x184C', '\x3', '\x2', '\x2', '\x2', '\x1853', 
		'\x1854', '\x3', '\x2', '\x2', '\x2', '\x1854', '\x1852', '\x3', '\x2', 
		'\x2', '\x2', '\x1854', '\x1855', '\x3', '\x2', '\x2', '\x2', '\x1855', 
		'\x1857', '\x3', '\x2', '\x2', '\x2', '\x1856', '\x1846', '\x3', '\x2', 
		'\x2', '\x2', '\x1856', '\x184A', '\x3', '\x2', '\x2', '\x2', '\x1856', 
		'\x1852', '\x3', '\x2', '\x2', '\x2', '\x1857', '\x1858', '\x3', '\x2', 
		'\x2', '\x2', '\x1858', '\x185A', '\a', '\x297', '\x2', '\x2', '\x1859', 
		'\x185B', '\x5', '\x344', '\x1A3', '\x2', '\x185A', '\x1859', '\x3', '\x2', 
		'\x2', '\x2', '\x185A', '\x185B', '\x3', '\x2', '\x2', '\x2', '\x185B', 
		'\x34B', '\x3', '\x2', '\x2', '\x2', '\x185C', '\x185D', '\t', '\x64', 
		'\x2', '\x2', '\x185D', '\x185E', '\a', '\x158', '\x2', '\x2', '\x185E', 
		'\x34D', '\x3', '\x2', '\x2', '\x2', '\x185F', '\x1860', '\x5', '\x36C', 
		'\x1B7', '\x2', '\x1860', '\x1861', '\a', '\x2AA', '\x2', '\x2', '\x1861', 
		'\x1862', '\a', '\x2A5', '\x2', '\x2', '\x1862', '\x1864', '\x3', '\x2', 
		'\x2', '\x2', '\x1863', '\x185F', '\x3', '\x2', '\x2', '\x2', '\x1863', 
		'\x1864', '\x3', '\x2', '\x2', '\x2', '\x1864', '\x1865', '\x3', '\x2', 
		'\x2', '\x2', '\x1865', '\x1866', '\x5', '\x278', '\x13D', '\x2', '\x1866', 
		'\x34F', '\x3', '\x2', '\x2', '\x2', '\x1867', '\x1870', '\x5', '\x352', 
		'\x1AA', '\x2', '\x1868', '\x186A', '\a', '\x1AA', '\x2', '\x2', '\x1869', 
		'\x1868', '\x3', '\x2', '\x2', '\x2', '\x1869', '\x186A', '\x3', '\x2', 
		'\x2', '\x2', '\x186A', '\x186B', '\x3', '\x2', '\x2', '\x2', '\x186B', 
		'\x186D', '\x5', '\x318', '\x18D', '\x2', '\x186C', '\x186E', '\t', '\x65', 
		'\x2', '\x2', '\x186D', '\x186C', '\x3', '\x2', '\x2', '\x2', '\x186D', 
		'\x186E', '\x3', '\x2', '\x2', '\x2', '\x186E', '\x1870', '\x3', '\x2', 
		'\x2', '\x2', '\x186F', '\x1867', '\x3', '\x2', '\x2', '\x2', '\x186F', 
		'\x1869', '\x3', '\x2', '\x2', '\x2', '\x1870', '\x351', '\x3', '\x2', 
		'\x2', '\x2', '\x1871', '\x1873', '\x5', '\x356', '\x1AC', '\x2', '\x1872', 
		'\x1874', '\x5', '\x354', '\x1AB', '\x2', '\x1873', '\x1872', '\x3', '\x2', 
		'\x2', '\x2', '\x1873', '\x1874', '\x3', '\x2', '\x2', '\x2', '\x1874', 
		'\x187E', '\x3', '\x2', '\x2', '\x2', '\x1875', '\x1877', '\a', '\x24F', 
		'\x2', '\x2', '\x1876', '\x1878', '\a', '\x114', '\x2', '\x2', '\x1877', 
		'\x1876', '\x3', '\x2', '\x2', '\x2', '\x1877', '\x1878', '\x3', '\x2', 
		'\x2', '\x2', '\x1878', '\x1879', '\x3', '\x2', '\x2', '\x2', '\x1879', 
		'\x187A', '\a', '\x21A', '\x2', '\x2', '\x187A', '\x187F', '\a', '\x264', 
		'\x2', '\x2', '\x187B', '\x187C', '\a', '\x42', '\x2', '\x2', '\x187C', 
		'\x187D', '\a', '\x1DF', '\x2', '\x2', '\x187D', '\x187F', '\x5', '\x334', 
		'\x19B', '\x2', '\x187E', '\x1875', '\x3', '\x2', '\x2', '\x2', '\x187E', 
		'\x187B', '\x3', '\x2', '\x2', '\x2', '\x187E', '\x187F', '\x3', '\x2', 
		'\x2', '\x2', '\x187F', '\x1891', '\x3', '\x2', '\x2', '\x2', '\x1880', 
		'\x1881', '\a', '\xF9', '\x2', '\x2', '\x1881', '\x1886', '\t', '\x66', 
		'\x2', '\x2', '\x1882', '\x1883', '\a', '\x296', '\x2', '\x2', '\x1883', 
		'\x1884', '\x5', '\x278', '\x13D', '\x2', '\x1884', '\x1885', '\a', '\x297', 
		'\x2', '\x2', '\x1885', '\x1887', '\x3', '\x2', '\x2', '\x2', '\x1886', 
		'\x1882', '\x3', '\x2', '\x2', '\x2', '\x1886', '\x1887', '\x3', '\x2', 
		'\x2', '\x2', '\x1887', '\x1888', '\x3', '\x2', '\x2', '\x2', '\x1888', 
		'\x1889', '\a', '\x21F', '\x2', '\x2', '\x1889', '\x188E', '\t', 'g', 
		'\x2', '\x2', '\x188A', '\x188B', '\a', '\x296', '\x2', '\x2', '\x188B', 
		'\x188C', '\x5', '\x278', '\x13D', '\x2', '\x188C', '\x188D', '\a', '\x297', 
		'\x2', '\x2', '\x188D', '\x188F', '\x3', '\x2', '\x2', '\x2', '\x188E', 
		'\x188A', '\x3', '\x2', '\x2', '\x2', '\x188E', '\x188F', '\x3', '\x2', 
		'\x2', '\x2', '\x188F', '\x1891', '\x3', '\x2', '\x2', '\x2', '\x1890', 
		'\x1871', '\x3', '\x2', '\x2', '\x2', '\x1890', '\x1880', '\x3', '\x2', 
		'\x2', '\x2', '\x1891', '\x353', '\x3', '\x2', '\x2', '\x2', '\x1892', 
		'\x1893', '\a', '\x296', '\x2', '\x2', '\x1893', '\x1896', '\x5', '\x366', 
		'\x1B4', '\x2', '\x1894', '\x1895', '\a', '\x29C', '\x2', '\x2', '\x1895', 
		'\x1897', '\x5', '\x366', '\x1B4', '\x2', '\x1896', '\x1894', '\x3', '\x2', 
		'\x2', '\x2', '\x1896', '\x1897', '\x3', '\x2', '\x2', '\x2', '\x1897', 
		'\x1899', '\x3', '\x2', '\x2', '\x2', '\x1898', '\x189A', '\t', 'h', '\x2', 
		'\x2', '\x1899', '\x1898', '\x3', '\x2', '\x2', '\x2', '\x1899', '\x189A', 
		'\x3', '\x2', '\x2', '\x2', '\x189A', '\x189B', '\x3', '\x2', '\x2', '\x2', 
		'\x189B', '\x189C', '\a', '\x297', '\x2', '\x2', '\x189C', '\x355', '\x3', 
		'\x2', '\x2', '\x2', '\x189D', '\x18DA', '\a', '-', '\x2', '\x2', '\x189E', 
		'\x18DA', '\a', '\x189', '\x2', '\x2', '\x189F', '\x18DA', '\a', '\x13B', 
		'\x2', '\x2', '\x18A0', '\x18DA', '\a', ',', '\x2', '\x2', '\x18A1', '\x18DA', 
		'\a', '+', '\x2', '\x2', '\x18A2', '\x18DA', '\a', '\x13C', '\x2', '\x2', 
		'\x18A3', '\x18DA', '\a', '\x18D', '\x2', '\x2', '\x18A4', '\x18DA', '\a', 
		'\x18C', '\x2', '\x2', '\x18A5', '\x18DA', '\a', '\x1E6', '\x2', '\x2', 
		'\x18A6', '\x18DA', '\a', '\x1E7', '\x2', '\x2', '\x18A7', '\x18DA', '\a', 
		'\x15B', '\x2', '\x2', '\x18A8', '\x18DA', '\a', '{', '\x2', '\x2', '\x18A9', 
		'\x18DA', '\a', '\xF7', '\x2', '\x2', '\x18AA', '\x18DA', '\a', '\xFA', 
		'\x2', '\x2', '\x18AB', '\x18DA', '\a', '\x15A', '\x2', '\x2', '\x18AC', 
		'\x18DA', '\a', '\x1EC', '\x2', '\x2', '\x18AD', '\x18DA', '\a', '\x159', 
		'\x2', '\x2', '\x18AE', '\x18DA', '\a', '|', '\x2', '\x2', '\x18AF', '\x18B1', 
		'\a', '\x92', '\x2', '\x2', '\x18B0', '\x18B2', '\a', '\x190', '\x2', 
		'\x2', '\x18B1', '\x18B0', '\x3', '\x2', '\x2', '\x2', '\x18B1', '\x18B2', 
		'\x3', '\x2', '\x2', '\x2', '\x18B2', '\x18DA', '\x3', '\x2', '\x2', '\x2', 
		'\x18B3', '\x18DA', '\a', '\xC1', '\x2', '\x2', '\x18B4', '\x18DA', '\a', 
		'\x1A3', '\x2', '\x2', '\x18B5', '\x18DA', '\a', '\x13F', '\x2', '\x2', 
		'\x18B6', '\x18B8', '\a', '\x11C', '\x2', '\x2', '\x18B7', '\x18B9', '\a', 
		'\x1A1', '\x2', '\x2', '\x18B8', '\x18B7', '\x3', '\x2', '\x2', '\x2', 
		'\x18B8', '\x18B9', '\x3', '\x2', '\x2', '\x2', '\x18B9', '\x18DA', '\x3', 
		'\x2', '\x2', '\x2', '\x18BA', '\x18DA', '\a', '\x43', '\x2', '\x2', '\x18BB', 
		'\x18DA', '\a', '\x42', '\x2', '\x2', '\x18BC', '\x18DA', '\a', '\x23F', 
		'\x2', '\x2', '\x18BD', '\x18DA', '\a', '\x240', '\x2', '\x2', '\x18BE', 
		'\x18DA', '\a', '\x1FF', '\x2', '\x2', '\x18BF', '\x18DA', '\a', '\x1A1', 
		'\x2', '\x2', '\x18C0', '\x18DA', '\a', '\x32', '\x2', '\x2', '\x18C1', 
		'\x18DA', '\a', 't', '\x2', '\x2', '\x18C2', '\x18DA', '\a', '\x1C6', 
		'\x2', '\x2', '\x18C3', '\x18DA', '\a', '\x237', '\x2', '\x2', '\x18C4', 
		'\x18DA', '\a', '\x261', '\x2', '\x2', '\x18C5', '\x18DA', '\a', '\x136', 
		'\x2', '\x2', '\x18C6', '\x18DA', '\a', 'u', '\x2', '\x2', '\x18C7', '\x18DA', 
		'\a', '\xDB', '\x2', '\x2', '\x18C8', '\x18DA', '\a', '\x130', '\x2', 
		'\x2', '\x18C9', '\x18DA', '\a', '\x1D3', '\x2', '\x2', '\x18CA', '\x18DA', 
		'\a', '\x21C', '\x2', '\x2', '\x18CB', '\x18DA', '\a', '\x21D', '\x2', 
		'\x2', '\x18CC', '\x18DA', '\a', '\x21E', '\x2', '\x2', '\x18CD', '\x18DA', 
		'\a', '\x21B', '\x2', '\x2', '\x18CE', '\x18DA', '\a', '\x217', '\x2', 
		'\x2', '\x18CF', '\x18DA', '\a', '\x219', '\x2', '\x2', '\x18D0', '\x18DA', 
		'\a', '\x218', '\x2', '\x2', '\x18D1', '\x18DA', '\a', '\x216', '\x2', 
		'\x2', '\x18D2', '\x18DA', '\a', '\x263', '\x2', '\x2', '\x18D3', '\x18DA', 
		'\a', '\x94', '\x2', '\x2', '\x18D4', '\x18DA', '\a', ')', '\x2', '\x2', 
		'\x18D5', '\x18DA', '\a', '.', '\x2', '\x2', '\x18D6', '\x18DA', '\a', 
		'I', '\x2', '\x2', '\x18D7', '\x18DA', '\a', '\x140', '\x2', '\x2', '\x18D8', 
		'\x18DA', '\a', '\x132', '\x2', '\x2', '\x18D9', '\x189D', '\x3', '\x2', 
		'\x2', '\x2', '\x18D9', '\x189E', '\x3', '\x2', '\x2', '\x2', '\x18D9', 
		'\x189F', '\x3', '\x2', '\x2', '\x2', '\x18D9', '\x18A0', '\x3', '\x2', 
		'\x2', '\x2', '\x18D9', '\x18A1', '\x3', '\x2', '\x2', '\x2', '\x18D9', 
		'\x18A2', '\x3', '\x2', '\x2', '\x2', '\x18D9', '\x18A3', '\x3', '\x2', 
		'\x2', '\x2', '\x18D9', '\x18A4', '\x3', '\x2', '\x2', '\x2', '\x18D9', 
		'\x18A5', '\x3', '\x2', '\x2', '\x2', '\x18D9', '\x18A6', '\x3', '\x2', 
		'\x2', '\x2', '\x18D9', '\x18A7', '\x3', '\x2', '\x2', '\x2', '\x18D9', 
		'\x18A8', '\x3', '\x2', '\x2', '\x2', '\x18D9', '\x18A9', '\x3', '\x2', 
		'\x2', '\x2', '\x18D9', '\x18AA', '\x3', '\x2', '\x2', '\x2', '\x18D9', 
		'\x18AB', '\x3', '\x2', '\x2', '\x2', '\x18D9', '\x18AC', '\x3', '\x2', 
		'\x2', '\x2', '\x18D9', '\x18AD', '\x3', '\x2', '\x2', '\x2', '\x18D9', 
		'\x18AE', '\x3', '\x2', '\x2', '\x2', '\x18D9', '\x18AF', '\x3', '\x2', 
		'\x2', '\x2', '\x18D9', '\x18B3', '\x3', '\x2', '\x2', '\x2', '\x18D9', 
		'\x18B4', '\x3', '\x2', '\x2', '\x2', '\x18D9', '\x18B5', '\x3', '\x2', 
		'\x2', '\x2', '\x18D9', '\x18B6', '\x3', '\x2', '\x2', '\x2', '\x18D9', 
		'\x18BA', '\x3', '\x2', '\x2', '\x2', '\x18D9', '\x18BB', '\x3', '\x2', 
		'\x2', '\x2', '\x18D9', '\x18BC', '\x3', '\x2', '\x2', '\x2', '\x18D9', 
		'\x18BD', '\x3', '\x2', '\x2', '\x2', '\x18D9', '\x18BE', '\x3', '\x2', 
		'\x2', '\x2', '\x18D9', '\x18BF', '\x3', '\x2', '\x2', '\x2', '\x18D9', 
		'\x18C0', '\x3', '\x2', '\x2', '\x2', '\x18D9', '\x18C1', '\x3', '\x2', 
		'\x2', '\x2', '\x18D9', '\x18C2', '\x3', '\x2', '\x2', '\x2', '\x18D9', 
		'\x18C3', '\x3', '\x2', '\x2', '\x2', '\x18D9', '\x18C4', '\x3', '\x2', 
		'\x2', '\x2', '\x18D9', '\x18C5', '\x3', '\x2', '\x2', '\x2', '\x18D9', 
		'\x18C6', '\x3', '\x2', '\x2', '\x2', '\x18D9', '\x18C7', '\x3', '\x2', 
		'\x2', '\x2', '\x18D9', '\x18C8', '\x3', '\x2', '\x2', '\x2', '\x18D9', 
		'\x18C9', '\x3', '\x2', '\x2', '\x2', '\x18D9', '\x18CA', '\x3', '\x2', 
		'\x2', '\x2', '\x18D9', '\x18CB', '\x3', '\x2', '\x2', '\x2', '\x18D9', 
		'\x18CC', '\x3', '\x2', '\x2', '\x2', '\x18D9', '\x18CD', '\x3', '\x2', 
		'\x2', '\x2', '\x18D9', '\x18CE', '\x3', '\x2', '\x2', '\x2', '\x18D9', 
		'\x18CF', '\x3', '\x2', '\x2', '\x2', '\x18D9', '\x18D0', '\x3', '\x2', 
		'\x2', '\x2', '\x18D9', '\x18D1', '\x3', '\x2', '\x2', '\x2', '\x18D9', 
		'\x18D2', '\x3', '\x2', '\x2', '\x2', '\x18D9', '\x18D3', '\x3', '\x2', 
		'\x2', '\x2', '\x18D9', '\x18D4', '\x3', '\x2', '\x2', '\x2', '\x18D9', 
		'\x18D5', '\x3', '\x2', '\x2', '\x2', '\x18D9', '\x18D6', '\x3', '\x2', 
		'\x2', '\x2', '\x18D9', '\x18D7', '\x3', '\x2', '\x2', '\x2', '\x18D9', 
		'\x18D8', '\x3', '\x2', '\x2', '\x2', '\x18DA', '\x357', '\x3', '\x2', 
		'\x2', '\x2', '\x18DB', '\x18DF', '\a', '\x2A0', '\x2', '\x2', '\x18DC', 
		'\x18DD', '\a', '\x2A7', '\x2', '\x2', '\x18DD', '\x18DF', '\a', '\x290', 
		'\x2', '\x2', '\x18DE', '\x18DB', '\x3', '\x2', '\x2', '\x2', '\x18DE', 
		'\x18DC', '\x3', '\x2', '\x2', '\x2', '\x18DF', '\x18E8', '\x3', '\x2', 
		'\x2', '\x2', '\x18E0', '\x18E2', '\a', '\xE9', '\x2', '\x2', '\x18E1', 
		'\x18E0', '\x3', '\x2', '\x2', '\x2', '\x18E1', '\x18E2', '\x3', '\x2', 
		'\x2', '\x2', '\x18E2', '\x18E6', '\x3', '\x2', '\x2', '\x2', '\x18E3', 
		'\x18E7', '\a', '\x2A0', '\x2', '\x2', '\x18E4', '\x18E5', '\a', '\x2A7', 
		'\x2', '\x2', '\x18E5', '\x18E7', '\a', '\x290', '\x2', '\x2', '\x18E6', 
		'\x18E3', '\x3', '\x2', '\x2', '\x2', '\x18E6', '\x18E4', '\x3', '\x2', 
		'\x2', '\x2', '\x18E7', '\x18E9', '\x3', '\x2', '\x2', '\x2', '\x18E8', 
		'\x18E1', '\x3', '\x2', '\x2', '\x2', '\x18E8', '\x18E9', '\x3', '\x2', 
		'\x2', '\x2', '\x18E9', '\x18EE', '\x3', '\x2', '\x2', '\x2', '\x18EA', 
		'\x18EB', '\a', '\x28F', '\x2', '\x2', '\x18EB', '\x18ED', '\x5', '\x35C', 
		'\x1AF', '\x2', '\x18EC', '\x18EA', '\x3', '\x2', '\x2', '\x2', '\x18ED', 
		'\x18F0', '\x3', '\x2', '\x2', '\x2', '\x18EE', '\x18EC', '\x3', '\x2', 
		'\x2', '\x2', '\x18EE', '\x18EF', '\x3', '\x2', '\x2', '\x2', '\x18EF', 
		'\x359', '\x3', '\x2', '\x2', '\x2', '\x18F0', '\x18EE', '\x3', '\x2', 
		'\x2', '\x2', '\x18F1', '\x18F6', '\x5', '\x35C', '\x1AF', '\x2', '\x18F2', 
		'\x18F3', '\a', '\x28F', '\x2', '\x2', '\x18F3', '\x18F5', '\x5', '\x35C', 
		'\x1AF', '\x2', '\x18F4', '\x18F2', '\x3', '\x2', '\x2', '\x2', '\x18F5', 
		'\x18F8', '\x3', '\x2', '\x2', '\x2', '\x18F6', '\x18F4', '\x3', '\x2', 
		'\x2', '\x2', '\x18F6', '\x18F7', '\x3', '\x2', '\x2', '\x2', '\x18F7', 
		'\x35B', '\x3', '\x2', '\x2', '\x2', '\x18F8', '\x18F6', '\x3', '\x2', 
		'\x2', '\x2', '\x18F9', '\x18FA', '\a', '\x2AD', '\x2', '\x2', '\x18FA', 
		'\x18FC', '\x5', '\x334', '\x19B', '\x2', '\x18FB', '\x18F9', '\x3', '\x2', 
		'\x2', '\x2', '\x18FB', '\x18FC', '\x3', '\x2', '\x2', '\x2', '\x18FC', 
		'\x18FD', '\x3', '\x2', '\x2', '\x2', '\x18FD', '\x1902', '\x5', '\x36E', 
		'\x1B8', '\x2', '\x18FE', '\x18FF', '\a', '\x28F', '\x2', '\x2', '\x18FF', 
		'\x1901', '\x5', '\x36E', '\x1B8', '\x2', '\x1900', '\x18FE', '\x3', '\x2', 
		'\x2', '\x2', '\x1901', '\x1904', '\x3', '\x2', '\x2', '\x2', '\x1902', 
		'\x1900', '\x3', '\x2', '\x2', '\x2', '\x1902', '\x1903', '\x3', '\x2', 
		'\x2', '\x2', '\x1903', '\x1907', '\x3', '\x2', '\x2', '\x2', '\x1904', 
		'\x1902', '\x3', '\x2', '\x2', '\x2', '\x1905', '\x1906', '\a', '\x29E', 
		'\x2', '\x2', '\x1906', '\x1908', '\x5', '\x32E', '\x198', '\x2', '\x1907', 
		'\x1905', '\x3', '\x2', '\x2', '\x2', '\x1907', '\x1908', '\x3', '\x2', 
		'\x2', '\x2', '\x1908', '\x190A', '\x3', '\x2', '\x2', '\x2', '\x1909', 
		'\x190B', '\x5', '\x346', '\x1A4', '\x2', '\x190A', '\x1909', '\x3', '\x2', 
		'\x2', '\x2', '\x190A', '\x190B', '\x3', '\x2', '\x2', '\x2', '\x190B', 
		'\x35D', '\x3', '\x2', '\x2', '\x2', '\x190C', '\x190D', '\a', '\x2AD', 
		'\x2', '\x2', '\x190D', '\x190F', '\x5', '\x334', '\x19B', '\x2', '\x190E', 
		'\x190C', '\x3', '\x2', '\x2', '\x2', '\x190E', '\x190F', '\x3', '\x2', 
		'\x2', '\x2', '\x190F', '\x1910', '\x3', '\x2', '\x2', '\x2', '\x1910', 
		'\x1915', '\x5', '\x36E', '\x1B8', '\x2', '\x1911', '\x1912', '\a', '\x28F', 
		'\x2', '\x2', '\x1912', '\x1914', '\x5', '\x36E', '\x1B8', '\x2', '\x1913', 
		'\x1911', '\x3', '\x2', '\x2', '\x2', '\x1914', '\x1917', '\x3', '\x2', 
		'\x2', '\x2', '\x1915', '\x1913', '\x3', '\x2', '\x2', '\x2', '\x1915', 
		'\x1916', '\x3', '\x2', '\x2', '\x2', '\x1916', '\x35F', '\x3', '\x2', 
		'\x2', '\x2', '\x1917', '\x1915', '\x3', '\x2', '\x2', '\x2', '\x1918', 
		'\x191A', '\a', '\r', '\x2', '\x2', '\x1919', '\x191B', '\a', '\x196', 
		'\x2', '\x2', '\x191A', '\x1919', '\x3', '\x2', '\x2', '\x2', '\x191A', 
		'\x191B', '\x3', '\x2', '\x2', '\x2', '\x191B', '\x1939', '\x3', '\x2', 
		'\x2', '\x2', '\x191C', '\x1939', '\a', '\xE', '\x2', '\x2', '\x191D', 
		'\x1939', '\a', 'z', '\x2', '\x2', '\x191E', '\x1939', '\a', '\x86', '\x2', 
		'\x2', '\x191F', '\x1939', '\a', '\xAE', '\x2', '\x2', '\x1920', '\x1921', 
		'\a', '\xBF', '\x2', '\x2', '\x1921', '\x1939', '\a', '\x12', '\x2', '\x2', 
		'\x1922', '\x1939', '\a', '\xE7', '\x2', '\x2', '\x1923', '\x1924', '\a', 
		'\xEC', '\x2', '\x2', '\x1924', '\x1939', '\a', '\x196', '\x2', '\x2', 
		'\x1925', '\x1939', '\a', '\xF4', '\x2', '\x2', '\x1926', '\x1927', '\a', 
		'\x103', '\x2', '\x2', '\x1927', '\x1939', '\a', '\x1D8', '\x2', '\x2', 
		'\x1928', '\x1929', '\a', '\x12B', '\x2', '\x2', '\x1929', '\x1939', '\a', 
		'\x246', '\x2', '\x2', '\x192A', '\x192B', '\a', '\x165', '\x2', '\x2', 
		'\x192B', '\x192C', '\a', 'Q', '\x2', '\x2', '\x192C', '\x1939', '\a', 
		'\x1AB', '\x2', '\x2', '\x192D', '\x192E', '\a', '\x19D', '\x2', '\x2', 
		'\x192E', '\x1939', '\a', '\x1C0', '\x2', '\x2', '\x192F', '\x1939', '\a', 
		'\x1A2', '\x2', '\x2', '\x1930', '\x1939', '\a', '\x1A8', '\x2', '\x2', 
		'\x1931', '\x1939', '\a', '\x1D6', '\x2', '\x2', '\x1932', '\x1933', '\a', 
		'\x222', '\x2', '\x2', '\x1933', '\x1939', '\a', '\x1F5', '\x2', '\x2', 
		'\x1934', '\x1939', '\a', '\x22B', '\x2', '\x2', '\x1935', '\x1939', '\a', 
		'\x235', '\x2', '\x2', '\x1936', '\x1939', '\a', '\x23A', '\x2', '\x2', 
		'\x1937', '\x1939', '\a', '\x251', '\x2', '\x2', '\x1938', '\x1918', '\x3', 
		'\x2', '\x2', '\x2', '\x1938', '\x191C', '\x3', '\x2', '\x2', '\x2', '\x1938', 
		'\x191D', '\x3', '\x2', '\x2', '\x2', '\x1938', '\x191E', '\x3', '\x2', 
		'\x2', '\x2', '\x1938', '\x191F', '\x3', '\x2', '\x2', '\x2', '\x1938', 
		'\x1920', '\x3', '\x2', '\x2', '\x2', '\x1938', '\x1922', '\x3', '\x2', 
		'\x2', '\x2', '\x1938', '\x1923', '\x3', '\x2', '\x2', '\x2', '\x1938', 
		'\x1925', '\x3', '\x2', '\x2', '\x2', '\x1938', '\x1926', '\x3', '\x2', 
		'\x2', '\x2', '\x1938', '\x1928', '\x3', '\x2', '\x2', '\x2', '\x1938', 
		'\x192A', '\x3', '\x2', '\x2', '\x2', '\x1938', '\x192D', '\x3', '\x2', 
		'\x2', '\x2', '\x1938', '\x192F', '\x3', '\x2', '\x2', '\x2', '\x1938', 
		'\x1930', '\x3', '\x2', '\x2', '\x2', '\x1938', '\x1931', '\x3', '\x2', 
		'\x2', '\x2', '\x1938', '\x1932', '\x3', '\x2', '\x2', '\x2', '\x1938', 
		'\x1934', '\x3', '\x2', '\x2', '\x2', '\x1938', '\x1935', '\x3', '\x2', 
		'\x2', '\x2', '\x1938', '\x1936', '\x3', '\x2', '\x2', '\x2', '\x1938', 
		'\x1937', '\x3', '\x2', '\x2', '\x2', '\x1939', '\x361', '\x3', '\x2', 
		'\x2', '\x2', '\x193A', '\x193B', '\a', '\r', '\x2', '\x2', '\x193B', 
		'\x1A81', '\a', '\x196', '\x2', '\x2', '\x193C', '\x1A81', '\a', '\b', 
		'\x2', '\x2', '\x193D', '\x193F', '\a', '\a', '\x2', '\x2', '\x193E', 
		'\x1940', '\a', '\x11', '\x2', '\x2', '\x193F', '\x193E', '\x3', '\x2', 
		'\x2', '\x2', '\x193F', '\x1940', '\x3', '\x2', '\x2', '\x2', '\x1940', 
		'\x1941', '\x3', '\x2', '\x2', '\x2', '\x1941', '\x1942', '\a', '\x1F5', 
		'\x2', '\x2', '\x1942', '\x1943', '\a', '\x228', '\x2', '\x2', '\x1943', 
		'\x1A81', '\a', '\x1DF', '\x2', '\x2', '\x1944', '\x1945', '\t', 'i', 
		'\x2', '\x2', '\x1945', '\x1946', '\a', '\x11', '\x2', '\x2', '\x1946', 
		'\x1947', '\a', '\x1F5', '\x2', '\x2', '\x1947', '\x1A81', '\a', '\x199', 
		'\x2', '\x2', '\x1948', '\x1949', '\a', '\a', '\x2', '\x2', '\x1949', 
		'\x194A', '\a', '\x1F5', '\x2', '\x2', '\x194A', '\x194B', '\a', '\x121', 
		'\x2', '\x2', '\x194B', '\x1A81', '\a', '\x15C', '\x2', '\x2', '\x194C', 
		'\x194E', '\a', 'h', '\x2', '\x2', '\x194D', '\x194F', '\a', '\x11', '\x2', 
		'\x2', '\x194E', '\x194D', '\x3', '\x2', '\x2', '\x2', '\x194E', '\x194F', 
		'\x3', '\x2', '\x2', '\x2', '\x194F', '\x1950', '\x3', '\x2', '\x2', '\x2', 
		'\x1950', '\x1A81', '\a', 'K', '\x2', '\x2', '\x1951', '\x1952', '\t', 
		'j', '\x2', '\x2', '\x1952', '\x1953', '\a', '\x11', '\x2', '\x2', '\x1953', 
		'\x1A81', '\a', 'K', '\x2', '\x2', '\x1954', '\x1955', '\t', 'k', '\x2', 
		'\x2', '\x1955', '\x1956', '\a', '\x11', '\x2', '\x2', '\x1956', '\x1A81', 
		'\a', '\x61', '\x2', '\x2', '\x1957', '\x1958', '\a', '\xAF', '\x2', '\x2', 
		'\x1958', '\x1959', '\a', '\x1A6', '\x2', '\x2', '\x1959', '\x1A81', '\a', 
		'\x18B', '\x2', '\x2', '\x195A', '\x195B', '\a', '\xE', '\x2', '\x2', 
		'\x195B', '\x1A81', '\a', 'q', '\x2', '\x2', '\x195C', '\x195E', '\t', 
		'l', '\x2', '\x2', '\x195D', '\x195F', '\a', '\x19B', '\x2', '\x2', '\x195E', 
		'\x195D', '\x3', '\x2', '\x2', '\x2', '\x195E', '\x195F', '\x3', '\x2', 
		'\x2', '\x2', '\x195F', '\x1960', '\x3', '\x2', '\x2', '\x2', '\x1960', 
		'\x1961', '\a', 'q', '\x2', '\x2', '\x1961', '\x1A81', '\a', '\x112', 
		'\x2', '\x2', '\x1962', '\x1963', '\a', '\x93', '\x2', '\x2', '\x1963', 
		'\x1964', '\a', '\x19B', '\x2', '\x2', '\x1964', '\x1965', '\a', 'q', 
		'\x2', '\x2', '\x1965', '\x1A81', '\a', '\x112', '\x2', '\x2', '\x1966', 
		'\x1967', '\a', 'z', '\x2', '\x2', '\x1967', '\x1968', '\a', 'Y', '\x2', 
		'\x2', '\x1968', '\x1A81', '\a', '\x1DD', '\x2', '\x2', '\x1969', '\x196A', 
		'\a', 'z', '\x2', '\x2', '\x196A', '\x196B', '\a', '\x11', '\x2', '\x2', 
		'\x196B', '\x1A81', '\a', '\x197', '\x2', '\x2', '\x196C', '\x196D', '\a', 
		'\xF', '\x2', '\x2', '\x196D', '\x196E', '\a', '\x11', '\x2', '\x2', '\x196E', 
		'\x1A81', '\a', '\x8A', '\x2', '\x2', '\x196F', '\x1971', '\a', 'h', '\x2', 
		'\x2', '\x1970', '\x1972', '\a', '\x11', '\x2', '\x2', '\x1971', '\x1970', 
		'\x3', '\x2', '\x2', '\x2', '\x1971', '\x1972', '\x3', '\x2', '\x2', '\x2', 
		'\x1972', '\x1973', '\x3', '\x2', '\x2', '\x2', '\x1973', '\x1A81', '\a', 
		'\x8B', '\x2', '\x2', '\x1974', '\x1975', '\t', 'j', '\x2', '\x2', '\x1975', 
		'\x1976', '\a', '\x11', '\x2', '\x2', '\x1976', '\x1A81', '\a', '\x8B', 
		'\x2', '\x2', '\x1977', '\x1978', '\t', 'k', '\x2', '\x2', '\x1978', '\x1979', 
		'\a', '\x11', '\x2', '\x2', '\x1979', '\x1A81', '\a', '\x8C', '\x2', '\x2', 
		'\x197A', '\x197B', '\t', 'k', '\x2', '\x2', '\x197B', '\x197C', '\a', 
		'\x11', '\x2', '\x2', '\x197C', '\x1A81', '\a', '\x96', '\x2', '\x2', 
		'\x197D', '\x1982', '\a', '\xBF', '\x2', '\x2', '\x197E', '\x197F', '\a', 
		'\x12', '\x2', '\x2', '\x197F', '\x1983', '\a', '\a', '\x2', '\x2', '\x1980', 
		'\x1981', '\a', '\x11', '\x2', '\x2', '\x1981', '\x1983', '\a', '\x20F', 
		'\x2', '\x2', '\x1982', '\x197E', '\x3', '\x2', '\x2', '\x2', '\x1982', 
		'\x1980', '\x3', '\x2', '\x2', '\x2', '\x1983', '\x1A81', '\x3', '\x2', 
		'\x2', '\x2', '\x1984', '\x1985', '\t', 'i', '\x2', '\x2', '\x1985', '\x1986', 
		'\a', '\x11', '\x2', '\x2', '\x1986', '\x1A81', '\a', '\xE7', '\x2', '\x2', 
		'\x1987', '\x1989', '\a', 'h', '\x2', '\x2', '\x1988', '\x198A', '\a', 
		'\x11', '\x2', '\x2', '\x1989', '\x1988', '\x3', '\x2', '\x2', '\x2', 
		'\x1989', '\x198A', '\x3', '\x2', '\x2', '\x2', '\x198A', '\x198B', '\x3', 
		'\x2', '\x2', '\x2', '\x198B', '\x1A81', '\a', '\xE8', '\x2', '\x2', '\x198C', 
		'\x198D', '\t', 'm', '\x2', '\x2', '\x198D', '\x198E', '\a', '\x11', '\x2', 
		'\x2', '\x198E', '\x1A81', '\a', '\xE8', '\x2', '\x2', '\x198F', '\x1991', 
		'\a', 'h', '\x2', '\x2', '\x1990', '\x1992', '\t', 'n', '\x2', '\x2', 
		'\x1991', '\x1990', '\x3', '\x2', '\x2', '\x2', '\x1991', '\x1992', '\x3', 
		'\x2', '\x2', '\x2', '\x1992', '\x1993', '\x3', '\x2', '\x2', '\x2', '\x1993', 
		'\x1A81', '\a', '\x101', '\x2', '\x2', '\x1994', '\x1995', '\a', '\xAE', 
		'\x2', '\x2', '\x1995', '\x1996', '\a', '\x11', '\x2', '\x2', '\x1996', 
		'\x1A81', '\t', 'o', '\x2', '\x2', '\x1997', '\x1998', '\a', '\x120', 
		'\x2', '\x2', '\x1998', '\x1A81', '\a', '\x1CE', '\x2', '\x2', '\x1999', 
		'\x199A', '\a', '\a', '\x2', '\x2', '\x199A', '\x199B', '\a', '\x104', 
		'\x2', '\x2', '\x199B', '\x1A81', '\a', '\x121', '\x2', '\x2', '\x199C', 
		'\x199E', '\a', 'h', '\x2', '\x2', '\x199D', '\x199F', '\a', '\x11', '\x2', 
		'\x2', '\x199E', '\x199D', '\x3', '\x2', '\x2', '\x2', '\x199E', '\x199F', 
		'\x3', '\x2', '\x2', '\x2', '\x199F', '\x19A0', '\x3', '\x2', '\x2', '\x2', 
		'\x19A0', '\x1A81', '\a', '\x10C', '\x2', '\x2', '\x19A1', '\x19A2', '\t', 
		'm', '\x2', '\x2', '\x19A2', '\x19A3', '\a', '\x11', '\x2', '\x2', '\x19A3', 
		'\x1A81', '\a', '\x10C', '\x2', '\x2', '\x19A4', '\x1A81', '\a', '\x119', 
		'\x2', '\x2', '\x19A5', '\x19A7', '\a', 'h', '\x2', '\x2', '\x19A6', '\x19A8', 
		'\a', '\x11', '\x2', '\x2', '\x19A7', '\x19A6', '\x3', '\x2', '\x2', '\x2', 
		'\x19A7', '\x19A8', '\x3', '\x2', '\x2', '\x2', '\x19A8', '\x19A9', '\x3', 
		'\x2', '\x2', '\x2', '\x19A9', '\x19AA', '\a', '\x125', '\x2', '\x2', 
		'\x19AA', '\x1A81', '\a', '\x246', '\x2', '\x2', '\x19AB', '\x19AC', '\t', 
		'j', '\x2', '\x2', '\x19AC', '\x19AD', '\a', '\x11', '\x2', '\x2', '\x19AD', 
		'\x19AE', '\a', '\x125', '\x2', '\x2', '\x19AE', '\x1A81', '\a', '\x246', 
		'\x2', '\x2', '\x19AF', '\x19B1', '\a', '\xCE', '\x2', '\x2', '\x19B0', 
		'\x19AF', '\x3', '\x2', '\x2', '\x2', '\x19B0', '\x19B1', '\x3', '\x2', 
		'\x2', '\x2', '\x19B1', '\x19B2', '\x3', '\x2', '\x2', '\x2', '\x19B2', 
		'\x19B3', '\a', '\x19D', '\x2', '\x2', '\x19B3', '\x1A81', '\a', '\x1C0', 
		'\x2', '\x2', '\x19B4', '\x19B5', '\a', '\x165', '\x2', '\x2', '\x19B5', 
		'\x19B6', '\a', 'Q', '\x2', '\x2', '\x19B6', '\x1A81', '\a', '\x1AB', 
		'\x2', '\x2', '\x19B7', '\x19B9', '\a', 'h', '\x2', '\x2', '\x19B8', '\x19BA', 
		'\a', '\x11', '\x2', '\x2', '\x19B9', '\x19B8', '\x3', '\x2', '\x2', '\x2', 
		'\x19B9', '\x19BA', '\x3', '\x2', '\x2', '\x2', '\x19BA', '\x19BB', '\x3', 
		'\x2', '\x2', '\x2', '\x19BB', '\x19BC', '\a', '\x12E', '\x2', '\x2', 
		'\x19BC', '\x1A81', '\a', '\x133', '\x2', '\x2', '\x19BD', '\x19BE', '\t', 
		'p', '\x2', '\x2', '\x19BE', '\x19BF', '\a', '\x11', '\x2', '\x2', '\x19BF', 
		'\x19C0', '\a', '\x12E', '\x2', '\x2', '\x19C0', '\x1A81', '\a', '\x133', 
		'\x2', '\x2', '\x19C1', '\x19C3', '\a', 'h', '\x2', '\x2', '\x19C2', '\x19C4', 
		'\a', '\x11', '\x2', '\x2', '\x19C3', '\x19C2', '\x3', '\x2', '\x2', '\x2', 
		'\x19C3', '\x19C4', '\x3', '\x2', '\x2', '\x2', '\x19C4', '\x19C5', '\x3', 
		'\x2', '\x2', '\x2', '\x19C5', '\x1A81', '\a', 'k', '\x2', '\x2', '\x19C6', 
		'\x19C7', '\t', 'q', '\x2', '\x2', '\x19C7', '\x19C8', '\a', '\x11', '\x2', 
		'\x2', '\x19C8', '\x1A81', '\a', 'k', '\x2', '\x2', '\x19C9', '\x19CB', 
		'\a', 'h', '\x2', '\x2', '\x19CA', '\x19CC', '\a', '\x11', '\x2', '\x2', 
		'\x19CB', '\x19CA', '\x3', '\x2', '\x2', '\x2', '\x19CB', '\x19CC', '\x3', 
		'\x2', '\x2', '\x2', '\x19CC', '\x19CD', '\x3', '\x2', '\x2', '\x2', '\x19CD', 
		'\x19CE', '\a', '\x128', '\x2', '\x2', '\x19CE', '\x1A81', '\a', '\xC2', 
		'\x2', '\x2', '\x19CF', '\x19D0', '\t', 'r', '\x2', '\x2', '\x19D0', '\x19D1', 
		'\a', '\x11', '\x2', '\x2', '\x19D1', '\x19D2', '\a', '\x128', '\x2', 
		'\x2', '\x19D2', '\x1A81', '\a', '\xC2', '\x2', '\x2', '\x19D3', '\x19D5', 
		'\a', 'h', '\x2', '\x2', '\x19D4', '\x19D6', '\a', '\x11', '\x2', '\x2', 
		'\x19D5', '\x19D4', '\x3', '\x2', '\x2', '\x2', '\x19D5', '\x19D6', '\x3', 
		'\x2', '\x2', '\x2', '\x19D6', '\x19D7', '\x3', '\x2', '\x2', '\x2', '\x19D7', 
		'\x19D8', '\a', 'k', '\x2', '\x2', '\x19D8', '\x1A81', '\a', '\x8B', '\x2', 
		'\x2', '\x19D9', '\x19DA', '\t', 's', '\x2', '\x2', '\x19DA', '\x19DB', 
		'\a', '\x11', '\x2', '\x2', '\x19DB', '\x19DC', '\a', 'k', '\x2', '\x2', 
		'\x19DC', '\x1A81', '\a', '\x8B', '\x2', '\x2', '\x19DD', '\x19DF', '\a', 
		'h', '\x2', '\x2', '\x19DE', '\x19E0', '\a', '\x11', '\x2', '\x2', '\x19DF', 
		'\x19DE', '\x3', '\x2', '\x2', '\x2', '\x19DF', '\x19E0', '\x3', '\x2', 
		'\x2', '\x2', '\x19E0', '\x19E1', '\x3', '\x2', '\x2', '\x2', '\x19E1', 
		'\x19E2', '\a', 'k', '\x2', '\x2', '\x19E2', '\x19E3', '\a', '\x36', '\x2', 
		'\x2', '\x19E3', '\x1A81', '\a', '\x198', '\x2', '\x2', '\x19E4', '\x19E5', 
		'\t', 't', '\x2', '\x2', '\x19E5', '\x19E6', '\a', '\x11', '\x2', '\x2', 
		'\x19E6', '\x19E7', '\a', 'k', '\x2', '\x2', '\x19E7', '\x19E8', '\a', 
		'\x36', '\x2', '\x2', '\x19E8', '\x1A81', '\a', '\x198', '\x2', '\x2', 
		'\x19E9', '\x19EB', '\a', 'h', '\x2', '\x2', '\x19EA', '\x19EC', '\a', 
		'\x11', '\x2', '\x2', '\x19EB', '\x19EA', '\x3', '\x2', '\x2', '\x2', 
		'\x19EB', '\x19EC', '\x3', '\x2', '\x2', '\x2', '\x19EC', '\x19ED', '\x3', 
		'\x2', '\x2', '\x2', '\x19ED', '\x1A81', '\a', '\x167', '\x2', '\x2', 
		'\x19EE', '\x19EF', '\t', 'm', '\x2', '\x2', '\x19EF', '\x19F0', '\a', 
		'\x11', '\x2', '\x2', '\x19F0', '\x1A81', '\a', '\x167', '\x2', '\x2', 
		'\x19F1', '\x19F2', '\t', 'i', '\x2', '\x2', '\x19F2', '\x19F3', '\a', 
		'\x11', '\x2', '\x2', '\x19F3', '\x1A81', '\a', '\x170', '\x2', '\x2', 
		'\x19F4', '\x19F5', '\a', 'h', '\x2', '\x2', '\x19F5', '\x19F6', '\a', 
		'\x18A', '\x2', '\x2', '\x19F6', '\x1A81', '\a', 'q', '\x2', '\x2', '\x19F7', 
		'\x19F8', '\a', '\x1DF', '\x2', '\x2', '\x19F8', '\x1A81', '\a', '^', 
		'\x2', '\x2', '\x19F9', '\x19FB', '\a', 'h', '\x2', '\x2', '\x19FA', '\x19FC', 
		'\a', '\x11', '\x2', '\x2', '\x19FB', '\x19FA', '\x3', '\x2', '\x2', '\x2', 
		'\x19FB', '\x19FC', '\x3', '\x2', '\x2', '\x2', '\x19FC', '\x19FD', '\x3', 
		'\x2', '\x2', '\x2', '\x19FD', '\x1A81', '\a', '\x197', '\x2', '\x2', 
		'\x19FE', '\x19FF', '\t', 'm', '\x2', '\x2', '\x19FF', '\x1A00', '\a', 
		'\x11', '\x2', '\x2', '\x1A00', '\x1A81', '\a', '\x197', '\x2', '\x2', 
		'\x1A01', '\x1A02', '\t', 'i', '\x2', '\x2', '\x1A02', '\x1A81', '\a', 
		'\x199', '\x2', '\x2', '\x1A03', '\x1A04', '\a', 'h', '\x2', '\x2', '\x1A04', 
		'\x1A81', '\a', '\x1C2', '\x2', '\x2', '\x1A05', '\x1A06', '\t', 'u', 
		'\x2', '\x2', '\x1A06', '\x1A07', '\a', '\x11', '\x2', '\x2', '\x1A07', 
		'\x1A81', '\a', '\x1C2', '\x2', '\x2', '\x1A08', '\x1A09', '\t', 'i', 
		'\x2', '\x2', '\x1A09', '\x1A0A', '\a', '\x1C4', '\x2', '\x2', '\x1A0A', 
		'\x1A81', '\a', '\x1D5', '\x2', '\x2', '\x1A0B', '\x1A0D', '\a', 'h', 
		'\x2', '\x2', '\x1A0C', '\x1A0E', '\a', '\x11', '\x2', '\x2', '\x1A0D', 
		'\x1A0C', '\x3', '\x2', '\x2', '\x2', '\x1A0D', '\x1A0E', '\x3', '\x2', 
		'\x2', '\x2', '\x1A0E', '\x1A0F', '\x3', '\x2', '\x2', '\x2', '\x1A0F', 
		'\x1A81', '\a', '\x1D8', '\x2', '\x2', '\x1A10', '\x1A11', '\t', 'v', 
		'\x2', '\x2', '\x1A11', '\x1A12', '\a', '\x11', '\x2', '\x2', '\x1A12', 
		'\x1A81', '\a', '\x1D8', '\x2', '\x2', '\x1A13', '\x1A14', '\t', 'w', 
		'\x2', '\x2', '\x1A14', '\x1A81', '\a', '\x1DD', '\x2', '\x2', '\x1A15', 
		'\x1A16', '\a', '\xE', '\x2', '\x2', '\x1A16', '\x1A17', '\a', '\x1B3', 
		'\x2', '\x2', '\x1A17', '\x1A81', '\a', '\x66', '\x2', '\x2', '\x1A18', 
		'\x1A1A', '\a', 'h', '\x2', '\x2', '\x1A19', '\x1A1B', '\a', '\x11', '\x2', 
		'\x2', '\x1A1A', '\x1A19', '\x3', '\x2', '\x2', '\x2', '\x1A1A', '\x1A1B', 
		'\x3', '\x2', '\x2', '\x2', '\x1A1B', '\x1A1C', '\x3', '\x2', '\x2', '\x2', 
		'\x1A1C', '\x1A1D', '\a', '\x1F5', '\x2', '\x2', '\x1A1D', '\x1A1E', '\a', 
		'\x223', '\x2', '\x2', '\x1A1E', '\x1A81', '\a', '\x199', '\x2', '\x2', 
		'\x1A1F', '\x1A20', '\t', 'x', '\x2', '\x2', '\x1A20', '\x1A21', '\a', 
		'\x11', '\x2', '\x2', '\x1A21', '\x1A22', '\a', '\x1F5', '\x2', '\x2', 
		'\x1A22', '\x1A23', '\a', '\x223', '\x2', '\x2', '\x1A23', '\x1A81', '\a', 
		'\x199', '\x2', '\x2', '\x1A24', '\x1A25', '\a', '\x222', '\x2', '\x2', 
		'\x1A25', '\x1A26', '\a', '\x11', '\x2', '\x2', '\x1A26', '\x1A81', '\a', 
		'\x1F5', '\x2', '\x2', '\x1A27', '\x1A29', '\a', 'h', '\x2', '\x2', '\x1A28', 
		'\x1A2A', '\a', '\x11', '\x2', '\x2', '\x1A29', '\x1A28', '\x3', '\x2', 
		'\x2', '\x2', '\x1A29', '\x1A2A', '\x3', '\x2', '\x2', '\x2', '\x1A2A', 
		'\x1A2B', '\x3', '\x2', '\x2', '\x2', '\x1A2B', '\x1A81', '\a', '\x206', 
		'\x2', '\x2', '\x1A2C', '\x1A2D', '\a', '\x93', '\x2', '\x2', '\x1A2D', 
		'\x1A2E', '\a', '\x11', '\x2', '\x2', '\x1A2E', '\x1A81', '\a', '\x206', 
		'\x2', '\x2', '\x1A2F', '\x1A30', '\t', 'k', '\x2', '\x2', '\x1A30', '\x1A31', 
		'\a', '\x19B', '\x2', '\x2', '\x1A31', '\x1A81', '\a', '\x206', '\x2', 
		'\x2', '\x1A32', '\x1A34', '\a', 'h', '\x2', '\x2', '\x1A33', '\x1A35', 
		'\a', '\x11', '\x2', '\x2', '\x1A34', '\x1A33', '\x3', '\x2', '\x2', '\x2', 
		'\x1A34', '\x1A35', '\x3', '\x2', '\x2', '\x2', '\x1A35', '\x1A36', '\x3', 
		'\x2', '\x2', '\x2', '\x1A36', '\x1A81', '\a', '\x20F', '\x2', '\x2', 
		'\x1A37', '\x1A38', '\t', 'y', '\x2', '\x2', '\x1A38', '\x1A39', '\a', 
		'\x11', '\x2', '\x2', '\x1A39', '\x1A81', '\a', '\x20F', '\x2', '\x2', 
		'\x1A3A', '\x1A3B', '\t', 'z', '\x2', '\x2', '\x1A3B', '\x1A81', '\a', 
		'\x20E', '\x2', '\x2', '\x1A3C', '\x1A3E', '\a', 'h', '\x2', '\x2', '\x1A3D', 
		'\x1A3F', '\a', '\x11', '\x2', '\x2', '\x1A3E', '\x1A3D', '\x3', '\x2', 
		'\x2', '\x2', '\x1A3E', '\x1A3F', '\x3', '\x2', '\x2', '\x2', '\x1A3F', 
		'\x1A40', '\x3', '\x2', '\x2', '\x2', '\x1A40', '\x1A81', '\a', '\x225', 
		'\x2', '\x2', '\x1A41', '\x1A42', '\t', 'j', '\x2', '\x2', '\x1A42', '\x1A43', 
		'\a', '\x11', '\x2', '\x2', '\x1A43', '\x1A81', '\a', '\x225', '\x2', 
		'\x2', '\x1A44', '\x1A45', '\a', '\a', '\x2', '\x2', '\x1A45', '\x1A46', 
		'\a', 'q', '\x2', '\x2', '\x1A46', '\x1A81', '\a', '\x225', '\x2', '\x2', 
		'\x1A47', '\x1A49', '\a', 'h', '\x2', '\x2', '\x1A48', '\x1A4A', '\a', 
		'\x11', '\x2', '\x2', '\x1A49', '\x1A48', '\x3', '\x2', '\x2', '\x2', 
		'\x1A49', '\x1A4A', '\x3', '\x2', '\x2', '\x2', '\x1A4A', '\x1A4B', '\x3', 
		'\x2', '\x2', '\x2', '\x1A4B', '\x1A81', '\a', '\x229', '\x2', '\x2', 
		'\x1A4C', '\x1A4D', '\t', '{', '\x2', '\x2', '\x1A4D', '\x1A4E', '\a', 
		'\x11', '\x2', '\x2', '\x1A4E', '\x1A81', '\a', '\x229', '\x2', '\x2', 
		'\x1A4F', '\x1A50', '\t', 'i', '\x2', '\x2', '\x1A50', '\x1A81', '\a', 
		'\x239', '\x2', '\x2', '\x1A51', '\x1A53', '\a', 'h', '\x2', '\x2', '\x1A52', 
		'\x1A54', '\a', '\x11', '\x2', '\x2', '\x1A53', '\x1A52', '\x3', '\x2', 
		'\x2', '\x2', '\x1A53', '\x1A54', '\x3', '\x2', '\x2', '\x2', '\x1A54', 
		'\x1A55', '\x3', '\x2', '\x2', '\x2', '\x1A55', '\x1A81', '\a', '\x246', 
		'\x2', '\x2', '\x1A56', '\x1A57', '\t', '|', '\x2', '\x2', '\x1A57', '\x1A58', 
		'\a', '\x11', '\x2', '\x2', '\x1A58', '\x1A81', '\a', '\x246', '\x2', 
		'\x2', '\x1A59', '\x1A5A', '\t', '}', '\x2', '\x2', '\x1A5A', '\x1A81', 
		'\a', '\x11', '\x2', '\x2', '\x1A5B', '\x1A5C', '\a', '%', '\x2', '\x2', 
		'\x1A5C', '\x1A81', '\a', '\x239', '\x2', '\x2', '\x1A5D', '\x1A5E', '\a', 
		'\x41', '\x2', '\x2', '\x1A5E', '\x1A81', '\a', '\x153', '\x2', '\x2', 
		'\x1A5F', '\x1A60', '\a', '\xAF', '\x2', '\x2', '\x1A60', '\x1A61', '\a', 
		'\x3', '\x2', '\x2', '\x1A61', '\x1A81', '\a', '\x18B', '\x2', '\x2', 
		'\x1A62', '\x1A64', '\a', '\xC6', '\x2', '\x2', '\x1A63', '\x1A65', '\a', 
		'\x11', '\x2', '\x2', '\x1A64', '\x1A63', '\x3', '\x2', '\x2', '\x2', 
		'\x1A64', '\x1A65', '\x3', '\x2', '\x2', '\x2', '\x1A65', '\x1A66', '\x3', 
		'\x2', '\x2', '\x2', '\x1A66', '\x1A81', '\a', '\x221', '\x2', '\x2', 
		'\x1A67', '\x1A68', '\a', '\xD1', '\x2', '\x2', '\x1A68', '\x1A6A', '\a', 
		'\x11', '\x2', '\x2', '\x1A69', '\x1A6B', '\a', '\x15C', '\x2', '\x2', 
		'\x1A6A', '\x1A69', '\x3', '\x2', '\x2', '\x2', '\x1A6A', '\x1A6B', '\x3', 
		'\x2', '\x2', '\x2', '\x1A6B', '\x1A6C', '\x3', '\x2', '\x2', '\x2', '\x1A6C', 
		'\x1A81', '\a', '\x195', '\x2', '\x2', '\x1A6D', '\x1A6E', '\a', '\xEC', 
		'\x2', '\x2', '\x1A6E', '\x1A6F', '\a', '\x11', '\x2', '\x2', '\x1A6F', 
		'\x1A81', '\a', '\x196', '\x2', '\x2', '\x1A70', '\x1A71', '\a', '\x103', 
		'\x2', '\x2', '\x1A71', '\x1A72', '\a', 't', '\x2', '\x2', '\x1A72', '\x1A81', 
		'\a', '\x21A', '\x2', '\x2', '\x1A73', '\x1A74', '\a', '\x103', '\x2', 
		'\x2', '\x1A74', '\x1A81', '\a', '\x20B', '\x2', '\x2', '\x1A75', '\x1A76', 
		'\a', '\x19C', '\x2', '\x2', '\x1A76', '\x1A81', '\a', 'v', '\x2', '\x2', 
		'\x1A77', '\x1A81', '\a', '\x1B9', '\x2', '\x2', '\x1A78', '\x1A79', '\a', 
		'\x1D6', '\x2', '\x2', '\x1A79', '\x1A7A', '\a', '\x11', '\x2', '\x2', 
		'\x1A7A', '\x1A81', '\t', '~', '\x2', '\x2', '\x1A7B', '\x1A81', '\a', 
		'\x207', '\x2', '\x2', '\x1A7C', '\x1A81', '\a', '\x209', '\x2', '\x2', 
		'\x1A7D', '\x1A81', '\a', '\x20A', '\x2', '\x2', '\x1A7E', '\x1A81', '\a', 
		'\x20C', '\x2', '\x2', '\x1A7F', '\x1A81', '\a', '\x20D', '\x2', '\x2', 
		'\x1A80', '\x193A', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x193C', '\x3', 
		'\x2', '\x2', '\x2', '\x1A80', '\x193D', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1944', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x1948', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x194C', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1951', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x1954', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x1957', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x195A', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x195C', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x1962', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1966', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x1969', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x196C', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x196F', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x1974', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x1977', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x197A', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x197D', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x1984', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1987', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x198C', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x198F', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1994', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x1997', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x1999', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x199C', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x19A1', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x19A4', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x19A5', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x19AB', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x19B0', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x19B4', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x19B7', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x19BD', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x19C1', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x19C6', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x19C9', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x19CF', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x19D3', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x19D9', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x19DD', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x19E4', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x19E9', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x19EE', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x19F1', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x19F4', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x19F7', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x19F9', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x19FE', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1A01', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x1A03', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x1A05', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1A08', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x1A0B', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x1A10', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1A13', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x1A15', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x1A18', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1A1F', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x1A24', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x1A27', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1A2C', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x1A2F', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x1A32', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1A37', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x1A3A', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x1A3C', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1A41', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x1A44', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x1A47', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1A4C', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x1A4F', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x1A51', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1A56', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x1A59', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x1A5B', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1A5D', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x1A5F', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x1A62', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1A67', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x1A6D', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x1A70', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1A73', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x1A75', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x1A77', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1A78', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x1A7B', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x1A7C', '\x3', '\x2', '\x2', '\x2', '\x1A80', 
		'\x1A7D', '\x3', '\x2', '\x2', '\x2', '\x1A80', '\x1A7E', '\x3', '\x2', 
		'\x2', '\x2', '\x1A80', '\x1A7F', '\x3', '\x2', '\x2', '\x2', '\x1A81', 
		'\x363', '\x3', '\x2', '\x2', '\x2', '\x1A82', '\x1A85', '\a', '\x217', 
		'\x2', '\x2', '\x1A83', '\x1A86', '\x5', '\x36A', '\x1B6', '\x2', '\x1A84', 
		'\x1A86', '\x5', '\x358', '\x1AD', '\x2', '\x1A85', '\x1A83', '\x3', '\x2', 
		'\x2', '\x2', '\x1A85', '\x1A84', '\x3', '\x2', '\x2', '\x2', '\x1A86', 
		'\x1A8B', '\x3', '\x2', '\x2', '\x2', '\x1A87', '\x1A88', '\a', '\x17', 
		'\x2', '\x2', '\x1A88', '\x1A89', '\a', '\x21A', '\x2', '\x2', '\x1A89', 
		'\x1A8A', '\a', '\x264', '\x2', '\x2', '\x1A8A', '\x1A8C', '\x5', '\x36A', 
		'\x1B6', '\x2', '\x1A8B', '\x1A87', '\x3', '\x2', '\x2', '\x2', '\x1A8B', 
		'\x1A8C', '\x3', '\x2', '\x2', '\x2', '\x1A8C', '\x1AC1', '\x3', '\x2', 
		'\x2', '\x2', '\x1A8D', '\x1A91', '\a', '\xF9', '\x2', '\x2', '\x1A8E', 
		'\x1A92', '\x5', '\x36A', '\x1B6', '\x2', '\x1A8F', '\x1A92', '\x5', '\x358', 
		'\x1AD', '\x2', '\x1A90', '\x1A92', '\x5', '\x35C', '\x1AF', '\x2', '\x1A91', 
		'\x1A8E', '\x3', '\x2', '\x2', '\x2', '\x1A91', '\x1A8F', '\x3', '\x2', 
		'\x2', '\x2', '\x1A91', '\x1A90', '\x3', '\x2', '\x2', '\x2', '\x1A92', 
		'\x1A93', '\x3', '\x2', '\x2', '\x2', '\x1A93', '\x1AA1', '\t', '\x7F', 
		'\x2', '\x2', '\x1A94', '\x1A97', '\a', '\x296', '\x2', '\x2', '\x1A95', 
		'\x1A98', '\a', '\x290', '\x2', '\x2', '\x1A96', '\x1A98', '\x5', '\x358', 
		'\x1AD', '\x2', '\x1A97', '\x1A95', '\x3', '\x2', '\x2', '\x2', '\x1A97', 
		'\x1A96', '\x3', '\x2', '\x2', '\x2', '\x1A98', '\x1A9E', '\x3', '\x2', 
		'\x2', '\x2', '\x1A99', '\x1A9C', '\a', '\x29C', '\x2', '\x2', '\x1A9A', 
		'\x1A9D', '\a', '\x290', '\x2', '\x2', '\x1A9B', '\x1A9D', '\x5', '\x358', 
		'\x1AD', '\x2', '\x1A9C', '\x1A9A', '\x3', '\x2', '\x2', '\x2', '\x1A9C', 
		'\x1A9B', '\x3', '\x2', '\x2', '\x2', '\x1A9D', '\x1A9F', '\x3', '\x2', 
		'\x2', '\x2', '\x1A9E', '\x1A99', '\x3', '\x2', '\x2', '\x2', '\x1A9E', 
		'\x1A9F', '\x3', '\x2', '\x2', '\x2', '\x1A9F', '\x1AA0', '\x3', '\x2', 
		'\x2', '\x2', '\x1AA0', '\x1AA2', '\a', '\x297', '\x2', '\x2', '\x1AA1', 
		'\x1A94', '\x3', '\x2', '\x2', '\x2', '\x1AA1', '\x1AA2', '\x3', '\x2', 
		'\x2', '\x2', '\x1AA2', '\x1AB2', '\x3', '\x2', '\x2', '\x2', '\x1AA3', 
		'\x1AB0', '\a', '\x21F', '\x2', '\x2', '\x1AA4', '\x1AB1', '\a', 'u', 
		'\x2', '\x2', '\x1AA5', '\x1AB1', '\a', '\xDB', '\x2', '\x2', '\x1AA6', 
		'\x1AB1', '\a', '\x130', '\x2', '\x2', '\x1AA7', '\x1AAE', '\a', '\x1D3', 
		'\x2', '\x2', '\x1AA8', '\x1AAB', '\a', '\x296', '\x2', '\x2', '\x1AA9', 
		'\x1AAC', '\a', '\x290', '\x2', '\x2', '\x1AAA', '\x1AAC', '\x5', '\x358', 
		'\x1AD', '\x2', '\x1AAB', '\x1AA9', '\x3', '\x2', '\x2', '\x2', '\x1AAB', 
		'\x1AAA', '\x3', '\x2', '\x2', '\x2', '\x1AAC', '\x1AAD', '\x3', '\x2', 
		'\x2', '\x2', '\x1AAD', '\x1AAF', '\a', '\x297', '\x2', '\x2', '\x1AAE', 
		'\x1AA8', '\x3', '\x2', '\x2', '\x2', '\x1AAE', '\x1AAF', '\x3', '\x2', 
		'\x2', '\x2', '\x1AAF', '\x1AB1', '\x3', '\x2', '\x2', '\x2', '\x1AB0', 
		'\x1AA4', '\x3', '\x2', '\x2', '\x2', '\x1AB0', '\x1AA5', '\x3', '\x2', 
		'\x2', '\x2', '\x1AB0', '\x1AA6', '\x3', '\x2', '\x2', '\x2', '\x1AB0', 
		'\x1AA7', '\x3', '\x2', '\x2', '\x2', '\x1AB1', '\x1AB3', '\x3', '\x2', 
		'\x2', '\x2', '\x1AB2', '\x1AA3', '\x3', '\x2', '\x2', '\x2', '\x1AB2', 
		'\x1AB3', '\x3', '\x2', '\x2', '\x2', '\x1AB3', '\x1AC1', '\x3', '\x2', 
		'\x2', '\x2', '\x1AB4', '\x1AC1', '\x5', '\x366', '\x1B4', '\x2', '\x1AB5', 
		'\x1AB6', '\a', 't', '\x2', '\x2', '\x1AB6', '\x1AC1', '\x5', '\x36A', 
		'\x1B6', '\x2', '\x1AB7', '\x1AC1', '\x5', '\x36A', '\x1B6', '\x2', '\x1AB8', 
		'\x1AC1', '\a', '\x157', '\x2', '\x2', '\x1AB9', '\x1AC1', '\a', '\x226', 
		'\x2', '\x2', '\x1ABA', '\x1AC1', '\a', '\xB9', '\x2', '\x2', '\x1ABB', 
		'\x1AC1', '\a', 'x', '\x2', '\x2', '\x1ABC', '\x1AC1', '\a', '\x1DE', 
		'\x2', '\x2', '\x1ABD', '\x1AC1', '\a', '\x131', '\x2', '\x2', '\x1ABE', 
		'\x1AC1', '\a', '\x127', '\x2', '\x2', '\x1ABF', '\x1AC1', '\a', '\x80', 
		'\x2', '\x2', '\x1AC0', '\x1A82', '\x3', '\x2', '\x2', '\x2', '\x1AC0', 
		'\x1A8D', '\x3', '\x2', '\x2', '\x2', '\x1AC0', '\x1AB4', '\x3', '\x2', 
		'\x2', '\x2', '\x1AC0', '\x1AB5', '\x3', '\x2', '\x2', '\x2', '\x1AC0', 
		'\x1AB7', '\x3', '\x2', '\x2', '\x2', '\x1AC0', '\x1AB8', '\x3', '\x2', 
		'\x2', '\x2', '\x1AC0', '\x1AB9', '\x3', '\x2', '\x2', '\x2', '\x1AC0', 
		'\x1ABA', '\x3', '\x2', '\x2', '\x2', '\x1AC0', '\x1ABB', '\x3', '\x2', 
		'\x2', '\x2', '\x1AC0', '\x1ABC', '\x3', '\x2', '\x2', '\x2', '\x1AC0', 
		'\x1ABD', '\x3', '\x2', '\x2', '\x2', '\x1AC0', '\x1ABE', '\x3', '\x2', 
		'\x2', '\x2', '\x1AC0', '\x1ABF', '\x3', '\x2', '\x2', '\x2', '\x1AC1', 
		'\x365', '\x3', '\x2', '\x2', '\x2', '\x1AC2', '\x1AC3', '\t', '\x80', 
		'\x2', '\x2', '\x1AC3', '\x367', '\x3', '\x2', '\x2', '\x2', '\x1AC4', 
		'\x1AC5', '\a', '\x29B', '\x2', '\x2', '\x1AC5', '\x1AC6', '\x5', '\x366', 
		'\x1B4', '\x2', '\x1AC6', '\x369', '\x3', '\x2', '\x2', '\x2', '\x1AC7', 
		'\x1AC8', '\t', '\x81', '\x2', '\x2', '\x1AC8', '\x36B', '\x3', '\x2', 
		'\x2', '\x2', '\x1AC9', '\x1ACA', '\a', '\x2AD', '\x2', '\x2', '\x1ACA', 
		'\x1ACC', '\x5', '\x334', '\x19B', '\x2', '\x1ACB', '\x1AC9', '\x3', '\x2', 
		'\x2', '\x2', '\x1ACB', '\x1ACC', '\x3', '\x2', '\x2', '\x2', '\x1ACC', 
		'\x1ACD', '\x3', '\x2', '\x2', '\x2', '\x1ACD', '\x1ACE', '\x5', '\x36E', 
		'\x1B8', '\x2', '\x1ACE', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x1ACF', 
		'\x1AD2', '\x5', '\x372', '\x1BA', '\x2', '\x1AD0', '\x1AD2', '\a', '\x293', 
		'\x2', '\x2', '\x1AD1', '\x1ACF', '\x3', '\x2', '\x2', '\x2', '\x1AD1', 
		'\x1AD0', '\x3', '\x2', '\x2', '\x2', '\x1AD2', '\x36F', '\x3', '\x2', 
		'\x2', '\x2', '\x1AD3', '\x1AD4', '\a', '\x296', '\x2', '\x2', '\x1AD4', 
		'\x1AD5', '\a', '\x29A', '\x2', '\x2', '\x1AD5', '\x1AD6', '\a', '\x297', 
		'\x2', '\x2', '\x1AD6', '\x371', '\x3', '\x2', '\x2', '\x2', '\x1AD7', 
		'\x1AD8', '\t', '\x82', '\x2', '\x2', '\x1AD8', '\x373', '\x3', '\x2', 
		'\x2', '\x2', '\x1AD9', '\x1ADA', '\t', '\x83', '\x2', '\x2', '\x1ADA', 
		'\x375', '\x3', '\x2', '\x2', '\x2', '\x1ADB', '\x1ADC', '\t', '\x84', 
		'\x2', '\x2', '\x1ADC', '\x377', '\x3', '\x2', '\x2', '\x2', '\x3C1', 
		'\x37A', '\x37D', '\x381', '\x3AA', '\x3B6', '\x3BB', '\x3C0', '\x3C7', 
		'\x3CD', '\x3D2', '\x3D6', '\x3DE', '\x3E0', '\x3E4', '\x3E8', '\x3EB', 
		'\x3EF', '\x3F4', '\x3FA', '\x403', '\x406', '\x40C', '\x415', '\x422', 
		'\x427', '\x431', '\x434', '\x439', '\x43E', '\x445', '\x44B', '\x44F', 
		'\x455', '\x45A', '\x461', '\x468', '\x46F', '\x474', '\x478', '\x484', 
		'\x48E', '\x493', '\x49F', '\x4A4', '\x4A9', '\x4AC', '\x4B9', '\x4C5', 
		'\x4CA', '\x4CF', '\x4DB', '\x4E0', '\x4E8', '\x4EA', '\x4EE', '\x4F2', 
		'\x4F5', '\x4F9', '\x4FE', '\x50A', '\x50F', '\x513', '\x516', '\x51B', 
		'\x522', '\x52C', '\x531', '\x534', '\x538', '\x53B', '\x540', '\x552', 
		'\x557', '\x55C', '\x55E', '\x565', '\x56C', '\x56F', '\x572', '\x575', 
		'\x580', '\x58C', '\x590', '\x593', '\x59C', '\x5A4', '\x5AC', '\x5AF', 
		'\x5B6', '\x5BA', '\x5BF', '\x5C4', '\x5ED', '\x609', '\x610', '\x615', 
		'\x61C', '\x627', '\x62F', '\x633', '\x63F', '\x642', '\x648', '\x64B', 
		'\x650', '\x655', '\x659', '\x663', '\x66D', '\x673', '\x67E', '\x683', 
		'\x687', '\x68F', '\x697', '\x69C', '\x69F', '\x6A1', '\x6A4', '\x6AD', 
		'\x6B2', '\x6B9', '\x6BC', '\x6BF', '\x6C3', '\x6C6', '\x6CE', '\x6D3', 
		'\x6D8', '\x6DF', '\x6E9', '\x6F9', '\x6FF', '\x709', '\x713', '\x71A', 
		'\x71D', '\x722', '\x72C', '\x731', '\x738', '\x73B', '\x740', '\x743', 
		'\x746', '\x757', '\x75C', '\x765', '\x768', '\x76D', '\x770', '\x777', 
		'\x77A', '\x781', '\x786', '\x78A', '\x78F', '\x794', '\x79E', '\x7A4', 
		'\x7AE', '\x7B3', '\x7BA', '\x7C0', '\x7C4', '\x7C7', '\x7CA', '\x7DB', 
		'\x7E0', '\x7E8', '\x7F6', '\x7FD', '\x80D', '\x816', '\x818', '\x82D', 
		'\x835', '\x83E', '\x842', '\x85A', '\x85C', '\x86E', '\x870', '\x875', 
		'\x87A', '\x87F', '\x884', '\x88E', '\x897', '\x8A0', '\x8A5', '\x8AA', 
		'\x8AF', '\x8B3', '\x8B6', '\x8BC', '\x8CA', '\x8CF', '\x8D1', '\x8D4', 
		'\x8DC', '\x8E9', '\x8EB', '\x8EF', '\x8F7', '\x8F9', '\x8FB', '\x8FD', 
		'\x901', '\x906', '\x910', '\x91B', '\x91D', '\x926', '\x92C', '\x92E', 
		'\x932', '\x936', '\x93A', '\x93E', '\x940', '\x945', '\x94A', '\x94F', 
		'\x952', '\x95D', '\x960', '\x963', '\x966', '\x96B', '\x970', '\x974', 
		'\x978', '\x97E', '\x982', '\x986', '\x992', '\x997', '\x99A', '\x99E', 
		'\x9A2', '\x9A7', '\x9AB', '\x9B1', '\x9B6', '\x9B9', '\x9C1', '\x9C4', 
		'\x9C8', '\x9CE', '\x9D2', '\x9D5', '\x9D8', '\x9E0', '\x9E2', '\x9E6', 
		'\x9EB', '\x9F2', '\xA03', '\xA05', '\xA14', '\xA16', '\xA24', '\xA27', 
		'\xA2A', '\xA34', '\xA37', '\xA3A', '\xA41', '\xA47', '\xA4C', '\xA50', 
		'\xA53', '\xA56', '\xA5C', '\xA61', '\xA64', '\xA68', '\xA6C', '\xA6F', 
		'\xA76', '\xA79', '\xA7B', '\xA80', '\xA85', '\xA8B', '\xA90', '\xA95', 
		'\xA9B', '\xA9F', '\xAA4', '\xAAA', '\xAAF', '\xAB7', '\xAB9', '\xACE', 
		'\xAD5', '\xAD7', '\xADA', '\xADE', '\xAE1', '\xAE9', '\xAEB', '\xAED', 
		'\xAF0', '\xAF3', '\xAF6', '\xAFA', '\xB02', '\xB06', '\xB16', '\xB1B', 
		'\xB1E', '\xB20', '\xB24', '\xB2D', '\xB31', '\xB35', '\xB39', '\xB3C', 
		'\xB3E', '\xB43', '\xB49', '\xB4E', '\xB56', '\xB58', '\xB6D', '\xB74', 
		'\xB76', '\xB79', '\xB7D', '\xB84', '\xB88', '\xB8D', '\xB92', '\xB95', 
		'\xB98', '\xB9B', '\xB9D', '\xBA1', '\xBA4', '\xBA8', '\xBBB', '\xBC4', 
		'\xBC9', '\xBCE', '\xBD4', '\xBDB', '\xBE0', '\xBE2', '\xBF2', '\xBF7', 
		'\xBFD', '\xC04', '\xC17', '\xC22', '\xC2D', '\xC35', '\xC37', '\xC46', 
		'\xC4F', '\xC54', '\xC58', '\xC5B', '\xC69', '\xC71', '\xC75', '\xC78', 
		'\xC80', '\xC8C', '\xC90', '\xC95', '\xC98', '\xCA5', '\xCA9', '\xCB1', 
		'\xCB6', '\xCBA', '\xCBE', '\xCC2', '\xCC8', '\xCCB', '\xCCE', '\xCE9', 
		'\xCEF', '\xCF3', '\xCFA', '\xCFF', '\xD05', '\xD09', '\xD0C', '\xD12', 
		'\xD1B', '\xD23', '\xD27', '\xD2B', '\xD33', '\xD3C', '\xD42', '\xD44', 
		'\xD60', '\xD65', '\xD69', '\xD70', '\xD74', '\xD78', '\xD7C', '\xD88', 
		'\xD8C', '\xD9A', '\xDA0', '\xDA7', '\xDAC', '\xDB7', '\xDBA', '\xDC0', 
		'\xDC2', '\xDCB', '\xDD5', '\xDDA', '\xDE9', '\xDED', '\xDF0', '\xDF4', 
		'\xE02', '\xE04', '\xE08', '\xE10', '\xE17', '\xE1C', '\xE1E', '\xE23', 
		'\xE28', '\xE30', '\xE37', '\xE3B', '\xE3E', '\xE4A', '\xE50', '\xE59', 
		'\xE5C', '\xE62', '\xE67', '\xE6D', '\xE72', '\xE74', '\xE7B', '\xE7E', 
		'\xE85', '\xE90', '\xE96', '\xE9A', '\xEA0', '\xEA5', '\xEA7', '\xEAD', 
		'\xEB8', '\xEBA', '\xEBC', '\xEBF', '\xEC3', '\xEC6', '\xECA', '\xECE', 
		'\xED3', '\xEDE', '\xEE2', '\xEEA', '\xEED', '\xEF2', '\xEF4', '\xEF9', 
		'\xEFE', '\xF02', '\xF08', '\xF0C', '\xF0F', '\xF17', '\xF1A', '\xF1E', 
		'\xF22', '\xF27', '\xF2A', '\xF2E', '\xF32', '\xF36', '\xF49', '\xF51', 
		'\xF55', '\xF59', '\xF5F', '\xF63', '\xF68', '\xF6A', '\xF6D', '\xF71', 
		'\xF74', '\xF77', '\xF7A', '\xF7E', '\xF8A', '\xF8D', '\xF90', '\xF95', 
		'\xF9B', '\xFA0', '\xFA6', '\xFAA', '\xFAF', '\xFB6', '\xFBC', '\xFC3', 
		'\xFC6', '\xFC9', '\xFCD', '\xFD2', '\xFD6', '\xFD8', '\xFE3', '\xFEA', 
		'\xFEE', '\xFF8', '\xFFC', '\x1000', '\x1005', '\x1010', '\x1015', '\x101B', 
		'\x1020', '\x1023', '\x1028', '\x102A', '\x1030', '\x1035', '\x1038', 
		'\x103D', '\x1042', '\x104B', '\x1050', '\x1056', '\x105C', '\x1061', 
		'\x1065', '\x1067', '\x106C', '\x1070', '\x1076', '\x107A', '\x1083', 
		'\x1088', '\x108B', '\x1091', '\x1096', '\x1098', '\x109A', '\x109F', 
		'\x10A4', '\x10A9', '\x10B1', '\x10B6', '\x10BD', '\x10C1', '\x10CA', 
		'\x10CE', '\x10D3', '\x10DE', '\x10E0', '\x10F0', '\x10F5', '\x10FB', 
		'\x1101', '\x110F', '\x1114', '\x111A', '\x111D', '\x1120', '\x1124', 
		'\x1129', '\x1132', '\x1134', '\x1138', '\x113B', '\x1140', '\x1142', 
		'\x1146', '\x1152', '\x115B', '\x115F', '\x1164', '\x1168', '\x116C', 
		'\x1171', '\x1174', '\x117E', '\x1184', '\x1187', '\x118A', '\x118E', 
		'\x1193', '\x119C', '\x11A6', '\x11AA', '\x11AE', '\x11B1', '\x11B4', 
		'\x11B9', '\x11BE', '\x11C1', '\x11C4', '\x11CA', '\x11CD', '\x11D3', 
		'\x11D6', '\x11D9', '\x11DE', '\x11E1', '\x11E9', '\x11EF', '\x11F4', 
		'\x11F9', '\x1201', '\x120B', '\x120F', '\x1211', '\x1214', '\x1220', 
		'\x1224', '\x1227', '\x1236', '\x123B', '\x123F', '\x1246', '\x1249', 
		'\x1252', '\x1259', '\x125E', '\x1262', '\x126A', '\x1270', '\x1278', 
		'\x127B', '\x1284', '\x1287', '\x128A', '\x1293', '\x1299', '\x129F', 
		'\x12A1', '\x12AE', '\x12B0', '\x12B9', '\x12BB', '\x12BF', '\x12C5', 
		'\x12C9', '\x12D7', '\x12DC', '\x12E7', '\x12F2', '\x12F6', '\x12FD', 
		'\x1302', '\x1306', '\x130B', '\x1313', '\x1315', '\x131B', '\x131E', 
		'\x1329', '\x132E', '\x1338', '\x133A', '\x133C', '\x1346', '\x134A', 
		'\x134C', '\x1358', '\x1360', '\x136D', '\x1370', '\x137C', '\x137E', 
		'\x1386', '\x138E', '\x1395', '\x1399', '\x13A0', '\x13A4', '\x13A9', 
		'\x13AD', '\x13B5', '\x13B9', '\x13C0', '\x13C5', '\x13CE', '\x13D7', 
		'\x13DA', '\x13EE', '\x13F2', '\x13F5', '\x13FC', '\x13FF', '\x1403', 
		'\x1406', '\x140D', '\x1410', '\x1416', '\x1419', '\x141D', '\x1420', 
		'\x1427', '\x142C', '\x143A', '\x1441', '\x144C', '\x1455', '\x145E', 
		'\x1462', '\x1466', '\x1480', '\x1483', '\x1486', '\x1490', '\x1494', 
		'\x1499', '\x149E', '\x14A3', '\x14AC', '\x14AF', '\x14B1', '\x14B5', 
		'\x14BC', '\x14C3', '\x14CB', '\x14DA', '\x14DF', '\x14E4', '\x14EA', 
		'\x14ED', '\x14F1', '\x14FB', '\x1507', '\x1509', '\x1510', '\x1514', 
		'\x151D', '\x1526', '\x1534', '\x153C', '\x153F', '\x1548', '\x154E', 
		'\x1558', '\x1560', '\x1563', '\x1566', '\x156F', '\x1574', '\x1579', 
		'\x157E', '\x1583', '\x1588', '\x158B', '\x1590', '\x1595', '\x1599', 
		'\x159F', '\x15A5', '\x15AE', '\x15B3', '\x15BB', '\x15BF', '\x15C4', 
		'\x15CA', '\x15D1', '\x15D6', '\x15DD', '\x15E1', '\x15E6', '\x15EE', 
		'\x15F1', '\x15F4', '\x15F7', '\x15FB', '\x1600', '\x1605', '\x1609', 
		'\x1610', '\x1615', '\x1617', '\x1622', '\x1626', '\x1628', '\x1633', 
		'\x163E', '\x1643', '\x1648', '\x164A', '\x164E', '\x1651', '\x1655', 
		'\x1662', '\x1667', '\x166B', '\x1670', '\x1676', '\x167A', '\x167F', 
		'\x1683', '\x1688', '\x168D', '\x1690', '\x1693', '\x1698', '\x16A1', 
		'\x16A9', '\x16AD', '\x16B7', '\x16BA', '\x16BC', '\x16C6', '\x16C8', 
		'\x16CE', '\x16D4', '\x16D6', '\x16E4', '\x16E6', '\x16F0', '\x16F9', 
		'\x1702', '\x1706', '\x170A', '\x170F', '\x1713', '\x1716', '\x171A', 
		'\x1721', '\x1725', '\x1729', '\x172E', '\x1732', '\x1745', '\x174A', 
		'\x1751', '\x175C', '\x1763', '\x176A', '\x176E', '\x1775', '\x177A', 
		'\x1783', '\x178B', '\x1793', '\x1799', '\x179E', '\x17A3', '\x17A7', 
		'\x17AC', '\x17AF', '\x17B4', '\x17B8', '\x17BC', '\x17C1', '\x17CA', 
		'\x17D0', '\x17D5', '\x17DC', '\x17EA', '\x17EF', '\x17FF', '\x1802', 
		'\x1807', '\x1814', '\x1818', '\x181D', '\x1822', '\x1826', '\x182A', 
		'\x182E', '\x1833', '\x183A', '\x183F', '\x1841', '\x1843', '\x184C', 
		'\x1850', '\x1854', '\x1856', '\x185A', '\x1863', '\x1869', '\x186D', 
		'\x186F', '\x1873', '\x1877', '\x187E', '\x1886', '\x188E', '\x1890', 
		'\x1896', '\x1899', '\x18B1', '\x18B8', '\x18D9', '\x18DE', '\x18E1', 
		'\x18E6', '\x18E8', '\x18EE', '\x18F6', '\x18FB', '\x1902', '\x1907', 
		'\x190A', '\x190E', '\x1915', '\x191A', '\x1938', '\x193F', '\x194E', 
		'\x195E', '\x1971', '\x1982', '\x1989', '\x1991', '\x199E', '\x19A7', 
		'\x19B0', '\x19B9', '\x19C3', '\x19CB', '\x19D5', '\x19DF', '\x19EB', 
		'\x19FB', '\x1A0D', '\x1A1A', '\x1A29', '\x1A34', '\x1A3E', '\x1A49', 
		'\x1A53', '\x1A64', '\x1A6A', '\x1A80', '\x1A85', '\x1A8B', '\x1A91', 
		'\x1A97', '\x1A9C', '\x1A9E', '\x1AA1', '\x1AAB', '\x1AAE', '\x1AB0', 
		'\x1AB2', '\x1AC0', '\x1ACB', '\x1AD1',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.Oracle.Parser
